CREATE VIEW ASSET_HIERARCHY
(
LEVEL1_ID	string (40),
 LEVEL1_NAME	string (255),
 LEVEL1_TYPE	string (100),
 LEVEL2_ID	string (40),
 LEVEL2_NAME	string (255),
 LEVEL2_TYPE	string (100),
 LEVEL3_ID	string (40),
 LEVEL3_NAME	string (255),
 LEVEL3_TYPE	string (100),
 LEVEL4_ID	string (40),
 LEVEL4_NAME	string (255),
 LEVEL4_TYPE	string (100),
 LEVEL5_ID	string (40),
 LEVEL5_NAME	string (255),
 LEVEL5_TYPE	string (100),
 LEVEL6_ID	string	(40) NOT NULL,
 LEVEL6_NAME	string	(255) NOT NULL,
 LEVEL6_TYPE	string (100),
 WELL_COUNT integer,
 FACILITY_COUNT integer,
 SOURCE_NAME	string (100),
 ROW_QUALITY	string (100),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string (100),
 ACTIVE_IND	string	(1),
 HIERARCHY_ID	string	(40) NOT NULL,
 LATITUDE bigdecimal(10,4),
 LONGITUDE bigdecimal(10,4),
CONSTRAINT PK_ASSET_H PRIMARY KEY (HIERARCHY_ID))
OPTIONS (UPDATABLE 'FALSE',ASSET_HIERARCHY.IMPLEMENTED 'TRUE')
AS
(
SELECT 
DAH.LEVEL1_ID,DAH.LEVEL1_NAME,DAH.LEVEL1_TYPE,DAH.LEVEL2_ID,DAH.LEVEL2_NAME,
DAH.LEVEL2_TYPE,DAH.LEVEL3_ID,DAH.LEVEL3_NAME,DAH.LEVEL3_TYPE,DAH.LEVEL4_ID,
DAH.LEVEL4_NAME,DAH.LEVEL4_TYPE,DAH.LEVEL5_ID,DAH.LEVEL5_NAME,
DAH.LEVEL5_TYPE,DAH.LEVEL6_ID,DAH.LEVEL6_NAME,DAH.LEVEL6_TYPE,DWC.WELL_COUNT,DF.FAC_COUNT,
NULL AS SOURCE_NAME, NULL AS ROW_QUALITY, NULL AS ROW_CHANGED_BY,
 NULL AS ROW_CHANGED_DATE,
 CAST(CONCAT(CONCAT(SUBSTRING(DAH.ROW_CREATED_DATE_ID,1,4),'-'),
 CONCAT(CONCAT(SUBSTRING(DAH.ROW_CREATED_DATE_ID,5,2),'-'),SUBSTRING(DAH.ROW_CREATED_DATE_ID,7,2)))
 AS TIMESTAMP) AS ROW_CREATED_DATE,
 DAH.ROW_CREATED_BY AS ROW_CREATED_BY,
DAH.ACTIVE_IND,DAH.HIERARCHY_ID,
CASE WHEN DAH.LATITUDE IS NOT NULL THEN CAST(DAH.LATITUDE AS bigdecimal) ELSE NULL END,
CASE WHEN DAH.LONGITUDE IS NOT NULL THEN CAST(DAH.LONGITUDE AS bigdecimal) ELSE NULL END
FROM PDMDimSrc.DIMASSETHIERARCHY AS DAH 
LEFT OUTER JOIN (SELECT DIM_ASSETHIERARCHY_KEY,COUNT(1) WELL_COUNT FROM PDMDimSrc.DIMWELLCOMPLETION GROUP BY DIM_ASSETHIERARCHY_KEY)DWC ON DAH.DIM_ASSETHIERARCHY_KEY = DWC.DIM_ASSETHIERARCHY_KEY
LEFT OUTER JOIN (SELECT DIM_ASSETHIERARCHY_KEY,COUNT(1) FAC_COUNT FROM PDMDimSrc.DIMFACILITY GROUP BY DIM_ASSETHIERARCHY_KEY)DF ON DAH.DIM_ASSETHIERARCHY_KEY = DF.DIM_ASSETHIERARCHY_KEY
WHERE DAH.HIERARCHY_ID <> -1
);

CREATE VIEW WELL
(
WELL_NAME string (255) NOT NULL,
WELL_NUMBER string (100), 
WELL_UWI string (100) NOT NULL,
LATITUDE bigdecimal (15,4), 
LONGITUDE bigdecimal (15,4), 
FIELD string (255), 
FIELD_TYPE string (100), 
POOL string (255), 
LAND_LEASE string (100), 
STATE string (100), 
COUNTY_NAME string (100), 
COUNTRY_NAME string (100), 
CURRENT_OPERATOR string (100), 
WELL_CLASS string (100), 
TD bigdecimal (15,4), 
DEPTH_UOM string (20), 
TVD bigdecimal (15,4), 
MD bigdecimal (15,4), 
WATER_DEPTH bigdecimal (15,4), 
PROD_RECENT_DATE timestamp,
PROD_START_DATE timestamp, 
PROD_STATUS_DATE timestamp, 
PRODUCTION_STATUS string (100), 
OP_STATUS_DATE timestamp, 
OPERATING_STATUS string (100), 
PRIMARY_PRODUCT string (100), 
PRODUCTION_METHOD string (100),
 OIL bigdecimal (15,4), 
 OIL_UOM string (20), 
 GAS bigdecimal (15,4), 
 GAS_UOM string (20), 
 WATER bigdecimal (15,4), 
 WATER_UOM string (20), 
 LIQUID bigdecimal (15,4), 
 GAS_BOE bigdecimal (15,4), 
 INJ_WATER bigdecimal (15,4), 
 INJ_STEAM bigdecimal (15,4), 
 INJ_STEAM_UOM string(20),
 GOR bigdecimal (15,4), 
 GOR_UOM string (20), 
 WC bigdecimal (15,4), 
 WC_UOM string (20), 
 WOR bigdecimal (15,4), 
 WOR_UOM string (20), 
 OC bigdecimal (15,4), 
 OC_UOM string (20), 
 OGR bigdecimal (15,4), 
 OGR_UOM string (20), 
 OIL_POT bigdecimal (15,4), 
 GAS_POT bigdecimal (15,4), 
 WATER_POT bigdecimal (15,4), 
 LIQUID_POT bigdecimal (15,4), 
 GAS_BOE_POT bigdecimal (15,4), 
  INJ_WATER_POT bigdecimal (15,4), 
 INJ_STEAM_POT bigdecimal (15,4), 
 GOR_POT bigdecimal (15,4), 
 WC_POT bigdecimal (15,4), 
 WOR_POT bigdecimal (15,4), 
 OC_POT bigdecimal (15,4), 
 OGR_POT bigdecimal (15,4), 
 OIL_DIFF bigdecimal (15,4), 
 GAS_DIFF bigdecimal (15,4), 
 WATER_DIFF bigdecimal (15,4), 
 LIQUID_DIFF bigdecimal (15,4), 
 GOR_DIFF bigdecimal (15,4), 
  WC_DIFF bigdecimal (15,4), 
 WOR_DIFF bigdecimal (15,4), 
 CD_OIL bigdecimal (15,4), 
 CD_OIL_POT bigdecimal (15,4), 
 CD_GAS bigdecimal (15,4), 
 CD_GAS_POT bigdecimal (15,4), 
 CD_WATER bigdecimal (15,4), 
 CD_WATER_POT bigdecimal (15,4), 
 CD_LIQUID bigdecimal (15,4), 
 CD_LIQUID_POT bigdecimal (15,4), 
 CD_GAS_BOE bigdecimal (15,4), 
 CD_GAS_BOE_POT bigdecimal (15,4), 
 CD_INJ_WATER bigdecimal (15,4), 
 CD_INJ_WATER_POT bigdecimal (15,4), 
 CD_INJ_STEAM bigdecimal (15,4), 
 CD_INJ_STEAM_POT bigdecimal (15,4), 
 CUM_OIL bigdecimal (15,4), 
 CUM_OIL_POT bigdecimal (15,4), 
 CUM_GAS bigdecimal (15,4), 
 CUM_GAS_POT bigdecimal (15,4), 
 CUM_WATER bigdecimal (15,4), 
 CUM_WATER_POT bigdecimal (15,4), 
 CUM_LIQUID bigdecimal (15,4), 
 CUM_LIQUID_POT bigdecimal (15,4), 
 CUM_GAS_BOE bigdecimal (15,4), 
 CUM_GAS_BOE_POT bigdecimal (15,4), 
 CUM_INJ_WATER bigdecimal (15,4), 
 CUM_INJ_WATER_POT bigdecimal (15,4), 
 CUM_INJ_STEAM bigdecimal (15,4), 
 CUM_INJ_STEAM_POT bigdecimal (15,4), 
 CD_GOR bigdecimal (15,4), 
 CD_GOR_POT bigdecimal (15,4), 
 CD_WC bigdecimal (15,4), 
 CD_WC_POT bigdecimal (15,4), 
 CD_WOR bigdecimal (15,4), 
 CD_WOR_POT bigdecimal (15,4), 
 CD_OC bigdecimal (15,4), 
 CD_OC_POT bigdecimal (15,4), 
 CD_OGR bigdecimal (15,4), 
 CD_OGR_POT bigdecimal (15,4), 
 CUM_GOR bigdecimal (15,4), 
 CUM_GOR_POT bigdecimal (15,4), 
 CUM_WC bigdecimal (15,4), 
 CUM_WC_POT bigdecimal (15,4), 
 CUM_WOR bigdecimal (15,4), 
 CUM_WOR_POT bigdecimal (15,4), 
 CUM_OC bigdecimal (15,4), 
 CUM_OC_POT bigdecimal (15,4), 
 CUM_OGR bigdecimal (15,4), 
 CUM_OGR_POT bigdecimal (15,4), 
 MON_OIL bigdecimal (15,4), 
 MON_OIL_POT bigdecimal (15,4), 
 MON_GAS bigdecimal (15,4), 
 MON_GAS_POT bigdecimal (15,4), 
 MON_WATER bigdecimal (15,4), 
 MON_WATER_POT bigdecimal (15,4), 
 MON_LIQUID bigdecimal (15,4), 
 MON_LIQUID_POT bigdecimal (15,4), 
 MON_GAS_BOE bigdecimal (15,4), 
 MON_GAS_BOE_POT bigdecimal (15,4), 
 MON_INJ_WATER bigdecimal (15,4), 
 MON_INJ_WATER_POT bigdecimal (15,4), 
 MON_INJ_STEAM bigdecimal (15,4), 
 MON_INJ_STEAM_POT bigdecimal (15,4), 
 MON_GOR bigdecimal (15,4), 
 MON_GOR_POT bigdecimal (15,4), 
 MON_WC bigdecimal (15,4), 
 MON_WC_POT bigdecimal (15,4), 
 MON_WOR bigdecimal (15,4), 
 MON_WOR_POT bigdecimal (15,4), 
 MON_OC bigdecimal (15,4), 
 MON_OC_POT bigdecimal (15,4), 
 MON_OGR bigdecimal (15,4), 
 MON_OGR_POT bigdecimal (15,4), 
BHP bigdecimal (15,4), 
PRESSURE_UOM string (20), 
BHT bigdecimal (15,4), 
TEMPERATURE_UOM string (20), 
WHP bigdecimal (15,4), 
WHT bigdecimal (15,4), 
CASING_PRESSURE bigdecimal (15,4), 
CASING_TEMPERATURE bigdecimal (15,4), 
TUBING_PRESSURE bigdecimal (15,4), 
TUBING_TEMPERATURE bigdecimal (15,4), 
MON_AVG_BHP bigdecimal (15,4), 
MON_AVG_BHT bigdecimal (15,4), 
MON_AVG_WHP bigdecimal (15,4), 
MON_AVG_WHT bigdecimal (15,4), 
MON_AVG_CASING_PRESSURE bigdecimal (15,4), 
MON_AVG_CASING_TEMPERATURE bigdecimal (15,4), 
MON_AVG_TUBING_PRESSURE bigdecimal (15,4), 
MON_AVG_TUBING_TEMPERATURE bigdecimal (15,4), 
TEST_OIL bigdecimal (15,4), 
TEST_GAS bigdecimal (15,4), 
TEST_WATER bigdecimal (15,4), 
TEST_DATE timestamp, 
TEST_EFF_DATE timestamp, 
TOTAL_TEST_HOURS bigdecimal(15,4),
 ENTITY_ID string (40) NOT NULL,
  REMARK string (20), 
 SOURCE string (100), 
 ROW_QUALITY string (100), 
 ROW_CHANGED_BY string (100), 
 ROW_CHANGED_DATE timestamp, 
 ROW_CREATED_DATE timestamp, 
 ROW_CREATED_BY string (100), 
 ACTIVE_IND string (1), 
 LEVEL1_ID string (40), 
 LEVEL1_NAME string (255), 
 LEVEL1_TYPE string (100), 
 LEVEL2_ID string (40), 
 LEVEL2_NAME string (255), 
 LEVEL2_TYPE string (100), 
 LEVEL3_ID string (40), 
 LEVEL3_NAME string (255), 
 LEVEL3_TYPE string (100), 
 LEVEL4_ID string (40), 
 LEVEL4_NAME string (255), 
 LEVEL4_TYPE string (100), 
 LEVEL5_ID string (40), 
 LEVEL5_NAME string (255), 
 LEVEL5_TYPE string (100), 
 LEVEL6_ID string (40), 
 LEVEL6_NAME string (255), 
 LEVEL6_TYPE  string (100), 
AREA_PATH string (2000), 
PARENT_WELL_ID string(40),
LEVEL_TYPE string(100),
ORDER_NUMBER INTEGER,
RISK_RANK integer,
EVAL_START_DATE timestamp,
DEVIATION string(200),
WI_STATUS string(100),
WI_STATUS_ID string(40) NOT NULL,
INJECTION_TYPE_ID   string(40) ,
INJECTION_TYPE   string(100) ,
WELL_HISTORY   string(2000) ,
DHSV   string(2000) ,
WIE_NOTE   string(2000) ,
IF_TYPE string(2000),
RISK_SEVERITY string(100),
RISK_SEV_COLOR string(100),
REG_DEP_ANNULUS string(100),
OPEN_ANOMALY_COUNT integer,
SCP_COUNT integer,
PROD_FLOW_RATE bigdecimal(15,4),
PROD_FLOW_UOM string(20),
NETWORK_ID string(40),
NETWORK_NAME string(100),
CONSTRAINT PK_WELL_DIM PRIMARY KEY (ENTITY_ID))
OPTIONS (UPDATABLE 'FALSE',WELL.IMPLEMENTED 'TRUE')
AS
(
SELECT W.WELL_NAME, cast(W.WELL_NUMBER AS string) , W.WELL_UWI, W.LATITUDE , W.LONGITUDE , 
cast(W.FIELD AS string) , cast(W.FIELD_TYPE AS string) , cast(W.POOL AS string) , cast(W.LAND_LEASE AS string) , 
cast(W.STATE AS string) , cast(W.COUNTY_NAME AS string) , cast(W.COUNTRY_NAME AS string) , cast(W.CURRENT_OPERATOR AS string) , 
cast(W.WELL_CLASS AS string) , W.TD , cast(W.DEPTH_UOM AS string) , W.TVD , W.MD , W.WATER_DEPTH , 
cast(W.PROD_RECENT_DATE AS timestamp), cast(W.PROD_START_DATE AS timestamp), cast(W.PROD_STATUS_DATE AS timestamp), 
W.PRODUCTION_STATUS , cast(W.OP_STATUS_DATE AS timestamp), W.OPERATING_STATUS , W.PRIMARY_PRODUCT , 
W.PRODUCTION_METHOD , W.OIL , W.OIL_UOM , W.GAS , W.GAS_UOM , W.WATER , W.WATER_UOM , W.LIQUID , W.GAS_BOE , 
 W.INJ_WATER , W.INJ_STEAM , W.INJ_STEAM_UOM , W.GOR , W.GOR_UOM , W.WC , W.WC_UOM , W.WOR , 
 W.WOR_UOM , W.OC , W.OC_UOM , W.OGR , W.OGR_UOM , W.OIL_POT , W.GAS_POT , W.WATER_POT , W.LIQUID_POT , 
 W.GAS_BOE_POT , W.INJ_WATER_POT , W.INJ_STEAM_POT , W.GOR_POT , W.WC_POT , W.WOR_POT , W.OC_POT , 
 W.OGR_POT , W.OIL_DIFF , W.GAS_DIFF , W.WATER_DIFF , W.LIQUID_DIFF , W.GOR_DIFF , W.WC_DIFF , 
 W.WOR_DIFF , W.CD_OIL , W.CD_OIL_POT , W.CD_GAS , W.CD_GAS_POT , W.CD_WATER , W.CD_WATER_POT , 
 W.CD_LIQUID , W.CD_LIQUID_POT , W.CD_GAS_BOE , W.CD_GAS_BOE_POT , W.CD_INJ_WATER , W.CD_INJ_WATER_POT , 
 W.CD_INJ_STEAM , W.CD_INJ_STEAM_POT , W.CUM_OIL , W.CUM_OIL_POT , W.CUM_GAS , W.CUM_GAS_POT , W.CUM_WATER , 
 W.CUM_WATER_POT , W.CUM_LIQUID , W.CUM_LIQUID_POT , W.CUM_GAS_BOE , W.CUM_GAS_BOE_POT , W.CUM_INJ_WATER , 
 W.CUM_INJ_WATER_POT , W.CUM_INJ_STEAM , W.CUM_INJ_STEAM_POT , W.CD_GOR , W.CD_GOR_POT , W.CD_WC , 
 W.CD_WC_POT , W.CD_WOR , W.CD_WOR_POT , W.CD_OC , W.CD_OC_POT , W.CD_OGR , W.CD_OGR_POT , W.CUM_GOR , 
 W.CUM_GOR_POT , W.CUM_WC , W.CUM_WC_POT ,  W.CUM_WOR , W.CUM_WOR_POT , W.CUM_OC , W.CUM_OC_POT , 
 W.CUM_OGR , W.CUM_OGR_POT , W.MON_OIL , W.MON_OIL_POT , W.MON_GAS , W.MON_GAS_POT , W.MON_WATER , 
 W.MON_WATER_POT ,  W.MON_LIQUID ,  W.MON_LIQUID_POT ,  W.MON_GAS_BOE ,  W.MON_GAS_BOE_POT , 
 W.MON_INJ_WATER ,  W.MON_INJ_WATER_POT ,  W.MON_INJ_STEAM ,  W.MON_INJ_STEAM_POT ,  W.MON_GOR , 
 W.MON_GOR_POT ,  W.MON_WC ,  W.MON_WC_POT ,  W.MON_WOR ,  W.MON_WOR_POT ,  W.MON_OC , 
 W.MON_OC_POT ,  W.MON_OGR ,  W.MON_OGR_POT , W.BHP , W.PRESSURE_UOM , W.BHT , 
W.TEMPERATURE_UOM , W.WHP , W.WHT , W.CASING_PRESSURE , W.CASING_TEMPERATURE , W.TUBING_PRESSURE , 
W.TUBING_TEMPERATURE , W.MON_AVG_BHP , W.MON_AVG_BHT , W.MON_AVG_WHP , W.MON_AVG_WHT , 
W.MON_AVG_CASING_PRESSURE , W.MON_AVG_CASING_TEMPERATURE , W.MON_AVG_TUBING_PRESSURE , W.MON_AVG_TUBING_TEMPERATURE , 
W.TEST_OIL , W.TEST_GAS , W.TEST_WATER , cast(W.TEST_DATE AS timestamp), 
cast(W.TEST_EFF_DATE AS timestamp), W.TOTAL_TEST_HOURS,  W.ENTITY_ID,  cast(W.REMARK AS string), 
 cast(W.SOURCE AS string) ,  cast(W.ROW_QUALITY AS string) ,  cast(W.ROW_CHANGED_BY AS string) ,  cast(W.ROW_CHANGED_DATE AS timestamp), 
 cast(W.ROW_CREATED_DATE AS timestamp),  cast(W.ROW_CREATED_BY AS string) ,  cast(W.ACTIVE_IND AS string), 
 cast(W.LEVEL1_ID AS string) ,  cast(W.LEVEL1_NAME AS string) ,  cast(W.LEVEL1_TYPE AS string) ,  cast(W.LEVEL2_ID AS string) , 
 cast(W.LEVEL2_NAME AS string) ,  cast(W.LEVEL2_TYPE AS string) ,  cast(W.LEVEL3_ID AS string) ,  cast(W.LEVEL3_NAME AS string) , 
 cast(W.LEVEL3_TYPE AS string) ,  cast(W.LEVEL4_ID AS string) ,  cast(W.LEVEL4_NAME AS string) ,  cast(W.LEVEL4_TYPE AS string) , 
 cast(W.LEVEL5_ID AS string) ,  cast(W.LEVEL5_NAME AS string) ,  cast(W.LEVEL5_TYPE AS string) ,  cast(W.LEVEL6_ID AS string) , 
 cast(W.LEVEL6_NAME AS string) ,  cast(W.LEVEL6_TYPE AS string), W.AREA_PATH, W.PARENT_WELL_ID, W.LEVEL_TYPE ,
cast(W.ORDER_NUMBER AS integer), RISK_RANK, EVAL_START_DATE, DEVIATION, R_WI_STATUS, R_WI_STATUS_ID, INJECTION_TYPE_ID,
INJECTION_TYPE, WELL_HISTORY, DHSV, WIE_NOTE, IF_TYPE, RISK_SEVERITY, RISK_SEV_COLOR, TxW.REG_DEP_ANNULUS,
CASE WHEN WK.OPEN_ANOMALY IS NOT NULL THEN cast(WK.OPEN_ANOMALY as integer) ELSE NULL END, 
CASE WHEN WK.SCP IS NOT NULL THEN cast(WK.SCP as integer) ELSE NULL END, AM.MEASUREMENT_VALUE, AM.VALUE_UOM,
NW.NETWORK_ID, NW.NETWORK_NAME
FROM PDMDimSrc.VW_WELL W
LEFT OUTER JOIN PDMTx.WI_STATUS TxW ON W.ENTITY_ID = TxW.ENTITY_ID
  LEFT OUTER JOIN PDMDimSrc.Dim_Network_Entity NE ON W.DIM_WELLCOMPL_KEY = NE.W_WC_FAC_KEY
  LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AH ON NE.DIM_ASSETHIERARCHY_KEY = AH.DIM_ASSETHIERARCHY_KEY
  LEFT OUTER JOIN PDMDimSrc.DIMNETWORK NW ON NE.DIM_NETWORK_KEY = NW.DIM_NETWORK_KEY
LEFT OUTER JOIN 
(
SELECT ENTITY_ID, MAX(CASE WHEN KPI = 'Open Anomalies' THEN KPI_VALUE END) AS OPEN_ANOMALY,
MAX(CASE WHEN KPI = 'SCP' THEN KPI_VALUE END) AS SCP
FROM
	(
	SELECT ENTITY_ID, KPI, SUM(KPI_VALUE) KPI_VALUE FROM PDMTx.WI_KPI_STATISTICS WK
	WHERE KPI IN ('Open Anomalies', 'SCP')
	GROUP BY ENTITY_ID,KPI 
	)WK
GROUP BY ENTITY_ID
)WK ON (W.ENTITY_ID = WK.ENTITY_ID)
LEFT OUTER JOIN (SELECT ENTITY_ID, MEASUREMENT_VALUE, VALUE_UOM,
	ROW_NUMBER() OVER (PARTITION BY ENTITY_ID ORDER BY MEASUREMENT_DATE DESC, ROW_CREATED_DATE DESC) ROW_NUM
	FROM PDMTx.ANNULUS_MEASUREMENT WHERE R_MEASUREMENT_POINT = 'Product Flow Rate')AM ON (W.ENTITY_ID = AM.ENTITY_ID AND AM.ROW_NUM = 1)
);

CREATE VIEW WELL_COMPLETION
(
COMPLETION_NAME string ( 100 ) NOT NULL,
BASE_DEPTH bigdecimal ( 15,4 ) ,
BASE_DEPTH_UOM string ( 20 ) ,
BASE_STRAT_UNIT_ID string ( 40 ) ,
COMPLETION_OBS_NO string ( 40 ) ,
COMPLETION_DATE timestamp,
COMPLETION_METHOD string ( 100 ) ,
COMPLETION_STRAT_UNIT_ID string ( 40 ) ,
COMPLETION_TYPE string ( 100 ) ,
EFFECTIVE_DATE timestamp ,
EXPIRY_DATE timestamp ,
REMARK string ( 2000 ) ,
STRAT_NAME_SET_ID string ( 40 ) ,
STRAT_UNIT string ( 100 ) ,
TOP_DEPTH bigdecimal ( 15,4 ) ,
TOP_DEPTH_OUOM string ( 20 ) ,
TOP_STRAT_UNIT_ID string ( 40 ) ,
ROW_CHANGED_BY string ( 100 ) ,
ROW_CHANGED_DATE timestamp ,
ROW_CREATED_BY string ( 100 ) ,
ROW_CREATED_DATE timestamp ,
ENTITY_ID string ( 40 ) NOT NULL,
ENTITY_NAME string ( 255 ) ,
ACTIVE_IND string ( 1 ) ,
SOURCE string ( 100 ) ,
ROW_QUALITY string ( 100 ) ,
WELL_COMPLETION_ID string ( 40 ) NOT NULL,
CONSTRAINT PK_WELL_COMPLETION PRIMARY KEY (WELL_COMPLETION_ID))
OPTIONS (UPDATABLE 'FALSE',WELL_COMPLETION.IMPLEMENTED 'TRUE')
AS
 ( SELECT  
	cast(DWC.WELL_COMPLETION_NAME as string) ,
	NULL AS BASE_DEPTH,
	NULL AS BASE_DEPTH_UOM,
	NULL AS BASE_STRAT_UNIT_ID,
	NULL AS COMPLETION_OBS_NO,
	NULL AS COMPLETION_DATE,
	NULL AS COMPLETION_METHOD,
	NULL AS COMPLETION_STRAT_UNIT_ID,
	NULL AS COMPLETION_TYPE,
	NULL AS EFFECTIVE_DATE,
	NULL AS EXPIRY_DATE,
	NULL AS REMARK,
	NULL AS STRAT_NAME_SET_ID,
	NULL AS STRAT_UNIT,
	NULL AS TOP_DEPTH,
	NULL AS TOP_DEPTH_OUOM,
	NULL AS TOP_STRAT_UNIT_ID,
	cast(DWC.ROW_CHANGED_BY as string),
	cast(DD.FORMATTEDDATE AS timestamp) AS ROW_CHANGED_DATE,
	cast(DWC.ROW_CREATED_BY as string),
	cast(DD1.FORMATTEDDATE AS timestamp) AS ROW_CREATED_DATE,
	cast(DWC.WELL_OR_COMPLETION_ID as string)AS ENTITY_ID,
	cast(DWC.WELL_COMPLETION_NAME as string)AS ENTITY_NAME,
	NULL AS ACTIVE_IND,
	NULL AS SOURCE,
	NULL AS ROW_QUALITY,
	cast(DWC.WELL_OR_COMPLETION_ID as string) AS WELL_COMPLETION_ID	
	FROM
	  PDMDimSrc.DimWellCompletion as DWC
	 LEFT OUTER JOIN PDMDimSrc.DimDate AS DD ON DD.DATE_KEY = DWC.ROW_CHANGED_DATE_ID
	 LEFT OUTER JOIN PDMDimSrc.DimDate AS DD1 ON DD1.DATE_KEY = DWC.ROW_CREATED_DATE_ID
	 WHERE cast(DWC.WELL_OR_COMPLETION AS string) = 'C'
);

CREATE VIEW FACILITY
(
 FACILITY_NAME	string	(255),
 FACILITY_TYPE	string	(100),
 LATITUDE	bigdecimal	(15,4),
 LONGITUDE	bigdecimal	(15,4),
 OIL	bigdecimal	(15,4),
 OIL_UOM	string	(20),
 GAS	bigdecimal	(15,4),
 GAS_UOM	string	(20),
 WATER	bigdecimal	(15,4),
 WATER_UOM	string	(20),
 LIQUID	bigdecimal	(15,4),
 LIQUID_UOM	string	(20),
 GAS_BOE	bigdecimal	(15,4),
  INJ_WATER	bigdecimal	(15,4),
  INJ_STEAM	bigdecimal	(15,4),
 INJ_STEAM_UOM	string	(20),
 GOR	bigdecimal	(15,4),
 GOR_UOM	string	(20),
 WC	bigdecimal	(15,4),
 WC_UOM	string	(20),
 WOR	bigdecimal	(15,4),
 WOR_UOM	string	(20),
 OC	bigdecimal	(15,4),
 OC_UOM	string	(20),
 OGR	bigdecimal	(15,4),
 OGR_UOM	string	(20),
 OIL_POT	bigdecimal	(15,4),
 GAS_POT	bigdecimal	(15,4),
 WATER_POT	bigdecimal	(15,4),
 LIQUID_POT	bigdecimal	(15,4),
 GAS_BOE_POT	bigdecimal	(15,4),
 INJ_WATER_POT	bigdecimal	(15,4),
 INJ_STEAM_POT	bigdecimal	(15,4),
 GOR_POT	bigdecimal	(15,4),
 WC_POT	bigdecimal	(15,4),
 WOR_POT	bigdecimal	(15,4),
 OC_POT	bigdecimal	(15,4),
 OGR_POT	bigdecimal	(15,4),
 OIL_DIFF	bigdecimal	(15,4),
 GAS_DIFF	bigdecimal	(15,4),
 WATER_DIFF	bigdecimal	(15,4),
 LIQUID_DIFF	bigdecimal	(15,4),
 GOR_DIFF	bigdecimal	(15,4),
 WC_DIFF	bigdecimal	(15,4),
 WOR_DIFF	bigdecimal	(15,4),
 CD_OIL	bigdecimal	(15,4),
 CD_OIL_POT	bigdecimal	(15,4),
 CD_GAS	bigdecimal	(15,4),
 CD_GAS_POT	bigdecimal	(15,4),
 CD_WATER	bigdecimal	(15,4),
 CD_WATER_POT	bigdecimal	(15,4),
 CD_LIQUID	bigdecimal	(15,4),
 CD_LIQUID_POT	bigdecimal	(15,4),
 CD_GAS_BOE	bigdecimal	(15,4),
 CD_GAS_BOE_POT	bigdecimal	(15,4),
 CD_INJ_WATER	bigdecimal	(15,4),
 CD_INJ_WATER_POT	bigdecimal	(15,4),
 CD_INJ_STEAM	bigdecimal	(15,4),
 CD_INJ_STEAM_POT	bigdecimal	(15,4),
 CUM_OIL	bigdecimal	(15,4),
 CUM_OIL_POT	bigdecimal	(15,4),
 CUM_GAS	bigdecimal	(15,4),
 CUM_GAS_POT	bigdecimal	(15,4),
 CUM_WATER	bigdecimal	(15,4),
 CUM_WATER_POT	bigdecimal	(15,4),
 CUM_LIQUID	bigdecimal	(15,4),
 CUM_LIQUID_POT	bigdecimal	(15,4),
 CUM_GAS_BOE	bigdecimal	(15,4),
 CUM_GAS_BOE_POT	bigdecimal	(15,4),
 CUM_INJ_WATER	bigdecimal	(15,4),
 CUM_INJ_WATER_POT	bigdecimal	(15,4),
 CUM_INJ_STEAM	bigdecimal	(15,4),
 CUM_INJ_STEAM_POT	bigdecimal	(15,4),
 CD_GOR	bigdecimal	(15,4),
 CD_GOR_POT	bigdecimal	(15,4),
 CD_WC	bigdecimal	(15,4),
 CD_WC_POT	bigdecimal	(15,4),
 CD_WOR	bigdecimal	(15,4),
 CD_WOR_POT	bigdecimal	(15,4),
 CD_OC	bigdecimal	(15,4),
 CD_OC_POT	bigdecimal	(15,4),
 CD_OGR	bigdecimal	(15,4),
 CD_OGR_POT	bigdecimal	(15,4),
 CUM_GOR	bigdecimal	(15,4),
 CUM_GOR_POT	bigdecimal	(15,4),
 CUM_WC	bigdecimal	(15,4),
 CUM_WC_POT	bigdecimal	(15,4),
 CUM_WOR	bigdecimal	(15,4),
 CUM_WOR_POT	bigdecimal	(15,4),
 CUM_OC	bigdecimal	(15,4),
 CUM_OC_POT	bigdecimal	(15,4),
 CUM_OGR	bigdecimal	(15,4),
 CUM_OGR_POT	bigdecimal	(15,4),
 ENTITY_ID	string	(100)	NOT NULL,
 REMARK	string	(2000),
 SOURCE	string	(100),
 ROW_QUALITY	string	(100)	NOT NULL,
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp ,
 ROW_CREATED_DATE	timestamp ,
 ROW_CREATED_BY	string	(100),
 ACTIVE_IND	string	(1),
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
 NETWORK_ID string(40),
 NETWORK_NAME string(100),
CONSTRAINT PK_FACILITY PRIMARY KEY (ENTITY_ID))
OPTIONS (UPDATABLE 'FALSE', FACILITY.IMPLEMENTED 'TRUE')
AS
(
 SELECT 
cast(DF.FACILITY_NAME as string),cast(DF.FACILITY_TYPE as string),DF.LATITUDE,DF.LONGITUDE,
D.OIL_ALLOCATED_VOLUME AS	 OIL,cast(D.OIL_UOM AS string),D.GAS_ALLOCATED_VOLUME AS	 GAS,
cast(D.GAS_UOM AS string),D.WATER_ALLOCATED_VOLUME AS	 WATER,cast(D.WATER_UOM AS string),
D.LIQUID_ALLOC_VOLUME AS	 LIQUID,cast(D.OIL_UOM AS string),D.GAS_BOE AS	 GAS_BOE,
D.WATER_INJ_VOLUME AS	 INJ_WATER,D.INJ_STEAM,cast(D.INJ_STEAM_UOM AS string),D.GOR,
cast(D.GAS_UOM AS string) || '/' || cast(D.OIL_UOM AS string),D.WCT,
cast(D.WATER_UOM AS string) || '/' || cast(D.OIL_UOM AS string),D.WOR,
cast(D.WATER_UOM AS string) || '/' || cast(D.OIL_UOM AS string),D.OCT,
cast(D.OIL_UOM AS string) || '/' || cast(D.WATER_UOM AS string),D.OGR,
cast(D.OIL_UOM AS string) || '/' || cast(D.GAS_UOM AS string),D.OIL_PREDICTED_VOLUME AS	 OIL_POT,
D.GAS_PREDICTED_VOLUME AS	 GAS_POT,D.WATER_PREDICTED_VOLUME AS WATER_POT,
D.LIQUID_PREDICTED_VOLUME AS LIQUID_POT,D.GAS_BOE_POT,D.WATER_INJ_PREDICTED_VOLUME AS INJ_WATER_POT,
D.INJ_STEAM_POT,D.GOR_PREDICTED,D.WCT_PREDICTED,D.WOR_PREDICTED,D.OCT_PREDICTED,D.OGR_PREDICTED,
(D.OIL_PREDICTED_VOLUME - D.OIL_ALLOCATED_VOLUME) AS OIL_DIFF,(D.GAS_PREDICTED_VOLUME - D.GAS_ALLOCATED_VOLUME) AS GAS_DIFF,
(D.WATER_PREDICTED_VOLUME - D.WATER_ALLOCATED_VOLUME) AS WATER_DIFF,(D.LIQUID_PREDICTED_VOLUME - D.LIQUID_ALLOC_VOLUME) AS	 LIQUID_DIFF,
(D.GOR_PREDICTED - D.GOR) AS	 GOR_DIFF,(D.WCT_PREDICTED - D.WCT) AS	 WC_DIFF,
(D.WOR_PREDICTED - D.WOR) AS	 WOR_DIFF,D.CD_OIL,D.CD_OIL_POT,D.CD_GAS,D.CD_GAS_POT,D.CD_WATER,
D.CD_WATER_POT,D.CD_LIQUID,D.CD_LIQUID_POT,D.CD_GAS_BOE,D.CD_GAS_BOE_POT,D.CD_INJ_WATER,
D.CD_INJ_WATER_POT,D.CD_INJ_STEAM,D.CD_INJ_STEAM_POT,D.CUM_OIL,D.CUM_OIL_POT,D.CUM_GAS,D.CUM_GAS_POT,
D.CUM_WATER_VOLUME,D.CUM_WATER_POT,D.CUM_LIQUID,D.CUM_LIQUID_POT,D.CUM_GAS_BOE,
D.CUM_GAS_BOE_POT,D.CUM_INJ_WATER,D.CUM_INJ_WATER_POT,D.CUM_INJ_STEAM,D.CUM_INJ_STEAM_POT,
D.CD_GOR,D.CD_GOR_POT,D.CD_WCT,D.CD_WCT_POT,D.CD_WOR,D.CD_WOR_POT,D.CD_OCT,D.CD_OCT_POT,
D.CD_OGR,D.CD_OGR_POT,D.CUM_GOR,D.CUM_GOR_POT,D.CUM_WCT,D.CUM_WCT_POT,D.CUM_WOR,D.CUM_WOR_POT,
D.CUM_OCT,D.CUM_OCT_POT,D.CUM_OGR,D.CUM_OGR_POT,
cast(DF.FACILITY_ID as string) AS	 ENTITY_ID,
NULL AS	 REMARK,NULL AS	 SOURCE,NULL AS	 ROW_QUALITY,
cast(DF.ROW_CHANGED_BY as string) ,CAST(CONCAT(CONCAT(SUBSTRING(DF.ROW_CREATED_DATE_ID,1,4),'-'),
 CONCAT(CONCAT(SUBSTRING(DF.ROW_CREATED_DATE_ID,5,2),'-'),SUBSTRING(DF.ROW_CREATED_DATE_ID,7,2)))
 AS TIMESTAMP) AS ROW_CHANGED_DATE,CAST(CONCAT(CONCAT(SUBSTRING(DF.ROW_CREATED_DATE_ID,1,4),'-'),
 CONCAT(CONCAT(SUBSTRING(DF.ROW_CREATED_DATE_ID,5,2),'-'),SUBSTRING(DF.ROW_CREATED_DATE_ID,7,2)))
 AS TIMESTAMP) AS ROW_CREATED_DATE,cast(DF.ROW_CREATED_BY as string) ,
DF.ACTIVE_IND AS	 ACTIVE_IND, AH.LEVEL1_ID, AH.LEVEL1_NAME, AH.LEVEL1_TYPE, AH.LEVEL2_ID,
 AH.LEVEL2_NAME, AH.LEVEL2_TYPE, AH.LEVEL3_ID, AH.LEVEL3_NAME, AH.LEVEL3_TYPE,
 AH.LEVEL4_ID, AH.LEVEL4_NAME,AH.LEVEL4_TYPE, AH.LEVEL5_ID, AH.LEVEL5_NAME,
 AH.LEVEL5_TYPE, AH.LEVEL6_ID, AH.LEVEL6_NAME, AH.LEVEL6_TYPE,
 NW.NETWORK_ID, NW.NETWORK_NAME
 FROM PDMDimSrc.DimFacility AS DF
 LEFT OUTER JOIN (SELECT FPS.OIL_ALLOCATED_VOLUME, FPS.OIL_VOLUME_UOM AS OIL_UOM,FPS.GAS_ALLOCATED_VOLUME, FPS.GAS_VOLUME_UOM AS GAS_UOM,
				FPS.WATER_ALLOCATED_VOLUME, FPS.WATER_VOLUME_UOM AS WATER_UOM,FPS.LIQUID_ALLOC_VOLUME, FPS.GAS_BOE,
				FPS.WATER_INJ_VOLUME, FPS.INJ_STEAM, FPS.INJ_STEAM_UOM,
				FPS.GOR,FPS.WCT,FPS.WOR,FPS.OCT,FPS.OGR,
				FPS.OIL_PREDICTED_VOLUME,FPS.GAS_PREDICTED_VOLUME,FPS.WATER_PREDICTED_VOLUME,FPS.LIQUID_PREDICTED_VOLUME,
				FPS.WATER_INJ_PREDICTED_VOLUME,FPS.GAS_BOE_POT,FPS.INJ_STEAM_POT,
				FPS.GOR_PREDICTED,FPS.WCT_PREDICTED,FPS.OCT_PREDICTED,FPS.WOR_PREDICTED,FPS.OGR_PREDICTED,
				FPS.CUM_OIL_VOLUME AS CUM_OIL,FPS.CUM_OIL_POT,FPS.CUM_GAS_VOLUME AS CUM_GAS,FPS.CUM_GAS_POT,FPS.CUM_WATER_VOLUME,FPS.CUM_WATER_POT,
				FPS.CUM_INJ_WATER,FPS.CUM_INJ_WATER_POT,FPS.CUM_INJ_STEAM,FPS.CUM_INJ_STEAM_POT,FPS.CUM_LIQUID,
				FPS.CUM_LIQUID_POT,FPS.CUM_GAS_BOE,FPS.CUM_GAS_BOE_POT,FPS.CUM_GOR,
				FPS.CUM_GOR_POT,FPS.CUM_WCT,FPS.CUM_WCT_POT,FPS.CUM_WOR,FPS.CUM_WOR_POT,FPS.CUM_OCT,FPS.CUM_OCT_POT,FPS.CUM_OGR,FPS.CUM_OGR_POT,
				FPS.AVG_BHOLE_PRESSURE,FPS.PRESSURE_UOM AS PRES_UOM,FPS.AVG_BHOLE_TEMPERATURE,FPS.TEMP_UOM,FPS.AVG_WLHEAD_PRESSURE,
				FPS.AVG_WLHEAD_TEMPERATURE,FPS.AVG_CASING_PRESSURE,
				FPS.AVG_CASING_TEMPERATURE,FPS.AVG_TUBING_PRESSURE,
				FPS.AVG_TUBING_TEMPERATURE,FPS.WELL_TEST_OIL_VOLUME,FPS.WELL_TEST_GAS_VOLUME,
				FPS.WELL_TEST_WATER_VOLUME,FPS.W_WC_FAC_KEY,FPS.DIM_ASSETHIERARCHY_KEY,FPS.DATE_KEY,CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS FORMATTEDDATE,
				FPS.CD_OIL,FPS.CD_OIL_POT,FPS.CD_GAS,FPS.CD_GAS_POT,FPS.CD_WATER,FPS.CD_WATER_POT,
FPS.CD_LIQUID,FPS.CD_LIQUID_POT,FPS.CD_GAS_BOE,FPS.CD_GAS_BOE_POT,FPS.CD_INJ_WATER,
FPS.CD_INJ_WATER_POT,FPS.CD_INJ_STEAM,FPS.CD_INJ_STEAM_POT, FPS.CD_GOR,FPS.CD_GOR_POT,
FPS.CD_WCT,FPS.CD_WCT_POT,FPS.CD_WOR,FPS.CD_WOR_POT,FPS.CD_OCT,FPS.CD_OCT_POT,FPS.CD_OGR,FPS.CD_OGR_POT
				FROM
				PDMDimSrc.VW_FactProdSummary_APP AS FPS
				INNER JOIN (SELECT FPS.W_WC_FAC_KEY, MAX(FPS.DATE_KEY) DATE_KEY FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS
				WHERE FPS.W_WC_FAC_IND IN ('F') AND FPS.PERIOD_ID IN ('D') GROUP BY FPS.W_WC_FAC_KEY)D ON (FPS.W_WC_FAC_KEY = D.W_WC_FAC_KEY AND FPS.DATE_KEY = D.DATE_KEY)
			 WHERE FPS.W_WC_FAC_IND in ('F') AND FPS.PERIOD_ID in ('D'))D 
			 ON cast(DF.DIM_FACILITY_KEY AS string) = cast(D.W_WC_FAC_KEY AS string)
  LEFT OUTER JOIN PDMDimSrc.Dim_Network_Entity NE ON DF.DIM_FACILITY_KEY = NE.W_WC_FAC_KEY
  LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AH ON NE.DIM_ASSETHIERARCHY_KEY = AH.DIM_ASSETHIERARCHY_KEY
  LEFT OUTER JOIN PDMDimSrc.DIMNETWORK NW ON NE.DIM_NETWORK_KEY = NW.DIM_NETWORK_KEY
);

CREATE VIEW PRODUCTION_VOLUME
(
 VOLUME_DATE	timestamp,
 PERIOD_TYPE	string	(100),
 OIL	bigdecimal	(15,4),
 OIL_POT	bigdecimal	(15,4),
 OIL_EST	bigdecimal	(15,4),
 OIL_UOM	string	(20),
 GAS	bigdecimal	(15,4),
 GAS_POT	bigdecimal	(15,4),
 GAS_EST	bigdecimal	(15,4),
 GAS_UOM	string	(20),
 BOE_VOLUME bigdecimal	(15,4),
 BOE_POT bigdecimal	(15,4),
 WATER	bigdecimal	(15,4),
 WATER_POT	bigdecimal	(15,4),
 WATER_EST	bigdecimal	(15,4),
 WATER_UOM	string	(20),
 LIQUID	bigdecimal	(15,4),
  LIQUID_POT	bigdecimal	(15,4),
  GAS_BOE	bigdecimal	(15,4),
 GAS_BOE_POT	bigdecimal(15,4),
 INJ_WATER	bigdecimal	(15,4),
 INJ_WATER_POT 	bigdecimal(15,4),
 INJ_STEAM	bigdecimal	(15,4),
 INJ_STEAM_POT	bigdecimal(15,4),
 INJ_STEAM_UOM	string(20),
 OIL_MEAS bigdecimal(15,4),
 GAS_MEAS bigdecimal(15,4),
 WATER_MEAS bigdecimal(15,4),
 WATER_DRAIN bigdecimal(15,4),
 LIQUID_MEAS bigdecimal(15,4),
 GOR	bigdecimal	(15,4),
 GOR_UOM	string	(20),
 WC	bigdecimal	(15,4),
 WC_UOM	string	(20),
 WOR	bigdecimal	(15,4),
 WOR_UOM	string	(20),
 GOR_POT	bigdecimal	(15,4),
 WC_POT	bigdecimal	(15,4),
 WOR_POT	bigdecimal	(15,4),
 OC	bigdecimal	(15,4),
 OC_UOM string(20),
 OC_POT	bigdecimal	(15,4),
 OGR	bigdecimal	(15,4),
 OGR_UOM string(20),
 OGR_POT	bigdecimal	(15,4),
CUM_OIL	bigdecimal	(15,4),
CUM_OIL_POT	bigdecimal	(15,4),
CUM_GAS	bigdecimal	(15,4),
CUM_GAS_POT	bigdecimal	(15,4),
CUM_WATER	bigdecimal	(15,4),
CUM_WATER_POT	bigdecimal	(15,4),
CUM_LIQUID	bigdecimal	(15,4),
CUM_LIQUID_POT	bigdecimal	(15,4),
CUM_GAS_BOE	bigdecimal	(15,4),
CUM_GAS_BOE_POT	bigdecimal	(15,4),
CUM_INJ_WATER	bigdecimal	(15,4),
CUM_INJ_WATER_POT	bigdecimal	(15,4),
CUM_INJ_STEAM	bigdecimal	(15,4),
CUM_INJ_STEAM_POT	bigdecimal	(15,4),
CUM_GOR	bigdecimal	(15,4),
CUM_WC	bigdecimal	(15,4),
CUM_WOR	bigdecimal	(15,4),
CUM_GOR_POT	bigdecimal	(15,4),
CUM_WC_POT	bigdecimal	(15,4),
CUM_WOR_POT	bigdecimal	(15,4),
CUM_OC	bigdecimal	(15,4),
CUM_OC_POT	bigdecimal	(15,4),
CUM_OGR	bigdecimal	(15,4),
CUM_OGR_POT	bigdecimal	(15,4),
CD_OIL	bigdecimal	(15,4),
CD_OIL_POT	bigdecimal	(15,4),
CD_GAS	bigdecimal	(15,4),
CD_GAS_POT	bigdecimal	(15,4),
CD_WATER	bigdecimal	(15,4),
CD_WATER_POT	bigdecimal	(15,4),
CD_LIQUID	bigdecimal	(15,4),
CD_LIQUID_POT	bigdecimal	(15,4),
CD_GAS_BOE	bigdecimal	(15,4),
CD_GAS_BOE_POT	bigdecimal	(15,4),
CD_INJ_WATER	bigdecimal	(15,4),
CD_INJ_WATER_POT	bigdecimal	(15,4),
CD_INJ_STEAM	bigdecimal	(15,4),
CD_INJ_STEAM_POT	bigdecimal	(15,4),
CD_GOR	bigdecimal	(15,4),
CD_WC	bigdecimal	(15,4),
CD_WOR	bigdecimal	(15,4),
CD_GOR_POT	bigdecimal	(15,4),
CD_WC_POT	bigdecimal	(15,4),
CD_WOR_POT	bigdecimal	(15,4),
CD_OC	bigdecimal	(15,4),
CD_OC_POT	bigdecimal	(15,4),
CD_OGR	bigdecimal	(15,4),
CD_OGR_POT	bigdecimal	(15,4),
 ENTITY_ID	string	(100)	NOT NULL	, 
 ENTITY_NAME	string	(255),
 ENTITY_TYPE string(100),
 NETWORK_ID	string	(40),
 NETWORK_NAME	string	(255),
 SOURCE	string	(100),
 ROW_QUALITY	string	(100),
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string	(100),
 ACTIVE_IND	string	(1),
 VOL_ID	string	(40)	NOT NULL	,
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
 PROD_DAYS integer,
 PRODUCTION_STATUS string (100), 
 OPERATING_STATUS string (100), 
 PRIMARY_PRODUCT string (100), 
 PRODUCTION_METHOD string (100), 
 PRODUCTION_START_DATE timestamp,
 SPUD_DATE timestamp,
 LATITUDE bigdecimal(15,4),
 LONGITUDE bigdecimal(15,4),
CONSTRAINT PK_PRODUCTION_VOLUME PRIMARY KEY (VOL_ID))
OPTIONS (UPDATABLE 'FALSE', PRODUCTION_VOLUME.IMPLEMENTED 'TRUE')
AS
 ( 
 SELECT
CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS	VOLUME_DATE,
cast(FPS.PERIOD_ID as string) AS PERIOD_TYPE,FPS.OIL_ALLOCATED_VOLUME AS	 OIL,
FPS.OIL_PREDICTED_VOLUME AS	 OIL_POT,
FPS.OIL_ESTIMATED_VOLUME AS OIL_EST,
FPS.OIL_VOLUME_UOM AS OIL_UOM,
FPS.GAS_ALLOCATED_VOLUME AS	 GAS,FPS.GAS_PREDICTED_VOLUME AS	 GAS_POT,
FPS.GAS_ESTIMATED_VOLUME AS GAS_EST,
FPS.GAS_VOLUME_UOM AS GAS_UOM,FPS.BOE_ALLOCATED_VOLUME, FPS.BOE_PREDICTED_VOLUME,
FPS.WATER_ALLOCATED_VOLUME AS WATER,
FPS.WATER_PREDICTED_VOLUME AS WATER_POT,
FPS.WATER_ESTIMATED_VOLUME AS WATER_EST,
FPS.WATER_VOLUME_UOM AS WATER_UOM,
FPS.LIQUID_ALLOC_VOLUME AS	LIQUID,FPS.LIQUID_PREDICTED_VOLUME AS	LIQUID_POT,
FPS.GAS_BOE AS GAS_BOE,FPS.GAS_BOE_POT  AS	GAS_BOE_POT,FPS.WATER_INJ_VOLUME AS INJ_WATER,
FPS.WATER_INJ_PREDICTED_VOLUME AS INJ_WATER_POT ,FPS.INJ_STEAM AS INJ_STEAM,
FPS.INJ_STEAM_POT AS INJ_STEAM_POT,FPS.INJ_STEAM_UOM AS INJ_STEAM_UOM,
FPS.OIL_MEASURED_VOLUME,FPS.GAS_MEASURED_VOLUME,FPS.WATER_MEASURED_VOLUME,
FPS.WATER_DRAIN_VOLUME,
FPS.LIQUID_MEAS_VOLUME,
FPS.GOR,cast(FPS.GAS_VOLUME_UOM as string) || '/' || cast(FPS.OIL_VOLUME_UOM as string),
FPS.WCT,cast(FPS.WATER_VOLUME_UOM as string) || '/' || cast(FPS.OIL_VOLUME_UOM as string),
FPS.WOR,cast(FPS.WATER_VOLUME_UOM as string) || '/' || cast(FPS.OIL_VOLUME_UOM as string),
FPS.GOR_PREDICTED AS GOR_POT,FPS.WCT_PREDICTED AS	 WC_POT,
FPS.WOR_PREDICTED AS WOR_POT,FPS.OCT,
cast(FPS.OIL_VOLUME_UOM as string) || '/' || cast(FPS.WATER_VOLUME_UOM as string),
FPS.OCT_PREDICTED AS OC_POT,FPS.OGR,
cast(FPS.OIL_VOLUME_UOM as string) || '/' || cast(FPS.GAS_VOLUME_UOM as string),
FPS.OGR_PREDICTED AS OGR_POT,FPS.CUM_OIL_VOLUME,FPS.CUM_OIL_POT,FPS.CUM_GAS_VOLUME,
FPS.CUM_GAS_POT,FPS.CUM_WATER_VOLUME,FPS.CUM_WATER_POT,FPS.CUM_LIQUID,FPS.CUM_LIQUID_POT,
FPS.CUM_GAS_BOE AS	CUM_GAS_BOE,FPS.CUM_GAS_BOE_POT AS	CUM_GAS_BOE_POT,FPS.CUM_INJ_WATER AS CUM_INJ_WATER,
FPS.CUM_INJ_WATER_POT AS CUM_INJ_WATER_POT,FPS.CUM_INJ_STEAM AS	CUM_INJ_STEAM,FPS.CUM_INJ_STEAM_POT AS	CUM_INJ_STEAM_POT,
FPS.CUM_GOR,FPS.CUM_WCT,FPS.CUM_WOR AS	CUM_WOR,FPS.CUM_GOR_POT,FPS.CUM_WCT_POT,
FPS.CUM_WOR_POT,FPS.CUM_OCT,FPS.CUM_OCT_POT,FPS.CUM_OGR AS CUM_OGR,FPS.CUM_OGR_POT,
FPS.CD_OIL,FPS.CD_OIL_POT,FPS.CD_GAS,FPS.CD_GAS_POT,FPS.CD_WATER,FPS.CD_WATER_POT,
FPS.CD_LIQUID,FPS.CD_LIQUID_POT,FPS.CD_GAS_BOE AS	CD_GAS_BOE,FPS.CD_GAS_BOE_POT AS	CD_GAS_BOE_POT,
FPS.CD_INJ_WATER AS CD_INJ_WATER,FPS.CD_INJ_WATER_POT AS CD_INJ_WATER_POT,FPS.CD_INJ_STEAM AS	CD_INJ_STEAM,
FPS.CD_INJ_STEAM_POT AS	CD_INJ_STEAM_POT,FPS.CD_GOR,FPS.CD_WCT,FPS.CD_WOR AS	CD_WOR,
FPS.CD_GOR_POT,FPS.CD_WCT_POT,FPS.CD_WOR_POT,FPS.CD_OCT,FPS.CD_OCT_POT,FPS.CD_OGR AS CD_OGR,
FPS.CD_OGR_POT,cast(E.ENTITY_ID as string),cast(E.ENTITY_NAME as string),cast(FPS.W_WC_FAC_IND AS string),
cast(N.NETWORK_ID AS string) AS	 NETWORK_ID,cast(N.NETWORK_NAME AS string) AS NETWORK_NAME,
NULL AS	 SOURCE,NULL AS	 ROW_QUALITY,NULL AS	 ROW_CHANGED_BY,
CAST(FPS.FORMATTEDDATE_RCHG AS TIMESTAMP) AS	 ROW_CHANGED_DATE,
CAST(FPS.FORMATTEDDATE_RCRT AS TIMESTAMP) AS ROW_CREATED_DATE,
 NULL AS	 ROW_CREATED_BY,NULL AS	 ACTIVE_IND,
cast(FPS.FACT_PROD_SUMMARY_KEY as string) AS VOL_ID,cast(DAH.LEVEL1_ID as string),cast(DAH.LEVEL1_NAME as string),
cast(DAH.LEVEL1_TYPE as string),cast(DAH.LEVEL2_ID as string),cast(DAH.LEVEL2_NAME as string),cast(DAH.LEVEL2_TYPE as string),
cast(DAH.LEVEL3_ID as string),cast(DAH.LEVEL3_NAME as string),cast(DAH.LEVEL3_TYPE as string),
cast(DAH.LEVEL4_ID as string),cast(DAH.LEVEL4_NAME as string),cast(DAH.LEVEL4_TYPE as string),
cast(DAH.LEVEL5_ID as string),cast(DAH.LEVEL5_NAME as string),cast(DAH.LEVEL5_TYPE as string),
cast(DAH.LEVEL6_ID as string),cast(DAH.LEVEL6_NAME as string),cast(DAH.LEVEL6_TYPE as string) ,
cast(FPS.INPRODDAYS as integer),cast(E.PRODUCTION_STATUS AS string) AS PRODUCTION_STATUS,cast(E.OPERATING_STATUS AS string) AS OPERATING_STATUS,
cast(E.PRIMARY_PRODUCT as string) AS PRIMARY_PRODUCT,cast(E.PRODUCTION_METHOD as string) AS PRODUCTION_METHOD,
E.PROD_START_DATE,E.SPUD_DATE, E.SURFACE_LATITUDE, E.SURFACE_LONGITUDE
 FROM PDMDimSrc.VW_FactProdSummary_App AS FPS
 INNER JOIN (SELECT DWC.DIM_WELLCOMPL_KEY AS ENTITY_KEY, DWC.WELL_OR_COMPLETION_ID AS ENTITY_ID, 
				DWC.WELL_COMPLETION_NAME AS ENTITY_NAME, DWC.DIM_ASSETHIERARCHY_KEY AS DIM_ASSETHIERARCHY_KEY , 
				CAST(CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,1,4),'-'),
 CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,5,2),'-'),SUBSTRING(DWC.PRODUCTION_START_DATE_ID,7,2)))
 AS TIMESTAMP) AS PROD_START_DATE,
				CAST(CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,1,4),'-'),
 CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,5,2),'-'),SUBSTRING(DWC.SPUD_DATE_ID,7,2)))
 AS TIMESTAMP) AS SPUD_DATE,DWC.PRODUCTION_STATUS,DWC.OPERATING_STATUS,DWC.PRIMARY_PRODUCT,DWC.PRODUCTION_METHOD,
 DWC.SURFACE_LATITUDE, DWC.SURFACE_LONGITUDE
					FROM PDMDimSrc.DimWellCompletion DWC  
					WHERE DWC.WELL_OR_COMPLETION = 'W'					
				 )E ON FPS.W_WC_FAC_KEY = E.ENTITY_KEY
  LEFT OUTER JOIN PDMDimSrc.DimNetwork N ON FPS.DIM_NETWORK_KEY = N.DIM_NETWORK_KEY
  LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AS DAH ON E.DIM_ASSETHIERARCHY_KEY = DAH.Dim_ASSETHIERARCHY_KEY  
 );
 
 CREATE VIEW PRODUCTION_FACILITY_VOLUME
(
 VOLUME_DATE	timestamp,
 PERIOD_TYPE	string	(100),
 OIL	bigdecimal	(15,4),
 OIL_POT	bigdecimal	(15,4),
 OIL_UOM	string	(20),
 GAS	bigdecimal	(15,4),
 GAS_POT	bigdecimal	(15,4),
 GAS_UOM	string	(20),
 BOE_VOLUME bigdecimal	(15,4),
 BOE_POT bigdecimal	(15,4),
 WATER	bigdecimal	(15,4),
 WATER_POT	bigdecimal	(15,4),
 WATER_UOM	string	(20),
 LIQUID	bigdecimal	(15,4),
  LIQUID_POT	bigdecimal	(15,4),
  GAS_BOE	bigdecimal	(15,4),
 GAS_BOE_POT	bigdecimal(15,4),
 OIL_MEAS bigdecimal(15,4),
 GAS_MEAS bigdecimal(15,4),
 WATER_MEAS bigdecimal(15,4),
 WATER_DRAIN bigdecimal(15,4),
 LIQUID_MEAS bigdecimal(15,4),
 GOR	bigdecimal	(15,4),
 GOR_UOM	string	(20),
 WC	bigdecimal	(15,4),
 WC_UOM	string	(20),
 WOR	bigdecimal	(15,4),
 WOR_UOM	string	(20),
 GOR_POT	bigdecimal	(15,4),
 WC_POT	bigdecimal	(15,4),
 WOR_POT	bigdecimal	(15,4),
 OC	bigdecimal	(15,4),
 OC_UOM string(20),
 OC_POT	bigdecimal	(15,4),
 OGR	bigdecimal	(15,4),
 OGR_UOM string(20),
 OGR_POT	bigdecimal	(15,4),
CUM_OIL	bigdecimal	(15,4),
CUM_OIL_POT	bigdecimal	(15,4),
CUM_GAS	bigdecimal	(15,4),
CUM_GAS_POT	bigdecimal	(15,4),
CUM_WATER	bigdecimal	(15,4),
CUM_WATER_POT	bigdecimal	(15,4),
CUM_LIQUID	bigdecimal	(15,4),
CUM_LIQUID_POT	bigdecimal	(15,4),
CUM_GAS_BOE	bigdecimal	(15,4),
CUM_GAS_BOE_POT	bigdecimal	(15,4),
CUM_GOR	bigdecimal	(15,4),
CUM_WC	bigdecimal	(15,4),
CUM_WOR	bigdecimal	(15,4),
CUM_GOR_POT	bigdecimal	(15,4),
CUM_WC_POT	bigdecimal	(15,4),
CUM_WOR_POT	bigdecimal	(15,4),
CUM_OC	bigdecimal	(15,4),
CUM_OC_POT	bigdecimal	(15,4),
CUM_OGR	bigdecimal	(15,4),
CUM_OGR_POT	bigdecimal	(15,4),
CD_OIL	bigdecimal	(15,4),
CD_OIL_POT	bigdecimal	(15,4),
CD_GAS	bigdecimal	(15,4),
CD_GAS_POT	bigdecimal	(15,4),
CD_WATER	bigdecimal	(15,4),
CD_WATER_POT	bigdecimal	(15,4),
CD_LIQUID	bigdecimal	(15,4),
CD_LIQUID_POT	bigdecimal	(15,4),
CD_GAS_BOE	bigdecimal	(15,4),
CD_GAS_BOE_POT	bigdecimal	(15,4),
CD_GOR	bigdecimal	(15,4),
CD_WC	bigdecimal	(15,4),
CD_WOR	bigdecimal	(15,4),
CD_GOR_POT	bigdecimal	(15,4),
CD_WC_POT	bigdecimal	(15,4),
CD_WOR_POT	bigdecimal	(15,4),
CD_OC	bigdecimal	(15,4),
CD_OC_POT	bigdecimal	(15,4),
CD_OGR	bigdecimal	(15,4),
CD_OGR_POT	bigdecimal	(15,4),
 ENTITY_ID	string	(100)	NOT NULL	, 
 FACILITY_NAME	string	(255),
 FACILITY_TYPE string(100),
 NETWORK_ID	string	(40),
 NETWORK_NAME	string	(255),
 SOURCE_NAME	string	(100),
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string	(100),
 ACTIVE_IND	string	(1),
 FVOL_ID	string	(40)	NOT NULL	,
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
 PROD_DAYS integer,
 LATITUDE bigdecimal(15,4),
 LONGITUDE bigdecimal(15,4),
CONSTRAINT PK_PROD_FAC_VOL PRIMARY KEY (FVOL_ID))
OPTIONS (UPDATABLE 'FALSE', PRODUCTION_FACILITY_VOLUME.IMPLEMENTED 'TRUE')
AS
 ( 
 SELECT
CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS	VOLUME_DATE,
cast(FPS.PERIOD_ID as string) AS PERIOD_TYPE,
FPS.OIL_ALLOCATED_VOLUME AS	 OIL,
FPS.OIL_PREDICTED_VOLUME AS	 OIL_POT,
FPS.OIL_VOLUME_UOM AS OIL_UOM,
FPS.GAS_ALLOCATED_VOLUME AS	 GAS,
FPS.GAS_PREDICTED_VOLUME AS	 GAS_POT,
FPS.GAS_VOLUME_UOM AS GAS_UOM,
FPS.BOE_ALLOCATED_VOLUME,
 FPS.BOE_PREDICTED_VOLUME,
FPS.WATER_ALLOCATED_VOLUME AS WATER,
FPS.WATER_PREDICTED_VOLUME AS WATER_POT,
FPS.WATER_VOLUME_UOM AS WATER_UOM,
FPS.LIQUID_ALLOC_VOLUME AS	LIQUID,
FPS.LIQUID_PREDICTED_VOLUME AS	LIQUID_POT,
FPS.GAS_BOE AS GAS_BOE,
FPS.GAS_BOE_POT  AS	GAS_BOE_POT,
FPS.OIL_MEASURED_VOLUME,
FPS.GAS_MEASURED_VOLUME,
FPS.WATER_MEASURED_VOLUME,
FPS.WATER_DRAIN_VOLUME,
FPS.LIQUID_MEAS_VOLUME,
FPS.GOR,
cast(FPS.GAS_VOLUME_UOM as string) || '/' || cast(FPS.OIL_VOLUME_UOM as string),
FPS.WCT,
cast(FPS.WATER_VOLUME_UOM as string) || '/' || cast(FPS.OIL_VOLUME_UOM as string),
FPS.WOR,
cast(FPS.WATER_VOLUME_UOM as string) || '/' || cast(FPS.OIL_VOLUME_UOM as string),
FPS.GOR_PREDICTED AS GOR_POT,
FPS.WCT_PREDICTED AS	 WC_POT,
FPS.WOR_PREDICTED AS WOR_POT,
FPS.OCT,
cast(FPS.OIL_VOLUME_UOM as string) || '/' || cast(FPS.WATER_VOLUME_UOM as string),
FPS.OCT_PREDICTED AS OC_POT,
FPS.OGR,
cast(FPS.OIL_VOLUME_UOM as string) || '/' || cast(FPS.GAS_VOLUME_UOM as string),
FPS.OGR_PREDICTED AS OGR_POT,
FPS.CUM_OIL_VOLUME,
FPS.CUM_OIL_POT,
FPS.CUM_GAS_VOLUME,
FPS.CUM_GAS_POT,
FPS.CUM_WATER_VOLUME,
FPS.CUM_WATER_POT,
FPS.CUM_LIQUID,
FPS.CUM_LIQUID_POT,
FPS.CUM_GAS_BOE AS	CUM_GAS_BOE,
FPS.CUM_GAS_BOE_POT AS	CUM_GAS_BOE_POT,
FPS.CUM_GOR,
FPS.CUM_WCT,
FPS.CUM_WOR AS	CUM_WOR,
FPS.CUM_GOR_POT,
FPS.CUM_WCT_POT,
FPS.CUM_WOR_POT,
FPS.CUM_OCT,
FPS.CUM_OCT_POT,
FPS.CUM_OGR AS CUM_OGR,
FPS.CUM_OGR_POT,
FPS.CD_OIL,
FPS.CD_OIL_POT,
FPS.CD_GAS,
FPS.CD_GAS_POT,
FPS.CD_WATER,
FPS.CD_WATER_POT,
FPS.CD_LIQUID,
FPS.CD_LIQUID_POT,
FPS.CD_GAS_BOE AS	CD_GAS_BOE,
FPS.CD_GAS_BOE_POT AS	CD_GAS_BOE_POT,
FPS.CD_GOR,
FPS.CD_WCT,
FPS.CD_WOR AS	CD_WOR,
FPS.CD_GOR_POT,
FPS.CD_WCT_POT,
FPS.CD_WOR_POT,
FPS.CD_OCT,
FPS.CD_OCT_POT,
FPS.CD_OGR AS CD_OGR,
FPS.CD_OGR_POT,
cast(E.FACILITY_ID as string),
cast(E.FACILITY_NAME as string),
cast(E.FACILITY_TYPE AS string),
cast(N.NETWORK_ID AS string) AS NETWORK_ID,
cast(N.NETWORK_NAME AS string) AS NETWORK_NAME,
NULL AS	 SOURCE,
NULL AS	 ROW_CHANGED_BY,
CAST(FPS.FORMATTEDDATE_RCHG AS TIMESTAMP) AS	 ROW_CHANGED_DATE,
CAST(FPS.FORMATTEDDATE_RCRT AS TIMESTAMP) AS ROW_CREATED_DATE,
 NULL AS	 ROW_CREATED_BY,
 NULL AS	 ACTIVE_IND,
cast(FPS.FACT_PROD_SUMMARY_KEY as string) AS VOL_ID,
cast(DAH.LEVEL1_ID as string),
cast(DAH.LEVEL1_NAME as string),
cast(DAH.LEVEL1_TYPE as string),
cast(DAH.LEVEL2_ID as string),
cast(DAH.LEVEL2_NAME as string),
cast(DAH.LEVEL2_TYPE as string),
cast(DAH.LEVEL3_ID as string),
cast(DAH.LEVEL3_NAME as string),
cast(DAH.LEVEL3_TYPE as string),
cast(DAH.LEVEL4_ID as string),
cast(DAH.LEVEL4_NAME as string),
cast(DAH.LEVEL4_TYPE as string),
cast(DAH.LEVEL5_ID as string),
cast(DAH.LEVEL5_NAME as string),
cast(DAH.LEVEL5_TYPE as string),
cast(DAH.LEVEL6_ID as string),
cast(DAH.LEVEL6_NAME as string),
cast(DAH.LEVEL6_TYPE as string) ,
cast(FPS.INPRODDAYS as integer),
 E.LATITUDE, 
 E.LONGITUDE
 FROM PDMDimSrc.VW_FactProdSummary_App AS FPS
 INNER JOIN PDMDimSrc.DIMFACILITY E ON FPS.W_WC_FAC_KEY = E.DIM_FACILITY_KEY
  LEFT OUTER JOIN PDMDimSrc.DimNetwork N ON FPS.DIM_NETWORK_KEY = N.DIM_NETWORK_KEY
  LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AS DAH ON E.DIM_ASSETHIERARCHY_KEY = DAH.Dim_ASSETHIERARCHY_KEY  
 );
 
CREATE VIEW PIPELINE
(
RECENT_MEAS_DATE TIMESTAMP ,
LATITUDE BIGDECIMAL (15,4),
LONGITUDE BIGDECIMAL (15,4),
 PRESSURE BIGDECIMAL (15,4),
 PRESSURE_UOM STRING (20),
 TEMPERATURE BIGDECIMAL (15,4),
 TEMPERATURE_UOM STRING (20),
 OIL BIGDECIMAL (15,4),
 OIL_UOM STRING (20),
 GAS BIGDECIMAL (15,4),
 GAS_UOM STRING (20),
 WATER BIGDECIMAL (15,4),
 WATER_UOM STRING (20),
 PIPELINE_UNIT_NAME STRING (255),
 ENTITY_ID STRING (100 ) NOT NULL,
 LEVEL1_ID STRING (40),
 LEVEL1_NAME STRING (255),
 LEVEL1_TYPE STRING (100),
 LEVEL2_ID STRING (40),
 LEVEL2_NAME STRING (255),
 LEVEL2_TYPE STRING (100),
 LEVEL3_ID STRING (40),
 LEVEL3_NAME STRING (255),
 LEVEL3_TYPE STRING (100),
 LEVEL4_ID STRING (40),
 LEVEL4_NAME STRING (255),
 LEVEL4_TYPE STRING (100),
 LEVEL5_ID STRING (40),
 LEVEL5_NAME STRING (255),
 LEVEL5_TYPE STRING (100),
 LEVEL6_ID STRING (40),
 LEVEL6_NAME STRING (255),
 LEVEL6_TYPE STRING (100),
PIPELINE_ID STRING (40 ) NOT NULL,
CONSTRAINT PK_PIPELINE PRIMARY KEY (PIPELINE_ID))
OPTIONS (UPDATABLE 'FALSE',PIPELINE.IMPLEMENTED 'TRUE')
AS
 (
 SELECT  max(T.RECENT_MEAS_DATE),MAX(DF.LATITUDE),MAX(DF.LONGITUDE),MAX(T.PRESSURE),MAX(T.PRESSURE_UOM),MAX(T.TEMPERATURE),MAX(T.TEMPERATURE_UOM),
	MAX(T.OIL),MAX(T.OIL_UOM),MAX(T.GAS),MAX(T.GAS_UOM),MAX(T.WATER),MAX(T.WATER_UOM),MAX(CAST(DF.FACILITY_NAME AS STRING)) AS PIPELINE_UNIT_NAME,
	CAST(DF.FACILITY_ID AS STRING) AS ENTITY_ID,MAX(CAST(DAH.LEVEL1_ID AS STRING))LEVEL1_ID,MAX(CAST(DAH.LEVEL1_NAME AS STRING))LEVEL1_NAME,
	MAX(CAST(DAH.LEVEL1_TYPE AS STRING))LEVEL1_TYPE,MAX(CAST(DAH.LEVEL2_ID AS STRING))LEVEL2_ID,MAX(CAST(DAH.LEVEL2_NAME AS STRING))LEVEL2_NAME,
	MAX(CAST(DAH.LEVEL2_TYPE AS STRING))LEVEL2_TYPE,MAX(CAST(DAH.LEVEL3_ID AS STRING))LEVEL3_ID,MAX(CAST(DAH.LEVEL3_NAME AS STRING))LEVEL3_NAME,
	MAX(CAST(DAH.LEVEL3_TYPE AS STRING))LEVEL3_TYPE,MAX(CAST(DAH.LEVEL4_ID AS STRING))LEVEL4_ID,MAX(CAST(DAH.LEVEL4_NAME AS STRING))LEVEL4_NAME,
	MAX(CAST(DAH.LEVEL4_TYPE AS STRING))LEVEL4_TYPE,MAX(CAST(DAH.LEVEL5_ID AS STRING))LEVEL5_ID,MAX(CAST(DAH.LEVEL5_NAME AS STRING))LEVEL5_NAME,
	MAX(CAST(DAH.LEVEL5_TYPE AS STRING))LEVEL5_TYPE,MAX(CAST(DAH.LEVEL6_ID AS STRING))LEVEL6_ID,MAX(CAST(DAH.LEVEL6_NAME AS STRING))LEVEL6_NAME,
	MAX(CAST(DAH.LEVEL6_TYPE AS STRING))LEVEL6_TYPE,MAX(CAST(DF.DIM_FACILITY_KEY as string)) AS PIPELINE_ID
FROM(PDMDimSrc.DIMFACILITY DF 
	LEFT OUTER JOIN (
	SELECT  cast(FPS.FORMATTEDDATE AS timestamp) AS RECENT_MEAS_DATE,FPS.INLET_PRESSURE AS PRESSURE,
	CAST(FPS.PRESSURE_UOM AS STRING) AS PRESSURE_UOM,FPS.INLET_TEMPERATURE AS TEMPERATURE,
	CAST(FPS.TEMP_UOM AS STRING) AS TEMPERATURE_UOM,NULL AS OIL,NULL AS OIL_UOM,NULL AS GAS,NULL AS GAS_UOM,NULL AS WATER,NULL AS WATER_UOM,FPS.W_WC_FAC_KEY,
	NULL AS PERIOD_ID,NULL AS W_WC_FAC_IND
	FROM PDMDimSrc.VW_ASSETMEASUREMENT AS FPS
	UNION ALL
	SELECT cast(PR.FORMATTEDDATE AS timestamp) AS RECENT_MEAS_DATE,NULL AS PRESSURE,
	NULL AS PRESSURE_UOM,NULL AS TEMPERATURE,NULL AS TEMPERATURE_UOM,
	PR.OIL_ALLOCATED_VOLUME AS OIL,PR.OIL_VOLUME_UOM AS OIL_UOM,PR.GAS_ALLOCATED_VOLUME AS GAS,PR.GAS_VOLUME_UOM AS GAS_UOM,PR.WATER_ALLOCATED_VOLUME AS WATER,
	PR.WATER_VOLUME_UOM AS WATER_UOM,PR.W_WC_FAC_KEY,PR.PERIOD_ID,PR.W_WC_FAC_IND
	FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP PR	
	WHERE cast(PR.PERIOD_ID AS string) = 'D' AND cast(PR.W_WC_FAC_IND AS string) = 'F'
	)T ON DF.DIM_FACILITY_KEY = T.W_WC_FAC_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AS DAH ON DF.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY)
	WHERE cast(DF.FACILITY_TYPE AS string) = 'Pipeline' 
	 GROUP BY DF.FACILITY_ID
	 );
 
 CREATE VIEW PIPELINE_DETAILS
(
MEASUREMENT_DATE TIMESTAMP NOT NULL,
PRESSURE BIGDECIMAL (15,4),
PRESSURE_UOM STRING (20),
TEMPERATURE BIGDECIMAL (15,4),
TEMPERATURE_UOM STRING (20),
OIL BIGDECIMAL (15,4),
OIL_UOM STRING (20),
GAS BIGDECIMAL (15,4),
GAS_UOM STRING (20),
WATER BIGDECIMAL (15,4),
WATER_UOM STRING (20),
PIPELINE_NAME STRING (255),
PIPELINE_ID STRING(100),
PIPELINE_UNIT_NAME STRING (255),
ENTITY_ID STRING (100) NOT NULL,
 LEVEL1_ID STRING (40),
 LEVEL1_NAME STRING (255),
 LEVEL1_TYPE STRING (100),
 LEVEL2_ID STRING (40),
 LEVEL2_NAME STRING (255),
 LEVEL2_TYPE STRING (100),
 LEVEL3_ID STRING (40),
 LEVEL3_NAME STRING (255),
 LEVEL3_TYPE STRING (100),
 LEVEL4_ID STRING (40),
 LEVEL4_NAME STRING (255),
 LEVEL4_TYPE STRING (100),
 LEVEL5_ID STRING (40),
 LEVEL5_NAME STRING (255),
 LEVEL5_TYPE STRING (100),
 LEVEL6_ID STRING (40),
 LEVEL6_NAME STRING (255),
 LEVEL6_TYPE STRING (100),
SOURCE STRING (100),
ROW_QUALITY STRING (100),
ROW_CHANGED_BY STRING (100),
ROW_CHANGED_DATE TIMESTAMP  ,
ROW_CREATED_DATE TIMESTAMP,
ROW_CREATED_BY STRING (100),
ACTIVE_IND STRING (1),
PIPELINE_DETAILS_ID STRING (40 ) NOT NULL,
CONSTRAINT PK_PIPELINE_DETAILS PRIMARY KEY (PIPELINE_DETAILS_ID))
OPTIONS (UPDATABLE 'FALSE',PIPELINE_DETAILS.IMPLEMENTED 'TRUE')
AS
(
	SELECT
	T.MEASUREMENT_DATE,	MAX(T.PRESSURE),MAX(T.PRESSURE_UOM),MAX(T.TEMPERATURE),MAX(T.TEMP_UOM),MAX(T.OIL),MAX(T.OIL_UOM),MAX(T.GAS),MAX(T.GAS_UOM),MAX(T.WATER),
	MAX(T.WATER_UOM),MAX(CAST(DE.EQUIPMENT_NAME AS STRING)) AS PIPELINE_NAME,MAX(T.PIPELINE_ID),MAX(CAST(DF.FACILITY_NAME AS STRING)) AS PIPELINE_UNIT_NAME,
	CAST(DF.FACILITY_ID AS STRING) AS ENTITY_ID,
	MAX(CAST(DAH.LEVEL1_ID AS STRING))LEVEL1_ID,MAX(CAST(DAH.LEVEL1_NAME AS STRING))LEVEL1_NAME,MAX(CAST(DAH.LEVEL1_TYPE AS STRING))LEVEL1_TYPE,
	MAX(CAST(DAH.LEVEL2_ID AS STRING))LEVEL2_ID,MAX(CAST(DAH.LEVEL2_NAME AS STRING))LEVEL2_NAME,MAX(CAST(DAH.LEVEL2_TYPE AS STRING))LEVEL2_TYPE,
	MAX(CAST(DAH.LEVEL3_ID AS STRING))LEVEL3_ID,MAX(CAST(DAH.LEVEL3_NAME AS STRING))LEVEL3_NAME,MAX(CAST(DAH.LEVEL3_TYPE AS STRING))LEVEL3_TYPE,
	MAX(CAST(DAH.LEVEL4_ID AS STRING))LEVEL4_ID,MAX(CAST(DAH.LEVEL4_NAME AS STRING))LEVEL4_NAME,MAX(CAST(DAH.LEVEL4_TYPE AS STRING))LEVEL4_TYPE,
	MAX(CAST(DAH.LEVEL5_ID AS STRING))LEVEL5_ID,MAX(CAST(DAH.LEVEL5_NAME AS STRING))LEVEL5_NAME,MAX(CAST(DAH.LEVEL5_TYPE AS STRING))LEVEL5_TYPE,
	MAX(CAST(DAH.LEVEL6_ID AS STRING))LEVEL6_ID,MAX(CAST(DAH.LEVEL6_NAME AS STRING))LEVEL6_NAME,MAX(CAST(DAH.LEVEL6_TYPE AS STRING))LEVEL6_TYPE,	
	NULL AS SOURCE,	NULL AS ROW_QUALITY,NULL AS ROW_CHANGED_BY,NULL AS ROW_CHANGED_DATE,NULL AS ROW_CREATED_DATE,
	NULL AS ROW_CREATED_BY,
	'Y' AS ACTIVE_IND,UUID() AS PIPELINE_DETAILS_ID
	FROM(
	PDMDimSrc.DIMFACILITY DF
	LEFT OUTER JOIN 
	(
	SELECT CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS MEASUREMENT_DATE,
	FPS.INLET_PRESSURE AS PRESSURE,FPS.PRESSURE_UOM,FPS.INLET_TEMPERATURE AS TEMPERATURE,
	FPS.TEMP_UOM,NULL AS OIL,NULL AS OIL_UOM,NULL AS GAS,NULL AS GAS_UOM,NULL AS WATER,NULL AS WATER_UOM,
	CAST(FPS.DIM_EQUIP_KEY AS STRING) AS PIPELINE_ID,NULL,NULL,FPS.W_WC_FAC_KEY,FPS.DIM_EQUIP_KEY,CAST(FPS.ASSET_MEAS_KEY AS STRING) AS PIPELINE_DETAILS_ID
	FROM PDMDimSrc.VW_ASSETMEASUREMENT FPS 
	UNION ALL 
	SELECT CAST(PR.FORMATTEDDATE AS TIMESTAMP) AS MEASUREMENT_DATE,
	NULL AS PRESSURE,NULL AS PRESSURE_UOM,NULL AS TEMPERATURE,NULL AS TEMP_UOM,PR.OIL_ALLOCATED_VOLUME AS OIL,
	CAST(PR.OIL_VOLUME_UOM AS STRING) AS OIL_UOM,PR.GAS_ALLOCATED_VOLUME AS GAS,
	CAST(PR.GAS_VOLUME_UOM AS STRING) AS GAS_UOM,PR.WATER_ALLOCATED_VOLUME AS WATER,CAST(PR.OIL_VOLUME_UOM AS STRING) AS WATER_UOM,
	NULL AS PIPELINE_ID,PR.PERIOD_ID,PR.W_WC_FAC_IND,PR.W_WC_FAC_KEY,NULL AS DIM_EQUIP_KEY,NULL AS  PIPELINE_DETAILS_ID
	FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP PR
	WHERE cast(PR.PERIOD_ID AS string) = 'D' AND cast(PR.W_WC_FAC_IND AS string) = 'F'
	)T ON T.W_WC_FAC_KEY = DF.DIM_FACILITY_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMEQUIPMENT DE ON T.DIM_EQUIP_KEY = DE.DIM_EQUIPMENT_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AS DAH ON DF.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY)
	WHERE cast(DF.FACILITY_TYPE AS string) in ('Pipeline')
	GROUP BY T.MEASUREMENT_DATE,DF.FACILITY_ID
	);
 
 CREATE VIEW MEASUREMENTS
(
 MEASUREMENT_DATE timestamp,
 TUBING_TEMPERATURE	bigdecimal(15,4),
 TUBING_PRESSURE bigdecimal(15,4),
 PRESSURE_UOM string(20),
 TEMPERATURE_UOM string(20),
 CASING_PRESSURE bigdecimal(15,4),
 CASING_TEMPERATURE	bigdecimal(15,4),
 BHP bigdecimal(15,4),
 BHT bigdecimal(15,4),
 WHP bigdecimal(15,4),
 WHT bigdecimal(15,4),
 ENTITY_ID	string(40) NOT NULL,
 ENTITY_NAME string(255),
 ENTITY_TYPE string(100),
 SOURCE	string(100),
 ROW_QUALITY string(100),
 ROW_CHANGED_BY	string(100),
 ROW_CHANGED_DATE timestamp,
 ROW_CREATED_DATE timestamp,
 ROW_CREATED_BY	string(100),
 ACTIVE_IND	string(1),
 LATITUDE bigdecimal(10,4),
 LONGITUDE bigdecimal(10,4),
 MEASUREMENT_ID	string(40) NOT NULL,
CONSTRAINT PK_MEASUREMENTS PRIMARY KEY (MEASUREMENT_ID))
OPTIONS (UPDATABLE 'FALSE', MEASUREMENTS.IMPLEMENTED 'TRUE')
AS
 ( 
SELECT
CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS	MEASUREMENT_DATE,
FPS.AVG_TUBING_TEMPERATURE AS TUBING_TEMPERATURE,
FPS.AVG_TUBING_PRESSURE AS	TUBING_PRESSURE,
FPS.PRESSURE_UOM,
FPS.TEMP_UOM AS	 TEMPERATURE_UOM,
FPS.AVG_CASING_PRESSURE AS	 CASING_PRESSURE,
FPS.AVG_CASING_TEMPERATURE AS	 CASING_TEMPERATURE,
FPS.AVG_BHOLE_PRESSURE AS	BHP,
FPS.AVG_BHOLE_TEMPERATURE AS	BHT,
FPS.AVG_WLHEAD_PRESSURE AS	WHP,
FPS.AVG_WLHEAD_TEMPERATURE AS	WHT,
cast(FPS.ENTITY_ID AS string),
cast(FPS.ENTITY_NAME AS string),
cast(FPS.ENTITY_TYPE AS string),
NULL AS	SOURCE,
NULL AS	ROW_QUALITY,
NULL AS	ROW_CHANGED_BY,
CAST(FPS.FORMATTEDDATE_RCHG AS TIMESTAMP) AS ROW_CHANGED_DATE,
CAST(FPS.FORMATTEDDATE_RCRT AS TIMESTAMP) AS ROW_CREATED_DATE,
NULL AS	ROW_CREATED_BY,
NULL AS	ACTIVE_IND,
FPS.LATITUDE, FPS.LONGITUDE,
cast(FPS.FACTPTDETAILS_KEY as string) AS MEASUREMENT_ID	
FROM PDMDimSrc.VW_FactPTDETAILS AS FPS
WHERE cast(PERIOD_ID AS string) = 'D'
);
 
CREATE VIEW COMPRESSOR
(
RECENT_MEAS_DATE TIMESTAMP,
DESG_UTILIZATION BIGDECIMAL (15,4),
DESG_UTILIZATION_UOM STRING (20),
UTILIZATION BIGDECIMAL (15,4),
UTILIZATION_UOM STRING (20),
DESG_EFFICIENCY BIGDECIMAL (15,4),
DESG_EFFICIENCY_UOM STRING (20),
EFFICIENCY BIGDECIMAL (15,4),
EFFICIENCY_UOM STRING (20),
DESG_POWER BIGDECIMAL (15,4),
DESG_POWER_UOM STRING (20),
"POWER" BIGDECIMAL (15,4),
POWER_UOM STRING (20),
OIL BIGDECIMAL (15,4),
OIL_POT BIGDECIMAL (15,4),
OIL_UOM STRING (20),
GAS BIGDECIMAL (15,4),
GAS_POT BIGDECIMAL (15,4),
GAS_UOM STRING (20),
WATER BIGDECIMAL (15,4),
WATER_POT BIGDECIMAL (15,4),
WATER_UOM STRING (20),
COMPRESSOR_UNIT_NAME STRING (255),
ALARM STRING (100),
ENTITY_ID STRING (100 ) NOT NULL,
LEVEL1_ID STRING (40),
LEVEL1_NAME STRING (255),
LEVEL1_TYPE STRING (100),
LEVEL2_ID STRING (40),
LEVEL2_NAME STRING (255),
LEVEL2_TYPE STRING (100),
LEVEL3_ID STRING (40),
LEVEL3_NAME STRING (255),
LEVEL3_TYPE STRING (100),
LEVEL4_ID STRING (40),
LEVEL4_NAME STRING (255),
LEVEL4_TYPE STRING (100),
LEVEL5_ID STRING (40),
LEVEL5_NAME STRING (255),
LEVEL5_TYPE STRING (100),
LEVEL6_ID STRING (40),
LEVEL6_NAME STRING (255),
LEVEL6_TYPE STRING (100),
COMPRESSOR_ID STRING (40 ) NOT NULL,
CONSTRAINT PK_COMPRESSOR PRIMARY KEY (COMPRESSOR_ID))
OPTIONS (UPDATABLE 'FALSE',COMPRESSOR.IMPLEMENTED 'TRUE')
AS
(
SELECT max(T.RECENT_MEAS_DATE),MAX(T.DESG_UTILIZATION),MAX(T.DESG_UTILIZATION_UOM),MAX(T.UTILIZATION),MAX(T.UTILIZATION_UOM),MAX(T.DESG_EFFICIENCY),MAX(T.DESG_EFFICIENCY_UOM),
MAX(T.EFFICIENCY),MAX(T.EFFICIENCY_UOM),MAX(T.DESG_POWER),MAX(T.DESG_POWER_UOM),MAX(T.POWER),MAX(T.POWER_UOM),MAX(T.OIL),MAX(T.OIL_POT),MAX(T.OIL_UOM),MAX(T.GAS),MAX(T.GAS_POT),
MAX(T.GAS_UOM),MAX(T.WATER),MAX(T.WATER_POT),MAX(T.WATER_UOM),MAX(CAST(DF.FACILITY_NAME AS STRING))AS COMPRESSOR_UNIT_NAME,NULL AS ALARM,CAST(DF.FACILITY_ID AS STRING) AS ENTITY_ID,
MAX(CAST(DAH.LEVEL1_ID AS STRING))LEVEL1_ID,MAX(CAST(DAH.LEVEL1_NAME AS STRING))LEVEL1_NAME,MAX(CAST(DAH.LEVEL1_TYPE AS STRING))LEVEL1_TYPE,MAX(CAST(DAH.LEVEL2_ID AS STRING))LEVEL2_ID,
	MAX(CAST(DAH.LEVEL2_NAME AS STRING))LEVEL2_NAME,MAX(CAST(DAH.LEVEL2_TYPE AS STRING))LEVEL2_TYPE,MAX(CAST(DAH.LEVEL3_ID AS STRING))LEVEL3_ID,
	MAX(CAST(DAH.LEVEL3_NAME AS STRING))LEVEL3_NAME,MAX(CAST(DAH.LEVEL3_TYPE AS STRING))LEVEL3_TYPE,MAX(CAST(DAH.LEVEL4_ID AS STRING))LEVEL4_ID,
	MAX(CAST(DAH.LEVEL4_NAME AS STRING))LEVEL4_NAME,MAX(CAST(DAH.LEVEL4_TYPE AS STRING))LEVEL4_TYPE,MAX(CAST(DAH.LEVEL5_ID AS STRING))LEVEL5_ID,
	MAX(CAST(DAH.LEVEL5_NAME AS STRING))LEVEL5_NAME,MAX(CAST(DAH.LEVEL5_TYPE AS STRING))LEVEL5_TYPE,MAX(CAST(DAH.LEVEL6_ID AS STRING))LEVEL6_ID,
	MAX(CAST(DAH.LEVEL6_NAME AS STRING))LEVEL6_NAME,MAX(CAST(DAH.LEVEL6_TYPE AS STRING))LEVEL6_TYPE,MAX(CAST(DF.DIM_FACILITY_KEY AS STRING)) AS COMPRESSOR_ID
FROM(PDMDimSrc.DIMFACILITY DF 
LEFT OUTER JOIN 
(SELECT	cast(FPS.FORMATTEDDATE AS timestamp) AS RECENT_MEAS_DATE,FPS.DESG_UTILIZATION AS DESG_UTILIZATION,cast(FPS.UTIL_UOM AS string) AS DESG_UTILIZATION_UOM,
	FPS.UTILIZATION AS UTILIZATION,CAST(FPS.UTIL_UOM AS STRING) AS UTILIZATION_UOM,FPS.DESG_EFFICIENCY AS DESG_EFFICIENCY,cast(FPS.EFF_UOM AS string) AS DESG_EFFICIENCY_UOM,
	FPS.EFFICIENCY AS EFFICIENCY,CAST(FPS.EFF_UOM AS STRING) AS EFFICIENCY_UOM,FPS.DESG_POWER AS DESG_POWER,cast(FPS.POWER_UOM AS string) AS DESG_POWER_UOM,
	FPS."POWER" AS "POWER",CAST(FPS.POWER_UOM AS STRING) AS POWER_UOM,NULL AS OIL,NULL AS OIL_POT,NULL AS OIL_UOM,NULL AS GAS,NULL AS GAS_POT,NULL AS GAS_UOM,
	NULL AS WATER_POT,NULL AS WATER,NULL AS WATER_UOM,NULL AS ALARM,NULL AS PERIOD_ID,NULL AS W_WC_FAC_IND,FPS.W_WC_FAC_KEY
FROM PDMDimSrc.VW_ASSETMEASUREMENT AS FPS
UNION ALL
SELECT cast(PR.FORMATTEDDATE AS timestamp) AS RECENT_MEAS_DATE,NULL AS DESG_UTILIZATION,NULL AS DESG_UTILIZATION_UOM,NULL AS UTILIZATION,NULL AS UTILIZATION_UOM,NULL AS DESG_EFFICIENCY,
	NULL AS DESG_EFFICIENCY_UOM,NULL AS EFFICIENCY,NULL AS EFFICIENCY_UOM,NULL AS DESG_POWER,NULL AS DESG_POWER_UOM,NULL AS "POWER",NULL AS POWER_UOM,PR.OIL_ALLOCATED_VOLUME AS OIL,
	PR.OIL_PREDICTED_VOLUME AS OIL_POT,CAST(PR.OIL_VOLUME_UOM AS STRING) AS OIL_UOM,PR.GAS_ALLOCATED_VOLUME AS GAS,PR.GAS_PREDICTED_VOLUME,CAST(PR.GAS_VOLUME_UOM AS STRING) AS GAS_UOM,
	PR.WATER_PREDICTED_VOLUME,PR.WATER_ALLOCATED_VOLUME AS WATER,CAST(PR.WATER_VOLUME_UOM AS STRING) AS WATER_UOM,NULL AS ALARM,PR.PERIOD_ID,PR.W_WC_FAC_IND,PR.W_WC_FAC_KEY
	FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP PR							
	WHERE cast(PR.PERIOD_ID AS string) = 'D' AND cast(PR.W_WC_FAC_IND AS string) = 'F'
	)T ON DF.DIM_FACILITY_KEY = T.W_WC_FAC_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AS DAH ON DF.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY)						
	WHERE cast(DF.FACILITY_TYPE AS string) in ('CompressorStation','Compressor Station')	
 GROUP BY DF.FACILITY_ID
);

CREATE VIEW COMPRESSOR_DETAILS
(
MEASUREMENT_DATE TIMESTAMP NOT NULL,
DESG_UTILIZATION BIGDECIMAL (15,4),
DESG_UTILIZATION_UOM STRING (20),
UTILIZATION BIGDECIMAL (15,4),
UTILIZATION_UOM STRING (20),
DESG_EFFICIENCY BIGDECIMAL (15,4),
DESG_EFFICIENCY_UOM STRING (20),
EFFICIENCY BIGDECIMAL (15,4),
EFFICIENCY_UOM STRING (20),
DESG_POWER BIGDECIMAL (15,4),
DESG_POWER_UOM STRING (20),
"POWER" BIGDECIMAL (15,4),
POWER_UOM STRING (20),
DESG_SPEED BIGDECIMAL (15,4),
DESG_SPEED_UOM STRING (20),
SPEED BIGDECIMAL (15,4),
SPEED_UOM STRING (20),
DESG_INLET_PRESSURE BIGDECIMAL (15,4),
DESG_INLET_PRESS_UOM STRING (20),
INLET_PRESSURE BIGDECIMAL (15,4),
INLET_PRESS_UOM STRING (20),
DESG_INLET_TEMPERATURE BIGDECIMAL (15,4),
DESG_INLET_TEMP_UOM STRING (20),
INLET_TEMPERATURE BIGDECIMAL (15,4),
INLET_TEMP_UOM STRING (20),
DESG_OUTLET_PRESSURE BIGDECIMAL (15,4),
DESG_OUTLET_PRESS_UOM STRING (20),
OUTLET_PRESSURE BIGDECIMAL (15,4),
OUTLET_PRESS_UOM STRING (20),
DESG_OUTLET_TEMPERATURE BIGDECIMAL (15,4),
DESG_OUTLET_TEMP_UOM STRING (20),
OUTLET_TEMPERATURE BIGDECIMAL (15,4),
OUTLET_TEMP_UOM STRING (20),
OUTLET_GAS_VOLUME bigdecimal(15,4),
OIL BIGDECIMAL (15,4),
OIL_MEAS BIGDECIMAL(15,4),
OIL_POT BIGDECIMAL (15,4),
OIL_UOM STRING (20),
GAS BIGDECIMAL (15,4),
GAS_MEAS BIGDECIMAL(15,4),
GAS_POT BIGDECIMAL (15,4),
GAS_UOM STRING (20),
WATER BIGDECIMAL (15,4),
WATER_MEAS BIGDECIMAL(15,4),
WATER_POT BIGDECIMAL (15,4),
WATER_UOM STRING (20),
RATED_VOLUME BIGDECIMAL(15,4),
COMPRESSOR_RATIO BIGDECIMAL(10,4),
ALARM STRING(100),
COMPRESSOR_UNIT_NAME STRING (100),
COMPRESSOR_ID STRING (40 ) NOT NULL,
COMPRESSOR_NAME STRING (100),
ENTITY_ID STRING (100 ) NOT NULL,
NETWORK_ID	string	(40),
NETWORK_NAME	string	(255),
LEVEL1_ID STRING (40),
LEVEL1_NAME STRING (255),
LEVEL1_TYPE STRING (100),
LEVEL2_ID STRING (40),
LEVEL2_NAME STRING (255),
LEVEL2_TYPE STRING (100),
LEVEL3_ID STRING (40),
LEVEL3_NAME STRING (255),
LEVEL3_TYPE STRING (100),
LEVEL4_ID STRING (40),
LEVEL4_NAME STRING (255),
LEVEL4_TYPE STRING (100),
LEVEL5_ID STRING (40),
LEVEL5_NAME STRING (255),
LEVEL5_TYPE STRING (100),
LEVEL6_ID STRING (40),
LEVEL6_NAME STRING (255),
LEVEL6_TYPE STRING (100),
SOURCE STRING (100),
ROW_QUALITY STRING (100),
ROW_CHANGED_BY STRING (100),
ROW_CHANGED_DATE TIMESTAMP,
ROW_CREATED_DATE TIMESTAMP,
ROW_CREATED_BY STRING (100),
ACTIVE_IND STRING (1),
COMPRESSOR_DETAILS_ID STRING (40) NOT NULL,
CONSTRAINT PK_COMP_DETAILS PRIMARY KEY (COMPRESSOR_DETAILS_ID))
OPTIONS (UPDATABLE 'FALSE',COMPRESSOR_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT CAST(AM.FORMATTEDDATE AS TIMESTAMP) AS MEASUREMENT_DATE, MAX(AM.DESG_UTILIZATION) AS DESG_UTILIZATION,
	MAX(CAST(AM.UTIL_UOM AS STRING)) AS DESG_UTILIZATION_UOM,	MAX(AM.UTILIZATION) AS UTILIZATION,	
	MAX(CAST(AM.UTIL_UOM AS STRING)) AS UTILIZATION_UOM,MAX(AM.DESG_EFFICIENCY) AS DESG_EFFICIENCY,
	MAX(CAST(AM.EFF_UOM AS STRING)) AS DESG_EFFICIENCY_UOM,	MAX(AM.EFFICIENCY) AS EFFICIENCY,MAX(CAST(AM.EFF_UOM AS STRING)) AS EFFICIENCY_UOM,
	MAX(AM.DESG_POWER) AS DESG_POWER,
	MAX(CAST(AM.POWER_UOM AS STRING)) AS DESG_POWER_UOM,MAX(AM."POWER") AS "POWER",MAX(CAST(AM.POWER_UOM AS STRING)) AS POWER_UOM,
	MAX(AM.DESG_SPEED) AS DESG_SPEED,
	MAX(CAST(AM.SPEED_UOM AS STRING)) AS DESG_SPEED_UOM,MAX(AM.SPEED) AS SPEED,MAX(CAST(AM.SPEED_UOM AS STRING)) AS SPEED_UOM,
	MAX(AM.DESG_INLET_PRESSURE) AS DESG_INLET_PRESSURE,
	MAX(CAST(AM.PRESSURE_UOM AS STRING)) AS DESG_INLET_PRESS_UOM,MAX(AM.INLET_PRESSURE) AS INLET_PRESSURE,
	MAX(CAST(AM.PRESSURE_UOM AS STRING)) AS INLET_PRESS_UOM,
	MAX(AM.DESG_INLET_TEMPERATURE) AS DESG_INLET_TEMPERATURE,MAX(CAST(AM.TEMP_UOM AS STRING)) AS DESG_INLET_TEMP_UOM,
	MAX(AM.INLET_TEMPERATURE) AS INLET_TEMPERATURE,
	MAX(CAST(AM.TEMP_UOM AS STRING)) AS INLET_TEMP_UOM,MAX(AM.DESG_OUTLET_PRESSURE) AS DESG_OUTLET_PRESSURE,
	MAX(CAST(AM.PRESSURE_UOM AS STRING)) AS DESG_OUTLET_PRESS_UOM,
	MAX(AM.OUTLET_PRESSURE) AS OUTLET_PRESSURE,MAX(CAST(AM.PRESSURE_UOM AS STRING)) AS OUTLET_PRESS_UOM,
	MAX(AM.DESG_OUTLET_TEMPERATURE) AS DESG_OUTLET_TEMPERATURE, MAX(CAST(AM.TEMP_UOM AS STRING)) AS DESG_OUTLET_TEMP_UOM,
	MAX(AM.OUTLET_TEMPERATURE) AS OUTLET_TEMPERATURE,
	MAX(CAST(AM.TEMP_UOM AS STRING)) AS OUTLET_TEMP_UOM,
	MAX(AM.GAS_RATE) ,
	MAX(FPS.OIL_ALLOCATED_VOLUME) AS OIL,
	MAX(FPS.OIL_MEASURED_VOLUME) AS OIL_MEAS,
	MAX(FPS.OIL_PREDICTED_VOLUME) AS OIL_POT,MAX(CAST(FPS.OIL_VOLUME_UOM AS string)) OIL_UOM,MAX(FPS.GAS_ALLOCATED_VOLUME) AS GAS,
	MAX(FPS.GAS_MEASURED_VOLUME) AS GAS_MEAS,
	MAX(FPS.GAS_PREDICTED_VOLUME) AS GAS_POT,MAX(CAST(FPS.GAS_VOLUME_UOM AS string)) GAS_UOM,MAX(FPS.WATER_ALLOCATED_VOLUME) AS WATER,
	MAX(FPS.WATER_MEASURED_VOLUME) AS WATER_MEAS,
	MAX(FPS.WATER_PREDICTED_VOLUME) AS WATER_POT,MAX(CAST(FPS.WATER_VOLUME_UOM AS string)) WATER_UOM,
	MAX(FPS.RATED_VOLUME) AS RATED_VOLUME,
	MAX(CASE WHEN AM.INLET_PRESSURE IS NOT NULL  AND AM.INLET_PRESSURE > 0 THEN 
		AM.OUTLET_PRESSURE/AM.INLET_PRESSURE END),
	NULL AS ALARM,
	MAX(CAST(DF.FACILITY_NAME AS STRING)) AS COMPRESSOR_UNIT_NAME,
	CAST(AM.DIM_EQUIP_KEY AS STRING) AS COMPRESSOR_ID,MAX(CAST(DE.EQUIPMENT_NAME AS STRING)) AS COMPRESSOR_NAME,
	CAST(DF.FACILITY_ID AS STRING) AS ENTITY_ID,
	max(CAST(N.NETWORK_ID AS STRING)) AS	 NETWORK_ID,max(CAST(N.NETWORK_NAME AS STRING)) AS NETWORK_NAME,
	MAX(CAST(DAH.LEVEL1_ID AS STRING))LEVEL1_ID,MAX(CAST(DAH.LEVEL1_NAME AS STRING))LEVEL1_NAME,
	MAX(CAST(DAH.LEVEL1_TYPE AS STRING))LEVEL1_TYPE,	MAX(CAST(DAH.LEVEL2_ID AS STRING))LEVEL2_ID,	MAX(CAST(DAH.LEVEL2_NAME AS STRING))LEVEL2_NAME,
	MAX(CAST(DAH.LEVEL2_TYPE AS STRING))LEVEL2_TYPE,	MAX(CAST(DAH.LEVEL3_ID AS STRING))LEVEL3_ID,	MAX(CAST(DAH.LEVEL3_NAME AS STRING))LEVEL3_NAME,
	MAX(CAST(DAH.LEVEL3_TYPE AS STRING))LEVEL3_TYPE,	MAX(CAST(DAH.LEVEL4_ID AS STRING))LEVEL4_ID,	MAX(CAST(DAH.LEVEL4_NAME AS STRING))LEVEL4_NAME,
	MAX(CAST(DAH.LEVEL4_TYPE AS STRING))LEVEL4_TYPE,MAX(CAST(DAH.LEVEL5_ID AS STRING))LEVEL5_ID,	MAX(CAST(DAH.LEVEL5_NAME AS STRING))LEVEL5_NAME,
	MAX(CAST(DAH.LEVEL5_TYPE AS STRING))LEVEL5_TYPE,	MAX(CAST(DAH.LEVEL6_ID AS STRING))LEVEL6_ID,	MAX(CAST(DAH.LEVEL6_NAME AS STRING))LEVEL6_NAME,
	MAX(CAST(DAH.LEVEL6_TYPE AS STRING))LEVEL6_TYPE,
NULL AS SOURCE,NULL AS ROW_QUALITY,NULL AS ROW_CHANGED_BY,NULL AS ROW_CHANGED_DATE,NULL AS ROW_CREATED_DATE,NULL AS ROW_CREATED_BY,NULL AS ACTIVE_IND,
UUID() AS COMPRESSOR_DETAILS_ID
FROM PDMDimSrc.VW_ASSETMEASUREMENT AM
INNER JOIN PDMDimSrc.DIMFACILITY DF ON AM.W_WC_FAC_KEY = DF.DIM_FACILITY_KEY
RIGHT OUTER JOIN PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS ON (DF.DIM_FACILITY_KEY = FPS.W_WC_FAC_KEY AND FPS.DATE_KEY = AM.DATE_KEY AND FPS.PERIOD_ID = 'D')
LEFT OUTER JOIN PDMDimSrc.DimNetwork N ON FPS.DIM_NETWORK_KEY = N.DIM_NETWORK_KEY
LEFT OUTER JOIN PDMDimSrc.DIMEQUIPMENT DE ON AM.DIM_EQUIP_KEY = DE.DIM_EQUIPMENT_KEY
LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AS DAH ON DF.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
WHERE cast(DF.FACILITY_TYPE AS string) in ('CompressorStation','Compressor Station')
GROUP BY CAST(DF.FACILITY_ID AS STRING),CAST(AM.DIM_EQUIP_KEY AS STRING),CAST(AM.FORMATTEDDATE AS TIMESTAMP)
	);
	
CREATE VIEW COMPRESSOR_UNIT_DETAILS
(
MEASUREMENT_DATE TIMESTAMP NOT NULL,
DESG_INLET_PRESSURE BIGDECIMAL (15,4),
DESG_INLET_PRESS_UOM STRING (20),
INLET_PRESSURE BIGDECIMAL (15,4),
INLET_PRESS_UOM STRING (20),
DESG_INLET_TEMPERATURE BIGDECIMAL (15,4),
DESG_INLET_TEMP_UOM STRING (20),
INLET_TEMPERATURE BIGDECIMAL (15,4),
INLET_TEMP_UOM STRING (20),
DESG_OUTLET_PRESSURE BIGDECIMAL (15,4),
DESG_OUTLET_PRESS_UOM STRING (20),
OUTLET_PRESSURE BIGDECIMAL (15,4),
OUTLET_PRESS_UOM STRING (20),
DESG_OUTLET_TEMPERATURE BIGDECIMAL (15,4),
DESG_OUTLET_TEMP_UOM STRING (20),
OUTLET_TEMPERATURE BIGDECIMAL (15,4),
OUTLET_TEMP_UOM STRING (20),
OUTLET_GAS_VOLUME bigdecimal(15,4),
OIL BIGDECIMAL (15,4),
OIL_MEAS BIGDECIMAL(15,4),
OIL_POT BIGDECIMAL (15,4),
OIL_UOM STRING (20),
GAS BIGDECIMAL (15,4),
GAS_MEAS BIGDECIMAL(15,4),
GAS_POT BIGDECIMAL (15,4),
GAS_UOM STRING (20),
WATER BIGDECIMAL (15,4),
WATER_MEAS BIGDECIMAL(15,4),
WATER_POT BIGDECIMAL (15,4),
WATER_UOM STRING (20),
COMPRESSOR_RATIO BIGDECIMAL(10,4),
COMPRESSOR_UNIT_NAME STRING (100),
ENTITY_ID STRING (100 ) NOT NULL,
NETWORK_ID	string	(40),
NETWORK_NAME	string	(255),
LEVEL1_ID STRING (40),
LEVEL1_NAME STRING (255),
LEVEL1_TYPE STRING (100),
LEVEL2_ID STRING (40),
LEVEL2_NAME STRING (255),
LEVEL2_TYPE STRING (100),
LEVEL3_ID STRING (40),
LEVEL3_NAME STRING (255),
LEVEL3_TYPE STRING (100),
LEVEL4_ID STRING (40),
LEVEL4_NAME STRING (255),
LEVEL4_TYPE STRING (100),
LEVEL5_ID STRING (40),
LEVEL5_NAME STRING (255),
LEVEL5_TYPE STRING (100),
LEVEL6_ID STRING (40),
LEVEL6_NAME STRING (255),
LEVEL6_TYPE STRING (100),
COMPRESSOR_UNIT_DETAILS_ID STRING (40) NOT NULL,
CONSTRAINT PK_COMP_U_DETAILS PRIMARY KEY (COMPRESSOR_UNIT_DETAILS_ID))
OPTIONS (UPDATABLE 'FALSE',COMPRESSOR_UNIT_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT CAST(AM.FORMATTEDDATE AS TIMESTAMP) AS MEASUREMENT_DATE,
	AVG(AM.DESG_INLET_PRESSURE) AS DESG_INLET_PRESSURE,	MAX(CAST(AM.PRESSURE_UOM AS STRING)) AS DESG_INLET_PRESS_UOM,
	AVG(AM.INLET_PRESSURE) AS INLET_PRESSURE, MAX(CAST(AM.PRESSURE_UOM AS STRING)) AS INLET_PRESS_UOM,
	AVG(AM.DESG_INLET_TEMPERATURE) AS DESG_INLET_TEMPERATURE, MAX(CAST(AM.TEMP_UOM AS STRING)) AS DESG_INLET_TEMP_UOM,
	AVG(AM.INLET_TEMPERATURE) AS INLET_TEMPERATURE, MAX(CAST(AM.TEMP_UOM AS STRING)) AS INLET_TEMP_UOM,
	AVG(AM.DESG_OUTLET_PRESSURE) AS DESG_OUTLET_PRESSURE, MAX(CAST(AM.PRESSURE_UOM AS STRING)) AS DESG_OUTLET_PRESS_UOM,
	AVG(AM.OUTLET_PRESSURE) AS OUTLET_PRESSURE, MAX(CAST(AM.PRESSURE_UOM AS STRING)) AS OUTLET_PRESS_UOM,
	AVG(AM.DESG_OUTLET_TEMPERATURE) AS DESG_OUTLET_TEMPERATURE, MAX(CAST(AM.TEMP_UOM AS STRING)) AS DESG_OUTLET_TEMP_UOM,
	AVG(AM.OUTLET_TEMPERATURE) AS OUTLET_TEMPERATURE, MAX(CAST(AM.TEMP_UOM AS STRING)) AS OUTLET_TEMP_UOM,
	SUM(AM.GAS_RATE) OUTLET_GAS_VOLUME,
	MAX(FPS.OIL_ALLOCATED_VOLUME) AS OIL, MAX(FPS.OIL_MEASURED_VOLUME) AS OIL_MEAS, MAX(FPS.OIL_PREDICTED_VOLUME) AS OIL_POT,MAX(CAST(FPS.OIL_VOLUME_UOM AS string)) OIL_UOM,
	MAX(FPS.GAS_ALLOCATED_VOLUME) AS GAS, MAX(FPS.GAS_MEASURED_VOLUME) AS GAS_MEAS, MAX(FPS.GAS_PREDICTED_VOLUME) AS GAS_POT,MAX(CAST(FPS.GAS_VOLUME_UOM AS string)) GAS_UOM,
	MAX(FPS.WATER_ALLOCATED_VOLUME) AS WATER, MAX(FPS.WATER_MEASURED_VOLUME) AS WATER_MEAS, MAX(FPS.WATER_PREDICTED_VOLUME) AS WATER_POT,MAX(CAST(FPS.WATER_VOLUME_UOM AS string)) WATER_UOM,
	AVG(CASE WHEN AM.INLET_PRESSURE IS NOT NULL  AND AM.INLET_PRESSURE > 0 THEN 	AM.OUTLET_PRESSURE/AM.INLET_PRESSURE END),
	MAX(CAST(DF.FACILITY_NAME AS STRING)) AS COMPRESSOR_UNIT_NAME,
	CAST(DF.FACILITY_ID AS STRING) AS ENTITY_ID,
	max(CAST(N.NETWORK_ID AS STRING)) AS	 NETWORK_ID,max(CAST(N.NETWORK_NAME AS STRING)) AS NETWORK_NAME,
	MAX(CAST(DAH.LEVEL1_ID AS STRING))LEVEL1_ID,MAX(CAST(DAH.LEVEL1_NAME AS STRING))LEVEL1_NAME,
	MAX(CAST(DAH.LEVEL1_TYPE AS STRING))LEVEL1_TYPE,	MAX(CAST(DAH.LEVEL2_ID AS STRING))LEVEL2_ID,	MAX(CAST(DAH.LEVEL2_NAME AS STRING))LEVEL2_NAME,
	MAX(CAST(DAH.LEVEL2_TYPE AS STRING))LEVEL2_TYPE,	MAX(CAST(DAH.LEVEL3_ID AS STRING))LEVEL3_ID,	MAX(CAST(DAH.LEVEL3_NAME AS STRING))LEVEL3_NAME,
	MAX(CAST(DAH.LEVEL3_TYPE AS STRING))LEVEL3_TYPE,	MAX(CAST(DAH.LEVEL4_ID AS STRING))LEVEL4_ID,	MAX(CAST(DAH.LEVEL4_NAME AS STRING))LEVEL4_NAME,
	MAX(CAST(DAH.LEVEL4_TYPE AS STRING))LEVEL4_TYPE,MAX(CAST(DAH.LEVEL5_ID AS STRING))LEVEL5_ID,	MAX(CAST(DAH.LEVEL5_NAME AS STRING))LEVEL5_NAME,
	MAX(CAST(DAH.LEVEL5_TYPE AS STRING))LEVEL5_TYPE,	MAX(CAST(DAH.LEVEL6_ID AS STRING))LEVEL6_ID,	MAX(CAST(DAH.LEVEL6_NAME AS STRING))LEVEL6_NAME,
	MAX(CAST(DAH.LEVEL6_TYPE AS STRING))LEVEL6_TYPE,
UUID() AS COMPRESSOR_UNIT_DETAILS_ID
FROM PDMDimSrc.VW_ASSETMEASUREMENT AM
INNER JOIN PDMDimSrc.DIMFACILITY DF ON AM.W_WC_FAC_KEY = DF.DIM_FACILITY_KEY
RIGHT OUTER JOIN PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS ON (DF.DIM_FACILITY_KEY = FPS.W_WC_FAC_KEY AND FPS.DATE_KEY = AM.DATE_KEY AND FPS.PERIOD_ID = 'D')
LEFT OUTER JOIN PDMDimSrc.DimNetwork N ON FPS.DIM_NETWORK_KEY = N.DIM_NETWORK_KEY
LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AS DAH ON DF.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
WHERE cast(DF.FACILITY_TYPE AS string) in ('CompressorStation','Compressor Station')
GROUP BY CAST(DF.FACILITY_ID AS STRING),CAST(AM.FORMATTEDDATE AS TIMESTAMP)
	);

CREATE VIEW PLUNGER_LIFT_SETTINGS
(
MEASUREMENT_DATE TIMESTAMP NOT NULL,
PLUNGER_TYPE STRING (100),
 INSTALL_DATE TIMESTAMP,
 MIN_ARRIVAL bigdecimal(10,0),
 MAX_ARRIVAL bigdecimal(10,0),
 SLOW_ARRIVAL bigdecimal(10,0),
 FAST_ARRIVAL bigdecimal(10,0),
 MILEAGE bigdecimal(15,4),
 PLUNGER_NAME STRING (255),
 ENTITY_ID STRING (40 ) NOT NULL,
 ENTITY_NAME STRING (255),
SOURCE STRING (100),
ROW_QUALITY STRING (100),
ROW_CHANGED_BY STRING (100),
ROW_CHANGED_DATE TIMESTAMP,
ROW_CREATED_DATE TIMESTAMP,
ROW_CREATED_BY STRING (100),
ACTIVE_IND STRING (1),
 PLUNGER_LIFT_ID STRING (40 ) NOT NULL,
CONSTRAINT PK_PLUNGER_LIFT_SETTINGS PRIMARY KEY (PLUNGER_LIFT_ID))
OPTIONS (UPDATABLE 'FALSE',PLUNGER_LIFT_SETTINGS.IMPLEMENTED 'TRUE')
AS
 (
SELECT 
	cast(FPS.FORMATTEDDATE AS timestamp) AS MEASUREMENT_DATE,
	CAST(FPS.EQ_SUB_TYPE AS STRING) AS PLUNGER_TYPE,
	cast(FPS.FORMATTEDDATE_INS AS timestamp) AS INSTALL_DATE,
	FPS.MIN_ARRIVAL AS MIN_ARRIVAL,
	FPS.MAX_ARRIVAL AS MAX_ARRIVAL,
	FPS.SLOW_ARRIVAL AS SLOW_ARRIVAL,
	FPS.FAST_ARRIVAL AS FAST_ARRIVAL,
	FPS.MILEAGE,
	CAST(FPS.PUMP_UNIT AS STRING) AS PLUNGER_NAME,
	CAST(DWC.WELL_OR_COMPLETION_ID AS STRING) AS ENTITY_ID,
	CAST(DWC.WELL_COMPLETION_NAME AS STRING) AS ENTITY_NAME,
	NULL AS SOURCE,
	NULL AS ROW_QUALITY,
	NULL AS ROW_CHANGED_BY,
	cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CHANGED_DATE,
	cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CREATED_DATE,
	NULL AS ROW_CREATED_BY,
	NULL AS ACTIVE_IND,
	CAST(FPS.EQ_OPR_MEAS_KEY AS STRING) AS PLUNGER_LIFT_ID
 FROM 
	PDMDimSrc.VW_EQ_OPR_MEASUREMENT FPS 
	INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY 
	WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Plunger Lift')
 );
 
 CREATE VIEW PLUNGER_STATUS
(
OPERATION_DATE TIMESTAMP NOT NULL,
PLUNGER_STATUS STRING ( 100 ) NOT NULL,
HOLD_REASON STRING ( 2000 )  ,
OPEN_REASON STRING ( 2000 )  ,
CLOSE_REASON STRING ( 2000 )  ,
ARRIVAL_TIME TIMESTAMP,
MAX_ARRIVAL TIMESTAMP,
MAX_ARR_COUNT BIGDECIMAL ( 15,4 ),
FAST_ARR_COUNT BIGDECIMAL ( 15,4 )  ,
MIN_ARRIVAL TIMESTAMP,
SLOW_ARR_COUNT BIGDECIMAL ( 15,4 )  ,
NORMAL_ARR_COUNT BIGDECIMAL ( 15,4 )  ,
NO_ARR_COUNT BIGDECIMAL ( 15,4 )  ,
MILEAGE BIGDECIMAL ( 15,4 )  ,
OIL_VOLUME BIGDECIMAL ( 15,4 ),
OIL_UOM STRING (20),
GAS_VOLUME BIGDECIMAL ( 15,4 ),
GAS_UOM STRING (20),
WATER_VOLUME BIGDECIMAL ( 15,4 ),
WATER_UOM STRING (20),
 ENTITY_ID STRING (40 ) NOT NULL,
 ENTITY_NAME STRING (255),
 OPERATING_STATUS STRING(100),
PLUNGER_SUMMARY_ID STRING ( 40 ) NOT NULL,
CONSTRAINT PK_PLUNGER_STATUS PRIMARY KEY (PLUNGER_SUMMARY_ID))
OPTIONS (UPDATABLE 'FALSE',PLUNGER_STATUS.IMPLEMENTED 'TRUE')
AS
 (
SELECT T.OPERATION_DATE,MAX(T.PLUNGER_STATUS) PLUNGER_STATUS,MAX(T.HOLD_REASON)HOLD_REASON,MAX(T.OPEN_REASON)OPEN_REASON,MAX(T.CLOSE_REASON)CLOSE_REASON,MAX(T.ARRIVAL_TIME)ARRIVAL_TIME,
 MAX(T.MAX_ARRIVAL)MAX_ARRIVAL, MAX(T.MAX_ARR_COUNT) MAX_ARR_COUNT,MAX(T.FAST_ARR_COUNT) FAST_ARR_COUNT,
	MIN(T.MIN_ARRIVAL)MIN_ARRIVAL,MAX(T.SLOW_ARR_COUNT)SLOW_ARR_COUNT,MAX(T.NORMAL_ARR_COUNT)NORMAL_ARR_COUNT,MAX(T.NO_ARR_COUNT)NO_ARR_COUNT,AVG(T.MILEAGE) MILEAGE,MAX(T.OIL_ALLOCATED_VOLUME) OIL_VOLUME,MAX(T.OIL_UOM)OIL_UOM,
	MAX(T.GAS_ALLOCATED_VOLUME) GAS_VOLUME,MAX(T.GAS_UOM)GAS_UOM,MAX(T.WATER_ALLOCATED_VOLUME) WATER_VOLUME,MAX(T.WATER_UOM)WATER_UOM ,T.ENTITY_ID, T.ENTITY_NAME,MAX(T.OPERATING_STATUS)OPERATING_STATUS,UUID() AS PLUNGER_SUMMARY_ID
                FROM(
				SELECT PR.DATE_KEY, cast(PR.FORMATTEDDATE AS timestamp) AS OPERATION_DATE,NULL AS PLUNGER_STATUS,NULL AS HOLD_REASON,NULL AS OPEN_REASON, NULL AS CLOSE_REASON,NULL AS ARRIVAL_TIME,NULL AS MAX_ARRIVAL, 
                NULL AS MAX_ARR_COUNT,     NULL AS FAST_ARR_COUNT,NULL AS MIN_ARRIVAL,NULL AS SLOW_ARR_COUNT,NULL AS NORMAL_ARR_COUNT,NULL AS NO_ARR_COUNT,   NULL AS MILEAGE,
                PR.OIL_ALLOCATED_VOLUME,cast(PR.OIL_VOLUME_UOM AS string) AS OIL_UOM,PR.GAS_ALLOCATED_VOLUME,cast(PR.GAS_VOLUME_UOM AS string) AS GAS_UOM,PR.WATER_ALLOCATED_VOLUME,
				cast(PR.WATER_VOLUME_UOM AS string) AS WATER_UOM,
				PR.W_WC_FAC_KEY,CAST(DWC.WELL_OR_COMPLETION_ID AS STRING) AS ENTITY_ID,
                CAST(DWC.WELL_COMPLETION_NAME AS STRING) AS ENTITY_NAME,CAST(DWC.OPERATING_STATUS AS STRING) AS OPERATING_STATUS,NULL AS PLUNGER_SUMMARY_ID
                FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP PR
                INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON PR.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
                WHERE cast(PR.W_WC_FAC_IND AS string) IN ('W') AND cast(PR.PERIOD_ID AS string) IN ('D') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Plunger Lift')
			   UNION ALL
			   SELECT FPS.DATE_KEY, cast(FPS.FORMATTEDDATE AS timestamp) AS OPERATION_DATE,CAST(FPS.PUMP_STATUS AS STRING) AS PLUNGER_STATUS,CAST(FPS.HOLD_REASON AS STRING) AS HOLD_REASON,
			   CAST(FPS.OPEN_REASON AS STRING) AS OPEN_REASON,CAST(FPS.CLOSE_REASON AS STRING) AS CLOSE_REASON,CAST(FPS.FORMATTEDDATE_ARR AS timestamp) AS ARRIVAL_TIME,
			   CAST(FPS.FORMATTEDDATE_EFF AS timestamp) AS MAX_ARRIVAL,FPS.MAX_ARRIVAL AS MAX_ARR_COUNT,FPS.FAST_ARRIVAL AS FAST_ARR_COUNT,CAST(FPS.FORMATTEDDATE_EXP AS timestamp) AS MIN_ARRIVAL,
			   FPS.SLOW_ARRIVAL AS SLOW_ARR_COUNT,FPS.NORMAL_ARRIVAL AS NORMAL_ARR_COUNT,	FPS.NO_ARRIVAL AS NO_ARR_COUNT,FPS.MILEAGE AS MILEAGE,
                NULL,NULL,NULL,NULL,NULL,NULL, FPS.W_WC_FAC_KEY,CAST(DWC.WELL_OR_COMPLETION_ID AS STRING) AS ENTITY_ID,
                CAST(DWC.WELL_COMPLETION_NAME AS STRING) AS ENTITY_NAME,CAST(DWC.OPERATING_STATUS AS STRING) AS OPERATING_STATUS,CAST(FPS.EQ_OPR_MEAS_KEY AS STRING) AS PLUNGER_SUMMARY_ID
                FROM PDMDimSrc.VW_EQ_OPR_MEASUREMENT FPS
                INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
                WHERE cast(DWC.PRODUCTION_METHOD AS string) IN ('Plunger Lift') 
                )T
                GROUP BY T.ENTITY_ID, T.ENTITY_NAME,T.OPERATION_DATE
 
 );
 
 CREATE VIEW FLOW_DETAILS
(
 RECORDED_DATE	timestamp ,
 OIL	bigdecimal	(15,4),
 OIL_UOM	string	(20),
 GAS	bigdecimal	(15,4),
 GAS_UOM	string	(20),
 WATER	bigdecimal	(15,4),
 WATER_UOM	string	(20),
 LIQUID	bigdecimal	(15,4),
 INJ_GAS	bigdecimal	(15,4),
 TUBING_PRESSURE	bigdecimal	(15,4),
 PRESSURE_UOM	string	(20),
 CASING_PRESSURE	bigdecimal	(15,4),
 STATIC_PRESSURE	bigdecimal	(15,4),
 LINE_PRESSURE	bigdecimal	(15,4),
 ENTITY_ID	string	(100)	NOT NULL,
 ENTITY_NAME	string	(255),
 LEVEL1_ID STRING (40),
LEVEL1_NAME STRING (255),
LEVEL1_TYPE STRING (100),
LEVEL2_ID STRING (40),
LEVEL2_NAME STRING (255),
LEVEL2_TYPE STRING (100),
LEVEL3_ID STRING (40),
LEVEL3_NAME STRING (255),
LEVEL3_TYPE STRING (100),
LEVEL4_ID STRING (40),
LEVEL4_NAME STRING (255),
LEVEL4_TYPE STRING (100),
LEVEL5_ID STRING (40),
LEVEL5_NAME STRING (255),
LEVEL5_TYPE STRING (100),
LEVEL6_ID STRING (40),
LEVEL6_NAME STRING (255),
LEVEL6_TYPE STRING (100),
 FLOW_ID	string	(40	)	NOT NULL,
CONSTRAINT PK_FLOW_DETAILS PRIMARY KEY (FLOW_ID))
OPTIONS (UPDATABLE 'FALSE', FLOW_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS	RECORDED_DATE,
FPS.OIL_MEASURED_VOLUME AS	 OIL,
FPS.OIL_VOLUME_UOM AS	 OIL_UOM,
FPS.GAS_MEASURED_VOLUME AS	 GAS,
FPS.GAS_VOLUME_UOM AS	 GAS_UOM,
FPS.WATER_MEASURED_VOLUME AS WATER,
FPS.WATER_VOLUME_UOM AS	 WATER_UOM,
FPS.LIQUID_MEAS_VOLUME AS	 LIQUID,
FPS.INJ_STEAM AS	 INJ_GAS,
FPS.AVG_TUBING_PRESSURE AS TUBING_PRESSURE,
FPS.PRESSURE_UOM AS TUBING_PRESS_UOM,
FPS.AVG_CASING_PRESSURE AS CASING_PRESSURE,
FPS.AVG_STATIC_PRESSURE AS STATIC_PRESSURE,
FPS.AVG_LINE_PRESSURE AS LINE_PRESSURE,
cast(DWC.WELL_OR_COMPLETION_ID as string) AS	 ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string) AS	 ENTITY_NAME,
	CAST(DAH.LEVEL1_ID AS STRING), 
	CAST(DAH.LEVEL1_NAME AS STRING),
	CAST(DAH.LEVEL1_TYPE AS STRING),
	CAST(DAH.LEVEL2_ID AS STRING),
	CAST(DAH.LEVEL2_NAME AS STRING),
	CAST(DAH.LEVEL2_TYPE AS STRING),
	CAST(DAH.LEVEL3_ID AS STRING),
	CAST(DAH.LEVEL3_NAME AS STRING),
	CAST(DAH.LEVEL3_TYPE AS STRING),
	CAST(DAH.LEVEL4_ID AS STRING),
	CAST(DAH.LEVEL4_NAME AS STRING),
	CAST(DAH.LEVEL4_TYPE AS STRING),
	CAST(DAH.LEVEL5_ID AS STRING),
	CAST(DAH.LEVEL5_NAME AS STRING),
	CAST(DAH.LEVEL5_TYPE AS STRING),
	CAST(DAH.LEVEL6_ID AS STRING),
	CAST(DAH.LEVEL6_NAME AS STRING),
	CAST(DAH.LEVEL6_TYPE AS STRING),
cast(FPS.FACT_PROD_SUMMARY_KEY as string)AS	 FLOW_ID
 FROM PDMDimSrc.VW_FactProdSummary_APP FPS
 INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AS DAH ON FPS.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
 WHERE CAST(FPS.PERIOD_ID AS string) = 'D' AND CAST(FPS.W_WC_FAC_IND AS string) = 'W'
);

CREATE VIEW PLUNGER_CYCLE_DETAILS
(
MEASUREMENT_DATE	timestamp ,
CYCLE_NUM	integer ,
CASING_PRESSURE	bigdecimal	(15,4),
CASING_PRESS_UOM	string	(20),
TUBING_PRESSURE	bigdecimal	(15,4),
TUBING_PRESS_UOM	string	(20),
O_CASING_PRESSURE	bigdecimal	(15,4),
O_CASING_PRESS_UOM	string	(20),
LINE_PRESSURE	bigdecimal	(15,4),
LINE_PRESS_UOM	string	(20),
O_TUBING_PRESSURE	bigdecimal	(15,4),
O_TUBING_PRESS_UOM	string	(20),
O_LINE_PRESSURE	bigdecimal	(15,4),
O_LINE_PRESS_UOM	string	(20),
OPEN_TIME	timestamp ,
CLOSE_TIME	timestamp ,
ARRIVAL_TIME	timestamp ,
HOLD_REASON	string	(2000),
OPEN_REASON	string	(2000),
CLOSE_REASON	string	(2000),
ARRIVAL_STATUS string(100),
OIL_VOLUME bigdecimal	(15,4),
OIL_UOM string	(20),
GAS_VOLUME bigdecimal	(15,4),
GAS_UOM string	(20),
WATER_VOLUME bigdecimal	(15,4),
WATER_UOM string	(20),
ENTITY_ID	string	(40	)	NOT NULL	,
ENTITY_NAME	string	(255),
SOURCE	string	(100),
ROW_QUALITY	string	(100),
ROW_CHANGED_BY	string	(100),
ROW_CHANGED_DATE	timestamp ,
ROW_CREATED_DATE	timestamp ,
ROW_CREATED_BY	string	(100),
ACTIVE_IND	string	(1),
PLUNGER_LIFT_ID	string	(40	)	NOT NULL,
CONSTRAINT PK_PLUNGER_CYCLE_DETAILS PRIMARY KEY (PLUNGER_LIFT_ID))
OPTIONS (UPDATABLE 'FALSE', PLUNGER_CYCLE_DETAILS.IMPLEMENTED 'TRUE')
AS
(

SELECT DISTINCT T.MEASUREMENT_DATE,T.CYCLE_NUM,AVG(T.CASING_PRESSURE),max(T.CASING_PRESS_UOM),AVG(T.TUBING_PRESSURE),max(T.TUBING_PRESS_UOM),AVG(T.O_CASING_PRESSURE),max(T.O_CASING_PRESS_UOM),
AVG(T.LINE_PRESSURE),
max(T.LINE_PRESS_UOM),AVG(T.O_TUBING_PRESSURE),max(T.O_TUBING_PRESS_UOM),AVG(T.O_LINE_PRESSURE),max(T.O_LINE_PRESS_UOM),max(T.OPEN_TIME),max(T.CLOSE_TIME),max(T.ARRIVAL_TIME),
max(T.HOLD_REASON),max(T.OPEN_REASON),
max(T.CLOSE_REASON),max(T.ARRIVAL_STATUS),max(T.OIL_VOLUME),max(T.OIL_UOM)OIL_UOM ,max(T.GAS_VOLUME ),max(T.GAS_UOM) ,max(T.WATER_VOLUME),max(T.WATER_UOM) ,NULL AS SOURCE,
NULL AS ROW_QUALITY,NULL AS ROW_CHANGED_BY,
T.ENTITY_ID,T.ENTITY_NAME,max(T.ROW_CHANGED_DATE),max(T.ROW_CREATED_DATE),NULL AS ACTIVE_IND,NULL AS ROW_CREATED_BY,
UUID() AS PLUNGER_LIFT_ID

FROM(
SELECT 
     DISTINCT cast(FPS.FORMATTEDDATE AS timestamp) AS	MEASUREMENT_DATE,cast(PR.EQ_RUN_NUM as integer) AS	CYCLE_NUM,NULL AS	CASING_PRESSURE,NULL AS CASING_PRESS_UOM,
NULL  AS	TUBING_PRESSURE,NULL AS TUBING_PRESS_UOM,NULL AS O_CASING_PRESSURE,cast(PR.PRESSURE_UOM as string) AS O_CASING_PRESS_UOM,
NULL AS	LINE_PRESSURE,NULL AS LINE_PRESS_UOM,NULL AS O_TUBING_PRESSURE,NULL AS O_TUBING_PRESS_UOM,
NULL AS	O_LINE_PRESSURE,NULL AS O_LINE_PRESS_UOM,NULL AS	OPEN_TIME,NULL AS	CLOSE_TIME,
NULL AS	ARRIVAL_TIME,NULL AS	HOLD_REASON,NULL AS	OPEN_REASON,
NULL AS	CLOSE_REASON,NULL AS ARRIVAL_STATUS,FPS.OIL_ALLOCATED_VOLUME AS  OIL_VOLUME,FPS.OIL_VOLUME_UOM AS  OIL_UOM,FPS.GAS_ALLOCATED_VOLUME AS  GAS_VOLUME,
FPS.GAS_VOLUME_UOM AS GAS_UOM,FPS.WATER_ALLOCATED_VOLUME AS WATER_VOLUME,FPS.WATER_VOLUME_UOM AS WATER_UOM,cast(DWC.WELL_OR_COMPLETION_ID as string) AS	ENTITY_ID,cast(DWC.WELL_COMPLETION_NAME as string) AS	ENTITY_NAME,
NULL AS	SOURCE,NULL AS	ROW_QUALITY,NULL AS	ROW_CHANGED_BY,cast(FPS.FORMATTEDDATE AS timestamp) AS	ROW_CHANGED_DATE,cast(FPS.FORMATTEDDATE AS timestamp) AS	ROW_CREATED_DATE,
NULL AS	ROW_CREATED_BY,NULL AS	ACTIVE_IND,
NULL AS	PLUNGER_LIFT_ID	
FROM 
    PDMDimSrc.VW_FACTPRODSUMMARY_APP AS FPS 
     INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
     LEFT OUTER JOIN  PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS PR ON PR.W_WC_FAC_KEY=DWC.DIM_WELLCOMPL_KEY
     WHERE FPS.PERIOD_ID='D' AND cast(DWC.WELL_OR_COMPLETION AS string) = 'W' AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Plunger Lift') 
    UNION ALL
    SELECT 
    cast(PR.FORMATTEDDATE AS timestamp) AS	MEASUREMENT_DATE,cast(PR.EQ_RUN_NUM as integer) AS	CYCLE_NUM,PR.CASING_PRESSURE AS	CASING_PRESSURE,cast(PR.PRESSURE_UOM as string) AS CASING_PRESS_UOM,
PR.TUBING_PRESSURE AS	TUBING_PRESSURE,cast(PR.PRESSURE_UOM as string) AS TUBING_PRESS_UOM,PR.O_CASING_PRESSURE AS O_CASING_PRESSURE,cast(PR.PRESSURE_UOM as string) AS O_CASING_PRESS_UOM,
PR.LINE_PRESSURE AS	LINE_PRESSURE,cast(PR.PRESSURE_UOM as string) AS LINE_PRESS_UOM,PR.O_TUBING_PRESSURE AS O_TUBING_PRESSURE,cast(PR.PRESSURE_UOM as string) AS O_TUBING_PRESS_UOM,
PR.O_LINE_PRESSURE AS	O_LINE_PRESSURE,cast(PR.PRESSURE_UOM as string) AS O_LINE_PRESS_UOM,cast(PR.FORMATTEDDATE_EFF AS timestamp) AS	OPEN_TIME,cast(PR.FORMATTEDDATE_EXP AS timestamp) AS	CLOSE_TIME,
cast(PR.FORMATTEDDATE_ARR AS timestamp) AS	ARRIVAL_TIME,cast(PR.HOLD_REASON AS string) AS	HOLD_REASON,cast(PR.OPEN_REASON AS string) AS	OPEN_REASON,
cast(PR.CLOSE_REASON AS string) AS	CLOSE_REASON,cast(PR.PUMP_STATUS AS string) AS ARRIVAL_STATUS,NULL AS  OIL_VOLUME,NULL AS  OIL_UOM,NULL AS  GAS_VOLUME,
NULL AS GAS_UOM,NULL AS WATER_VOLUME,NULL AS WATER_UOM,cast(DWC.WELL_OR_COMPLETION_ID as string) AS	ENTITY_ID,cast(DWC.WELL_COMPLETION_NAME as string) AS	ENTITY_NAME,
NULL AS	SOURCE,NULL AS	ROW_QUALITY,NULL AS	ROW_CHANGED_BY,cast(PR.FORMATTEDDATE AS timestamp) AS	ROW_CHANGED_DATE,cast(PR.FORMATTEDDATE AS timestamp) AS	ROW_CREATED_DATE,
NULL AS	ROW_CREATED_BY,NULL AS	ACTIVE_IND,
cast(PR.EQ_OPR_MEAS_KEY as string)AS	PLUNGER_LIFT_ID	
FROM 
    PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS PR 
     INNER JOIN PDMDimSrc.DimWellCompletion DWC ON PR.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY 
     WHERE  cast(DWC.WELL_OR_COMPLETION AS string) = 'W' AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Plunger Lift') 
	 )T GROUP BY T.MEASUREMENT_DATE,T.ENTITY_ID,T.ENTITY_NAME,T.CYCLE_NUM
	 
	 
);

CREATE VIEW FUNCTION_PROPERTY
(
	PROPERTY_VALUE	string(2000),
	PROPERTY_NAME	string(255) Not Null,
	FUNCTION_TEMPLATE_ID	string(40) Not Null
,CONSTRAINT FUNCTION_PROPERTY_PK PRIMARY KEY (FUNCTION_TEMPLATE_ID,PROPERTY_NAME))
 OPTIONS (UPDATABLE 'TRUE')
 as 
 (select 
cast(PROPERTY_VALUE AS string),
cast(PROPERTY_NAME AS string),
cast(FUNCTION_TEMPLATE_ID AS string)
 from PDMExtSrc.FUNCTION_PROPERTY);
 
CREATE VIEW FUNCTION_TEMPLATE
 (
	ENTITYNAME	string(255) Not Null,
	FUNCTION_TEMPLATE_ID	string(40) Not Null,
	FUNCTION_TEMPLATE_EXP	string(2000),
	FUNCTIONNAME	string(255) Not Null,
	FUNCTION_RETURN_DATA_TYPE string(200),
	FUNCTION_EXPRESSION string(2000)
,CONSTRAINT FUNCTION_TEMPLATE_PK PRIMARY KEY (FUNCTION_TEMPLATE_ID)) 
OPTIONS (UPDATABLE 'TRUE')
 as (select 
cast(ENTITYNAME AS string),
cast(FUNCTION_TEMPLATE_ID AS string),
cast(FUNCTION_TEMPLATE_EXP AS string),
cast(FUNCTIONNAME AS string),
cast(FUNCTION_RETURN_DATA_TYPE AS string),
cast(FUNCTION_EXPRESSION AS string)
 from PDMExtSrc.FUNCTION_TEMPLATE);
 
CREATE VIEW PDM_PROPERTY
 (
	PROPERTY_VALUE	string(2000) ,
	PROPERTY_NAME	string(255) Not Null
,CONSTRAINT PDM_PROPERTY_PK PRIMARY KEY (PROPERTY_NAME)) 
OPTIONS (UPDATABLE 'TRUE')
 as (select 
cast(PROPERTY_VALUE AS string),
cast(PROPERTY_NAME AS string)
 from PDMExtSrc.PDM_PROPERTY);
 
CREATE VIEW FORMULA
 (
	FORMULA_ID	string Not Null,	
	FORMULA_VALUE	string Not Null,
	FORMULA_NAME	string Not Null,
	ENTITY_NAME	string Not Null,
	PARSED_FORMULA_VALUE string,
	FORMULA_DATA_TYPE string,
	ROW_CREATED_BY	string Not Null,
	ROW_CREATED_DATE	timestamp,
	ROW_CHANGED_DATE	timestamp,
	ROW_CHANGED_BY	string Not Null
,CONSTRAINT FORMULA_PK PRIMARY KEY (FORMULA_ID)) 
OPTIONS (UPDATABLE 'TRUE')
 as (SELECT 
FORMULA_ID ,
FORMULA_VALUE ,
FORMULA_NAME  ,
ENTITY_NAME  ,
PARSED_FORMULA_VALUE ,
FORMULA_DATA_TYPE ,
ROW_CREATED_BY ,
ROW_CREATED_DATE ,
ROW_CHANGED_DATE ,
ROW_CHANGED_BY 
 from PDMExtSrc.FORMULA);

CREATE VIEW GAPL_SETTINGS
(
MEASUREMENT_DATE	timestamp NOT NULL,
INSTALL_DATE	timestamp,
PLUNGER_TYPE	string	(100),
FAST_ARRIVAL	bigdecimal(15,4),
SLOW_ARRIVAL	bigdecimal(15,4),
MIN_ARRIVAL	bigdecimal(15,4),
MAX_ARRIVAL	bigdecimal(15,4),
MILEAGE	bigdecimal	(15,4),
ENTITY_ID	string	(40)	NOT NULL,
ENTITY_NAME	string	(255),
SOURCE	string	(100),
ROW_QUALITY	string	(100),
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY	string(100),
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY	string(100),
ACTIVE_IND	string	(1),
GAS_ASSISTED_LIFT_ID	string	(40)	NOT NULL,
CONSTRAINT PK_GAPL_SETTINGS PRIMARY KEY (GAS_ASSISTED_LIFT_ID))
OPTIONS (UPDATABLE 'FALSE', GAPL_SETTINGS.IMPLEMENTED 'TRUE')
AS
(
 SELECT 
cast(FPS.FORMATTEDDATE AS timestamp) AS	MEASUREMENT_DATE,
cast(FPS.FORMATTEDDATE_EFF AS timestamp) AS	INSTALL_DATE,
cast(FPS.EQ_SUB_TYPE as string) AS	PLUNGER_TYPE,
FPS.FAST_ARRIVAL,
FPS.SLOW_ARRIVAL,
FPS.MIN_ARRIVAL,
FPS.MAX_ARRIVAL,
FPS.MILEAGE,
cast(DWC.WELL_OR_COMPLETION_ID as string) AS	ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string) AS	ENTITY_NAME,
NULL AS	SOURCE,
NULL AS	ROW_QUALITY,
cast(FPS.FORMATTEDDATE AS timestamp) AS	ROW_CREATED_DATE,
NULL AS	ROW_CREATED_BY,
cast(FPS.FORMATTEDDATE AS timestamp) AS	ROW_CHANGED_DATE,
NULL AS	ROW_CHANGED_BY,
NULL AS	ACTIVE_IND,
cast(FPS.EQ_OPR_MEAS_KEY as string) AS	GAS_ASSISTED_LIFT_ID
 FROM PDMDimSrc.VW_EQ_OPR_MEASUREMENT FPS
 LEFT OUTER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Gas Assisted Plunger Lift','GasAssisted Plunger Lift','Gas Assisted Lift','GasAssistedPLift')
);

CREATE VIEW GAPL_STATUS
(
OIL bigdecimal	( 15,4 ),
OIL_UOM string	( 20 ),
GAS bigdecimal	( 15,4 ),
GAS_UOM string	( 20 ),
WATER bigdecimal ( 15,4	),
WATER_UOM string ( 20 ),
MEASUREMENT_DATE timestamp ,
ARRIVAL_STATUS string (100	)	NOT NULL,
ENTITY_ID string	( 100 )	NOT NULL,
ENTITY_NAME string	( 255 ),
GAS_ASSISTED_LIFT_ID string	( 40 )	NOT NULL,
CONSTRAINT PK_GAPL_STATUS PRIMARY KEY (GAS_ASSISTED_LIFT_ID))
OPTIONS (UPDATABLE 'FALSE', GAPL_STATUS.IMPLEMENTED 'TRUE')
AS
(
 SELECT MAX(T.OIL) OIL_ALLOCATED_VOLUME,MAX(T.OIL_UOM),MAX(T.GAS) GAS_ALLOCATED_VOLUME,MAX(T.GAS_UOM),
     MAX(T.WATER) WATER_ALLOCATED_VOLUME,MAX(T.WATER_UOM),T.MEASUREMENT_DATE AS MEASUREMENT_DATE, MAX(T.ARRIVAL_STATUS) ARRIVAL_STATUS, T.ENTITY_ID, T.ENTITY_NAME,UUID()  AS GAS_ASSISTED_LIFT_ID  FROM(
SELECT 
FPS.DATE_KEY,NULL AS	OIL,NULL AS	OIL_UOM,NULL AS	GAS,NULL AS	GAS_UOM,NULL AS	WATER,NULL AS	WATER_UOM,cast(FPS.FORMATTEDDATE AS timestamp) AS	MEASUREMENT_DATE,
cast(FPS.PUMP_STATUS AS string) AS	ARRIVAL_STATUS,cast(DWC.WELL_OR_COMPLETION_ID as string) AS	ENTITY_ID,cast(DWC.WELL_COMPLETION_NAME as string) AS	ENTITY_NAME,
cast(FPS.EQ_OPR_MEAS_KEY as string)AS	GAS_ASSISTED_LIFT_ID
 FROM PDMDimSrc.VW_EQ_OPR_MEASUREMENT FPS
 INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
 WHERE  cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Gas Assisted Plunger Lift','GasAssisted Plunger Lift','Gas Assisted Lift','GasAssistedPLift')
 UNION ALL
 SELECT 
PR.DATE_KEY,PR.OIL_ALLOCATED_VOLUME AS	OIL,cast(PR.OIL_VOLUME_UOM as string) AS	OIL_UOM,PR.GAS_ALLOCATED_VOLUME AS	GAS,cast(PR.GAS_VOLUME_UOM as string) AS	GAS_UOM,
PR.WATER_ALLOCATED_VOLUME AS	WATER,cast(PR.WATER_VOLUME_UOM as string) AS	WATER_UOM,cast(PR.FORMATTEDDATE AS timestamp) AS	MEASUREMENT_DATE,
NULL AS	ARRIVAL_STATUS,cast(DWC.WELL_OR_COMPLETION_ID as string) AS	ENTITY_ID,cast(DWC.WELL_COMPLETION_NAME as string) AS	ENTITY_NAME,
NULL AS	GAS_ASSISTED_LIFT_ID
 FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP PR
 INNER JOIN PDMDimSrc.DimWellCompletion DWC ON PR.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
 WHERE CAST(PR.PERIOD_ID AS string) = 'D' AND cast(PR.W_WC_FAC_IND AS string) IN ('W') AND 
 cast(DWC.PRODUCTION_METHOD AS string) IN ('Gas Assisted Plunger Lift','GasAssisted Plunger Lift','Gas Assisted Lift','GasAssistedPLift')
 )T
 GROUP BY T.MEASUREMENT_DATE,T.ENTITY_ID, T.ENTITY_NAME
 );

CREATE VIEW GAPL_DETAILS
(
MEASUREMENT_DATE	timestamp NOT NULL,
CYCLE_NUM	integer ,
CASING_PRESSURE	bigdecimal	(15,4),
CASING_PRESS_UOM	string	(20),
TUBING_PRESSURE	bigdecimal	(15,4),
TUBING_PRESS_UOM	string	(20),
O_CASING_PRESSURE	bigdecimal	(15,4),
O_CASING_PRESS_UOM	string	(20),
LINE_PRESSURE	bigdecimal	(15,4),
LINE_PRESS_UOM	string	(20),
O_TUBING_PRESSURE	bigdecimal	(15,4),
O_TUBING_PRESS_UOM	string	(20),
O_LINE_PRESSURE	bigdecimal	(15,4),
O_LINE_PRESS_UOM	string	(20),
OIL	bigdecimal	(15,4),
OIL_UOM	string	(20),
GAS	bigdecimal	(15,4),
GAS_UOM	string	(20),
WATER	bigdecimal	(15,4),
WATER_UOM	string	(20),
OPEN_DATE	timestamp ,
CLOSE_DATE	timestamp ,
ARRIVAL_DATE	timestamp ,
ARRIVAL_STATUS	string	(100),
INJECTING_STATUS	string	(100),
VALVE_STATUS string(100),
HOLD_REASON	string	(2000),
OPEN_REASON	string	(2000),
CLOSE_REASON	string	(2000),
MAX_ARRIVAL bigdecimal(15,4),
MIN_ARRIVAL bigdecimal(15,4),
ARRIVAL_DURATION INTEGER,
INJ_RATE_POINT bigdecimal(15,4),
POS_UOM string(20),
INJECTION_DATE timestamp,
ENTITY_ID	string	(100)	NOT NULL,
ENTITY_NAME	string	(255),
SOURCE	string	(100),
ROW_QUALITY	string	(100),
ROW_CHANGED_BY	string	(100),
ROW_CHANGED_DATE	timestamp ,
ROW_CREATED_DATE	timestamp ,
ROW_CREATED_BY	string	(100),
ACTIVE_IND	string	(1),
PLUNGER_LIFT_ID	string	(40) NOT NULL,
CONSTRAINT PK_GAPL_DETAILS PRIMARY KEY (PLUNGER_LIFT_ID))
OPTIONS (UPDATABLE 'FALSE', GAPL_DETAILS.IMPLEMENTED 'TRUE')
AS
(
  
SELECT T.MEASUREMENT_DATE,T.CYCLE_NUM,AVG(T.CASING_PRESSURE),MAX(T.CASING_PRESS_UOM),AVG(T.TUBING_PRESSURE),MAX(T.TUBING_PRESS_UOM),AVG(T.O_CASING_PRESSURE),MAX(T.O_CASING_PRESS_UOM),
AVG(T.LINE_PRESSURE),MAX(T.LINE_PRESS_UOM),AVG(T.O_TUBING_PRESSURE),MAX(T.O_TUBING_PRESS_UOM),AVG(T.O_LINE_PRESSURE),MAX(T.O_LINE_PRESS_UOM),MAX(T.OIL),MAX(T.OIL_UOM),MAX(T.GAS),MAX(T.GAS_UOM),
MAX(T.WATER),MAX(T.WATER_UOM),MAX(T.OPEN_DATE),MAX(T.CLOSE_DATE),MAX(T.ARRIVAL_DATE),MAX(T.ARRIVAL_STATUS),MAX(T.INJECTING_STATUS),MAX(T.VALVE_STATUS),
MAX(T.HOLD_REASON),MAX(T.OPEN_REASON),MAX(T.CLOSE_REASON),MAX(T.MAX_ARRIVAL),MIN(T.MIN_ARRIVAL),MAX(T.ARRIVAL_DURATION ),MAX(T.INJ_RATE_POINT),
MAX(T.POS_UOM),MAX(T.INJECTION_DATE ),T.ENTITY_ID,T.ENTITY_NAME,NULL AS SOURCE,NULL AS ROW_QUALITY, NULL AS ROW_CHANGED_BY,
MAX(T.ROW_CHANGED_DATE),MAX(T.ROW_CREATED_DATE),NULL AS ROW_CREATED_BY,NULL AS ACTIVE_IND ,UUID() AS PLUNGER_LIFT_ID
FROM(
SELECT 
DISTINCT cast(FPS.FORMATTEDDATE AS timestamp) AS	MEASUREMENT_DATE,
cast(PR.EQ_RUN_NUM as integer) AS	CYCLE_NUM,
NULL AS	CASING_PRESSURE,NULL AS CASING_PRESS_UOM,NULL AS	TUBING_PRESSURE,NULL AS	TUBING_PRESS_UOM,NULL AS O_CASING_PRESSURE,NULL AS O_CASING_PRESS_UOM,NULL AS LINE_PRESSURE,
NULL AS LINE_PRESS_UOM,NULL AS O_TUBING_PRESSURE,NULL AS	O_TUBING_PRESS_UOM,NULL AS O_LINE_PRESSURE,NULL AS	O_LINE_PRESS_UOM,
FPS.OIL_ALLOCATED_VOLUME AS	OIL,
cast(FPS.OIL_VOLUME_UOM as string) AS	OIL_UOM,
FPS.GAS_ALLOCATED_VOLUME AS	GAS,
cast(FPS.GAS_VOLUME_UOM as string) AS	GAS_UOM,
FPS.WATER_ALLOCATED_VOLUME AS	WATER,
cast(FPS.WATER_VOLUME_UOM as string) AS	WATER_UOM,
NULL AS	OPEN_DATE,NULL AS	CLOSE_DATE,NULL AS	ARRIVAL_DATE,NULL AS	ARRIVAL_STATUS,NULL AS	INJECTING_STATUS,NULL AS VALVE_STATUS,NULL AS	HOLD_REASON,
NULL AS	OPEN_REASON,NULL AS	CLOSE_REASON,NULL AS MAX_ARRIVAL,NULL AS MIN_ARRIVAL,NULL AS ARRIVAL_DURATION,NULL AS INJ_RATE_POINT,NULL AS POS_UOM,NULL AS INJECTION_DATE,
cast(DWC.WELL_OR_COMPLETION_ID as string) AS	ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string) AS	ENTITY_NAME,
NULL AS	SOURCE,NULL AS	ROW_QUALITY,NULL AS	ROW_CHANGED_BY,
cast(FPS.FORMATTEDDATE AS timestamp) AS	ROW_CHANGED_DATE,
cast(FPS.FORMATTEDDATE AS timestamp) AS	ROW_CREATED_DATE,
NULL AS	ROW_CREATED_BY,NULL AS	ACTIVE_IND,NULL AS	GAPL_ID	
 FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS
 INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
 LEFT OUTER JOIN PDMDimSrc.VW_EQ_OPR_MEASUREMENT PR ON PR.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE CAST(FPS.PERIOD_ID AS string) = 'D' AND cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Gas Assisted Plunger Lift','GasAssisted Plunger Lift','Gas Assisted Lift','GasAssistedPLift')
UNION ALL
SELECT 
cast(PR.FORMATTEDDATE AS timestamp) AS	MEASUREMENT_DATE,
cast(PR.EQ_RUN_NUM as integer) AS	CYCLE_NUM,
PR.CASING_PRESSURE AS	CASING_PRESSURE,
cast(PR.PRESSURE_UOM as string) AS CASING_PRESS_UOM,
PR.TUBING_PRESSURE AS	TUBING_PRESSURE,
cast(PR.PRESSURE_UOM as string) AS	TUBING_PRESS_UOM,
PR.O_CASING_PRESSURE AS O_CASING_PRESSURE,
cast(PR.PRESSURE_UOM as string) AS O_CASING_PRESS_UOM,
PR.LINE_PRESSURE AS LINE_PRESSURE,
cast(PR.PRESSURE_UOM as string) AS LINE_PRESS_UOM,
PR.O_TUBING_PRESSURE AS O_TUBING_PRESSURE,
cast(PR.PRESSURE_UOM as string) AS	O_TUBING_PRESS_UOM,
PR.O_LINE_PRESSURE AS O_LINE_PRESSURE,
cast(PR.PRESSURE_UOM as string) AS	O_LINE_PRESS_UOM,
NULL AS	OIL,NULL AS	OIL_UOM,NULL AS	GAS,NULL AS	GAS_UOM,NULL AS	WATER,NULL AS	WATER_UOM,
cast(PR.FORMATTEDDATE_EFF AS timestamp) AS	OPEN_DATE,
cast(PR.FORMATTEDDATE_EXP AS timestamp) AS	CLOSE_DATE,
cast(PR.FORMATTEDDATE_ARR AS timestamp) AS	ARRIVAL_DATE,
cast(PR.PUMP_STATUS AS string) AS	ARRIVAL_STATUS,
cast(PR.EQ_OPR_STATUS AS string) AS	INJECTING_STATUS,
cast(PR.VALVE_STATUS AS string) AS VALVE_STATUS,
cast(PR.HOLD_REASON AS string) AS	HOLD_REASON,
cast(PR.OPEN_REASON AS string) AS	OPEN_REASON,
cast(PR.CLOSE_REASON AS string) AS	CLOSE_REASON,
PR.MAX_ARRIVAL,
PR.MIN_ARRIVAL,
CAST(PR.ARRIVAL_DURATION AS INTEGER)ARRIVAL_DURATION,
PR.RATE_SET_POINT AS INJ_RATE_POINT,
cast(PR.POS_UOM AS string)POS_UOM,
cast(PR.FORMATTEDDATE AS timestamp)INJECTION_DATE,
cast(DWC.WELL_OR_COMPLETION_ID as string) AS	ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string) AS	ENTITY_NAME,
NULL AS	SOURCE,NULL AS	ROW_QUALITY,NULL AS	ROW_CHANGED_BY,
cast(PR.FORMATTEDDATE AS timestamp) AS	ROW_CHANGED_DATE,
cast(PR.FORMATTEDDATE AS timestamp) AS	ROW_CREATED_DATE,
NULL AS	ROW_CREATED_BY,NULL AS	ACTIVE_IND,
cast(PR.EQ_OPR_MEAS_KEY as string) AS	GAPL_ID	
 FROM PDMDimSrc.VW_EQ_OPR_MEASUREMENT PR
 INNER JOIN PDMDimSrc.DimWellCompletion DWC ON PR.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE cast(PR.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Gas Assisted Plunger Lift','GasAssisted Plunger Lift','Gas Assisted Lift','GasAssistedPLift') 
)T GROUP BY T.MEASUREMENT_DATE,T.CYCLE_NUM,T.ENTITY_ID,T.ENTITY_NAME
);

CREATE VIEW GAPL_SUMMARY
(
MEASUREMENT_DATE	timestamp NOT NULL,
CYCLE_STATUS	string(100),
CYCLE_COUNT integer,
ENTITY_ID	string	(100)	NOT NULL,
ENTITY_NAME	string	(255),
GAS_ASSISTED_LIFT_ID	string	(40) NOT NULL,
CONSTRAINT PK_GAPL_SUMM PRIMARY KEY (GAS_ASSISTED_LIFT_ID))
OPTIONS (UPDATABLE 'FALSE', GAPL_SUMMARY.IMPLEMENTED 'TRUE')
AS
(
SELECT cast(T.MEASUREMENT_DATE AS timestamp), cast(T.CYCLE_STATUS AS string), T.CYCLE_COUNT, cast(T.ENTITY_ID AS string), 
cast(T.ENTITY_NAME AS string), cast(T.GAPL_ID AS string)
FROM (
 SELECT cast(FPS.FORMATTEDDATE AS timestamp) AS MEASUREMENT_DATE,
 cast(FPS.EQ_OPR_STATUS AS string) AS CYCLE_STATUS,
 cast(FPS.EQ_RUN_NUM AS integer) AS CYCLE_COUNT,
 cast(DWC.WELL_OR_COMPLETION_ID as string) AS ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string) AS	ENTITY_NAME,
 cast(FPS.EQ_OPR_MEAS_KEY as string)AS	GAPL_ID,
 ROW_NUMBER() OVER (PARTITION BY FPS.W_WC_FAC_KEY, FPS.FORMATTEDDATE ORDER BY FPS.EQ_RUN_NUM DESC) ROW_NUM
 FROM PDMDimSrc.VW_EQ_OPR_MEASUREMENT FPS
 LEFT OUTER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY 
WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') 
AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Gas Assisted Plunger Lift','GasAssisted Plunger Lift','Gas Assisted Lift','GasAssistedPLift'))T
);

CREATE VIEW GAS_LIFT_DETAILS
(
MEASUREMENT_DATE	timestamp	NOT NULL,
CYCLE_NUM	integer,
INJ_TIME	timestamp,
INJ_RATE_SET_POINT	bigdecimal(15,4),
INJ_RATE_SET_POINT_UOM	string(20),
INJ_STATUS	string(100),
VALVE_OPEN	string(100),
OIL	bigdecimal	(15,4),
OIL_UOM	string	(20),
GAS	bigdecimal	(15,4),
GAS_UOM	string	(20),
WATER	bigdecimal	(15,4),
WATER_UOM	string	(20),
ENTITY_ID	string(40)	NOT NULL,
ENTITY_NAME	string(255),
SOURCE	string(100),
ROW_QUALITY	string(100),
ROW_CHANGED_BY	string(100),
ROW_CHANGED_DATE	timestamp,
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string(100),
ACTIVE_IND	string	(1),
GAS_LIFT_ID	string(40)	NOT NULL,
CONSTRAINT PK_GAS_LIFT_DET_DIM PRIMARY KEY (GAS_LIFT_ID))
OPTIONS (UPDATABLE 'FALSE',GAS_LIFT_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT
DISTINCT T.MEASUREMENT_DATE,T.CYCLE_NUM,MAX(T.INJ_TIME),MAX(T.INJ_RATE_SET_POINT),MAX(T.INJ_RATE_SET_POINT_UOM),MAX(T.INJ_STATUS),MAX(T.VALVE_OPEN),MAX(T.OIL),
MAX(T.OIL_UOM),MAX(T.GAS),MAX(T.GAS_UOM),MAX(T.WATER),MAX(T.WATER_UOM),T.ENTITY_ID,T.ENTITY_NAME, NULL AS SOURCE, NULL AS ROW_QUALITY, NULL AS ROW_CHANGED_BY,
 MAX(T.ROW_CHANGED_DATE),MAX(T.ROW_CREATED_DATE),NULL AS ROW_CREATED_BY, NULL AS ACTIVE_IND, UUID() AS EQ_OPR_MEAS_KEY

FROM(
SELECT
cast(PR.FORMATTEDDATE AS timestamp)MEASUREMENT_DATE,
cast(FPS.EQ_RUN_NUM as integer)CYCLE_NUM,NULL AS INJ_TIME,NULL AS INJ_RATE_SET_POINT,NULL AS INJ_RATE_SET_POINT_UOM,NULL AS INJ_STATUS,NULL AS VALVE_OPEN,PR.OIL_ALLOCATED_VOLUME AS	OIL,
cast(PR.OIL_VOLUME_UOM as string) AS	OIL_UOM,PR.GAS_ALLOCATED_VOLUME AS	GAS,cast(PR.GAS_VOLUME_UOM as string) AS	GAS_UOM,
PR.WATER_ALLOCATED_VOLUME AS	WATER,cast(PR.WATER_VOLUME_UOM as string) AS	WATER_UOM,
cast(DWC.WELL_OR_COMPLETION_ID as string)ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string)ENTITY_NAME,
NULL AS SOURCE,
NULL AS ROW_QUALITY,
NULL AS ROW_CHANGED_BY,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CHANGED_DATE,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CREATED_DATE,
NULL AS ROW_CREATED_BY,
NULL AS ACTIVE_IND,
cast(FPS.EQ_OPR_MEAS_KEY as string)GAS_LIFT_ID
FROM 
PDMDimSrc.VW_FACTPRODSUMMARY_APP AS PR
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON PR.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
LEFT OUTER JOIN PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS FPS ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
		WHERE CAST(PR.PERIOD_ID AS string) = 'D' AND cast(PR.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Gas Lift')
UNION ALL
SELECT
cast(FPS.FORMATTEDDATE AS timestamp),
cast(FPS.EQ_RUN_NUM as integer),
cast(FPS.FORMATTEDDATE_EFF AS timestamp),
FPS.RATE_SET_POINT,
cast(FPS.POS_UOM AS string),
cast(FPS.EQ_OPR_STATUS AS string),
cast(FPS.VALVE_STATUS AS string),
NULL AS	OIL,NULL AS	OIL_UOM,NULL AS	GAS,NULL AS	GAS_UOM,NULL AS	WATER,NULL AS	WATER_UOM,
cast(DWC.WELL_OR_COMPLETION_ID as string)ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string)ENTITY_NAME,
NULL AS SOURCE,NULL AS ROW_QUALITY,NULL AS ROW_CHANGED_BY,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CHANGED_DATE,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CREATED_DATE,
NULL AS ROW_CREATED_BY,NULL AS ACTIVE_IND,
cast(FPS.EQ_OPR_MEAS_KEY as string)
FROM 
PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS FPS
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Gas Lift')
)T GROUP BY T.MEASUREMENT_DATE,T.CYCLE_NUM,T.ENTITY_ID,T.ENTITY_NAME
);

CREATE VIEW GAS_LIFT_SETTINGS
(
MEASUREMENT_DATE	timestamp	NOT NULL,
VALVE_NUMBER	string(40),
VALVE_DEPTH	bigdecimal(15,4),
VALVE_DEPTH_UOM	string(20),
DESG_SURF_OPEN_PRESSURE	bigdecimal(15,4),
DESG_SURF_OPEN_PRESS_UOM	string(20),
DESG_SURF_CLOSE_PRESSURE	bigdecimal(15,4),
DESG_SURF_CLOSE_PRESS_UOM	string(20),
ENTITY_ID	string(40)	NOT NULL,
ENTITY_NAME	string(255),
SOURCE	string(100),
ROW_QUALITY	string(100),
ROW_CHANGED_BY	string(100),
ROW_CHANGED_DATE	timestamp	,
ROW_CREATED_DATE	timestamp	,
ROW_CREATED_BY	string(100),
ACTIVE_IND	string	(1),
GAS_LIFT_ID	string(40)	NOT NULL,
CONSTRAINT PK_GAS_LIFT_SET_DIM PRIMARY KEY (GAS_LIFT_ID))
OPTIONS (UPDATABLE 'FALSE',GAS_LIFT_SETTINGS.IMPLEMENTED 'TRUE')
AS
(
SELECT
cast(FPS.FORMATTEDDATE AS timestamp),
cast(FPS.EQ_NUM AS string),
FPS.EQ_DEPTH,
cast(FPS.DEPTH_UOM AS string),
FPS.DESG_SURF_OPEN_PRESSURE,
cast(FPS.PRESSURE_UOM AS string),
FPS.DESG_SURF_CLOSE_PRESSURE,
cast(FPS.PRESSURE_UOM AS string),
cast(DWC.WELL_OR_COMPLETION_ID as string),
cast(DWC.WELL_COMPLETION_NAME as string),
NULL AS SOURCE,
NULL AS ROW_QUALITY,
NULL AS ROW_CHANGED_BY,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CHANGED_DATE,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CREATED_DATE,
NULL AS ROW_CREATED_BY,
NULL AS ACTIVE_IND,
cast(FPS.EQ_OPR_MEAS_KEY as string)
FROM 
PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS FPS
LEFT OUTER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Gas Lift')
);	

CREATE VIEW GAS_LIFT_STATUS
(
MEASUREMENT_DATE	timestamp,
INJ_TIME	timestamp,
INJ_STATUS	string(100),
INJ_RATE_SET_POINT	bigdecimal(15,4),
INJ_VALVE_OPEN	string (20),
OIL	bigdecimal(15,4),
OIL_UOM	string(20),
GAS	bigdecimal(15,4),
GAS_UOM	string(20),
WATER	bigdecimal(15,4),
WATER_UOM	string(20),
ENTITY_ID	string(40)	NOT NULL,
ENTITY_NAME	string(255),
GAS_LIFT_ID	string(40)	NOT NULL,
CONSTRAINT PK_GAS_LIFT_STAT_DIM PRIMARY KEY (GAS_LIFT_ID))
OPTIONS (UPDATABLE 'FALSE',GAS_LIFT_STATUS.IMPLEMENTED 'TRUE')
AS
(
SELECT MAX(T.MEAS_DATE) as MEASUREMENT_DATE ,MAX(T.INJ_TIME) AS INJ_TIME,MAX(T.INJ_STATUS) AS INJ_STATUS,MAX(T.RATE_SET_POINT) AS INJ_RATE_SET_POINT,MAX(T.VALVE_OPEN)INJ_VALVE_OPEN,
MAX(T.OIL_ALLOCATED_VOLUME) AS OIL,MAX(T.OIL_UOM) AS OIL_UOM,
MAX(T.GAS_ALLOCATED_VOLUME)AS GAS ,MAX(T.GAS_UOM) AS GAS_UOM,MAX(T.WATER_ALLOCATED_VOLUME)AS WATER ,MAX(T.WATER_UOM) AS WATER_UOM,T.ENTITY_ID,T.ENTITY_NAME,UUID() AS GAS_LIFT_ID
FROM (
SELECT
cast(FPS.FORMATTEDDATE AS timestamp) AS MEAS_DATE,cast(FPS.FORMATTEDDATE_EFF AS timestamp) AS INJ_TIME,cast(FPS.EQ_OPR_STATUS AS string) AS INJ_STATUS,
FPS.RATE_SET_POINT,cast(FPS.VALVE_STATUS AS string) AS VALVE_OPEN,NULL AS OIL_ALLOCATED_VOLUME,NULL AS OIL_UOM,
NULL AS GAS_ALLOCATED_VOLUME,NULL AS GAS_UOM,NULL AS WATER_ALLOCATED_VOLUME,NULL AS WATER_UOM,cast(DWC.WELL_OR_COMPLETION_ID AS string) AS ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,cast(FPS.EQ_OPR_MEAS_KEY as string) AS GAS_LIFT_ID,
ROW_NUMBER() OVER (PARTITION BY FPS.W_WC_FAC_KEY ORDER BY FPS.FORMATTEDDATE DESC) ROW_NUM
FROM 
PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS FPS
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
 WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Gas Lift')
UNION ALL
SELECT
cast(PR.FORMATTEDDATE AS timestamp) AS MEAS_DATE,
NULL AS INJ_TIME,
NULL AS INJ_STATUS,
NULL AS RATE_SET_POINT,
NULL AS VALVE_OPEN,
PR.OIL_ALLOCATED_VOLUME,
cast(PR.OIL_VOLUME_UOM AS string) AS OIL_UOM,
PR.GAS_ALLOCATED_VOLUME,
cast(PR.GAS_VOLUME_UOM AS string) AS GAS_UOM,
PR.WATER_ALLOCATED_VOLUME,
cast(PR.WATER_VOLUME_UOM AS string) AS WATER_UOM,
cast(DWC.WELL_OR_COMPLETION_ID AS string) AS ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
NULL AS GAS_LIFT_ID,
ROW_NUMBER() OVER (PARTITION BY PR.W_WC_FAC_KEY ORDER BY PR.FORMATTEDDATE DESC) ROW_NUM
FROM 
PDMDimSrc.VW_FACTPRODSUMMARY_APP AS PR
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON PR.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE CAST(PR.PERIOD_ID AS string) = 'D' AND cast(PR.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Gas Lift')
) 
T WHERE ROW_NUM=1 GROUP BY T.ENTITY_ID,T.ENTITY_NAME
);

CREATE VIEW ROD_PUMP
(
MEASUREMENT_DATE	timestamp NOT NULL,
RUNTIME	bigdecimal	(15,4),
RUNTIME_UOM	string	(20),
SURFACE_CARD_TYPE	string	(100),
SPM	bigdecimal	(15,4),
SPM_UOM	string	(20),
STROKE_LENGTH	bigdecimal	(15,4),
STROKE_LENGTH_UOM	string	(20),
PUMP_DIAMETER	bigdecimal	(15,4),
PUMP_DIA_UOM	string	(20),
PUMP_DEPTH	bigdecimal	(15,4),
PUMP_DEPTH_UOM	string	(20),
PUMP_UNIT	string	(100),
SURFACE_CAPACITY	bigdecimal	(15,4),
SURF_CAPACITY_UOM	string	(20),
TEST_DATE	timestamp ,
TEST_OIL	bigdecimal	(15,4),
TEST_OIL_UOM	string	(20),
TEST_GAS	bigdecimal	(15,4),
TEST_GAS_UOM	string	(20),
TEST_WATER	bigdecimal	(15,4),
TEST_WATER_UOM	string	(20),
TEST_GROSS	bigdecimal	(15,4),
TEST_GROSS_UOM	string	(20),
DH_STROKE	bigdecimal	(15,4),
DH_STROKE_UOM	string	(20),
FILLAGE	bigdecimal	(15,4),
FILLAGE_UOM	string	(20),
DH_CAPACITY	bigdecimal	(15,4),
DH_CAPACITY_UOM	string	(20),
DT_CAPACITY	bigdecimal	(15,4),
DT_CAPACITY_UOM	string	(20),
FLUID_LOAD	bigdecimal	(15,4),
FLUID_LOAD_UOM	string	(20),
BUOYONT_ROD_WEIGHT	bigdecimal	(15,4),
BUOYONT_ROD_WEIGHT_UOM	string	(20),
FRICTION_LOAD	bigdecimal	(15,4),
FRICTION_LOAD_UOM	string	(20),
PO_FLUID_LOAD	bigdecimal	(15,4),
PO_FLUID_LOAD_UOM	string	(20),
CALC_FLUID_LEVEL	bigdecimal	(15,4),
CALC_FLUID_LEVEL_UOM	string	(20),
INTAKE_PRESSURE	bigdecimal	(15,4),
INTAKE_PRESS_UOM	string	(20),
PUMP_CONDITION	string	(2000),
ENTITY_ID	string	(100	)	NOT NULL,
ENTITY_NAME	string	(255),
SOURCE	string	(100),
ROW_QUALITY	string	(100),
ROW_CHANGED_BY	string	(100),
ROW_CHANGED_DATE	timestamp ,
ROW_CREATED_DATE	timestamp ,
ROW_CREATED_BY	string	(100),
ACTIVE_IND	string	(1),
ROD_PUMP_ID	string	(40	)	NOT NULL,
CONSTRAINT PK_ROD_PUMP PRIMARY KEY (ROD_PUMP_ID))
OPTIONS (UPDATABLE 'FALSE', ROD_PUMP.IMPLEMENTED 'TRUE')
AS
(
 SELECT T.MEASUREMENT_DATE as MEASUREMENT_DATE , MAX(T.RUNTIME) RUNTIME, MAX(T.RUNTIME_UOM) RUNTIME_UOM, MAX(T.SURFACE_CARD_TYPE)SURFACE_CARD_TYPE,AVG(T.SPM) SPM, MAX(T.SPM_UOM) SPM_UOM,
  MAX(T.EQ_LENGTH) STROKE_LENGTH, MAX(T.LENGTH_UOM) STROKE_LENGTH_UOM, MAX(T.PUMP_DIAMETER) PUMP_DIAMETER, MAX(T.PUMP_DIA_UOM) PUMP_DIA_UOM,MAX(T.EQ_DEPTH)PUMP_DEPTH,
  MAX(T.PUMP_DEPTH_UOM)PUMP_DEPTH_UOM,MAX(T.PUMP_UNIT)PUMP_UNIT,MAX(T.SURFACE_CAPACITY)SURFACE_CAPACITY,MAX(T.SURF_CAPACITY_UOM)SURF_CAPACITY_UOM,MAX(T.TEST_DATE)TEST_DATE
  ,MAX(T.TEST_OIL)TEST_OIL,MAX(T.TEST_OIL_UOM)TEST_OIL_UOM,MAX(T.TEST_GAS)TEST_GAS,MAX(T.TEST_GAS_UOM)TEST_GAS_UOM, MAX(T.TEST_WATER)TEST_WATER,MAX(T.TEST_WATER_UOM)TEST_WATER_UOM,MAX(T.TEST_GROSS)TEST_GROSS,
  MAX(T.TEST_GROSS_UOM)TEST_GROSS_UOM,MAX(T.DH_STROKE)DH_STROKE,MAX(T.DH_STROKE_UOM)DH_STROKE_UOM,AVG(T.FILLAGE)FILLAGE,MAX(T.FILLAGE_UOM)FILLAGE_UOM,MAX(T.DH_CAPACITY)DH_CAPACITY,
  MAX(T.DH_CAPACITY_UOM)DH_CAPACITY_UOM,MAX(T.DT_CAPACITY) DT_CAPACITY,MAX(T.DT_CAPACITY_UOM),MAX(T.FLUID_LOAD)FLUID_LOAD,MAX(T.FLUID_LOAD_UOM)FLUID_LOAD_UOM,
  MAX(T.EQ_WEIGHT)BUOYONT_ROD_WEIGHT,MAX(T.BUOYONT_ROD_WEIGHT_UOM)BUOYONT_ROD_WEIGHT_UOM,MAX(T.FRICTION_LOAD)FRICTION_LOAD,MAX(T.FRICTION_LOAD_UOM)FRICTION_LOAD_UOM,MAX(T.PO_FLUID_LOAD)PO_FLUID_LOAD,
  MAX(T.PO_FLUID_LOAD_UOM)PO_FLUID_LOAD_UOM,MAX(T.FLUID_LEVEL)CALC_FLUID_LEVEL,  MAX(T.CALC_FLUID_LEVEL_UOM)CALC_FLUID_LEVEL_UOM,AVG(T.INTAKE_PRESSURE)INTAKE_PRESSURE,
  MAX(T.INTAKE_PRESS_UOM)INTAKE_PRESS_UOM,MAX(T.PUMP_CONDITION)PUMP_CONDITION,T.ENTITY_ID,T.ENTITY_NAME ,
  NULL AS	SOURCE,NULL AS	ROW_QUALITY,NULL AS	ROW_CHANGED_BY,
MAX(T.ROW_CHANGED_DATE)ROW_CHANGED_DATE,MAX(T.ROW_CREATED_DATE)ROW_CREATED_DATE,NULL AS	ROW_CREATED_BY,
NULL AS	ACTIVE_IND,UUID() AS ROD_PUMP_ID
   FROM(
SELECT 
cast(FPS.FORMATTEDDATE AS timestamp) AS	MEASUREMENT_DATE,FPS.RUNTIME ,cast(FPS.RUNTIME_UOM as string) AS	RUNTIME_UOM,cast(FPS.EQ_SUB_TYPE AS string) AS	SURFACE_CARD_TYPE,
FPS.SPM ,cast(FPS.SPM_UOM as string) AS	SPM_UOM,FPS.EQ_LENGTH,cast(FPS.LENGTH_UOM as string) AS LENGTH_UOM,FPS.DIAMETER AS PUMP_DIAMETER,
cast(FPS.DIAMETER_UOM as string) AS	PUMP_DIA_UOM,FPS.EQ_DEPTH,cast(FPS.DEPTH_UOM as string) AS	PUMP_DEPTH_UOM,cast(FPS.PUMP_UNIT AS string) AS	PUMP_UNIT,
FPS.SPM AS	SURFACE_CAPACITY,cast(FPS.CAPACITY_UOM as string) AS	SURF_CAPACITY_UOM,cast(FPS.FORMATTEDDATE AS timestamp) AS	TEST_DATE,
NULL AS	TEST_OIL,NULL AS	TEST_OIL_UOM,NULL AS	TEST_GAS,NULL AS	TEST_GAS_UOM,NULL AS	TEST_WATER,NULL AS	TEST_WATER_UOM,NULL AS	TEST_GROSS,NULL AS	TEST_GROSS_UOM,
FPS.DH_STROKE,cast(FPS.STROKE_UOM as string) AS	DH_STROKE_UOM,FPS.FILLAGE,cast(FPS.FILLAGE_UOM as string) AS	FILLAGE_UOM,FPS.DH_CAPACITY,
cast(FPS.CAPACITY_UOM as string) AS	DH_CAPACITY_UOM,FPS.DT_CAPACITY AS DT_CAPACITY,cast(FPS.CAPACITY_UOM as string) AS	DT_CAPACITY_UOM,FPS.FLUID_LOAD AS FLUID_LOAD,
cast(FPS.LOAD_UOM as string) AS	FLUID_LOAD_UOM,FPS.EQ_WEIGHT,cast(FPS.WEIGHT_UOM as string) AS	BUOYONT_ROD_WEIGHT_UOM,
FPS.FRICTION_LOAD,cast(FPS.LOAD_UOM as string) AS FRICTION_LOAD_UOM,FPS.PO_FLUID_LOAD,cast(FPS.LOAD_UOM as string) AS PO_FLUID_LOAD_UOM,
FPS.FLUID_LEVEL,cast(FPS.LEVEL_UOM as string) AS CALC_FLUID_LEVEL_UOM,FPS.INTAKE_PRESSURE,cast(FPS.PRESSURE_UOM as string) AS INTAKE_PRESS_UOM,
cast(FPS.PUMP_STATUS AS string) AS	PUMP_CONDITION,cast(DWC.WELL_OR_COMPLETION_ID as string)AS	ENTITY_ID,cast(DWC.WELL_COMPLETION_NAME as string) AS	ENTITY_NAME,NULL AS	SOURCE,NULL AS	ROW_QUALITY,NULL AS	ROW_CHANGED_BY,
cast(FPS.FORMATTEDDATE AS timestamp) AS	ROW_CHANGED_DATE,
cast(FPS.FORMATTEDDATE AS timestamp) AS	ROW_CREATED_DATE,
NULL AS	ROW_CREATED_BY,
NULL AS	ACTIVE_IND,
cast(FPS.EQ_OPR_MEAS_KEY as string)AS ROD_PUMP_ID	
 FROM PDMDimSrc.VW_EQ_OPR_MEASUREMENT FPS
 INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
 WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Rod Pump','Sucker Rod')
 UNION ALL
 SELECT 
cast(PR.FORMATTEDDATE AS timestamp) AS	MEASUREMENT_DATE,
NULL AS RUNTIME ,NULL AS	RUNTIME_UOM,NULL AS	SURFACE_CARD_TYPE,NULL AS SPM ,NULL AS	SPM_UOM,NULL AS EQ_LENGTH,NULL AS LENGTH_UOM,NULL AS PUMP_DIAMETER,
NULL AS	PUMP_DIA_UOM,NULL AS EQ_DEPTH,NULL AS	PUMP_DEPTH_UOM,NULL AS	PUMP_UNIT,NULL AS	SURFACE_CAPACITY,
NULL AS	SURF_CAPACITY_UOM,NULL AS	TEST_DATE,PR.WELL_TEST_OIL_VOLUME AS	TEST_OIL,cast(PR.OIL_VOLUME_UOM as string) AS	TEST_OIL_UOM,
PR.WELL_TEST_GAS_VOLUME AS	TEST_GAS,cast(PR.GAS_VOLUME_UOM as string) AS	TEST_GAS_UOM,PR.WELL_TEST_WATER_VOLUME AS	TEST_WATER,
cast(PR.WATER_VOLUME_UOM as string) AS	TEST_WATER_UOM,(PR.WELL_TEST_OIL_VOLUME + PR.WELL_TEST_WATER_VOLUME) AS	TEST_GROSS,cast(PR.OIL_VOLUME_UOM as string) AS	TEST_GROSS_UOM,
NULL AS DH_STROKE,NULL AS	DH_STROKE_UOM,NULL AS FILLAGE,NULL AS	FILLAGE_UOM,NULL AS DH_CAPACITY,NULL AS	DH_CAPACITY_UOM,NULL AS DT_CAPACITY,NULL AS	DT_CAPACITY_UOM,
NULL AS FLUID_LOAD,NULL AS	FLUID_LOAD_UOM,NULL AS EQ_WEIGHT,NULL AS	BUOYONT_ROD_WEIGHT_UOM,NULL AS FRICTION_LOAD,NULL AS FRICTION_LOAD_UOM,NULL AS PO_FLUID_LOAD,
NULL AS PO_FLUID_LOAD_UOM,NULL AS FLUID_LEVEL,NULL AS CALC_FLUID_LEVEL_UOM,NULL AS INTAKE_PRESSURE,NULL AS INTAKE_PRESS_UOM,NULL AS	PUMP_CONDITION,
cast(DWC.WELL_OR_COMPLETION_ID as string)AS	ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string) AS	ENTITY_NAME,
NULL AS	SOURCE,
NULL AS	ROW_QUALITY,
NULL AS	ROW_CHANGED_BY,
cast(PR.FORMATTEDDATE AS timestamp) AS	ROW_CHANGED_DATE,
cast(PR.FORMATTEDDATE AS timestamp) AS	ROW_CREATED_DATE,
NULL AS	ROW_CREATED_BY,
NULL AS	ACTIVE_IND,
NULL AS ROD_PUMP_ID	
 FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP PR
 INNER JOIN PDMDimSrc.DimWellCompletion DWC ON PR.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE CAST(PR.PERIOD_ID AS string) = 'D'AND cast(PR.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Rod Pump','Sucker Rod')
)T GROUP BY T.MEASUREMENT_DATE,T.ENTITY_ID,T.ENTITY_NAME
);

CREATE VIEW ROD_PUMP_SETTINGS
(
MEASUREMENT_DATE	timestamp	NOT NULL,
LOAD_SET_POINT	bigdecimal(15,4),
LOAD_SET_POINT_UOM	string(20),
POSITION_SET_POINT	bigdecimal(15,4),
POSITION_SET_POINT_UOM	string(20),
STROKE_BEFORE_OFF	bigdecimal(15,4),
STROKE_BEFORE_OFF_UOM	string(20),
PUMP_DESG_LIQUID	bigdecimal(15,4),
PUMP_DESG_LIQUID_UOM	string(20),
PEAK_LOAD	bigdecimal(15,4),
PEAK_LOAD_UOM	string(20),
MIN_LOAD	bigdecimal(15,4),
MIN_LOAD_UOM	string(20),
ENTITY_ID	string(40)	NOT NULL,
ENTITY_NAME	string(255),
SOURCE	string(100),
ROW_QUALITY	string(100),
ROW_CREATED_DATE	string(100),
ROW_CREATED_BY	timestamp	,
ROW_CHANGED_DATE	timestamp	,
ROW_CHANGED_BY	string(100),
ACTIVE_IND	string	(1),
ROD_PUMP_ID	string(40)	NOT NULL,
CONSTRAINT PK_ROD_PUMP_SET_DIM PRIMARY KEY (ROD_PUMP_ID))
OPTIONS (UPDATABLE 'FALSE',ROD_PUMP_SETTINGS.IMPLEMENTED 'TRUE')
AS
(
SELECT
cast(FPS.FORMATTEDDATE AS timestamp),
FPS.LOAD_SET_POINT,
cast(FPS.SETPOINT_UOM AS string),
FPS.POSITION_SET_POINT,
cast(FPS.POS_UOM AS string),
FPS.STROKE,
cast(FPS.STROKE_UOM AS string),
FPS.DESG_LIQUID_RATE,
cast(FPS.OIL_UOM AS string),
FPS.MAX_LOAD,
cast(FPS.LOAD_UOM AS string),
FPS.MIN_LOAD,
cast(FPS.LOAD_UOM AS string),
cast(DWC.WELL_OR_COMPLETION_ID as string),
cast(DWC.WELL_COMPLETION_NAME as string),
NULL AS SOURCE,
NULL AS ROW_QUALITY,
NULL AS ROW_CHANGED_BY,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CHANGED_DATE,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CREATED_DATE,
NULL AS ROW_CREATED_BY,
NULL AS ACTIVE_IND,
cast(FPS.EQ_OPR_MEAS_KEY as string)
FROM 
PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS FPS
LEFT OUTER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Rod Pump','Sucker Rod')
);

CREATE VIEW ROD_PUMP_DYNACARD_DETAILS
(
MEASUREMENT_DATE	timestamp	NOT NULL,
CYCLE_NUM	integer,
SURF_LOAD	bigdecimal(15,4),
SURF_LOAD_UOM	string(20),
SURF_POSITION	bigdecimal(15,4),
SURF_POSITION_UOM	string(20),
ENTITY_ID	string(40)	NOT NULL,
DH_LOAD	bigdecimal(15,4),
DH_LOAD_UOM	string(20),
DH_POSITION	bigdecimal(15,4),
DH_POSITION_UOM	string(20),
ENTITY_NAME	string(255),
SOURCE	string(100),
ROW_QUALITY	string(100),
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY	string(100),
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY	string(100),
ACTIVE_IND	string	(1),
DYNACARD_ID	string(40)	NOT NULL,
CONSTRAINT PK_ROD_PUMP_DYN_DIM PRIMARY KEY (DYNACARD_ID))
OPTIONS (UPDATABLE 'FALSE',ROD_PUMP_DYNACARD_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT
cast(FPS.FORMATTEDDATE AS timestamp),
cast(FPS.EQ_RUN_NUM as integer),
FPS.SURF_LOAD,
cast(FPS.LOAD_UOM AS string),
FPS.SURF_POSITION,
cast(FPS.POS_UOM AS string),
cast(DWC.WELL_OR_COMPLETION_ID as string),
FPS.DH_LOAD,
cast(FPS.LOAD_UOM AS string),
FPS.DH_POSITION,
cast(FPS.POS_UOM AS string),
cast(DWC.WELL_COMPLETION_NAME as string),
NULL AS SOURCE,
NULL AS ROW_QUALITY,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CREATED_DATE,
NULL AS ROW_CREATED_BY,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CHANGED_DATE,
NULL AS ROW_CHANGED_BY,
NULL AS ACTIVE_IND,
cast(FPS.EQ_OPR_MEAS_KEY as string)
FROM 
PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS FPS
LEFT OUTER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Rod Pump','Sucker Rod')
);

CREATE VIEW ROD_PUMP_STATUS
(
MEASUREMENT_DATE	timestamp	NOT NULL,
OIL	bigdecimal(15,4),
OIL_UOM	string(20),
GAS	bigdecimal(15,4),
GAS_UOM	string(20),
WATER	bigdecimal(15,4),
WATER_UOM	string(20),
RECENT_CYCLE_MAX_LOAD bigdecimal(15,4),
RECENT_CYCLE_MAX_LOAD_UOM	string(20),
RECENT_CYCLE_MIN_LOAD bigdecimal(15,4),
RECENT_CYCLE_MIN_LOAD_UOM	string(20),
RUNTIME	bigdecimal(15,4),
RUNTIME_UOM	string(20),
SPM	bigdecimal(15,4),
SPM_UOM	string(20),
NUM_CYCLES bigdecimal (15,4),
PUMP_STATUS string(100),
RECENT_CYCLE_TIME timestamp,
DIR_ROTATION string (100),
ENTITY_ID	string(40)	NOT NULL,
ENTITY_NAME	string(255),
ROD_PUMP_ID	string(40)	NOT NULL,
CONSTRAINT PK_ROD_PUMP_DIM PRIMARY KEY (ROD_PUMP_ID))
OPTIONS (UPDATABLE 'FALSE',ROD_PUMP_SETTINGS.IMPLEMENTED 'TRUE')
AS
(
SELECT T.MEAS_DATE,MAX(T.OIL_ALLOCATED_VOLUME),MAX(T.OIL_UOM),MAX(T.GAS_ALLOCATED_VOLUME),MAX(T.GAS_UOM),MAX(T.WATER_ALLOCATED_VOLUME),MAX(T.WATER_UOM),
MAX(T.PEAK_LOAD),MAX(T.PEAK_LOAD_UOM),MIN(T.MIN_LOAD),MAX(T.MIN_LOAD_UOM),MAX(T.RUNTIME),MAX(T.RUNTIME_UOM),MAX(T.SPM),MAX(T.SPM_UOM),T.CYCLE_NUM,MAX(T.PUMP_STATUS),MAX(T.CYCLE_TIME),
MAX(T.DIR_ROT),T.ENTITY_ID,T.ENTITY_NAME,UUID() AS ROD_PUMP_STATUS_ID 
FROM
(
SELECT
cast(PR.FORMATTEDDATE AS timestamp) AS MEAS_DATE,
PR.OIL_ALLOCATED_VOLUME,
cast(PR.OIL_VOLUME_UOM AS string) AS OIL_UOM,
PR.GAS_ALLOCATED_VOLUME,
cast(PR.GAS_VOLUME_UOM AS string) AS GAS_UOM,
PR.WATER_ALLOCATED_VOLUME,
cast(PR.WATER_VOLUME_UOM AS string) AS WATER_UOM,
NULL AS PEAK_LOAD,NULL AS PEAK_LOAD_UOM,NULL AS MIN_LOAD,NULL AS MIN_LOAD_UOM,NULL AS RUNTIME,NULL AS RUNTIME_UOM,NULL AS SPM,NULL AS SPM_UOM,
FPS.EQ_RUN_NUM AS CYCLE_NUM,NULL AS PUMP_STATUS,NULL AS CYCLE_TIME,NULL AS DIR_ROT,cast(DWC.WELL_OR_COMPLETION_ID as string) AS ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string) AS ENTITY_NAME,NULL AS ROD_PUMP_STATUS_ID,
ROW_NUMBER() OVER (PARTITION BY FPS.W_WC_FAC_KEY,FPS.FORMATTEDDATE ORDER BY FPS.FORMATTEDDATE DESC, FPS.EQ_RUN_NUM DESC) ROW_NUM
FROM 
PDMDimSrc.VW_FACTPRODSUMMARY_APP AS PR
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON PR.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
LEFT OUTER JOIN PDMDimSrc.VW_EQ_OPR_MEASUREMENT FPS ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
			WHERE CAST(PR.PERIOD_ID AS string) = 'D'AND cast(PR.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Rod Pump','Sucker Rod')
UNION ALL
SELECT
cast(FPS.FORMATTEDDATE AS timestamp) AS MEAS_DATE,NULL AS OIL_ALLOCATED_VOLUME,NULL AS OIL_UOM,NULL AS GAS_ALLOCATED_VOLUME,NULL AS GAS_UOM,NULL AS WATER_ALLOCATED_VOLUME,NULL AS WATER_UOM,
FPS.MAX_LOAD AS PEAK_LOAD,
cast(FPS.LOAD_UOM AS string) AS PEAK_LOAD_UOM,
FPS.MIN_LOAD,
cast(FPS.LOAD_UOM AS string) AS MIN_LOAD_UOM,
FPS.RUNTIME,
cast(FPS.RUNTIME_UOM AS string) AS RUNTIME_UOM,
FPS.SPM,
cast(FPS.SPM_UOM AS string) AS SPM_UOM,
FPS.EQ_RUN_NUM AS CYCLE_NUM,
cast(FPS.PUMP_STATUS AS string) AS PUMP_STATUS,
cast(FPS.FORMATTEDDATE AS timestamp) AS CYCLE_TIME,
cast(FPS.PUMP_DIR_ROTATION AS string) AS DIR_ROT,
cast(DWC.WELL_OR_COMPLETION_ID as string) AS ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string) AS ENTITY_NAME,
cast(FPS.EQ_OPR_MEAS_KEY as string) AS ROD_PUMP_STATUS_ID,
ROW_NUMBER() OVER (PARTITION BY FPS.W_WC_FAC_KEY,FPS.FORMATTEDDATE ORDER BY FPS.FORMATTEDDATE DESC, FPS.EQ_RUN_NUM DESC) ROW_NUM
FROM 
PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS FPS
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('Rod Pump','Sucker Rod')

)T WHERE T.ROW_NUM = 1 GROUP BY T.MEAS_DATE,T.CYCLE_NUM,T.ENTITY_ID,T.ENTITY_NAME
);

CREATE VIEW ESP_STATUS
(
MEASUREMENT_DATE	timestamp	,
DRIVE_START_TIME	timestamp	,
RECENT_DRIVE_STATUS	string(100)	NOT NULL,
DRIVE_SPEED bigdecimal(15,4),
SPEED_UOM string(20),
DRIVE_CURRENT bigdecimal(15,4),
CURRENT_UOM string (20),
OIL	bigdecimal(15,4),
OIL_UOM	string(20),
GAS	bigdecimal(15,4),
GAS_UOM	string(20),
WATER	bigdecimal(15,4),
WATER_UOM	string(20),
ENTITY_ID	string(100)	NOT NULL,
ENTITY_NAME	string(255),
ESP_ID	string(40)	NOT NULL,
CONSTRAINT PK_ESP_STATUS PRIMARY KEY (ESP_ID))
OPTIONS (UPDATABLE 'FALSE',ESP_STATUS.IMPLEMENTED 'TRUE')
AS
(
SELECT max(T.MEAS_DATE) as MEASUREMENT_DATE,MAX(T.DSTART_DATE)DRIVE_START_TIME,MAX(T.DRIVE_STATUS)RECENT_DRIVE_STATUS,MAX(T.SPEED)DRIVE_SPEED,MAX(T.SPEED_UOM)SPEED_UOM,
AVG(T.DRIVE_CURRENT)DRIVE_CURRENT,MAX(T.CURRENT_UOM)CURRENT_UOM,MAX(T.OIL)OIL,MAX(T.OIL_UOM)OIL_UOM,MAX(T.GAS)GAS,MAX(T.GAS_UOM)GAS_UOM,
MAX(T.WATER)WATER,MAX(T.WATER_UOM)WATER_UOM,T.ENTITY_ID,T.ENTITY_NAME,UUID() AS ESP_ID
FROM(
SELECT
cast(FPS.FORMATTEDDATE AS timestamp) AS MEAS_DATE,cast(FPS.FORMATTEDDATE_EFF AS timestamp) AS DSTART_DATE,cast(FPS.EQ_OPR_STATUS AS string) AS DRIVE_STATUS,
FPS.SPEED,cast(FPS.SPEED_UOM AS string) AS SPEED_UOM,FPS.CURRENT_AMP AS DRIVE_CURRENT,cast(FPS.CURRENT_UOM AS string) AS CURRENT_UOM,
NULL AS OIL,NULL AS OIL_UOM,NULL AS GAS,NULL AS GAS_UOM,NULL AS WATER,NULL AS WATER_UOM,
cast(DWC.WELL_OR_COMPLETION_ID as string) AS ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string) AS ENTITY_NAME,
cast(FPS.EQ_OPR_MEAS_KEY as string) AS ESP_ID,
ROW_NUMBER() OVER (PARTITION BY FPS.W_WC_FAC_KEY, FPS.FormattedDate ORDER BY FPS.FormattedDate DESC) ROW_NUM
FROM 
PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS FPS
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('ESP','Submersible')
UNION ALL
SELECT
cast(PR.FORMATTEDDATE AS timestamp) AS MEAS_DATE,NULL AS DSTART_DATE,NULL AS DRIVE_STATUS,NULL AS SPEED,NULL AS SPEED_UOM,NULL AS DRIVE_CURRENT,NULL AS CURRENT_UOM,
PR.OIL_ALLOCATED_VOLUME AS OIL,
cast(PR.OIL_VOLUME_UOM AS string) AS OIL_UOM,
PR.GAS_ALLOCATED_VOLUME AS GAS,
cast(PR.GAS_VOLUME_UOM AS string) AS GAS_UOM,
PR.WATER_ALLOCATED_VOLUME AS WATER,
cast(PR.WATER_VOLUME_UOM AS string) AS WATER_UOM,
cast(DWC.WELL_OR_COMPLETION_ID as string) AS ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string) AS ENTITY_NAME,
NULL AS ESP_ID,
ROW_NUMBER() OVER (PARTITION BY PR.W_WC_FAC_KEY, PR.FormattedDate ORDER BY PR.FormattedDate DESC) ROW_NUM
FROM 
PDMDimSrc.VW_FACTPRODSUMMARY_APP AS PR
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON PR.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE CAST(PR.PERIOD_ID AS string) = 'D' AND cast(PR.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('ESP','Submersible')

)T WHERE T.ROW_NUM = 1 GROUP BY T.ENTITY_ID,T.ENTITY_NAME
);

CREATE VIEW ESP_DETAILS
(
MEASUREMENT_DATE	timestamp	NOT NULL,
DRIVE_START_TIME	timestamp	,
DRIVE_STATUS	string(100),
DRIVE_STOP_TIME	timestamp	,
ROD_SPEED	bigdecimal(15,4),
DRIVE_CURRENT	bigdecimal(15,4),
DRIVE_REMARK	string	(2000),
OIL	bigdecimal(15,4),
OIL_UOM	string(20),
GAS	bigdecimal(15,4),
GAS_UOM	string(20),
WATER	bigdecimal(15,4),
WATER_UOM	string(20),
ENTITY_ID	string	(40)	NOT NULL,
ENTITY_NAME	string	(255),
SOURCE	string(100),
ROW_QUALITY	string(100),
ROW_CHANGED_BY	string(100),
ROW_CHANGED_DATE	timestamp	,
ROW_CREATED_DATE	timestamp	,
ROW_CREATED_BY	string(100),
ACTIVE_IND	string	(1),
ESP_ID	string	(40)	NOT NULL,
CONSTRAINT PK_ESP_DET_DIM PRIMARY KEY (ESP_ID))
OPTIONS (UPDATABLE 'FALSE',ESP_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT T.MEASUREMENT_DATE,MAX(T.FORMATTEDDATE_EFF)DRIVE_START_TIME,MAX(T.EQ_OPR_STATUS)DRIVE_STATUS,MAX(T.FORMATTEDDATE_EXP)DRIVE_STOP_TIME,
MAX(T.ROD_SPEED) ROD_SPEED,MAX(T.DRIVE_CURRENT),MAX(T.DRIVE_REMARK),MAX(T.OIL)OIL,MAX(T.OIL_UOM)OIL_UOM,
MAX(T.GAS)GAS,MAX(T.GAS_UOM)GAS_UOM,MAX(T.WATER)WATER,MAX(T.WATER_UOM)WATER_UOM,T.ENITY_ID,T.ENTITY_NAME,
NULL AS SOURCE,NULL AS ROW_QUALITY,NULL AS ROW_CHANGED_BY,MAX(T.ROW_CHANGED_DATE)ROW_CHANGED_DATE,MAX(T.ROW_CREATED_DATE)ROW_CREATED_DATE,
NULL AS ROW_CREATED_BY,NULL AS ACTIVE_IND,UUID() AS EQ_OPR_MEAS_KEY
FROM(
SELECT
cast(FPS.FORMATTEDDATE AS timestamp) AS MEASUREMENT_DATE,
cast(FPS.FORMATTEDDATE_EFF AS timestamp) AS FORMATTEDDATE_EFF,
cast(FPS.EQ_OPR_STATUS AS string) AS EQ_OPR_STATUS,
cast(FPS.FORMATTEDDATE_EXP AS timestamp) AS FORMATTEDDATE_EXP,FPS.SPEED AS ROD_SPEED,FPS.CURRENT_AMP AS DRIVE_CURRENT,cast(FPS.REMARKS AS string)DRIVE_REMARK,
NULL AS OIL,NULL AS OIL_UOM,NULL AS GAS,NULL AS GAS_UOM,NULL AS WATER,NULL AS WATER_UOM,cast(DWC.WELL_OR_COMPLETION_ID as string) AS ENITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string)AS ENTITY_NAME,NULL AS SOURCE,NULL AS ROW_QUALITY,NULL AS ROW_CHANGED_BY,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CHANGED_DATE,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CREATED_DATE,
NULL AS ROW_CREATED_BY,NULL AS ACTIVE_IND,
cast(FPS.EQ_OPR_MEAS_KEY as string) AS EQ_OPR_MEAS_KEY
FROM 
PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS FPS
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('ESP','Submersible')
UNION ALL
SELECT
cast(PR.FORMATTEDDATE AS timestamp),
NULL,NULL,NULL,NULL AS SPEED,NULL AS DRIVE_CURRENT,NULL,
PR.OIL_ALLOCATED_VOLUME AS OIL,
cast(PR.OIL_VOLUME_UOM AS string) AS OIL_UOM,
PR.GAS_ALLOCATED_VOLUME AS GAS,
cast(PR.GAS_VOLUME_UOM AS string) AS GAS_UOM,
PR.WATER_ALLOCATED_VOLUME AS WATER,
cast(PR.WATER_VOLUME_UOM AS string) AS WATER_UOM,
cast(DWC.WELL_OR_COMPLETION_ID as string) AS ENITY_ID,
cast(DWC.WELL_COMPLETION_NAME as string)AS ENITY_NAME,
NULL AS SOURCE,NULL AS ROW_QUALITY,NULL AS ROW_CHANGED_BY,
cast(PR.FORMATTEDDATE AS timestamp) AS ROW_CHANGED_DATE,
cast(PR.FORMATTEDDATE AS timestamp) AS ROW_CREATED_DATE,
NULL AS ROW_CREATED_BY,NULL AS ACTIVE_IND,NULL
FROM 
PDMDimSrc.VW_FACTPRODSUMMARY_APP AS PR
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC ON PR.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE CAST(PR.PERIOD_ID AS string) = 'D'AND cast(PR.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('ESP','Submersible')
)T GROUP BY T.MEASUREMENT_DATE,T.ENITY_ID,T.ENTITY_NAME
);

CREATE VIEW ESP_OPERATIONS
(
OPERATION_DATE	timestamp	NOT NULL,
OPERATION_TYPE	string(100)	NOT NULL,
OPERATION_BY	string(100)	NOT NULL,
REMARK	string	(2000),
ENTITY_ID	string(40)	NOT NULL,
ENTITY_NAME	string	(255),
 SOURCE	string(100),
 ROW_QUALITY	string(100),
 ROW_CHANGED_BY	string(100),
 ROW_CHANGED_DATE	timestamp	,
 ROW_CREATED_DATE	timestamp	,
 ROW_CREATED_BY	string(100),
 ACTIVE_IND	string	(1),
OPERATION_ID	string(40)	NOT NULL,
 CONSTRAINT PK_ESP_OP_DIM PRIMARY KEY (OPERATION_ID))
OPTIONS (UPDATABLE 'FALSE',ESP_OPERATIONS.IMPLEMENTED 'TRUE')
AS
(
SELECT
cast(FPS.FORMATTEDDATE AS timestamp),
cast(FPS.EQ_OPR_TYPE AS string),
cast(FPS.EQ_OPR_BY AS string),
cast(FPS.REMARKS AS string),
cast(DWC.WELL_OR_COMPLETION_ID as string),
cast(DWC.WELL_COMPLETION_NAME as string),
NULL,
NULL,
NULL,
cast(FPS.FORMATTEDDATE AS timestamp),
cast(FPS.FORMATTEDDATE AS timestamp),
NULL,
NULL,
cast(FPS.EQ_OPR_MEAS_KEY as string)
FROM PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS FPS
LEFT OUTER JOIN PDMDimSrc.DimWellCompletion AS DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('ESP','Submersible')
);

CREATE VIEW ESP_OPERATION_DETAILS
(
OPERATION_DATE timestamp,
INTAKE_PRESSURE	bigdecimal (15,4),
INTAKE_PRESS_UOM	string (20),
DISCHARGE_PRESSURE	bigdecimal (15,4),
DISCHARGE_PRESS_UOM	string (20),
AVG_RATE_PRESSURE	bigdecimal (15,4),
AVG_RATE_PRESS_UOM	string (20),
PUMP_HEAD_GENERATED	bigdecimal (15,4),
PUMP_HEAD_GEN_UOM	string (20),
PUMP_POWER_REQ	bigdecimal (15,4),
POWER_UOM	string (20),
PUMP_EFFICIENCY	bigdecimal (15,4),
PUMP_EFF_UOM	string (20),
FREE_GAS_FRACTION	bigdecimal (15,4),
FREE_GAS_UOM	string (20),
MOTOR_AMPS_REQ	bigdecimal (15,4),
MOTOR_AMPS_UOM	string (20),
MOTOR_GENERATED	bigdecimal (15,4),
MOTOR_GEN_UOM	string (20),
MOTOR_EFFICIENCY	bigdecimal (15,4),
MOTOR_EFF_UOM	string (20),
MOTOR_TEMPERATURE bigdecimal (15,4),
TEMP_UOM string (20),
MOTOR_SPEED	bigdecimal (15,4),
MOTOR_SPEED_UOM	string (20),
SURF_VOLTAGE	bigdecimal (15,4),
SURF_VOLTAGE_UOM	string (20),
TORQUE_SHAFT	bigdecimal (15,4),
TORQUE_SHAFT_UOM	string (20),
RUNTIME	bigdecimal (15,4),
RUNTIME_UOM	string (20),
ENTITY_ID	string (40)	NOT NULL,
ENTITY_NAME	string	(255),
 SOURCE	string (100),
 ROW_QUALITY	string (100),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	,
 ROW_CREATED_DATE	timestamp	,
 ROW_CREATED_BY	string (100),
 ACTIVE_IND	string	(1),
OPERATION_ID	string (40),
OPERATION_DETAILS_ID	string (40)	NOT NULL,
 CONSTRAINT PK_ESP_OP_DET_DIM PRIMARY KEY (OPERATION_DETAILS_ID))
OPTIONS (UPDATABLE 'FALSE',ESP_OPERATION_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT
cast(FPS.FORMATTEDDATE AS timestamp),
FPS.INTAKE_PRESSURE,
cast(FPS.PRESSURE_UOM AS string),
FPS.DISCHARGE_PRESSURE,
cast(FPS.PRESSURE_UOM AS string),
FPS.RATE_PRESSURE,
cast(FPS.PRESSURE_UOM AS string),
FPS.PUMP_HEAD_COUNT,
cast(FPS.PRESSURE_UOM AS string),
FPS.PUMP_POWER,
cast(FPS.POWER_UOM AS string),
FPS.PUMP_EFFICIENCY,
cast(FPS.EFF_UOM AS string),
FPS.GAS_RATE,
cast(FPS.GAS_UOM AS string),
FPS.CURRENT_AMP,
cast(FPS.CURRENT_UOM AS string),
FPS.MOTOR_POWER,
cast(FPS.POWER_UOM AS string),
FPS.MOTOR_EFFICIENCY,
cast(FPS.EFF_UOM AS string),
FPS.MOTOR_TEMPERATURE,
cast(FPS.TEMP_UOM AS string),
FPS.SPEED,
cast(FPS.SPEED_UOM AS string),
FPS.VOLTAGE,
cast(FPS.VOLTAGE_UOM AS string),
FPS.TORQUE,
cast(FPS.TORQUE_UOM AS string),
FPS.RUNTIME,
cast(FPS.RUNTIME_UOM AS string),
cast(DWC.WELL_OR_COMPLETION_ID as string),
cast(DWC.WELL_COMPLETION_NAME as string),
NULL AS SOURCE,
NULL AS ROW_QUALITY,
NULL AS ROW_CHANGED_BY,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CHANGED_DATE,
cast(FPS.FORMATTEDDATE AS timestamp) AS ROW_CREATED_DATE,
NULL AS ROW_CREATED_BY,
NULL AS ACTIVE_IND,
NULL AS OPERATION_ID,
cast(FPS.EQ_OPR_MEAS_KEY as string)
FROM
PDMDimSrc.VW_EQ_OPR_MEASUREMENT AS FPS
LEFT OUTER JOIN PDMDimSrc.DIMWELLCOMPLETION AS DWC  ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) IN ('W') AND cast(DWC.PRODUCTION_METHOD AS string) IN ('ESP','Submersible')
);

CREATE VIEW WELL_TEST_ALLOCATION_DETAILS
(
TRANS_DATE timestamp NOT NULL,
OIL	bigdecimal(15,4),
OIL_UOM string(20),
GAS	bigdecimal(15,4),
GAS_UOM string(20),
WATER	bigdecimal(15,4),
WATER_UOM string(20),
LIQUID	bigdecimal(15,4),
CD_OIL bigdecimal(15,4),
CD_GAS bigdecimal(15,4),
CD_WATER bigdecimal(15,4),
CD_LIQUID bigdecimal(15,4),
TEST_OIL	bigdecimal(15,4),
TEST_GAS	bigdecimal(15,4),
TEST_WATER	bigdecimal(15,4),
TEST_LIQUID	bigdecimal(15,4),
 ENTITY_ID	string	(40) NOT NULL,
 ENTITY_NAME	string	(255),
   LEVEL1_ID string (40), 
 LEVEL1_NAME string (255), 
 LEVEL1_TYPE string (100), 
 LEVEL2_ID string (40), 
 LEVEL2_NAME string (255), 
 LEVEL2_TYPE string (100), 
 LEVEL3_ID string (40), 
 LEVEL3_NAME string (255), 
 LEVEL3_TYPE string (100), 
 LEVEL4_ID string (40), 
 LEVEL4_NAME string (255), 
 LEVEL4_TYPE string (100), 
 LEVEL5_ID string (40), 
 LEVEL5_NAME string (255), 
 LEVEL5_TYPE string (100), 
 LEVEL6_ID string (40), 
 LEVEL6_NAME string (255), 
 LEVEL6_TYPE  string (100),
 WELL_TEST_ALLOC_ID string (40) NOT NULL,
CONSTRAINT PK_WELL_TEST_ALLOC PRIMARY KEY (WELL_TEST_ALLOC_ID))
OPTIONS (UPDATABLE 'FALSE', WELL_TEST_ALLOCATION_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP),
FPS.OIL_ALLOCATED_VOLUME,
FPS.OIL_VOLUME_UOM,
FPS.GAS_ALLOCATED_VOLUME,
FPS.GAS_VOLUME_UOM,
FPS.WATER_ALLOCATED_VOLUME,
FPS.WATER_VOLUME_UOM,
FPS.LIQUID_ALLOC_VOLUME,
FPS.CD_OIL,
FPS.CD_GAS,
FPS.CD_WATER,
FPS.CD_LIQUID,
FPS.WELL_TEST_OIL_VOLUME,
FPS.WELL_TEST_GAS_VOLUME,
FPS.WELL_TEST_WATER_VOLUME,
FPS.WELL_TEST_LIQUID_VOLUME,
cast(DWC.WELL_OR_COMPLETION_ID AS string),
cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
 cast(AH.LEVEL1_ID AS string),
 cast(AH.LEVEL1_NAME AS string),
 cast(AH.LEVEL1_TYPE AS string),
 cast(AH.LEVEL2_ID AS string),
 cast(AH.LEVEL2_NAME AS string),
 cast(AH.LEVEL2_TYPE AS string),
 cast(AH.LEVEL3_ID AS string),
 cast(AH.LEVEL3_NAME AS string),
 cast(AH.LEVEL3_TYPE AS string),
 cast(AH.LEVEL4_ID AS string),
 cast(AH.LEVEL4_NAME AS string),
 cast(AH.LEVEL4_TYPE AS string),
 cast(AH.LEVEL5_ID AS string),
 cast(AH.LEVEL5_NAME AS string),
 cast(AH.LEVEL5_TYPE AS string),
 cast(AH.LEVEL6_ID AS string),
 cast(AH.LEVEL6_NAME AS string),
 cast(AH.LEVEL6_TYPE AS string),
cast(FPS.FACT_PROD_SUMMARY_KEY as string)
	FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS 
	INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
	LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AH ON DWC.DIM_ASSETHIERARCHY_KEY = AH.Dim_ASSETHIERARCHY_KEY
	WHERE cast(FPS.W_WC_FAC_IND AS string) = 'W' AND CAST(FPS.PERIOD_ID AS string) = 'D'
);

CREATE VIEW VOLUME_MEASUREMENTS
(
TRANS_DATE timestamp NOT NULL,
OIL	bigdecimal(15,4),
OIL_UOM string(20),
GAS	bigdecimal(15,4),
GAS_UOM string(20),
WATER	bigdecimal(15,4),
WATER_UOM string(20),
LIQUID	bigdecimal(15,4),
GAS_BOE	bigdecimal(15,4),
INJ_WATER	bigdecimal(15,4),
INJ_GAS bigdecimal(15,4),
GOR	bigdecimal(15,4),
GOR_UOM string(20),
WC	bigdecimal(15,4),
WC_UOM string(20),
WOR	bigdecimal(15,4),
WOR_UOM string(20),
OC	bigdecimal(15,4),
OC_UOM string(20),
OGR	bigdecimal(15,4),
OGR_UOM string(20),
TUBING_PRESSURE	bigdecimal(15,4),
CASING_PRESSURE	bigdecimal(15,4),
BHP	bigdecimal(15,4),
WHP	bigdecimal(15,4),
STATIC_PRESSURE	bigdecimal(15,4),
LINE_PRESSURE	bigdecimal(15,4),
PRESSURE_UOM string(20),
TUBING_TEMPERATURE	bigdecimal(15,4),
CASING_TEMPERATURE	bigdecimal(15,4),
BHT	bigdecimal(15,4),
WHT	bigdecimal(15,4),
STATIC_TEMPERATURE	bigdecimal(15,4),
LINE_TEMPERATURE	bigdecimal(15,4),
TEMPERATURE_UOM string(20),
 ENTITY_ID	string	(40) NOT NULL,
 ENTITY_NAME	string	(255),
 LATITUDE bigdecimal(10,4),
 LONGITUDE bigdecimal(10,4),
VOL_MEAS_ID string (40) NOT NULL,
CONSTRAINT PK_VOL_MEAS PRIMARY KEY (VOL_MEAS_ID))
OPTIONS (UPDATABLE 'FALSE', VOLUME_MEASUREMENT.IMPLEMENTED 'TRUE')
AS
(
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP),
FPS.OIL_ALLOCATED_VOLUME,
FPS.OIL_VOLUME_UOM,
FPS.GAS_ALLOCATED_VOLUME,
FPS.GAS_VOLUME_UOM,
FPS.WATER_ALLOCATED_VOLUME,
FPS.WATER_VOLUME_UOM,
FPS.LIQUID_ALLOC_VOLUME,
FPS.GAS_BOE,
FPS.WATER_INJ_VOLUME,
FPS.INJ_STEAM,
FPS.GOR,
FPS.GAS_VOLUME_UOM || '/' || FPS.OIL_VOLUME_UOM,
FPS.WCT,
FPS.WATER_VOLUME_UOM || '/' || FPS.OIL_VOLUME_UOM,
FPS.WOR,
FPS.WATER_VOLUME_UOM || '/' || FPS.OIL_VOLUME_UOM,
FPS.OCT,
FPS.OIL_VOLUME_UOM || '/' || FPS.WATER_VOLUME_UOM,
FPS.OGR,
FPS.OIL_VOLUME_UOM || '/' || FPS.GAS_VOLUME_UOM,
FPS.AVG_TUBING_PRESSURE,
FPS.AVG_CASING_PRESSURE,
FPS.AVG_BHOLE_PRESSURE,
FPS.AVG_WLHEAD_PRESSURE,
FPS.AVG_STATIC_PRESSURE,
FPS.AVG_LINE_PRESSURE,
FPS.PRESSURE_UOM,
FPS.AVG_TUBING_TEMPERATURE,
FPS.AVG_CASING_TEMPERATURE,
FPS.AVG_BHOLE_TEMPERATURE,
FPS.AVG_WLHEAD_TEMPERATURE,
FPS.AVG_LINE_TEMPERATURE,
FPS.AVG_STATIC_TEMPERATURE,
FPS.TEMP_UOM,
cast(DWC.WELL_OR_COMPLETION_ID AS string),
cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
DWC.SURFACE_LATITUDE,
DWC.SURFACE_LONGITUDE,
cast(FPS.FACT_PROD_SUMMARY_KEY as string)
	FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS 
	INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
	WHERE cast(FPS.W_WC_FAC_IND AS string) = 'W' AND CAST(FPS.PERIOD_ID AS string) = 'D'
);

CREATE VIEW DAILY_PRODUCTION_VOLUME
(
MEASUREMENT_DATE timestamp NOT NULL,
PRODUCT_NAME string (100) NOT NULL,
VOLUME	bigdecimal(15,4),
VOLUME_UOM string(20),
POTENTIAL_VOLUME bigdecimal(15,4),
CUM_VOLUME bigdecimal(15,4),
POTENTIAL_CUM_VOLUME bigdecimal(15,4),
 ENTITY_ID	string	(40) NOT NULL,
 ENTITY_NAME	string	(255),
  LEVEL1_ID string (40), 
 LEVEL1_NAME string (255), 
 LEVEL1_TYPE string (100), 
 LEVEL2_ID string (40), 
 LEVEL2_NAME string (255), 
 LEVEL2_TYPE string (100), 
 LEVEL3_ID string (40), 
 LEVEL3_NAME string (255), 
 LEVEL3_TYPE string (100), 
 LEVEL4_ID string (40), 
 LEVEL4_NAME string (255), 
 LEVEL4_TYPE string (100), 
 LEVEL5_ID string (40), 
 LEVEL5_NAME string (255), 
 LEVEL5_TYPE string (100), 
 LEVEL6_ID string (40), 
 LEVEL6_NAME string (255), 
 LEVEL6_TYPE  string (100),
PRODUCTION_STATUS string (100), 
 OPERATING_STATUS string (100), 
 PRIMARY_PRODUCT string (100), 
 PRODUCTION_METHOD string (100), 
 PRODUCTION_START_DATE timestamp,
 SPUD_DATE timestamp, 
PROD_VOL_ID string (40) NOT NULL,
CONSTRAINT PK_DLY_PROD_VOL PRIMARY KEY (ENTITY_ID,MEASUREMENT_DATE,PRODUCT_NAME))
OPTIONS (UPDATABLE 'FALSE', DAILY_PRODUCTION_VOLUME.IMPLEMENTED 'TRUE')
AS
(
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS MEASUREMENT_DATE,
'Oil' AS PRODUCT_NAME,FPS.OIL_ALLOCATED_VOLUME AS VOLUME,
CASE FPS.OIL_VOLUME_UOM WHEN NULL THEN 'bbl' ELSE   FPS.OIL_VOLUME_UOM END AS VOL_UOM,FPS.OIL_PREDICTED_VOLUME AS POT_VOL,
FPS.CUM_OIL_VOLUME AS CUM_VOL,FPS.CUM_OIL_POT AS CUM_POT_VOL,
cast(DWC.WELL_OR_COMPLETION_ID AS string) AS ENTITY_ID,
cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
 AH.LEVEL1_ID, AH.LEVEL1_NAME, AH.LEVEL1_TYPE, AH.LEVEL2_ID, AH.LEVEL2_NAME,
 AH.LEVEL2_TYPE, AH.LEVEL3_ID, AH.LEVEL3_NAME, AH.LEVEL3_TYPE, AH.LEVEL4_ID,
 AH.LEVEL4_NAME, AH.LEVEL4_TYPE, AH.LEVEL5_ID, AH.LEVEL5_NAME, AH.LEVEL5_TYPE,
 AH.LEVEL6_ID, AH.LEVEL6_NAME, AH.LEVEL6_TYPE, cast(DWC.PRODUCTION_STATUS AS string) AS PRODUCTION_STATUS,
cast(DWC.OPERATING_STATUS AS string) AS OPERATING_STATUS,cast(DWC.PRIMARY_PRODUCT as string) AS PRIMARY_PRODUCT,
cast(DWC.PRODUCTION_METHOD as string) AS PRODUCTION_METHOD,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,5,2),'-'),SUBSTRING(DWC.PRODUCTION_START_DATE_ID,7,2))) AS TIMESTAMP) AS PROD_START_DATE,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,5,2),'-'),SUBSTRING(DWC.SPUD_DATE_ID,7,2))) AS TIMESTAMP) AS SPUD_DATE,
cast(FPS.FACT_PROD_SUMMARY_KEY as string) AS VOL_KEY
FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS 
INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AH ON DWC.DIM_ASSETHIERARCHY_KEY = AH.Dim_ASSETHIERARCHY_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) = 'W' AND cast(FPS.PERIOD_ID AS string) = 'D'
UNION ALL 
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS MEASUREMENT_DATE,
'Gas' AS PRODUCT_NAME,FPS.GAS_ALLOCATED_VOLUME AS VOLUME,
CASE FPS.GAS_VOLUME_UOM WHEN NULL THEN 'mcf' ELSE   FPS.GAS_VOLUME_UOM END AS VOL_UOM,
FPS.GAS_PREDICTED_VOLUME AS POT_VOL,FPS.CUM_GAS_VOLUME AS CUM_VOL,FPS.CUM_GAS_POT AS CUM_POT_VOL,
cast(DWC.WELL_OR_COMPLETION_ID AS string) AS ENTITY_ID,cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
 AH.LEVEL1_ID, AH.LEVEL1_NAME, AH.LEVEL1_TYPE, AH.LEVEL2_ID, AH.LEVEL2_NAME,
 AH.LEVEL2_TYPE, AH.LEVEL3_ID, AH.LEVEL3_NAME, AH.LEVEL3_TYPE, AH.LEVEL4_ID,
 AH.LEVEL4_NAME, AH.LEVEL4_TYPE, AH.LEVEL5_ID, AH.LEVEL5_NAME, AH.LEVEL5_TYPE,
 AH.LEVEL6_ID, AH.LEVEL6_NAME, AH.LEVEL6_TYPE,  cast(DWC.PRODUCTION_STATUS AS string) AS PRODUCTION_STATUS,
 cast(DWC.OPERATING_STATUS AS string) AS OPERATING_STATUS,cast(DWC.PRIMARY_PRODUCT as string) AS PRIMARY_PRODUCT,
cast(DWC.PRODUCTION_METHOD as string) AS PRODUCTION_METHOD,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,5,2),'-'),SUBSTRING(DWC.PRODUCTION_START_DATE_ID,7,2))) AS TIMESTAMP) AS PROD_START_DATE,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,5,2),'-'),SUBSTRING(DWC.SPUD_DATE_ID,7,2))) AS TIMESTAMP) AS SPUD_DATE,
cast(FPS.FACT_PROD_SUMMARY_KEY as string) AS VOL_KEY
FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS 
INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AH ON DWC.DIM_ASSETHIERARCHY_KEY = AH.Dim_ASSETHIERARCHY_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) = 'W' AND cast(FPS.PERIOD_ID AS string) = 'D'
UNION ALL 
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS MEASUREMENT_DATE,
'Water' AS PRODUCT_NAME,FPS.WATER_ALLOCATED_VOLUME AS VOLUME,
CASE FPS.WATER_VOLUME_UOM WHEN NULL THEN 'bbl' ELSE   FPS.WATER_VOLUME_UOM END AS VOL_UOM,
FPS.WATER_PREDICTED_VOLUME AS POT_VOL,FPS.CUM_WATER_VOLUME AS CUM_VOL,FPS.CUM_WATER_POT AS CUM_POT_VOL,
cast(DWC.WELL_OR_COMPLETION_ID AS string) AS ENTITY_ID,cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
 AH.LEVEL1_ID, AH.LEVEL1_NAME, AH.LEVEL1_TYPE, AH.LEVEL2_ID, AH.LEVEL2_NAME,
 AH.LEVEL2_TYPE, AH.LEVEL3_ID, AH.LEVEL3_NAME, AH.LEVEL3_TYPE, AH.LEVEL4_ID,
 AH.LEVEL4_NAME,AH.LEVEL4_TYPE,AH.LEVEL5_ID, AH.LEVEL5_NAME, AH.LEVEL5_TYPE,
 AH.LEVEL6_ID, AH.LEVEL6_NAME, AH.LEVEL6_TYPE,  cast(DWC.PRODUCTION_STATUS AS string) AS PRODUCTION_STATUS,
cast(DWC.OPERATING_STATUS AS string) AS OPERATING_STATUS,cast(DWC.PRIMARY_PRODUCT as string) AS PRIMARY_PRODUCT,
cast(DWC.PRODUCTION_METHOD as string) AS PRODUCTION_METHOD,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,5,2),'-'),SUBSTRING(DWC.PRODUCTION_START_DATE_ID,7,2))) AS TIMESTAMP) AS PROD_START_DATE,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,5,2),'-'),SUBSTRING(DWC.SPUD_DATE_ID,7,2))) AS TIMESTAMP) AS SPUD_DATE,
cast(FPS.FACT_PROD_SUMMARY_KEY as string) AS VOL_KEY
FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS 
INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AH ON DWC.DIM_ASSETHIERARCHY_KEY = AH.Dim_ASSETHIERARCHY_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) = 'W' AND cast(FPS.PERIOD_ID AS string) = 'D'
UNION ALL 
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS MEASUREMENT_DATE,
'Liquid' AS PRODUCT_NAME,FPS.LIQUID_ALLOC_VOLUME AS VOLUME,
CASE FPS.OIL_VOLUME_UOM WHEN NULL THEN 'bbl' ELSE   FPS.OIL_VOLUME_UOM END AS VOL_UOM,
FPS.LIQUID_PREDICTED_VOLUME AS POT_VOL,FPS.CUM_LIQUID AS CUM_VOL,FPS.CUM_LIQUID_POT AS CUM_POT_VOL,
cast(DWC.WELL_OR_COMPLETION_ID AS string) AS ENTITY_ID,cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
cast(DAH.LEVEL1_ID AS string),cast(DAH.LEVEL1_NAME AS string),cast(DAH.LEVEL1_TYPE AS string),cast(DAH.LEVEL2_ID AS string),
cast(DAH.LEVEL2_NAME AS string),cast(DAH.LEVEL2_TYPE AS string),cast(DAH.LEVEL3_ID AS string),cast(DAH.LEVEL3_NAME AS string),
cast(DAH.LEVEL3_TYPE AS string),cast(DAH.LEVEL4_ID AS string),cast(DAH.LEVEL4_NAME AS string),cast(DAH.LEVEL4_TYPE AS string),
cast(DAH.LEVEL5_ID AS string),cast(DAH.LEVEL5_NAME AS string),cast(DAH.LEVEL5_TYPE AS string),cast(DAH.LEVEL6_ID AS string),
cast(DAH.LEVEL6_NAME AS string),cast(DAH.LEVEL6_TYPE AS string), cast(DWC.PRODUCTION_STATUS AS string) AS PRODUCTION_STATUS,
cast(DWC.OPERATING_STATUS AS string) AS OPERATING_STATUS,cast(DWC.PRIMARY_PRODUCT as string) AS PRIMARY_PRODUCT,
cast(DWC.PRODUCTION_METHOD as string) AS PRODUCTION_METHOD,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,5,2),'-'),SUBSTRING(DWC.PRODUCTION_START_DATE_ID,7,2))) AS TIMESTAMP) AS PROD_START_DATE,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,5,2),'-'),SUBSTRING(DWC.SPUD_DATE_ID,7,2))) AS TIMESTAMP) AS SPUD_DATE,
cast(FPS.FACT_PROD_SUMMARY_KEY as string) AS VOL_KEY
FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS 
INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy DAH ON DWC.DIM_ASSETHIERARCHY_KEY = DAH.Dim_ASSETHIERARCHY_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) = 'W' AND cast(FPS.PERIOD_ID AS string) = 'D'
UNION ALL 
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS MEASUREMENT_DATE,
'GOR' AS PRODUCT_NAME,FPS.GOR AS VOLUME, 
CASE FPS.GAS_VOLUME_UOM WHEN NULL THEN 'mcf/bbl' ELSE
	CASE FPS.OIL_VOLUME_UOM WHEN NULL THEN 'mcf/bbl' ELSE FPS.GAS_VOLUME_UOM || '/' || FPS.OIL_VOLUME_UOM END
END AS VOL_UOM,
FPS.GOR_PREDICTED AS POT_VOL,FPS.CUM_GOR AS CUM_VOL,FPS.CUM_GOR_POT AS CUM_POT_VOL,
cast(DWC.WELL_OR_COMPLETION_ID AS string) AS ENTITY_ID,cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
 AH.LEVEL1_ID, AH.LEVEL1_NAME, AH.LEVEL1_TYPE, AH.LEVEL2_ID, AH.LEVEL2_NAME,
 AH.LEVEL2_TYPE, AH.LEVEL3_ID, AH.LEVEL3_NAME, AH.LEVEL3_TYPE, AH.LEVEL4_ID,
 AH.LEVEL4_NAME, AH.LEVEL4_TYPE, AH.LEVEL5_ID, AH.LEVEL5_NAME, AH.LEVEL5_TYPE,
 AH.LEVEL6_ID, AH.LEVEL6_NAME, AH.LEVEL6_TYPE,  cast(DWC.PRODUCTION_STATUS AS string) AS PRODUCTION_STATUS,
 cast(DWC.OPERATING_STATUS AS string) AS OPERATING_STATUS,cast(DWC.PRIMARY_PRODUCT as string) AS PRIMARY_PRODUCT,
cast(DWC.PRODUCTION_METHOD as string) AS PRODUCTION_METHOD,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,5,2),'-'),SUBSTRING(DWC.PRODUCTION_START_DATE_ID,7,2))) AS TIMESTAMP) AS PROD_START_DATE,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,5,2),'-'),SUBSTRING(DWC.SPUD_DATE_ID,7,2))) AS TIMESTAMP) AS SPUD_DATE,
cast(FPS.FACT_PROD_SUMMARY_KEY as string) AS VOL_KEY
FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS 
INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AH ON DWC.DIM_ASSETHIERARCHY_KEY = AH.Dim_ASSETHIERARCHY_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) = 'W' AND cast(FPS.PERIOD_ID AS string) = 'D'
UNION ALL 
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS MEASUREMENT_DATE,
'WC' AS PRODUCT_NAME,
CAST((FPS.WCT * 100) AS BIGDECIMAL) AS VOLUME,T.UOM_NAME AS VOL_UOM,
FPS.WCT_PREDICTED AS POT_VOL,FPS.CUM_WCT AS CUM_VOL,FPS.CUM_WCT_POT AS CUM_POT_VOL,
cast(DWC.WELL_OR_COMPLETION_ID AS string) AS ENTITY_ID,cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
 AH.LEVEL1_ID, AH.LEVEL1_NAME, AH.LEVEL1_TYPE, AH.LEVEL2_ID, AH.LEVEL2_NAME,
 AH.LEVEL2_TYPE, AH.LEVEL3_ID, AH.LEVEL3_NAME, AH.LEVEL3_TYPE, AH.LEVEL4_ID,
 AH.LEVEL4_NAME, AH.LEVEL4_TYPE, AH.LEVEL5_ID, AH.LEVEL5_NAME, AH.LEVEL5_TYPE,
 AH.LEVEL6_ID, AH.LEVEL6_NAME, AH.LEVEL6_TYPE,  cast(DWC.PRODUCTION_STATUS AS string) AS PRODUCTION_STATUS,
 cast(DWC.OPERATING_STATUS AS string) AS OPERATING_STATUS,cast(DWC.PRIMARY_PRODUCT as string) AS PRIMARY_PRODUCT,
cast(DWC.PRODUCTION_METHOD as string) AS PRODUCTION_METHOD,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,5,2),'-'),SUBSTRING(DWC.PRODUCTION_START_DATE_ID,7,2))) AS TIMESTAMP) AS PROD_START_DATE,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,5,2),'-'),SUBSTRING(DWC.SPUD_DATE_ID,7,2))) AS TIMESTAMP) AS SPUD_DATE,
cast(FPS.FACT_PROD_SUMMARY_KEY as string) AS VOL_KEY
FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS 
INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AH ON DWC.DIM_ASSETHIERARCHY_KEY = AH.Dim_ASSETHIERARCHY_KEY
LEFT OUTER JOIN (select UOM_NAME from PDMDimSrc.DIMUNITOFMEASURE WHERE UOM_NAME  = '%' AND METRIC_ENG_IND = 'E')T ON 1 = 1
WHERE cast(FPS.W_WC_FAC_IND AS string) = 'W' AND cast(FPS.PERIOD_ID AS string) = 'D'
);

CREATE VIEW MONTHLY_PRODUCTION_VOLUME
(
MEASUREMENT_DATE timestamp NOT NULL,
PRODUCT_NAME string (100) NOT NULL,
VOLUME	bigdecimal(15,4),
VOLUME_UOM string(20),
POTENTIAL_VOLUME bigdecimal(15,4),
CUM_VOLUME bigdecimal(15,4),
POTENTIAL_CUM_VOLUME bigdecimal(15,4),
 ENTITY_ID	string	(40) NOT NULL,
 ENTITY_NAME	string	(255),
  LEVEL1_ID string (40), 
 LEVEL1_NAME string (255), 
 LEVEL1_TYPE string (100), 
 LEVEL2_ID string (40), 
 LEVEL2_NAME string (255), 
 LEVEL2_TYPE string (100), 
 LEVEL3_ID string (40), 
 LEVEL3_NAME string (255), 
 LEVEL3_TYPE string (100), 
 LEVEL4_ID string (40), 
 LEVEL4_NAME string (255), 
 LEVEL4_TYPE string (100), 
 LEVEL5_ID string (40), 
 LEVEL5_NAME string (255), 
 LEVEL5_TYPE string (100), 
 LEVEL6_ID string (40), 
 LEVEL6_NAME string (255), 
 LEVEL6_TYPE  string (100), 
 PRODUCTION_STATUS string (100), 
 OPERATING_STATUS string (100), 
 PRIMARY_PRODUCT string (100), 
 PRODUCTION_METHOD string (100), 
 PRODUCTION_START_DATE timestamp,
 SPUD_DATE timestamp, 
PROD_VOL_ID string (40) NOT NULL,
CONSTRAINT PK_MLY_PROD_VOL PRIMARY KEY (ENTITY_ID,MEASUREMENT_DATE,PRODUCT_NAME))
OPTIONS (UPDATABLE 'FALSE', MONTHLY_PRODUCTION_VOLUME.IMPLEMENTED 'TRUE')
AS
(
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP),
'Oil' AS PRODUCT_NAME,FPS.OIL_ALLOCATED_VOLUME,FPS.OIL_VOLUME_UOM AS VOLUME_UOM,FPS.OIL_PREDICTED_VOLUME,
FPS.CUM_OIL_VOLUME,FPS.CUM_OIL_POT,
cast(DWC.WELL_OR_COMPLETION_ID AS string),cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
cast(DAH.LEVEL1_ID AS string),cast(DAH.LEVEL1_NAME AS string),cast(DAH.LEVEL1_TYPE AS string),
cast(DAH.LEVEL2_ID AS string),cast(DAH.LEVEL2_NAME AS string),cast(DAH.LEVEL2_TYPE AS string),
cast(DAH.LEVEL3_ID AS string),cast(DAH.LEVEL3_NAME AS string),cast(DAH.LEVEL3_TYPE AS string),
cast(DAH.LEVEL4_ID AS string),cast(DAH.LEVEL4_NAME AS string),cast(DAH.LEVEL4_TYPE AS string),
cast(DAH.LEVEL5_ID AS string),cast(DAH.LEVEL5_NAME AS string),cast(DAH.LEVEL5_TYPE AS string),
cast(DAH.LEVEL6_ID AS string),cast(DAH.LEVEL6_NAME AS string),cast(DAH.LEVEL6_TYPE AS string),
 cast(DWC.PRODUCTION_STATUS AS string) AS PRODUCTION_STATUS,cast(DWC.OPERATING_STATUS AS string) AS OPERATING_STATUS,
cast(DWC.PRIMARY_PRODUCT as string) AS PRIMARY_PRODUCT,cast(DWC.PRODUCTION_METHOD as string) AS PRODUCTION_METHOD,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,5,2),'-'),SUBSTRING(DWC.PRODUCTION_START_DATE_ID,7,2))) AS TIMESTAMP) AS PROD_START_DATE,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,5,2),'-'),SUBSTRING(DWC.SPUD_DATE_ID,7,2))) AS TIMESTAMP) AS SPUD_DATE,
cast(FPS.FACT_PROD_SUMMARY_KEY as string)
FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS 
INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy DAH ON DWC.DIM_ASSETHIERARCHY_KEY = DAH.Dim_ASSETHIERARCHY_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) = 'W' AND cast(FPS.PERIOD_ID AS string) = 'M'
UNION ALL 
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP),
'Gas' AS PRODUCT_NAME,FPS.GAS_ALLOCATED_VOLUME,FPS.GAS_VOLUME_UOM AS VOLUME_UOM,FPS.GAS_PREDICTED_VOLUME,
FPS.CUM_GAS_VOLUME,FPS.CUM_GAS_POT,cast(DWC.WELL_OR_COMPLETION_ID AS string),
cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
 AH.LEVEL1_ID, AH.LEVEL1_NAME, AH.LEVEL1_TYPE, AH.LEVEL2_ID, AH.LEVEL2_NAME,
 AH.LEVEL2_TYPE, AH.LEVEL3_ID, AH.LEVEL3_NAME, AH.LEVEL3_TYPE, AH.LEVEL4_ID,
 AH.LEVEL4_NAME, AH.LEVEL4_TYPE, AH.LEVEL5_ID, AH.LEVEL5_NAME, AH.LEVEL5_TYPE,
 AH.LEVEL6_ID, AH.LEVEL6_NAME, AH.LEVEL6_TYPE,
  cast(DWC.PRODUCTION_STATUS AS string) AS PRODUCTION_STATUS,cast(DWC.OPERATING_STATUS AS string) AS OPERATING_STATUS,
cast(DWC.PRIMARY_PRODUCT as string) AS PRIMARY_PRODUCT,cast(DWC.PRODUCTION_METHOD as string) AS PRODUCTION_METHOD,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,5,2),'-'),SUBSTRING(DWC.PRODUCTION_START_DATE_ID,7,2))) AS TIMESTAMP) AS PROD_START_DATE,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,5,2),'-'),SUBSTRING(DWC.SPUD_DATE_ID,7,2))) AS TIMESTAMP) AS SPUD_DATE,
cast(FPS.FACT_PROD_SUMMARY_KEY as string)
FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS 
INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AH ON DWC.DIM_ASSETHIERARCHY_KEY = AH.Dim_ASSETHIERARCHY_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) = 'W' AND cast(FPS.PERIOD_ID AS string) = 'M'
UNION ALL 
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP),
'Water' AS PRODUCT_NAME,FPS.WATER_ALLOCATED_VOLUME,FPS.WATER_VOLUME_UOM AS VOLUME_UOM,FPS.WATER_PREDICTED_VOLUME,
FPS.CUM_WATER_VOLUME,FPS.CUM_WATER_POT,cast(DWC.WELL_OR_COMPLETION_ID AS string),
cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
 AH.LEVEL1_ID, AH.LEVEL1_NAME, AH.LEVEL1_TYPE, AH.LEVEL2_ID, AH.LEVEL2_NAME,
 AH.LEVEL2_TYPE, AH.LEVEL3_ID, AH.LEVEL3_NAME, AH.LEVEL3_TYPE, AH.LEVEL4_ID,
 AH.LEVEL4_NAME, AH.LEVEL4_TYPE, AH.LEVEL5_ID, AH.LEVEL5_NAME, AH.LEVEL5_TYPE,
 AH.LEVEL6_ID, AH.LEVEL6_NAME, AH.LEVEL6_TYPE,
   cast(DWC.PRODUCTION_STATUS AS string) AS PRODUCTION_STATUS,cast(DWC.OPERATING_STATUS AS string) AS OPERATING_STATUS,
cast(DWC.PRIMARY_PRODUCT as string) AS PRIMARY_PRODUCT,cast(DWC.PRODUCTION_METHOD as string) AS PRODUCTION_METHOD,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,5,2),'-'),SUBSTRING(DWC.PRODUCTION_START_DATE_ID,7,2))) AS TIMESTAMP) AS PROD_START_DATE,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,5,2),'-'),SUBSTRING(DWC.SPUD_DATE_ID,7,2))) AS TIMESTAMP) AS SPUD_DATE,
cast(FPS.FACT_PROD_SUMMARY_KEY as string)
FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS 
INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AH ON DWC.DIM_ASSETHIERARCHY_KEY = AH.Dim_ASSETHIERARCHY_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) = 'W' AND cast(FPS.PERIOD_ID AS string) = 'M'
UNION ALL 
SELECT 
CAST(FPS.FORMATTEDDATE AS TIMESTAMP),
'Liquid' AS PRODUCT_NAME,FPS.LIQUID_ALLOC_VOLUME,FPS.OIL_VOLUME_UOM AS VOLUME_UOM,
FPS.LIQUID_PREDICTED_VOLUME,FPS.CUM_LIQUID,FPS.CUM_LIQUID_POT,cast(DWC.WELL_OR_COMPLETION_ID AS string),
cast(DWC.WELL_COMPLETION_NAME AS string) AS ENTITY_NAME,
 AH.LEVEL1_ID, AH.LEVEL1_NAME, AH.LEVEL1_TYPE, AH.LEVEL2_ID, AH.LEVEL2_NAME,
 AH.LEVEL2_TYPE, AH.LEVEL3_ID, AH.LEVEL3_NAME, AH.LEVEL3_TYPE,
 AH.LEVEL4_ID, AH.LEVEL4_NAME, AH.LEVEL4_TYPE, AH.LEVEL5_ID,
 AH.LEVEL5_NAME, AH.LEVEL5_TYPE, AH.LEVEL6_ID, AH.LEVEL6_NAME, AH.LEVEL6_TYPE, 
 cast(DWC.PRODUCTION_STATUS AS string) AS PRODUCTION_STATUS,cast(DWC.OPERATING_STATUS AS string) AS OPERATING_STATUS,
cast(DWC.PRIMARY_PRODUCT as string) AS PRIMARY_PRODUCT,cast(DWC.PRODUCTION_METHOD as string) AS PRODUCTION_METHOD,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.PRODUCTION_START_DATE_ID,5,2),'-'),SUBSTRING(DWC.PRODUCTION_START_DATE_ID,7,2))) AS TIMESTAMP) AS PROD_START_DATE,
CAST(CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,1,4),'-'), 
CONCAT(CONCAT(SUBSTRING(DWC.SPUD_DATE_ID,5,2),'-'),SUBSTRING(DWC.SPUD_DATE_ID,7,2))) AS TIMESTAMP) AS SPUD_DATE,
cast(FPS.FACT_PROD_SUMMARY_KEY as string)
FROM PDMDimSrc.VW_FACTPRODSUMMARY_APP FPS 
INNER JOIN PDMDimSrc.DimWellCompletion DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AH ON DWC.DIM_ASSETHIERARCHY_KEY = AH.Dim_ASSETHIERARCHY_KEY
WHERE cast(FPS.W_WC_FAC_IND AS string) = 'W' AND cast(FPS.PERIOD_ID AS string) = 'M'
);

CREATE VIEW PIPELINE_MEASUREMENT
(
MEASUREMENT_DATE TIMESTAMP NOT NULL,
MEASUREMENT_POINT STRING(100),
MEASUREMENT BIGDECIMAL (15,4),
MEASUREMENT_UOM STRING (20),
PIPELINE_NAME STRING (255),
PIPELINE_ID STRING(100),
PIPELINE_UNIT_NAME STRING (255),
ENTITY_ID STRING (100) NOT NULL,
 LEVEL1_ID STRING (40),
 LEVEL1_NAME STRING (255),
 LEVEL1_TYPE STRING (100),
 LEVEL2_ID STRING (40),
 LEVEL2_NAME STRING (255),
 LEVEL2_TYPE STRING (100),
 LEVEL3_ID STRING (40),
 LEVEL3_NAME STRING (255),
 LEVEL3_TYPE STRING (100),
 LEVEL4_ID STRING (40),
 LEVEL4_NAME STRING (255),
 LEVEL4_TYPE STRING (100),
 LEVEL5_ID STRING (40),
 LEVEL5_NAME STRING (255),
 LEVEL5_TYPE STRING (100),
 LEVEL6_ID STRING (40),
 LEVEL6_NAME STRING (255),
 LEVEL6_TYPE STRING (100),
PIPELINE_MEASUREMENT_ID STRING (40) NOT NULL,
CONSTRAINT PK_PIPELINE_MEAS PRIMARY KEY (PIPELINE_MEASUREMENT_ID))
OPTIONS (UPDATABLE 'FALSE',PIPELINE_MEASUREMENT.IMPLEMENTED 'TRUE')
AS
(
SELECT  
	CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS MEASUREMENT_DATE,
	'Pressure',	FPS.INLET_PRESSURE AS MEASUREMENT,	CAST(FPS.PRESSURE_UOM AS STRING) AS MEASUREMENT_UOM,
	CAST(DE.EQUIPMENT_NAME AS STRING) AS PIPELINE_NAME,	CAST(FPS.DIM_EQUIP_KEY AS STRING) AS PIPELINE_ID,
	CAST(DF.FACILITY_NAME AS STRING) AS PIPELINE_UNIT_NAME,	CAST(DF.FACILITY_ID AS STRING) AS ENTITY_ID,
	CAST(DAH.LEVEL1_ID AS STRING),CAST(DAH.LEVEL1_NAME AS STRING),	CAST(DAH.LEVEL1_TYPE AS STRING),
	CAST(DAH.LEVEL2_ID AS STRING),	CAST(DAH.LEVEL2_NAME AS STRING),	CAST(DAH.LEVEL2_TYPE AS STRING),
	CAST(DAH.LEVEL3_ID AS STRING),	CAST(DAH.LEVEL3_NAME AS STRING),	CAST(DAH.LEVEL3_TYPE AS STRING),
	CAST(DAH.LEVEL4_ID AS STRING),	CAST(DAH.LEVEL4_NAME AS STRING),	CAST(DAH.LEVEL4_TYPE AS STRING),
	CAST(DAH.LEVEL5_ID AS STRING),	CAST(DAH.LEVEL5_NAME AS STRING),	CAST(DAH.LEVEL5_TYPE AS STRING),
	CAST(DAH.LEVEL6_ID AS STRING),	CAST(DAH.LEVEL6_NAME AS STRING),	CAST(DAH.LEVEL6_TYPE AS STRING),	
	CAST(FPS.ASSET_MEAS_KEY AS STRING) AS PIPELINE_DETAILS_ID	
	FROM PDMDimSrc.VW_ASSETMEASUREMENT FPS
	INNER JOIN PDMDimSrc.DIMFACILITY DF ON FPS.W_WC_FAC_KEY = DF.DIM_FACILITY_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMEQUIPMENT DE ON FPS.DIM_EQUIP_KEY = DE.DIM_EQUIPMENT_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AS DAH ON DF.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
	WHERE cast(FPS.W_WC_FAC_IND AS string) = 'F' AND cast(DF.FACILITY_TYPE AS string) in ('Pipeline')
UNION ALL 
SELECT  
	CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS MEASUREMENT_DATE,
	'Temperature',	FPS.INLET_TEMPERATURE AS MEASUREMENT,
	CAST(FPS.TEMP_UOM AS STRING) AS MEASUREMENT_UOM,	CAST(DE.EQUIPMENT_NAME AS STRING) AS PIPELINE_NAME,
	CAST(FPS.DIM_EQUIP_KEY AS STRING) AS PIPELINE_ID,	CAST(DF.FACILITY_NAME AS STRING) AS PIPELINE_UNIT_NAME,
	CAST(DF.FACILITY_ID AS STRING) AS ENTITY_ID,	CAST(DAH.LEVEL1_ID AS STRING),
	CAST(DAH.LEVEL1_NAME AS STRING),	CAST(DAH.LEVEL1_TYPE AS STRING),	CAST(DAH.LEVEL2_ID AS STRING),
	CAST(DAH.LEVEL2_NAME AS STRING),	CAST(DAH.LEVEL2_TYPE AS STRING),	CAST(DAH.LEVEL3_ID AS STRING),
	CAST(DAH.LEVEL3_NAME AS STRING),	CAST(DAH.LEVEL3_TYPE AS STRING),	CAST(DAH.LEVEL4_ID AS STRING),
	CAST(DAH.LEVEL4_NAME AS STRING),	CAST(DAH.LEVEL4_TYPE AS STRING),	CAST(DAH.LEVEL5_ID AS STRING),
	CAST(DAH.LEVEL5_NAME AS STRING),	CAST(DAH.LEVEL5_TYPE AS STRING),	CAST(DAH.LEVEL6_ID AS STRING),
	CAST(DAH.LEVEL6_NAME AS STRING),	CAST(DAH.LEVEL6_TYPE AS STRING),		CAST(FPS.ASSET_MEAS_KEY AS STRING) AS PIPELINE_DETAILS_ID	
	FROM PDMDimSrc.VW_ASSETMEASUREMENT FPS
	INNER JOIN PDMDimSrc.DIMFACILITY DF ON FPS.W_WC_FAC_KEY = DF.DIM_FACILITY_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMEQUIPMENT DE ON FPS.DIM_EQUIP_KEY = DE.DIM_EQUIPMENT_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AS DAH ON DF.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
	WHERE cast(FPS.W_WC_FAC_IND AS string) = 'F' AND cast(DF.FACILITY_TYPE AS string) in ('Pipeline')
);

CREATE VIEW FORECAST_RESULTS
(
FORECASTID      string     (40) NOT NULL,
PRODUCT_TYPE    string (40),
CASE_NAME       string (255),
FIT_TYPE    string (40),
FIT_INITIAL_DECLINE_RATE    string (40),
FORECAST_TYPE    string (40),
FORECAST_INITIAL_DECLINE_RATE    string (40),
FORECAST_START_DATE    string (40),
FORECAST_START_RATE    string (40),
FORECAST_LIMITED_BY    string (40),
FORECAST_END_DATE    string (40),
FORECAST_END_RATE    string (40),
FORECAST_DURATION    string (40),
CUM_AT_FORECAST_START_DATE    string (40),
REMAINING_RESERVES    string (40),
TOTAL_RESERVES    string (40),
DQ			string(40),
SLOPE 		string(40),
INTERCEPT	string(40),
SED_ORIGINAL_DATE 		string(40),
SED_ORIGINAL_RATE	string(40),
SED_TAU 		string(40),
SED_EXPONENT	string(40),
WCT_FIT_SLOPE 		string(40),
WCT_FORECAST_SLOPE	string(40),
WCT_FORECAST_START 		string(40),
WCT_FORECAST_END	string(40),
WOR_FIT_SLOPE 		string(40),
WOR_FORECAST_SLOPE	string(40),
WOR_FORECAST_START 		string(40),
WOR_FORECAST_END	string(40),
GOR_FIT_SLOPE 		string(40),
GOR_FORECAST_SLOPE	string(40),
GOR_FORECAST_START 		string(40),
GOR_FORECAST_END	string(40),
CUM_GAS_FORECAST_START 		string(40),
GAS_REMAINING_RESERVES	string(40),
GAS_TOTAL_RESERVES	string(40),
OGR_FIT_SLOPE 		string(40),
OGR_FORECAST_SLOPE	string(40),
OGR_FORECAST_START 		string(40),
OGR_FORECAST_END	string(40),
CUM_OIL_FORECAST_START 		string(40),
OIL_REMAINING_RESERVES	string(40),
OIL_TOTAL_RESERVES	string(40),
CONSTRAINT PK_ForecastID PRIMARY KEY (FORECASTID))
OPTIONS (UPDATABLE 'FALSE',FORECAST_RESULTS.IMPLEMENTED 'TRUE')
AS
(
SELECT 
uuid() as FORECASTID,
Null as PRODUCT_TYPE,
Null as CASE_NAME,
Null as FIT_TYPE,
Null as FIT_INITIAL_DECLINE_RATE,
Null as FORECAST_TYPE,
Null as FORECAST_INITIAL_DECLINE_RATE,
Null as FORECAST_START_DATE,
Null as FORECAST_START_RATE,
Null as FORECAST_LIMITED_BY,
Null as FORECAST_END_DATE,
Null as FORECAST_END_RATE,
Null as FORECAST_DURATION,
Null as CUM_AT_FORECAST_START_DATE,
Null as REMAINING_RESERVES,
Null as TOTAL_RESERVES,
Null as DQ,
Null as SLOPE,
Null as INTERCEPT,
Null as SED_ORIGINAL_DATE,
Null as SED_ORIGINAL_RATE,
Null as SED_TAU,
Null as SED_EXPONENT,
Null as WCT_FIT_SLOPE,
Null as WCT_FORECAST_SLOPE,
Null as WCT_FORECAST_START,
Null as WCT_FORECAST_END,
Null as WOR_FIT_SLOPE,
Null as WOR_FORECAST_SLOPE,
Null as WOR_FORECAST_START,
Null as WOR_FORECAST_END,
Null as GOR_FIT_SLOPE,
Null as GOR_FORECAST_SLOPE,
Null as GOR_FORECAST_START,
Null as GOR_FORECAST_END,
Null as CUM_GAS_FORECAST_START,
Null as GAS_REMAINING_RESERVES,
Null as GAS_TOTAL_RESERVES,
Null as OGR_FIT_SLOPE,
Null as OGR_FORECAST_SLOPE,
Null as OGR_FORECAST_START,
Null as OGR_FORECAST_END,
Null as CUM_OIL_FORECAST_START,
Null as OIL_REMAINING_RESERVES,
Null as OIL_TOTAL_RESERVES
);

CREATE VIEW PRODUCTION_VOLUME_ROLLEDUP
(
 VOLUME_DATE	timestamp NOT NULL,
 OIL	bigdecimal	(15,4),
 OIL_POT	bigdecimal	(15,4),
 OIL_UOM	string	(20),
 GAS	bigdecimal	(15,4),
 GAS_POT	bigdecimal	(15,4),
 GAS_UOM	string	(20),
 WATER	bigdecimal	(15,4),
 WATER_POT	bigdecimal	(15,4),
 WATER_UOM	string	(20),
 LIQUID	bigdecimal	(15,4),
  LIQUID_POT	bigdecimal	(15,4),
 GOR	bigdecimal	(15,4),
 GOR_UOM	string	(20),
 WC	bigdecimal	(15,4),
 WC_UOM	string	(20),
 WOR	bigdecimal	(15,4),
 WOR_UOM	string	(20),
 GOR_POT	bigdecimal	(15,4),
 WC_POT	bigdecimal	(15,4),
 WOR_POT	bigdecimal	(15,4),
 OC	bigdecimal	(15,4),
 OC_UOM string(20),
 OC_POT	bigdecimal	(15,4),
 OGR	bigdecimal	(15,4),
 OGR_UOM string(20),
 OGR_POT	bigdecimal	(15,4),
CUM_OIL	bigdecimal	(15,4),
CUM_OIL_POT	bigdecimal	(15,4),
CUM_GAS	bigdecimal	(15,4),
CUM_GAS_POT	bigdecimal	(15,4),
CUM_WATER	bigdecimal	(15,4),
CUM_WATER_POT	bigdecimal	(15,4),
CUM_LIQUID	bigdecimal	(15,4),
CUM_LIQUID_POT	bigdecimal	(15,4),
CUM_GOR	bigdecimal	(15,4),
CUM_WC	bigdecimal	(15,4),
CUM_WOR	bigdecimal	(15,4),
CUM_GOR_POT	bigdecimal	(15,4),
CUM_WC_POT	bigdecimal	(15,4),
CUM_WOR_POT	bigdecimal	(15,4),
CUM_OC	bigdecimal	(15,4),
CUM_OC_POT	bigdecimal	(15,4),
CUM_OGR	bigdecimal	(15,4),
CUM_OGR_POT	bigdecimal	(15,4),
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255) NOT NULL,
 LEVEL6_TYPE 	string	(100),
CONSTRAINT PK_PRODVOL_RUP PRIMARY KEY (LEVEL6_NAME,VOLUME_DATE))
OPTIONS (UPDATABLE 'FALSE', PRODUCTION_VOLUME_ROLLEDUP.IMPLEMENTED 'TRUE')
AS
 ( 
 SELECT
cast(FPS.VOLUME_DATE AS timestamp) AS VOLUME_DATE,
FPS.OIL AS OIL, FPS.OIL_POT AS	OIL_POT, cast(FPS.OIL_UOM as string) AS OIL_UOM,
FPS.GAS AS	 GAS, FPS.GAS_POT AS	 GAS_POT,
cast(FPS.GAS_UOM as string) AS GAS_UOM, FPS.WATER AS WATER,
FPS.WATER_POT AS WATER_POT, cast(FPS.WATER_UOM as string) AS WATER_UOM,
FPS.LIQUID AS	LIQUID,FPS.LIQUID_POT AS	LIQUID_POT,
FPS.GOR, cast(FPS.GAS_UOM as string) || '/' || cast(FPS.OIL_UOM as string),
FPS.WCT, cast(FPS.WATER_UOM as string) || '/' || cast(FPS.OIL_UOM as string),
FPS.WOR, cast(FPS.WATER_UOM as string) || '/' || cast(FPS.OIL_UOM as string),
FPS.GOR_POT AS GOR_POT,FPS.WCT_POT AS	 WC_POT,
FPS.WOR_POT AS WOR_POT, FPS.OCT,
cast(FPS.OIL_UOM as string) || '/' || cast(FPS.WATER_UOM as string),
FPS.OCT_POT AS OC_POT,FPS.OGR,cast(FPS.OIL_UOM as string) || '/' || cast(FPS.GAS_UOM as string),
FPS.OGR_POT AS OGR_POT,FPS.CUM_OIL,FPS.CUM_OIL_POT,FPS.CUM_GAS,
FPS.CUM_GAS_POT,FPS.CUM_WATER,FPS.CUM_WATER_POT,FPS.CUM_LIQUID,
FPS.CUM_LIQUID_POT,FPS.CUM_GOR,FPS.CUM_WCT,FPS.CUM_WOR AS	CUM_WOR,
FPS.CUM_GOR_POT,FPS.CUM_WCT_POT,FPS.CUM_WOR_POT,FPS.CUM_OCT,
FPS.CUM_OCT_POT,FPS.CUM_OGR AS CUM_OGR,FPS.CUM_OGR_POT,
cast(FPS.LEVEL1_ID as string),cast(FPS.LEVEL1_NAME as string),
cast(FPS.LEVEL1_TYPE as string),cast(FPS.LEVEL2_ID as string),
cast(FPS.LEVEL2_NAME as string),cast(FPS.LEVEL2_TYPE as string),
cast(FPS.LEVEL3_ID as string),cast(FPS.LEVEL3_NAME as string),
cast(FPS.LEVEL3_TYPE as string),cast(FPS.LEVEL4_ID as string),
cast(FPS.LEVEL4_NAME as string),cast(FPS.LEVEL4_TYPE as string),
cast(FPS.LEVEL5_ID as string),cast(FPS.LEVEL5_NAME as string),
cast(FPS.LEVEL5_TYPE as string),cast(FPS.LEVEL6_ID as string),
cast(FPS.LEVEL6_NAME as string),cast(FPS.LEVEL6_TYPE as string)
 FROM PDMDimSrc.VW_PRODUCTIONSUMMARY_ROLLEDUP AS FPS
 );
 
 CREATE VIEW PRODVOL_ROLLEDUP_GLOBAL
(
 VOLUME_DATE	timestamp NOT NULL,
 OIL	bigdecimal	(15,4),
 OIL_POT	bigdecimal	(15,4),
 OIL_UOM	string	(20),
 GAS	bigdecimal	(15,4),
 GAS_POT	bigdecimal	(15,4),
 GAS_UOM	string	(20),
 WATER	bigdecimal	(15,4),
 WATER_POT	bigdecimal	(15,4),
 WATER_UOM	string	(20),
 LIQUID	bigdecimal	(15,4),
  LIQUID_POT	bigdecimal	(15,4),
 GOR	bigdecimal	(15,4),
 GOR_UOM	string	(20),
 WC	bigdecimal	(15,4),
 WC_UOM	string	(20),
 WOR	bigdecimal	(15,4),
 WOR_UOM	string	(20),
 GOR_POT	bigdecimal	(15,4),
 WC_POT	bigdecimal	(15,4),
 WOR_POT	bigdecimal	(15,4),
 OC	bigdecimal	(15,4),
 OC_UOM string(20),
 OC_POT	bigdecimal	(15,4),
 OGR	bigdecimal	(15,4),
 OGR_UOM string(20),
 OGR_POT	bigdecimal	(15,4),
CUM_OIL	bigdecimal	(15,4),
CUM_OIL_POT	bigdecimal	(15,4),
CUM_GAS	bigdecimal	(15,4),
CUM_GAS_POT	bigdecimal	(15,4),
CUM_WATER	bigdecimal	(15,4),
CUM_WATER_POT	bigdecimal	(15,4),
CUM_LIQUID	bigdecimal	(15,4),
CUM_LIQUID_POT	bigdecimal	(15,4),
CUM_GOR	bigdecimal	(15,4),
CUM_WC	bigdecimal	(15,4),
CUM_WOR	bigdecimal	(15,4),
CUM_GOR_POT	bigdecimal	(15,4),
CUM_WC_POT	bigdecimal	(15,4),
CUM_WOR_POT	bigdecimal	(15,4),
CUM_OC	bigdecimal	(15,4),
CUM_OC_POT	bigdecimal	(15,4),
CUM_OGR	bigdecimal	(15,4),
CUM_OGR_POT	bigdecimal	(15,4),
 LEVEL_ID	string	(40),
 LEVEL_NAME	string	(255) NOT NULL,
 LEVEL_TYPE	string	(100),
CONSTRAINT PK_PRODVOL_RUP_GB PRIMARY KEY (LEVEL_NAME,VOLUME_DATE))
OPTIONS (UPDATABLE 'FALSE', PRODVOL_ROLLEDUP_GLOBAL.IMPLEMENTED 'TRUE')
AS
 ( 
 SELECT
cast(FPS.VOLUME_DATE AS timestamp) AS VOLUME_DATE,
FPS.OIL AS OIL, FPS.OIL_POT AS	OIL_POT, cast(FPS.OIL_UOM as string) AS OIL_UOM,
FPS.GAS AS	 GAS, FPS.GAS_POT AS	 GAS_POT,
cast(FPS.GAS_UOM as string) AS GAS_UOM, FPS.WATER AS WATER,
FPS.WATER_POT AS WATER_POT, cast(FPS.WATER_UOM as string) AS WATER_UOM,
FPS.LIQUID AS	LIQUID,FPS.LIQUID_POT AS	LIQUID_POT,
FPS.GOR, cast(FPS.GAS_UOM as string) || '/' || cast(FPS.OIL_UOM as string),
FPS.WCT, cast(FPS.WATER_UOM as string) || '/' || cast(FPS.OIL_UOM as string),
FPS.WOR, cast(FPS.WATER_UOM as string) || '/' || cast(FPS.OIL_UOM as string),
FPS.GOR_POT AS GOR_POT,FPS.WCT_POT AS	 WC_POT,
FPS.WOR_POT AS WOR_POT, FPS.OCT,
cast(FPS.OIL_UOM as string) || '/' || cast(FPS.WATER_UOM as string),
FPS.OCT_POT AS OC_POT,FPS.OGR,cast(FPS.OIL_UOM as string) || '/' || cast(FPS.GAS_UOM as string),
FPS.OGR_POT AS OGR_POT,FPS.CUM_OIL,FPS.CUM_OIL_POT,FPS.CUM_GAS,
FPS.CUM_GAS_POT,FPS.CUM_WATER,FPS.CUM_WATER_POT,FPS.CUM_LIQUID,
FPS.CUM_LIQUID_POT,FPS.CUM_GOR,FPS.CUM_WCT,FPS.CUM_WOR AS	CUM_WOR,
FPS.CUM_GOR_POT,FPS.CUM_WCT_POT,FPS.CUM_WOR_POT,FPS.CUM_OCT,
FPS.CUM_OCT_POT,FPS.CUM_OGR AS CUM_OGR,FPS.CUM_OGR_POT,
cast(FPS.LEVEL_ID as string),cast(FPS.LEVEL_NAME as string),
cast(FPS.LEVEL_TYPE as string)
 FROM PDMDimSrc.VW_PRODSUM_ROLLEDUP_GLOBAL AS FPS
 );
 
 CREATE VIEW WELL_STATUS_ROLLEDUP
(
 STATUS_DATE	timestamp,
 STATUS_TYPE	string(100),
 WELL_STATUS  string(100) NOT NULL,
 STATUS_ROLLEDUP_VALUE integer,
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255) NOT NULL,
 LEVEL6_TYPE 	string	(100),
CONSTRAINT PK_WELLSTATUS_RUP PRIMARY KEY (LEVEL6_NAME,WELL_STATUS))
OPTIONS (UPDATABLE 'FALSE', WELL_STATUS_ROLLEDUP.IMPLEMENTED 'TRUE')
AS
 (
 SELECT cast(STATUS_DATE AS timestamp),cast(ROLLEDUP_PARAM AS string),
 cast(ROLLEDUP_PARAM_TYPE AS string),cast(ROLLEDUP_VALUE AS integer),
 cast(FPS.LEVEL1_ID as string),cast(FPS.LEVEL1_NAME as string),
cast(FPS.LEVEL1_TYPE as string),cast(FPS.LEVEL2_ID as string),
cast(FPS.LEVEL2_NAME as string),cast(FPS.LEVEL2_TYPE as string),
cast(FPS.LEVEL3_ID as string),cast(FPS.LEVEL3_NAME as string),
cast(FPS.LEVEL3_TYPE as string),cast(FPS.LEVEL4_ID as string),
cast(FPS.LEVEL4_NAME as string),cast(FPS.LEVEL4_TYPE as string),
cast(FPS.LEVEL5_ID as string),cast(FPS.LEVEL5_NAME as string),
cast(FPS.LEVEL5_TYPE as string),cast(FPS.LEVEL6_ID as string),
cast(FPS.LEVEL6_NAME as string),cast(FPS.LEVEL6_TYPE as string)
 FROM PDMDimSrc.VW_WELL_STATUS_ROLLEDUP FPS
 );
 
  CREATE VIEW WELLSTATUS_ROLLEDUP_GLOBAL
(
 STATUS_DATE	timestamp,
 STATUS_TYPE	string(100),
 WELL_STATUS  string(100) NOT NULL,
 STATUS_ROLLEDUP_VALUE integer,
 LEVEL_ID	string	(40),
 LEVEL_NAME	string	(255) NOT NULL,
 LEVEL_TYPE 	string	(100),
CONSTRAINT PK_WELLSTATUS_RUP_GB PRIMARY KEY (LEVEL_NAME,WELL_STATUS))
OPTIONS (UPDATABLE 'FALSE', WELLSTATUS_ROLLEDUP_GLOBAL.IMPLEMENTED 'TRUE')
AS
 (
 SELECT cast(STATUS_DATE AS timestamp),cast(ROLLEDUP_PARAM AS string),
 cast(ROLLEDUP_PARAM_TYPE AS string),cast(ROLLEDUP_VALUE AS integer),
 cast(FPS.LEVEL_ID as string),cast(FPS.LEVEL_NAME as string),
cast(FPS.LEVEL_TYPE as string)
 FROM PDMDimSrc.VW_WELLSTATUS_ROLLEDUP_GLOBAL FPS
 );

CREATE VIEW INCIDENT_ROLLEDUP
(
 INCIDENT_DATE	timestamp NOT NULL,
 ROLLEDUP_PARAM	string(100) NOT NULL,
 ROLLEDUP_TYPE  string(100),
 ROLLEDUP_VALUE integer,
 DOWNTIME_SUM bigdecimal(15,4),
 DOWNTIME_AVG bigdecimal(15,4),
 UPTIME_SUM bigdecimal(15,4),
 UPTIME_AVG bigdecimal(15,4), 
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255) NOT NULL,
 LEVEL6_TYPE 	string	(100),
CONSTRAINT PK_INC_RUP PRIMARY KEY (LEVEL6_NAME,INCIDENT_DATE,ROLLEDUP_PARAM))
OPTIONS (UPDATABLE 'FALSE', INCIDENT_ROLLEDUP.IMPLEMENTED 'TRUE')
AS
 (
 SELECT cast(INCIDENT_DATE AS timestamp),cast(ROLLEDUP_PARAM AS string),
 cast(ROLLEDUP_PARAM_TYPE AS string),cast(ROLLEDUP_VALUE AS integer),
 cast(DOWNTIME_SUM AS bigdecimal), cast(DOWNTIME_AVG AS bigdecimal), 
 cast(UPTIME_SUM AS bigdecimal),cast(UPTIME_AVG AS bigdecimal),
 cast(FPS.LEVEL1_ID as string),cast(FPS.LEVEL1_NAME as string),
cast(FPS.LEVEL1_TYPE as string),cast(FPS.LEVEL2_ID as string),
cast(FPS.LEVEL2_NAME as string),cast(FPS.LEVEL2_TYPE as string),
cast(FPS.LEVEL3_ID as string),cast(FPS.LEVEL3_NAME as string),
cast(FPS.LEVEL3_TYPE as string),cast(FPS.LEVEL4_ID as string),
cast(FPS.LEVEL4_NAME as string),cast(FPS.LEVEL4_TYPE as string),
cast(FPS.LEVEL5_ID as string),cast(FPS.LEVEL5_NAME as string),
cast(FPS.LEVEL5_TYPE as string),cast(FPS.LEVEL6_ID as string),
cast(FPS.LEVEL6_NAME as string),cast(FPS.LEVEL6_TYPE as string)
 FROM PDMDimSrc.VW_INCIDENT_ROLLEDUP FPS
 );
 
 CREATE VIEW INCIDENT_ROLLEDUP_GLOBAL
(
 INCIDENT_DATE	timestamp NOT NULL,
 ROLLEDUP_PARAM	string(100) NOT NULL,
 ROLLEDUP_TYPE  string(100),
 ROLLEDUP_VALUE integer,
 DOWNTIME_SUM bigdecimal(15,4),
 DOWNTIME_AVG bigdecimal(15,4),
 UPTIME_SUM bigdecimal(15,4),
 UPTIME_AVG bigdecimal(15,4), 
 LEVEL_ID	string	(40),
 LEVEL_NAME	string	(255) NOT NULL,
 LEVEL_TYPE 	string	(100),
CONSTRAINT PK_INC_RUP_G PRIMARY KEY (LEVEL_NAME,ROLLEDUP_PARAM))
OPTIONS (UPDATABLE 'FALSE', INCIDENT_ROLLEDUP_GLOBAL.IMPLEMENTED 'TRUE')
AS
 (
 SELECT cast(INCIDENT_DATE AS timestamp),cast(ROLLEDUP_PARAM AS string),
 cast(ROLLEDUP_PARAM_TYPE AS string),cast(ROLLEDUP_VALUE AS integer),
 cast(DOWNTIME_SUM AS bigdecimal), cast(DOWNTIME_AVG AS bigdecimal), 
 cast(UPTIME_SUM AS bigdecimal),cast(UPTIME_AVG AS bigdecimal),cast(FPS.LEVEL_ID as string),
cast(FPS.LEVEL_NAME as string),cast(FPS.LEVEL_TYPE as string)
 FROM PDMDimSrc.VW_INCIDENT_ROLLEDUP_GLOBAL FPS
 );
 
 CREATE VIEW FINANCE_ROLLEDUP
(
 COST_DATE	timestamp NOT NULL,
 ROLLEDUP_PARAM	string(100) NOT NULL,
 ROLLEDUP_TYPE  string(100),
 ROLLEDUP_VALUE integer,
 OPEX bigdecimal(15,4),
 OPEX_PLANNED bigdecimal(15,4),
 CAPEX bigdecimal(15,4),
CAPEX_PLANNED bigdecimal(15,4), 
 REVENUE bigdecimal(15,4),
 REVENUE_PLANNED bigdecimal(15,4),
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255) NOT NULL,
 LEVEL6_TYPE 	string	(100),
CONSTRAINT PK_COST_RUP PRIMARY KEY (LEVEL6_NAME,COST_DATE,ROLLEDUP_PARAM))
OPTIONS (UPDATABLE 'FALSE', FINANCE_ROLLEDUP.IMPLEMENTED 'TRUE')
AS
 (
 SELECT cast(COST_DATE AS timestamp),cast(ROLLEDUP_PARAM AS string),
 cast(ROLLEDUP_PARAM_TYPE AS string),cast(ROLLEDUP_VALUE AS integer),
 cast(OPEX AS bigdecimal), cast(OPEX_PLANNED AS bigdecimal),
 cast(CAPEX AS bigdecimal),cast(CAPEX_PLANNED AS bigdecimal), 
 cast(REVENUE AS bigdecimal),cast(REVENUE_PLANNED AS bigdecimal),
 cast(FPS.LEVEL1_ID as string),cast(FPS.LEVEL1_NAME as string),
cast(FPS.LEVEL1_TYPE as string),cast(FPS.LEVEL2_ID as string),
cast(FPS.LEVEL2_NAME as string),cast(FPS.LEVEL2_TYPE as string),
cast(FPS.LEVEL3_ID as string),cast(FPS.LEVEL3_NAME as string),
cast(FPS.LEVEL3_TYPE as string),cast(FPS.LEVEL4_ID as string),
cast(FPS.LEVEL4_NAME as string),cast(FPS.LEVEL4_TYPE as string),
cast(FPS.LEVEL5_ID as string),cast(FPS.LEVEL5_NAME as string),
cast(FPS.LEVEL5_TYPE as string),cast(FPS.LEVEL6_ID as string),
cast(FPS.LEVEL6_NAME as string),cast(FPS.LEVEL6_TYPE as string)
 FROM PDMDimSrc.VW_REVENUECOST_ROLLEDUP FPS
 );
 
CREATE VIEW COST_ROLLEDUP_GLOBAL
(
 COST_DATE	timestamp NOT NULL,
 ROLLEDUP_PARAM	string(100) NOT NULL,
 ROLLEDUP_TYPE  string(100),
 ROLLEDUP_VALUE integer,
 OPEX bigdecimal(15,4),
 OPEX_PLANNED bigdecimal(15,4),
 CAPEX bigdecimal(15,4),
CAPEX_PLANNED bigdecimal(15,4), 
 REVENUE bigdecimal(15,4),
 REVENUE_PLANNED bigdecimal(15,4),
 LEVEL_ID	string	(40),
 LEVEL_NAME	string	(255) NOT NULL,
 LEVEL_TYPE 	string	(100),
CONSTRAINT PK_COST_RUP_G PRIMARY KEY (LEVEL_NAME,ROLLEDUP_PARAM))
OPTIONS (UPDATABLE 'FALSE', COST_ROLLEDUP_GLOBAL.IMPLEMENTED 'TRUE')
AS
 (
 SELECT cast(COST_DATE AS timestamp),cast(ROLLEDUP_PARAM AS string),
 cast(ROLLEDUP_PARAM_TYPE AS string),cast(ROLLEDUP_VALUE AS integer),
  cast(OPEX AS bigdecimal), cast(OPEX_PLANNED AS bigdecimal),
 cast(CAPEX AS bigdecimal),cast(CAPEX_PLANNED AS bigdecimal), 
 cast(REVENUE AS bigdecimal),cast(REVENUE_PLANNED AS bigdecimal),
 cast(FPS.LEVEL_ID as string),
cast(FPS.LEVEL_NAME as string),cast(FPS.LEVEL_TYPE as string)
 FROM PDMDimSrc.VW_REVCOST_ROLLEDUP_GLOBAL FPS
 );
 
 CREATE VIEW FINANCE_ROLLEDUP_GLOBAL
(
 COST_DATE	timestamp NOT NULL,
 ROLLEDUP_PARAM	string(100) NOT NULL,
 ROLLEDUP_TYPE  string(100),
 ACTUAL_VALUE bigdecimal(15,4),
 PLANNED_VALUE bigdecimal(15,4),
 LEVEL_ID	string	(40),
 LEVEL_NAME	string	(255) NOT NULL,
 LEVEL_TYPE 	string	(100),
CONSTRAINT PK_FIN_RUP_G PRIMARY KEY (LEVEL_NAME,ROLLEDUP_PARAM))
OPTIONS (UPDATABLE 'FALSE', FINANCE_ROLLEDUP_GLOBAL.IMPLEMENTED 'TRUE')
AS
 (
 SELECT cast(COST_DATE AS timestamp),cast(ROLLEDUP_PARAM AS string),
 cast(ROLLEDUP_PARAM_TYPE AS string),cast((ACTUAL_VALUE/1000) AS bigdecimal),
 cast((PLANNED_VALUE/1000) AS bigdecimal),
 cast(FPS.LEVEL_ID as string),
cast(FPS.LEVEL_NAME as string),cast(FPS.LEVEL_TYPE as string)
 FROM PDMDimSrc.VW_FINANCE_ROLLEDUP_GLOBAL FPS
 );
 
  CREATE VIEW PPDM_UOM
(
 UOM_ID string(40) NOT NULL,
 UOM string(20),
 ACTIVE_IND string(1),
 BASE_UNIT_IND string(1),
 EFFECTIVE_DATE	timestamp,
 EXPIRY_DATE	timestamp, 
 REMARK string(2000),
 SOURCE_NAME string(100),
 UOM_FULL_NAME string(100),
 UOM_QUANTITY_TYPE_ID	string(40),
 QUANTITY_TYPE string(100),
 UOM_SYSTEM_ID	string(40),
 UOM_SYSTEM string(100),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp,
 ROW_QUALITY_ID string (40),
 ROW_QUALITY_NAME string (100), 
CONSTRAINT PK_EN_EST PRIMARY KEY (UOM_ID))
OPTIONS (UPDATABLE 'FALSE', PPDM_UOM.IMPLEMENTED 'TRUE')
AS
 (
SELECT
		cast(UOM.UOM_ID AS string), cast(UOM.UOM_NAME AS string), 'Y', 
		NULL, NULL, NULL,
		'', 
		NULL, NULL, 
		NULL, NULL, NULL,
		NULL, NULL, NULL,NULL, NULL,NULL, NULL
	FROM
		PDMDimSrc.DIMUNITOFMEASURE AS UOM
 );

CREATE VIEW WELL_TEST
(
TEST_DATE timestamp NOT NULL,
TEST_DURATION  bigdecimal (15,4),
TEST_TYPE  string (100),
TEST_STATUS  string (100) NOT NULL,
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
SEPARATOR_PRESSURE bigdecimal(15,4),
LOW_TUB_PRESSURE bigdecimal(15,4),
ENV_TEMPERATURE bigdecimal(15,4),
TUBING_PRESSURE  bigdecimal (15,4),
TUBING_PRESS_UOM  string (20),
CASING_PRESSURE  bigdecimal (15,4),
CASING_PRESS_UOM  string (20),
TUBING_TEMPERATURE  bigdecimal (15,4),
TUBING_TEMP_UOM  string (20),
CASING_TEMPERATURE  bigdecimal (15,4),
CASING_TEMP_UOM  string (20),
INLET_PRESSURE  bigdecimal (15,4),
INLET_PRESS_UOM  string (20),
INLET_TEMPERATURE  bigdecimal (15,4),
INLET_TEMP_UOM  string (20),
CHOKE_SIZE  bigdecimal (15,4),
CHOKE_SIZE_UOM  string (20),
CHOKE  bigdecimal (15,4),
CHOKE_UOM  string (20),
OUTLET_PRESSURE  bigdecimal (15,4),
OUTLET_PRESS_UOM  string (20),
OUTLET_TEMPERATURE  bigdecimal (15,4),
OUTLET_TEMP_UOM  string (20),
CHOKE_INLET_PRESS  bigdecimal (15,4),
CHOKE_INLET_PRESS_UOM  string (20),
CHOKE_INLET_TEMP  bigdecimal (15,4),
CHOKE_INLET_TEMP_UOM  string (20),
CHOKE_OUTLET_PRESS  bigdecimal (15,4),
CHOKE_OUTLET_PRESS_UOM  string (20),
CHOKE_OUTLET_TEMP  bigdecimal (15,4),
CHOKE_OUTLET_TEMP_UOM  string (20),
BHP  bigdecimal (15,4),
BHP_UOM  string (20),
BHT  bigdecimal (15,4),
BHT_UOM  string (20),
WHP  bigdecimal (15,4),
WHP_UOM  string (20),
WHT  bigdecimal (15,4),
WHT_UOM  string (20),
FLOW_PRESS  bigdecimal (15,4),
FLOW_PRESS_UOM  string (20),
FLOW_TEMP  bigdecimal (15,4),
FLOW_TEMP_UOM  string (20),
SHUT_IN_PRESS  bigdecimal (15,4),
SHUT_IN_PRESS_UOM  string (20),
GAUGE_PRESS  bigdecimal (15,4),
GAUGE_PRESS_UOM  string (20),
GAUGE_DEPTH  bigdecimal (15,4),
GAUGE_DEPTH_UOM  string (20),
OIL  bigdecimal (15,4),
OIL_DAY bigdecimal(15,4),
OIL_UOM  string (20),
GAS  bigdecimal (15,4),
GAS_DAY bigdecimal(15,4),
GAS_UOM  string (20),
WATER  bigdecimal (15,4),
WATER_DAY bigdecimal(15,4),
WATER_UOM  string (20),
LIQUID  bigdecimal (15,4),
LIQUID_DAY bigdecimal(15,4),
LIQUID_UOM  string (20),
QLIQUID  bigdecimal (15,4),
QLIQUID_UOM  string (20),
GOR  bigdecimal (15,4),
GOR_UOM  string (20),
WC  bigdecimal (15,4),
WC_UOM  string (20),
WOR  bigdecimal (15,4),
WOR_UOM  string (20),
WGR  bigdecimal (15,4),
WGR_UOM  string (20),
GLR  bigdecimal (15,4),
GLR_UOM  string (20),
IPR  string (1),
IPR_DIFF  bigdecimal (15,4),
VLP  string (1),
VLP_DIFF  bigdecimal (15,4),
IPR_VLP  string (1),
IPR_VLP_DIFF  bigdecimal (15,4),
CHP  string (1),
CHP_DIFF  bigdecimal (15,4),
CHOKE_IND  string (1),
VALID_IND string(1),
FLUID_TYPE string(100),
ENTITY_ID  string (100) NOT NULL,
WELL_NAME  string (255),
WELL_TYPE  string (100),
PRIMARY_PRODUCT  string (100),
PRODUCTION_METHOD  string (100),
SOURCE  string (100),
ROW_QUALITY  string (100),
ROW_CHANGED_BY  string (100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND  string (1),
REMARK  string (2000),
LEVEL1_ID  string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE  string (100),
LEVEL2_ID  string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE  string (100),
LEVEL3_ID  string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE  string (100),
LEVEL4_ID  string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE  string (100),
LEVEL5_ID  string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE  string (100),
LEVEL6_ID  string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE  string (100), 
AREA_PATH string(2000),
TEST_ID  string (40) NOT NULL,
CONSTRAINT PK_PDMDIM_WELL_TEST PRIMARY KEY (TEST_ID))
OPTIONS (UPDATABLE 'FALSE',WELL_TEST.IMPLEMENTED 'TRUE')
AS(
select wt.TEST_DATE,
wt.TEST_DURATION ,
wt.TEST_TYPE  ,
wt.TEST_STATUS  ,
wt.EFFECTIVE_DATE ,
wt.EXPIRY_DATE ,
wt.SEPARATOR_PRESSURE,
wt.LOW_TUB_PRESSURE,
wt.ENV_TEMPERATURE,
wt.TUBING_PRESSURE   ,
wt.TUBING_PRESS_UOM ,
wt.CASING_PRESSURE   ,
wt.CASING_PRESS_UOM ,
wt.TUBING_TEMPERATURE   ,
wt.TUBING_TEMP_UOM ,
wt.CASING_TEMPERATURE   ,
wt.CASING_TEMP_UOM ,
wt.INLET_PRESSURE   ,
wt.INLET_PRESS_UOM ,
wt.INLET_TEMPERATURE   ,
wt.INLET_TEMP_UOM ,
wt.CHOKE_SIZE   ,
wt.CHOKE_SIZE_UOM ,
wt.CHOKE   ,
wt.CHOKE_UOM ,
wt.OUTLET_PRESSURE   ,
wt.OUTLET_PRESS_UOM ,
wt.OUTLET_TEMPERATURE   ,
wt.OUTLET_TEMP_UOM ,
wt.CHOKE_INLET_PRESS   ,
wt.CHOKE_INLET_PRESS_UOM ,
wt.CHOKE_INLET_TEMP   ,
wt.CHOKE_INLET_TEMP_UOM ,
wt.CHOKE_OUTLET_PRESS   ,
wt.CHOKE_OUTLET_PRESS_UOM ,
wt.CHOKE_OUTLET_TEMP   ,
wt.CHOKE_OUTLET_TEMP_UOM ,
wt.BHP   ,
wt.BHP_UOM ,
wt.BHT   ,
wt.BHT_UOM ,
wt.WHP   ,
wt.WHP_UOM ,
wt.WHT   ,
wt.WHT_UOM ,
wt.FLOW_PRESS   ,
wt.FLOW_PRESS_UOM ,
wt.FLOW_TEMP   ,
wt.FLOW_TEMP_UOM ,
wt.SHUT_IN_PRESS   ,
wt.SHUT_IN_PRESS_UOM ,
wt.GAUGE_PRESS   ,
wt.GAUGE_PRESS_UOM ,
wt.GAUGE_DEPTH   ,
wt.GAUGE_DEPTH_UOM ,
wt.OIL   ,
((wt.OIL/wt.TEST_DURATION) * 24),
wt.OIL_UOM ,
wt.GAS   ,
((wt.GAS/wt.TEST_DURATION) * 24),
wt.GAS_UOM ,
wt.WATER   ,
((wt.WATER/wt.TEST_DURATION) * 24),
wt.WATER_UOM ,
wt.LIQUID   ,
((wt.LIQUID/wt.TEST_DURATION) * 24),
wt.LIQUID_UOM ,
wt.QLIQUID   ,
wt.QLIQUID_UOM ,
wt.GOR   ,
wt.GOR_UOM ,
wt.WC   ,
wt.WC_UOM ,
wt.WOR   ,
wt.WOR_UOM ,
wt.WGR   ,
wt.WGR_UOM ,
wt.GLR   ,
wt.GLR_UOM ,
wt.IPR  ,
wt.IPR_DIFF   ,
wt.VLP   ,
wt.VLP_DIFF   ,
wt.IPR_VLP   ,
wt.IPR_VLP_DIFF   ,
wt.CHP  ,
wt.CHP_DIFF   ,
wt.CHOKE_IND   ,
wt.VALID_IND ,
wt.FLUID_TYPE ,
wt.ENTITY_ID  ,
W.WELL_COMPLETION_NAME ,
W.OPERATING_STATUS  ,
W.PRIMARY_PRODUCT  ,
W.PRODUCTION_METHOD  ,
wt.SOURCE  ,
wt.ROW_QUALITY  ,
wt.ROW_CHANGED_BY  ,
wt.ROW_CHANGED_DATE ,
wt.ROW_CREATED_DATE ,
wt.ROW_CREATED_BY  ,
wt.ACTIVE_IND   ,
wt.REMARK  ,
dah.LEVEL1_ID   ,
dah.LEVEL1_NAME   ,
dah.LEVEL1_TYPE  ,
dah.LEVEL2_ID   ,
dah.LEVEL2_NAME   ,
dah.LEVEL2_TYPE  ,
dah.LEVEL3_ID   ,
dah.LEVEL3_NAME  ,
dah.LEVEL3_TYPE  ,
dah.LEVEL4_ID   ,
dah.LEVEL4_NAME  ,
dah.LEVEL4_TYPE  ,
dah.LEVEL5_ID   ,
dah.LEVEL5_NAME  ,
dah.LEVEL5_TYPE  ,
dah.LEVEL6_ID   ,
dah.LEVEL6_NAME  ,
dah.LEVEL6_TYPE  ,
CASE WHEN cast(dah.LEVEL1_NAME AS string) IS NOT NULL THEN 
                cast(dah.LEVEL1_NAME AS string) || ' | ' || cast(dah.LEVEL2_NAME AS string) || ' | ' || cast(dah.LEVEL3_NAME AS string) || 
                ' | ' || cast(dah.LEVEL4_NAME AS string) || ' | ' || cast(dah.LEVEL5_NAME AS string) || ' | ' || cast(dah.LEVEL6_NAME AS string)
                WHEN cast(dah.LEVEL2_NAME AS string) IS NOT NULL THEN 
                cast(dah.LEVEL2_NAME AS string) || ' | ' || cast(dah.LEVEL3_NAME AS string) || ' | ' || cast(dah.LEVEL4_NAME AS string) || 
                ' | ' || cast(dah.LEVEL5_NAME AS string) || ' | ' || cast(dah.LEVEL6_NAME AS string) 
                WHEN cast(dah.LEVEL3_NAME AS string) IS NOT NULL THEN 
                cast(dah.LEVEL3_NAME AS string) || ' | ' || cast(dah.LEVEL4_NAME AS string) || ' | ' || cast(dah.LEVEL5_NAME AS string)
                || ' | ' || cast(dah.LEVEL6_NAME AS string)
                WHEN cast(dah.LEVEL4_NAME AS string) IS NOT NULL THEN 
                cast(dah.LEVEL4_NAME AS string) || ' | ' || cast(dah.LEVEL5_NAME AS string) || ' | ' || cast(dah.LEVEL6_NAME AS string)
                WHEN cast(dah.LEVEL5_NAME AS string) IS NOT NULL THEN 
                cast(dah.LEVEL5_NAME AS string) || ' | ' || cast(dah.LEVEL6_NAME AS string)
                ELSE cast(dah.LEVEL6_NAME AS string) END
                AS AREA_PATH, 
wt.TEST_ID     
FROM PDMTx.WELL_TEST wt INNER JOIN PDMDimSrc.DIMWELLCOMPLETION W ON wt.ENTITY_ID = W.WELL_OR_COMPLETION_ID
inner join PDMDimSrc.dimassethierarchy Dah ON W.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY);

CREATE VIEW PATTERN_ASSET_DETAILS
(
PATTERN_DETAILS_ID string(40 ) NOT NULL,
PATTERN_ASSET_NAME string (255),
PATTERN_ID string(40) NOT NULL,
PATTERN_NAME string (255) NOT NULL,
PATTERN_DESC string(2000),
PRIVATE_IND string(1),
UWI string (255) NOT NULL,
FIELD string (255) ,
POOL string (255) ,
PROD_START_DATE date,
PROD_STATUS  string (100) ,
ALLOC_FACTOR bigdecimal (15,4),
ALLOC_FACTOR_OVERRIDE bigdecimal (15,4),
ALLOC_FACTOR_SUMMARY bigdecimal(15,4),
GROUP_ID string(40),
GROUP_NAME string (255) ,
ENTITY_ID string (40) NOT NULL,
SOURCE string (100) ,
ROW_QUALITY string (100) ,
ROW_CHANGED_BY string (100) ,
ROW_CHANGED_DATE timestamp ,
ROW_CREATED_DATE timestamp ,
ROW_CREATED_BY string (100) ,
ACTIVE_IND string (1) ,
LEVEL1_ID string (40) ,
LEVEL1_NAME string (255) ,
LEVEL1_TYPE string (100) ,
LEVEL2_ID string (40) ,
LEVEL2_NAME string (255) ,
LEVEL2_TYPE string (100) ,
LEVEL3_ID string     (40) ,
LEVEL3_NAME string (255) ,
LEVEL3_TYPE string (100) ,
LEVEL4_ID string (40) ,
LEVEL4_NAME string (255) ,
LEVEL4_TYPE string (100) ,
LEVEL5_ID string (40) ,
LEVEL5_NAME string (255) ,
LEVEL5_TYPE string (100) ,
LEVEL6_ID string (40) ,
LEVEL6_NAME string (255) ,
LEVEL6_TYPE string (100) ,
CONSTRAINT PK_PDMDIM_PATTRN_ASST_DETAILS PRIMARY KEY (PATTERN_DETAILS_ID))
OPTIONS (UPDATABLE 'FALSE',PATTERN_ASSET_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT 
PAD.PATTERN_DETAILS_ID,
W.WELL_COMPLETION_NAME AS  PATTERN_ASSET_NAME,
PAD.PATTERN_ID,
PAD.PATTERN_NAME,
PAD.PATTERN_DESC ,
PAD.PRIVATE_IND ,
W.API_UWI AS  UWI,
W.FIELD,
W.POOL,
CASE 
   WHEN W.PRODUCTION_START_DATE_ID IS NULL OR W.PRODUCTION_START_DATE_ID = -1 
   THEN  NULL 
   ELSE 
    PARSEDATE(CAST(W.PRODUCTION_START_DATE_ID AS STRING),'yyyyMMdd') 
 END AS  PROD_START_DATE,
W.PRODUCTION_STATUS,
PAD.ALLOC_FACTOR ,
PAD.ALLOC_FACTOR_OVERRIDE ,
PAD.ALLOC_FACTOR_SUMMARY ,
PAD.GROUP_ID ,
PAD.GROUP_NAME,
PAD.ENTITY_ID,
PAD.SOURCE,
PAD.ROW_QUALITY,
PAD.ROW_CHANGED_BY,
PAD.ROW_CHANGED_DATE,
PAD.ROW_CREATED_DATE,
PAD.ROW_CREATED_BY,
PAD.ACTIVE_IND,
DAH.LEVEL1_ID,
DAH.LEVEL1_NAME,
DAH.LEVEL1_TYPE,
DAH.LEVEL2_ID,
DAH.LEVEL2_NAME,
DAH.LEVEL2_TYPE,
DAH.LEVEL3_ID ,
DAH.LEVEL3_NAME,
DAH.LEVEL3_TYPE,
DAH.LEVEL4_ID,
DAH.LEVEL4_NAME,
DAH.LEVEL4_TYPE,
DAH.LEVEL5_ID,
DAH.LEVEL5_NAME,
DAH.LEVEL5_TYPE,
DAH.LEVEL6_ID,
DAH.LEVEL6_NAME,
DAH.LEVEL6_TYPE FROM
PDMTx.PATTERN_ASSET_DETAILS AS PAD 
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION W ON PAD.ENTITY_ID = W.WELL_OR_COMPLETION_ID
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON W.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
);

CREATE VIEW ALARM_REMARK
 (
	REMARK_DATE TIMESTAMP NOT NULL,
	REMARK STRING(2000),
	EFFECTIVE_DATE TIMESTAMP,
	EXPIRY_DATE TIMESTAMP,
	ALARM_ID STRING(40),
	ALARM_NAME STRING(200),
	EVENT_ID STRING(40),
	ENTITY_ID STRING(40) NOT NULL,
	ENTITY_NAME STRING(255),
	ASSET_IND STRING(1),
	ASSET_TYPE STRING(100),
	ASSET_SUB_TYPE STRING(100),	
	SOURCE STRING(100),
	ROW_QUALITY STRING(100),
	ROW_CREATED_DATE TIMESTAMP,
	ROW_CREATED_BY STRING(100),
	ROW_CHANGED_DATE TIMESTAMP,
	ROW_CHANGED_BY STRING(100),
	ACTIVE_IND STRING(1),
	LEVEL1_ID   string (40),
	LEVEL1_NAME string (255),
	LEVEL1_TYPE string (100),
	LEVEL2_ID   string (40),
	LEVEL2_NAME string (255),
	LEVEL2_TYPE string (100),
	LEVEL3_ID   string (40),
	LEVEL3_NAME string (255),
	LEVEL3_TYPE string (100),
	LEVEL4_ID   string (40),
	LEVEL4_NAME string (255),
	LEVEL4_TYPE string (100),
	LEVEL5_ID   string (40),
	LEVEL5_NAME string (255),
	LEVEL5_TYPE string (100),
	LEVEL6_ID   string (40),
	LEVEL6_NAME string (255),
	LEVEL6_TYPE string (100),	
	ALARM_REMARK_ID STRING(40) NOT NULL
	,CONSTRAINT PK_PDMDIM_ALARM_REM PRIMARY KEY (ALARM_REMARK_ID))
	OPTIONS (UPDATABLE 'FALSE',ALARM_REMARK.IMPLEMENTED 'TRUE')
	AS
	(
	SELECT AR.REMARK_DATE,
AR.REMARK,
AR.EFFECTIVE_DATE,
AR.EXPIRY_DATE,
AR.ALARM_ID,
AR.ALARM_NAME,
AR.EVENT_ID,
AR.ENTITY_ID,
AR.ENTITY_NAME,
AR.ASSET_IND,
AR.ASSET_TYPE,
AR.ASSET_SUB_TYPE,
AR.SOURCE,
AR.ROW_QUALITY,
AR.ROW_CREATED_DATE,
AR.ROW_CREATED_BY,
AR.ROW_CHANGED_DATE,
AR.ROW_CHANGED_BY,
AR.ACTIVE_IND,
AR.LEVEL1_ID,
AR.LEVEL1_NAME,
AR.LEVEL1_TYPE,
AR.LEVEL2_ID,
AR.LEVEL2_NAME,
AR.LEVEL2_TYPE,
AR.LEVEL3_ID,
AR.LEVEL3_NAME,
AR.LEVEL3_TYPE,
AR.LEVEL4_ID,
AR.LEVEL4_NAME,
AR.LEVEL4_TYPE,
AR.LEVEL5_ID,
AR.LEVEL5_NAME,
AR.LEVEL5_TYPE,
AR.LEVEL6_ID,
AR.LEVEL6_NAME,
AR.LEVEL6_TYPE,
AR.ALARM_REMARK_ID
		FROM PDMTx.ALARM_REMARK AR
		LEFT OUTER JOIN 
			(SELECT DWC.WELL_OR_COMPLETION_ID AS ENTITY_ID, DWC.DIM_ASSETHIERARCHY_KEY FROM PDMDimSrc.DIMWELLCOMPLETION DWC 
				UNION ALL
			 SELECT DF.FACILITY_ID AS ENTITY_ID, DF.DIM_ASSETHIERARCHY_KEY FROM PDMDimSrc.DIMFACILITY DF
			 )DWC
			ON AR.ENTITY_ID = DWC.ENTITY_ID
		INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON DAH.DIM_ASSETHIERARCHY_KEY = DWC.DIM_ASSETHIERARCHY_KEY);		
		
CREATE VIEW ALARM_EVENT
(
ALARM_ID	string (40)	NOT NULL,
 ALARM_NAME	string (255),
 ALARM_DESC	string (2000),
 SEVERITY_ID	integer,
 SEVERITY_NAME	string (100),
 EVENT_ID	string (40),
 EVENT_TYPE	string (100),
 EVENT_STATUS	string (100),
 MAIN_MESSAGE	string (2000),
 SUMMARY_MESSAGE	string	(500),
 EVENT_SOURCE	string (100),
 ALARM_CREATE_DATE	timestamp	,
 ALARM_ACK_BY	string (100),
 EVALUATE_PROPERTY	string (100),
 ELAPSED_TIME	integer	,
 ADDITIONAL_DATA	string (2000),
 WORKFLOW_NAME string (200),
WORKFLOW_DESC string(1000),
 REMARK	string (2000),
 PRODUCTION_METHOD	string (100),
 ENTITY_ID	string (40)	NOT NULL,
 ENTITY_NAME	string (255),
 ASSET_IND string(1),
 ASSET_TYPE string(100),
 ASSET_SUB_TYPE string(100),
  SOURCE	string (100),
 ROW_QUALITY	string (100),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	,
 ROW_CREATED_DATE	timestamp	,
 ROW_CREATED_BY	string (100),
 ACTIVE_IND	string	(1),
 LEVEL1_ID	string (40),
 LEVEL1_NAME	string (255),
 LEVEL1_TYPE	string (100),
 LEVEL2_ID	string (40),
 LEVEL2_NAME	string (255),
 LEVEL2_TYPE	string (100),
 LEVEL3_ID	string (40),
 LEVEL3_NAME	string (255),
 LEVEL3_TYPE	string (100),
 LEVEL4_ID	string (40),
 LEVEL4_NAME	string (255),
 LEVEL4_TYPE	string (100),
 LEVEL5_ID	string (40),
 LEVEL5_NAME	string (255),
 LEVEL5_TYPE	string (100),
 LEVEL6_ID	string (40),
 LEVEL6_NAME	string (255),
 LEVEL6_TYPE 	string (100),
CONSTRAINT PK_PDMDIM_ALARM_EVENT PRIMARY KEY (ALARM_ID))
OPTIONS (UPDATABLE 'FALSE',ALARM_EVENT.IMPLEMENTED 'TRUE')
AS
(SELECT 
AE.ALARM_ID,
AE.ALARM_NAME,
AE.ALARM_DESC,
AE.SEVERITY_ID,
AE.SEVERITY_NAME,
AE.EVENT_ID,
AE.EVENT_TYPE,
AE.EVENT_STATUS,
AE.MAIN_MESSAGE,
AE.SUMMARY_MESSAGE,
AE.EVENT_SOURCE,
AE.ALARM_CREATE_DATE,
AE.ALARM_ACK_BY,
AE.EVALUATE_PROPERTY,
AE.ELAPSED_TIME,
AE.ADDITIONAL_DATA,
AE.WORKFLOW_NAME,
AE.WORKFLOW_DESC,
AE.REMARK,
DWC.PRODUCTION_METHOD,
DWC.ENTITY_ID AS ENTITY_ID,
AE.ENTITY_NAME AS  ENTITY_NAME,
AE.ASSET_IND,
AE.ASSET_TYPE,
AE.ASSET_SUB_TYPE,
AE.SOURCE,
AE.ROW_QUALITY,
AE.ROW_CHANGED_BY,
AE.ROW_CHANGED_DATE,
AE.ROW_CREATED_DATE,
AE.ROW_CREATED_BY,
AE.ACTIVE_IND,
DAH.LEVEL1_ID,
DAH.LEVEL1_NAME,
DAH.LEVEL1_TYPE,
DAH.LEVEL2_ID,
DAH.LEVEL2_NAME,
DAH.LEVEL2_TYPE,
DAH.LEVEL3_ID,
DAH.LEVEL3_NAME,
DAH.LEVEL3_TYPE,
DAH.LEVEL4_ID,
DAH.LEVEL4_NAME,
DAH.LEVEL4_TYPE,
DAH.LEVEL5_ID,
DAH.LEVEL5_NAME,
DAH.LEVEL5_TYPE,
DAH.LEVEL6_ID,
DAH.LEVEL6_NAME,
DAH.LEVEL6_TYPE 
FROM PDMTx.ALARM_EVENT AE 
LEFT OUTER JOIN 
	(SELECT DWC.WELL_OR_COMPLETION_ID AS ENTITY_ID,DWC.PRODUCTION_METHOD, DWC.DIM_ASSETHIERARCHY_KEY FROM PDMDimSrc.DIMWELLCOMPLETION DWC 
		UNION ALL
	 SELECT DF.FACILITY_ID AS ENTITY_ID,'' AS PRODUCTION_METHOD, DF.DIM_ASSETHIERARCHY_KEY FROM PDMDimSrc.DIMFACILITY DF
	 )DWC
	ON AE.ENTITY_ID = DWC.ENTITY_ID
LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AS DAH ON DWC.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
 );

CREATE VIEW TEST_WELL_STATUS
(
TEST_STATUS string(100) NOT NULL,
WELL_COUNT	integer,
 ENTITY_ID string(40),
 ENTITY_NAME string(255),
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40) NOT NULL,
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
 AREA_PATH string(2000),
 CONSTRAINT PK_PDMDIM_TEST_STATUS PRIMARY KEY (TEST_STATUS,ENTITY_ID))
OPTIONS (UPDATABLE 'FALSE', TEST_WELL_STATUS.IMPLEMENTED 'TRUE')
AS
(SELECT TWS.TEST_STATUS,
TWS.WELL_COUNT,
TWS.ENTITY_ID,
TWS.ENTITY_NAME,
AH.LEVEL1_ID,
AH.LEVEL1_NAME,
AH.LEVEL1_TYPE,
AH.LEVEL2_ID,
AH.LEVEL2_NAME,
AH.LEVEL2_TYPE,
AH.LEVEL3_ID,
AH.LEVEL3_NAME,
AH.LEVEL3_TYPE,
AH.LEVEL4_ID,
AH.LEVEL4_NAME,
AH.LEVEL4_TYPE,
AH.LEVEL5_ID,
AH.LEVEL5_NAME,
AH.LEVEL5_TYPE,
AH.LEVEL6_ID,
AH.LEVEL6_NAME,
AH.LEVEL6_TYPE,
CASE WHEN cast(AH.LEVEL1_NAME AS string) IS NOT NULL THEN 
                cast(AH.LEVEL1_NAME AS string) || ' | ' || cast(AH.LEVEL2_NAME AS string) || ' | ' || cast(AH.LEVEL3_NAME AS string) || 
                ' | ' || cast(AH.LEVEL4_NAME AS string) || ' | ' || cast(AH.LEVEL5_NAME AS string) || ' | ' || cast(AH.LEVEL6_NAME AS string)
                WHEN cast(AH.LEVEL2_NAME AS string) IS NOT NULL THEN 
                cast(AH.LEVEL2_NAME AS string) || ' | ' || cast(AH.LEVEL3_NAME AS string) || ' | ' || cast(AH.LEVEL4_NAME AS string) || 
                ' | ' || cast(AH.LEVEL5_NAME AS string) || ' | ' || cast(AH.LEVEL6_NAME AS string) 
                WHEN cast(AH.LEVEL3_NAME AS string) IS NOT NULL THEN 
                cast(AH.LEVEL3_NAME AS string) || ' | ' || cast(AH.LEVEL4_NAME AS string) || ' | ' || cast(AH.LEVEL5_NAME AS string)
                || ' | ' || cast(AH.LEVEL6_NAME AS string)
                WHEN cast(AH.LEVEL4_NAME AS string) IS NOT NULL THEN 
                cast(AH.LEVEL4_NAME AS string) || ' | ' || cast(AH.LEVEL5_NAME AS string) || ' | ' || cast(AH.LEVEL6_NAME AS string)
                WHEN cast(AH.LEVEL5_NAME AS string) IS NOT NULL THEN 
                cast(AH.LEVEL5_NAME AS string) || ' | ' || cast(AH.LEVEL6_NAME AS string)
                ELSE cast(AH.LEVEL6_NAME AS string) END
                AS AREA_PATH
from PDMTx.TEST_WELL_STATUS TWS
  INNER JOIN PDMDimSrc.DIMASSETHIERARCHY AH ON TWS.LEVEL6_ID = AH.LEVEL6_ID
);
CREATE VIEW NETWORK
(
NETWORK_TX_ID  string (40) NOT NULL,
NETWORK_ID string(40),
NETWORK_NAME string(255),
ACTIVE_IND  string (1),
LEVEL1_ID  string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE  string (100),
LEVEL2_ID  string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE  string (100),
LEVEL3_ID  string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE  string (100),
LEVEL4_ID  string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE  string (100),
LEVEL5_ID  string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE  string (100),
LEVEL6_ID  string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE  string (100),
CONSTRAINT PK_PDMDIM_NETWORK PRIMARY KEY (NETWORK_TX_ID))
OPTIONS (UPDATABLE 'FALSE',NETWORK.IMPLEMENTED 'TRUE')
AS
(
SELECT
DN.NETWORK_TX_ID  ,
DN.NETWORK_ID ,
DN.NETWORK_NAME ,
DN.ACTIVE_IND  ,
DAH.LEVEL1_ID  ,
DAH.LEVEL1_NAME ,
DAH.LEVEL1_TYPE  ,
DAH.LEVEL2_ID  ,
DAH.LEVEL2_NAME  ,
DAH.LEVEL2_TYPE  ,
DAH.LEVEL3_ID  ,
DAH.LEVEL3_NAME  ,
DAH.LEVEL3_TYPE  ,
DAH.LEVEL4_ID  ,
DAH.LEVEL4_NAME  ,
DAH.LEVEL4_TYPE ,
DAH.LEVEL5_ID  ,
DAH.LEVEL5_NAME  ,
DAH.LEVEL5_TYPE  ,
DN.LEVEL6_ID  ,
DAH.LEVEL6_NAME  ,
DAH.LEVEL6_TYPE 
	FROM
		PDMTx.NETWORK AS DN 	
		LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AS DAH ON UPPER(DN.LEVEL6_ID) = UPPER(DAH.LEVEL6_ID)
);

CREATE VIEW INCIDENT
(
 INCIDENT_DATE	timestamp NOT NULL,
 INCIDENT_TYPE	string	(100),
 INCIDENT_SUB_TYPE	string	(100),
 INCIDENT_DURATION	bigdecimal	(15,4), 
 INC_DURATION_UOM	string	(20),
 DOWNTIME_SUB_CATEGORY string(100),
 REPORTED_BY_BA	string	(100),
 REPORTED_BY_NAME	string	(255),
 REPORTED_IND	string	(1),
 EFFECTIVE_DATE	timestamp ,
 EXPIRY_DATE	timestamp ,
 LOST_TIME_IND	string	(1),
 INCIDENT_CLASS	string	(100),
 RECORDED_TIME	timestamp,
 RECORDED_TIME_ZONE	string	(100),
 WORK_RELATED_IND	string	(1),
 CUM_DOWNTIME bigdecimal(15,4),
 UPTIME bigdecimal(15,4),
 CUM_UPTIME bigdecimal(15,4),
 PLANNED_IND string(10),
 DOWNTIME_DAY bigdecimal(15,4),
 UPTIME_DAY bigdecimal(15,4),
 REMARK string(2000),
 CARRY_FWD_DATE timestamp,
 OPEN_END_IND string(1),
 ECOLOR_CODE string(100),
 ENTITY_ID	string	(40	)	NOT NULL,
 ENTITY_NAME	string	(255),
 ENTITY_TYPE string(100),
 ENTITY_SUB_TYPE string(100),
NETWORK_ID STRING (40),
NETWORK_NAME STRING (100),
 LEVEL1_ID STRING (40),
LEVEL1_NAME STRING (255),
LEVEL1_TYPE STRING (100),
LEVEL2_ID STRING (40),
LEVEL2_NAME STRING (255),
LEVEL2_TYPE STRING (100),
LEVEL3_ID STRING (40),
LEVEL3_NAME STRING (255),
LEVEL3_TYPE STRING (100),
LEVEL4_ID STRING (40),
LEVEL4_NAME STRING (255),
LEVEL4_TYPE STRING (100),
LEVEL5_ID STRING (40),
LEVEL5_NAME STRING (255),
LEVEL5_TYPE STRING (100),
LEVEL6_ID STRING (40),
LEVEL6_NAME STRING (255),
LEVEL6_TYPE STRING (100), 
 SOURCE_NAME string	(100),
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string	(100),
 ACTIVE_IND	string	(1),
 INCIDENT_ID	string	(40	)	NOT NULL,
CONSTRAINT PK_PDMDIM_INCIDENT PRIMARY KEY (INCIDENT_ID))
OPTIONS (UPDATABLE 'FALSE', INCIDENT.IMPLEMENTED 'TRUE')
AS
(  
SELECT
CAST((DD.FORMATTEDDATE2 || ' ' || DT.TIME24) AS TIMESTAMP) INCIDENT_DATE,
'DOWN_TIME',DC.DOWN_REASON,FPS.DT_DURATION,'h',
CASE DC.DOWN_SUB_CATEGORY WHEN NULL THEN 'Unclassified' ELSE DC.DOWN_SUB_CATEGORY END,
NULL,NULL,NULL,
CAST((DD.FORMATTEDDATE2 || ' ' || DT.TIME24) AS TIMESTAMP) EFFECTIVE_DATE,
CASE WHEN (FPS.DT_ENDTIME_KEY = 0 AND FPS.DT_DURATION > 0) THEN TIMESTAMPADD(SQL_TSI_DAY, 1, CAST((DD.FORMATTEDDATE2 || ' ' || DTE.TIME24) AS TIMESTAMP)) ELSE 
CAST((DD.FORMATTEDDATE2 || ' ' || DTE.TIME24) AS TIMESTAMP) END AS EXPIRY_DATE,
NULL,DC.DOWN_CATEGORY,NULL,NULL,NULL,NULL,(24-FPS.DT_DURATION),NULL,
CASE  WHEN DC.DOWN_CATEGORY LIKE 'Un%' then 'N' else 'Y' end AS PLANNED_IND,
(FPS.DT_DURATION/24) DOWNTIME_DAY,((24-FPS.DT_DURATION)/24) UPTIME_DAY,
FPS.DT_REMARKS,CAST(CFD.FORMATTEDDATE1 AS TIMESTAMP) CARRY_FWD_DATE,
OPEN_ENDED_IND,DC.COLOR_CODE,
WUF.ENTITY_ID AS ENTITY_ID,WUF.ENTITY_NAME AS ENTITY_NAME,
WUF.ENTITY_TYPE AS ENTITY_TYPE,WUF.ENTITY_SUB_TYPE AS ENTITY_SUB_TYPE,
N.NETWORK_ID,N.NETWORK_NAME,DAH.LEVEL1_ID,DAH.LEVEL1_NAME,DAH.LEVEL1_TYPE,DAH.LEVEL2_ID,DAH.LEVEL2_NAME,
DAH.LEVEL2_TYPE,DAH.LEVEL3_ID,DAH.LEVEL3_NAME,DAH.LEVEL3_TYPE,DAH.LEVEL4_ID,DAH.LEVEL4_NAME,
DAH.LEVEL4_TYPE,DAH.LEVEL5_ID,DAH.LEVEL5_NAME,DAH.LEVEL5_TYPE,DAH.LEVEL6_ID,DAH.LEVEL6_NAME,
DAH.LEVEL6_TYPE,NULL,NULL,
CAST(RCHD.FORMATTEDDATE AS TIMESTAMP) ROW_CHANGED_DATE,
CAST(RCRD.FORMATTEDDATE AS TIMESTAMP) ROW_CREATED_DATE,
NULL AS ROW_CREATED_BY,'Y' AS ACTIVE_IND,
CAST(FPS.FACT_DOWNTIME_KEY AS STRING) INCIDENT_ID 
FROM PDMDimSrc.FACTDOWNTIME FPS 
LEFT OUTER JOIN
(SELECT DIM_FACILITY_KEY AS ENTITY_KEY,FACILITY_ID AS ENTITY_ID,FACILITY_NAME AS ENTITY_NAME, 'Facility' AS ENTITY_TYPE,FACILITY_TYPE AS ENTITY_SUB_TYPE FROM PDMDimSrc.DIMFACILITY
UNION ALL
SELECT DIM_WELLCOMPL_KEY AS ENTITY_KEY,WELL_OR_COMPLETION_ID AS ENTITY_ID,WELL_COMPLETION_NAME AS ENTITY_NAME,'Well' AS ENTITY_TYPE,NULL AS ENTITY_SUB_TYPE FROM PDMDimSrc.DIMWELLCOMPLETION 
)WUF
ON WUF.ENTITY_KEY = FPS.W_WC_FAC_KEY
LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AS DAH ON FPS.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
LEFT OUTER JOIN PDMDimSrc.REF_DOWNTIMECATEGORY DC ON FPS.DT_REASON_KEY = DC.R_DOWN_TIME_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE DD ON FPS.DATE_KEY = DD.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE RCHD ON FPS.ROW_CHANGED_DATE_ID = RCHD.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE RCRD ON FPS.ROW_CREATED_DATE_ID = RCRD.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DIMTIME DT ON FPS.DT_STARTTIME_KEY = DT.TIMEKEY
LEFT OUTER JOIN PDMDimSrc.DIMTIME DTE ON FPS.DT_ENDTIME_KEY = DTE.TIMEKEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE CFD ON FPS.CARRY_START_DATE_KEY = CFD.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DIMNETWORK N ON FPS.DIM_NETWORK_KEY = N.DIM_NETWORK_KEY
WHERE DT_DURATION > 0 
 ); 
 
 CREATE VIEW ALARM_ROLLEDUP
(
ALARM_DATE	timestamp,
 ROLLEDUP_PARAM	string (100) NOT NULL,
 ROLLEDUP_TYPE	string (100),
 ROLLEDUP_VALUE integer,
 LEVEL1_ID	string (40),
 LEVEL1_NAME	string (255),
 LEVEL1_TYPE	string (100),
 LEVEL2_ID	string (40),
 LEVEL2_NAME	string (255),
 LEVEL2_TYPE	string (100),
 LEVEL3_ID	string (40),
 LEVEL3_NAME	string (255),
 LEVEL3_TYPE	string (100),
 LEVEL4_ID	string (40),
 LEVEL4_NAME	string (255),
 LEVEL4_TYPE	string (100),
 LEVEL5_ID	string (40),
 LEVEL5_NAME	string (255),
 LEVEL5_TYPE	string (100),
 LEVEL6_ID	string (40),
 LEVEL6_NAME	string (255) NOT NULL,
 LEVEL6_TYPE 	string (100),
CONSTRAINT PK_ALARM_RLUP PRIMARY KEY (LEVEL6_NAME,ROLLEDUP_PARAM))
OPTIONS (UPDATABLE 'FALSE',ALARM_ROLLEDUP.IMPLEMENTED 'TRUE')
AS
(
SELECT
 MAX(DAH.ALARM_CREATE_DATE),
cast(DAH.SEVERITY_NAME AS  string),
'Alarm Severity',
COUNT(DAH.ALARM_ID),
cast(DAH.LEVEL1_ID AS string),
cast(DAH.LEVEL1_NAME AS string),
cast(DAH.LEVEL1_TYPE AS string),
cast(DAH.LEVEL2_ID AS string),
cast(DAH.LEVEL2_NAME AS string),
cast(DAH.LEVEL2_TYPE AS string),
cast(DAH.LEVEL3_ID AS string),
cast(DAH.LEVEL3_NAME AS string),
cast(DAH.LEVEL3_TYPE AS string),
cast(DAH.LEVEL4_ID AS string),
cast(DAH.LEVEL4_NAME AS string),
cast(DAH.LEVEL4_TYPE AS string),
cast(DAH.LEVEL5_ID AS string),
cast(DAH.LEVEL5_NAME AS string),
cast(DAH.LEVEL5_TYPE AS string),
cast(DAH.LEVEL6_ID AS string),
cast(DAH.LEVEL6_NAME AS string),
cast(DAH.LEVEL6_TYPE AS string) 
FROM PDMDim.ALARM_EVENT DAH WHERE DAH.EVENT_STATUS IN ('Acknowledged','Active')
GROUP BY cast(DAH.SEVERITY_NAME AS  string),cast(DAH.LEVEL1_ID AS string),
cast(DAH.LEVEL1_NAME AS string),cast(DAH.LEVEL1_TYPE AS string),cast(DAH.LEVEL2_ID AS string),
cast(DAH.LEVEL2_NAME AS string),cast(DAH.LEVEL2_TYPE AS string),cast(DAH.LEVEL3_ID AS string),
cast(DAH.LEVEL3_NAME AS string),cast(DAH.LEVEL3_TYPE AS string),cast(DAH.LEVEL4_ID AS string),
cast(DAH.LEVEL4_NAME AS string),cast(DAH.LEVEL4_TYPE AS string),cast(DAH.LEVEL5_ID AS string),
cast(DAH.LEVEL5_NAME AS string),cast(DAH.LEVEL5_TYPE AS string),cast(DAH.LEVEL6_ID AS string),
cast(DAH.LEVEL6_NAME AS string),cast(DAH.LEVEL6_TYPE AS string) 
);

 CREATE VIEW ALARM_ROLLEDUP_GLOBAL
(
ALARM_DATE	timestamp,
 ROLLEDUP_PARAM	string (100) NOT NULL,
 ROLLEDUP_TYPE	string (100),
 ROLLEDUP_VALUE integer,
 LEVEL_ID	string (40),
 LEVEL_NAME	string (255) NOT NULL,
 LEVEL_TYPE 	string (100),
CONSTRAINT PK_ALARM_RLUP_G PRIMARY KEY (LEVEL_NAME,ROLLEDUP_PARAM))
OPTIONS (UPDATABLE 'FALSE',ALARM_ROLLEDUP_GLOBAL.IMPLEMENTED 'TRUE')
AS
(
SELECT
 MAX(DAH.ALARM_CREATE_DATE),
cast(DAH.SEVERITY_NAME AS  string),
'Alarm Severity',
COUNT(DAH.ALARM_ID),CASE WHEN DAH.LEVEL1_ID IS NULL THEN CASE WHEN DAH.LEVEL2_ID IS NULL THEN 
CASE WHEN DAH.LEVEL3_ID IS NULL THEN CASE WHEN DAH.LEVEL4_ID IS NULL THEN 
CASE WHEN DAH.LEVEL5_ID IS NULL THEN DAH.LEVEL6_ID ELSE DAH.LEVEL5_ID END
ELSE DAH.LEVEL4_ID END ELSE DAH.LEVEL3_ID END ELSE DAH.LEVEL2_ID END 
ELSE DAH.LEVEL1_ID END AS LEVEL_ID, 
CASE WHEN DAH.LEVEL1_NAME IS NULL THEN CASE WHEN DAH.LEVEL2_NAME IS NULL THEN 
CASE WHEN DAH.LEVEL3_NAME IS NULL THEN CASE WHEN DAH.LEVEL4_NAME IS NULL THEN 
CASE WHEN DAH.LEVEL5_NAME IS NULL THEN DAH.LEVEL6_NAME ELSE DAH.LEVEL5_NAME END
ELSE DAH.LEVEL4_NAME END ELSE DAH.LEVEL3_NAME END ELSE DAH.LEVEL2_NAME END 
ELSE DAH.LEVEL1_NAME END AS LEVEL_NAME,
CASE WHEN DAH.LEVEL1_TYPE IS NULL THEN CASE WHEN DAH.LEVEL2_TYPE IS NULL THEN 
CASE WHEN DAH.LEVEL3_TYPE IS NULL THEN CASE WHEN DAH.LEVEL4_TYPE IS NULL THEN 
CASE WHEN DAH.LEVEL5_TYPE IS NULL THEN DAH.LEVEL6_TYPE ELSE DAH.LEVEL5_TYPE END
ELSE DAH.LEVEL4_TYPE END ELSE DAH.LEVEL3_TYPE END ELSE DAH.LEVEL2_TYPE END 
ELSE DAH.LEVEL1_TYPE END AS LEVEL_TYPE 
FROM PDMDim.ALARM_EVENT DAH WHERE DAH.EVENT_STATUS IN ('Acknowledged','Active')
GROUP BY cast(DAH.SEVERITY_NAME AS  string),CASE WHEN DAH.LEVEL1_ID IS NULL THEN CASE WHEN DAH.LEVEL2_ID IS NULL THEN 
CASE WHEN DAH.LEVEL3_ID IS NULL THEN CASE WHEN DAH.LEVEL4_ID IS NULL THEN 
CASE WHEN DAH.LEVEL5_ID IS NULL THEN DAH.LEVEL6_ID ELSE DAH.LEVEL5_ID END
ELSE DAH.LEVEL4_ID END ELSE DAH.LEVEL3_ID END ELSE DAH.LEVEL2_ID END 
ELSE DAH.LEVEL1_ID END, 
CASE WHEN DAH.LEVEL1_NAME IS NULL THEN CASE WHEN DAH.LEVEL2_NAME IS NULL THEN 
CASE WHEN DAH.LEVEL3_NAME IS NULL THEN CASE WHEN DAH.LEVEL4_NAME IS NULL THEN 
CASE WHEN DAH.LEVEL5_NAME IS NULL THEN DAH.LEVEL6_NAME ELSE DAH.LEVEL5_NAME END
ELSE DAH.LEVEL4_NAME END ELSE DAH.LEVEL3_NAME END ELSE DAH.LEVEL2_NAME END 
ELSE DAH.LEVEL1_NAME END,
CASE WHEN DAH.LEVEL1_TYPE IS NULL THEN CASE WHEN DAH.LEVEL2_TYPE IS NULL THEN 
CASE WHEN DAH.LEVEL3_TYPE IS NULL THEN CASE WHEN DAH.LEVEL4_TYPE IS NULL THEN 
CASE WHEN DAH.LEVEL5_TYPE IS NULL THEN DAH.LEVEL6_TYPE ELSE DAH.LEVEL5_TYPE END
ELSE DAH.LEVEL4_TYPE END ELSE DAH.LEVEL3_TYPE END ELSE DAH.LEVEL2_TYPE END 
ELSE DAH.LEVEL1_TYPE END 
);

CREATE VIEW GAS_ANALYSIS_DETAILS
(
	ANALYSIS_DATE timestamp NOT NULL,
	SAMPLE_DATE timestamp NOT NULL,
	EQUIPMENT_ID string(40),
	EQUIPMENT_NAME string(100),
	BTU_FACTOR bigdecimal(15,4),
	GAS_INIT_PRESSURE bigdecimal(15,4),
	GAS_INIT_TEMPERATURE bigdecimal(15,4),
	SUPERCOMPRESSIBILITY bigdecimal(15,4),
	WOBBE_INDEX bigdecimal(15,4),
	SPECIFIC_GRAVITY bigdecimal(15,4),
	ISO_BUTANE_PERC bigdecimal(15,4),
	BUTANE_PERC bigdecimal(15,4),
	CARBON_DIOXIDE_PERC bigdecimal(15,4),
	DECANE_PERC bigdecimal(15,4),
	DODECANE_PERC bigdecimal(15,4),
	ETHANE_PERC bigdecimal(15,4),
	HELIUM_PERC bigdecimal(15,4),
	HEPTANE_PERC bigdecimal(15,4),
	HEXANE_PERC bigdecimal(15,4),
	HYD_SULPHIDE_PERC bigdecimal(15,4),
	METHANE_PERC bigdecimal(15,4),
	ISO_PENTANE_PERC bigdecimal(15,4),
	NONANE_PERC bigdecimal(15,4),
	PENTANE_PERC bigdecimal(15,4),
	PROPANE_PERC bigdecimal(15,4),
	NITROGEN_PERC bigdecimal(15,4),
	HYDROGEN_PERC bigdecimal(15,4),
	OXYGEN_PERC bigdecimal(15,4),
	UNDECANE_PERC bigdecimal(15,4),
	OCTANE_PERC bigdecimal(15,4),
	HEX_PLUS_PERC bigdecimal(15,4),
	PRESSURE_UOM string(20),
	TEMPERATURE_UOM string(20),
	ANALYSIS_ID string(40),
	ENTITY_NAME string(255),
	ENTITY_ID string(40),
	REMARKS string(2000),
	SOURCE_ID string(40),
	SOURCE_NAME string(100),
	ROW_CHANGED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
	 LEVEL1_ID	string (40),
	 LEVEL1_NAME	string (255),
	 LEVEL1_TYPE	string (100),
	 LEVEL2_ID	string (40),
	 LEVEL2_NAME	string (255),
	 LEVEL2_TYPE	string (100),
	 LEVEL3_ID	string (40),
	 LEVEL3_NAME	string (255),
	 LEVEL3_TYPE	string (100),
	 LEVEL4_ID	string (40),
	 LEVEL4_NAME	string (255),
	 LEVEL4_TYPE	string (100),
	 LEVEL5_ID	string (40),
	 LEVEL5_NAME	string (255),
	 LEVEL5_TYPE	string (100),
	 LEVEL6_ID	string (40),
	 LEVEL6_NAME	string (255) NOT NULL,
	 LEVEL6_TYPE 	string (100),	
	GAS_ANALYSIS_ID string(40),
CONSTRAINT PK_SA_GAS_ANALYSIS_DIM PRIMARY KEY (GAS_ANALYSIS_ID))
OPTIONS (UPDATABLE 'FALSE',GAS_ANALYSIS_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT CAST((DD.FORMATTEDDATE2 || ' ' || DT.TIME24) AS TIMESTAMP) ANALYSIS_DATE, NULL AS SAMPLE_DATE,
NULL AS EQUIPMENT_ID, NULL AS EQUIPMENT_NAME,NULL AS BTU_FACTOR, NULL AS GAS_INIT_PRESSURE,
NULL AS GAS_INIT_TEMPERATURE,NULL AS SUPERCOMPRESSEBILITY, NULL AS WOBBE_INDEX, NULL AS SPECIAL_GRAVITY,
FAD.ISO_BUTANE_IC4,FAD.BUTANE_C4,FAD.CARBON_DIOXIDE_CO2,FAD.DECANE_C10,FAD.DODECANE_C12,FAD.ETHANE_C2,FAD.HELIUM_HE,FAD.HEPTANE_C7,
FAD.HEXANE_C6,FAD.HYDROGEN_SULFIDE_H2S,FAD.METHANE_C1,FAD.ISO_PENTANE_IC5,FAD.NONANE_C9,FAD.PENTANE_C5,FAD.PROPANE_C3,
FAD.NITROGEN_N2,FAD.HYDROGEN_H2,FAD.OXYGEN_O2,FAD.UNDECANE_C11,FAD.OCTANE_C7,FAD.HEXANE_PLUS_C6,NULL AS PRESSURE_UOM,
NULL AS TEMPERATURE_UOM,NULL AS ANALYSIS_ID,DWC.WELL_COMPLETION_NAME,DWC.WELL_OR_COMPLETION_ID,NULL AS REMARKS,
NULL AS SOURCE_ID,NULL AS SOURCE_NAME,FAD.ROW_CHANGED_BY,CAST(RCHD.FORMATTEDDATE AS TIMESTAMP),CAST(RCRD.FORMATTEDDATE AS TIMESTAMP),FAD.ROW_CREATED_BY,DAH.LEVEL1_ID,
DAH.LEVEL1_NAME,DAH.LEVEL1_TYPE,DAH.LEVEL2_ID,DAH.LEVEL2_NAME,DAH.LEVEL2_TYPE,DAH.LEVEL3_ID,DAH.LEVEL3_NAME,DAH.LEVEL3_TYPE,
DAH.LEVEL4_ID,DAH.LEVEL4_NAME,DAH.LEVEL4_TYPE,DAH.LEVEL5_ID,DAH.LEVEL5_NAME,DAH.LEVEL5_TYPE,
DAH.LEVEL6_ID,DAH.LEVEL6_NAME,DAH.LEVEL6_TYPE,CAST(FAD.FACTANALYSIS_DETAILS_KEY AS STRING)
FROM 
PDMDimSrc.FACTANALYSISDETAILS FAD
INNER JOIN PDMDimSrc.DIMDATE DD ON FAD.DATE_KEY = DD.DATE_KEY
INNER JOIN PDMDimSrc.DIMTIME DT ON FAD.TIME_KEY = DT.TIMEKEY
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION DWC ON FAD.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON FAD.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE RCRD ON FAD.ROW_CREATED_DATE_ID = RCRD.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE RCHD ON FAD.ROW_UPDATED_DATE_ID = RCHD.DATE_KEY
);

CREATE VIEW FLOW_CHOKE_DETAILS
(
	MEASUREMENT_DATE timestamp,
	EFFECTIVE_DATE timestamp,
	EXPIRY_DATE timestamp,
	CHOKE_DURATION bigdecimal(15,4),
	DURATION_UOM string(20),
	CHOKE_SIZE bigdecimal(15,4),
	CHOKE_IND string(10),
	SIZE_UOM string(20),
	OIL_MEASURED_VOLUME bigdecimal(15,4),
	GAS_MEASURED_VOLUME bigdecimal(15,4),
	WATER_MEASURED_VOLUME bigdecimal(15,4),
	GLP_MEASURED_VOLUME bigdecimal(15,4),
	GASOLIN_MEASURED_VOLUME bigdecimal(15,4),
	OIL_UOM string(20),
	GAS_UOM string(20),
	WATER_UOM string(20),
	GLP_UOM string(20),
	GASOLIN_UOM string(20),
	ENTITY_NAME string(255),
	ENTITY_ID string(40),
	SOURCE_ID string(40),
	SOURCE_NAME string(100),
	ROW_CHANGED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
	 LEVEL1_ID	string (40),
	 LEVEL1_NAME	string (255),
	 LEVEL1_TYPE	string (100),
	 LEVEL2_ID	string (40),
	 LEVEL2_NAME	string (255),
	 LEVEL2_TYPE	string (100),
	 LEVEL3_ID	string (40),
	 LEVEL3_NAME	string (255),
	 LEVEL3_TYPE	string (100),
	 LEVEL4_ID	string (40),
	 LEVEL4_NAME	string (255),
	 LEVEL4_TYPE	string (100),
	 LEVEL5_ID	string (40),
	 LEVEL5_NAME	string (255),
	 LEVEL5_TYPE	string (100),
	 LEVEL6_ID	string (40),
	 LEVEL6_NAME	string (255) NOT NULL,
	 LEVEL6_TYPE 	string (100),		
	FLOW_CHOKE_DETAILS_ID string(40),
CONSTRAINT PK_CHOKE_DETAILS_DIM PRIMARY KEY (FLOW_CHOKE_DETAILS_ID))
OPTIONS (UPDATABLE 'FALSE',FLOW_CHOKE_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT CAST((DD.FORMATTEDDATE2 || ' ' || DT.TIME24) AS TIMESTAMP) MEASUREMENT_DATE, CAST(DD.FORMATTEDDATE AS TIMESTAMP) AS EFFECTIVE_DATE,
NULL AS EXPIRY_DATE,FCD.HOURS_CHOKE_USED,'h',FCD.CHOKE_SETTING,NULL AS CHOKE_IND,'in',FCD.OIL_MEASURED_VOLUME,FCD.GAS_MEASURED_VOLUME,
FCD.WATER_MEASURED_VOLUME,FCD.GLP_MEASURED_VOLUME,FCD.GASOLINE_MEAS_VOLUME,'bbl','mcf','bbl',null,null,
DWC.WELL_COMPLETION_NAME,DWC.WELL_OR_COMPLETION_ID,null,null,FCD.ROW_CHANGED_BY,CAST(RCHD.FORMATTEDDATE AS TIMESTAMP),CAST(RCRD.FORMATTEDDATE AS TIMESTAMP),
FCD.ROW_CREATED_BY,DAH.LEVEL1_ID,DAH.LEVEL1_NAME,DAH.LEVEL1_TYPE,DAH.LEVEL2_ID,DAH.LEVEL2_NAME,DAH.LEVEL2_TYPE,DAH.LEVEL3_ID,
DAH.LEVEL3_NAME,DAH.LEVEL3_TYPE,
DAH.LEVEL4_ID,DAH.LEVEL4_NAME,DAH.LEVEL4_TYPE,DAH.LEVEL5_ID,DAH.LEVEL5_NAME,DAH.LEVEL5_TYPE,
DAH.LEVEL6_ID,DAH.LEVEL6_NAME,DAH.LEVEL6_TYPE,CAST(FCD.FACT_CHOKEDETAILS_KEY AS STRING)
FROM 
PDMDimSrc.FACTCHOKEDETAILS FCD
INNER JOIN PDMDimSrc.DIMDATE DD ON FCD.DATE_KEY = DD.DATE_KEY
INNER JOIN PDMDimSrc.DIMTIME DT ON FCD.INIT_TIME_KEY = DT.TIMEKEY
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION DWC ON FCD.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON FCD.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE RCRD ON FCD.ROW_CREATED_DATE_ID = RCRD.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE RCHD ON FCD.ROW_UPDATED_DATE_ID = RCHD.DATE_KEY
);

CREATE VIEW POOL
(
	POOL_ID string(40),
	POOL_NAME string(100),
	POOL_STATUS string(100),
	POOL_TYPE string(100),
	OIL_RESERVE	bigdecimal	(15,4),
	GAS_RESERVE bigdecimal	(15,4),
	BOE_RESERVE bigdecimal	(15,4),
	OIL_UNREC bigdecimal	(15,4),
	GAS_UNREC bigdecimal	(15,4),
	BOE_UNREC bigdecimal	(15,4),
	OIL_REM_RESERVE bigdecimal	(15,4),
	GAS_REM_RESERVE bigdecimal	(15,4),
	BOE_REM_RESERVE bigdecimal	(15,4),
	OIL_IN_PLACE	bigdecimal	(15,4),
	GAS_IN_PLACE	bigdecimal	(15,4),
	BOE_IN_PLACE	bigdecimal	(15,4),
	OIL_CUM bigdecimal	(15,4),
	GAS_CUM bigdecimal	(15,4),
	BOE_CUM bigdecimal	(15,4),
	 WATER_CUM bigdecimal	(15,4),	
	OIL_UOM	string	(20),
	GAS_UOM	string	(20),
 RESERVE_ESTIMATOR string(100),
 LATITUDE bigdecimal	(15,4),
 LONGITUDE bigdecimal	(15,4),
	REMARKS string(2000),
	SOURCE_ID string(40),
	SOURCE_NAME string(100),
	ROW_CHANGED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
CONSTRAINT PK_POOL_DIM PRIMARY KEY (POOL_ID))
OPTIONS (UPDATABLE 'FALSE',POOL.IMPLEMENTED 'TRUE')
AS
(
	SELECT P.POOL_ID,P.POOL_NAME,PL.POOL_STATUS,PL.POOL_TYPE,
	P.OIL_RESERVE, P.GAS_RESERVE, P.BOE_RESERVE,
	P.UNRECOVERABLE_OIL,P.UNRECOVERABLE_GAS,P.UNRECOVERABLE_BOE,
	PR.OIL_RESERVE AS REM_OIL_RESERVE, PR.GAS_RESERVE AS REM_GAS_RESERVE,
	PR.BOE_RESERVE AS REM_BOE_RESERVE,
	PR.OIL_IN_PLACE, PR.GAS_IN_PLACE, PR.BOE_IN_PLACE,
	PR.CUM_OIL, PR.CUM_GAS, PR.CUM_BOE,
	PR.CUM_WATER, OU.UOM_NAME, GU.UOM_NAME,
	P.RESERVE_ESTIMATOR, P.LATITUDE, P.LONGITUDE, 
	 PL.REMARKS,
	PL.SOURCE_ID,PL.SOURCE_NAME,PL.ROW_CHANGED_BY,PL.ROW_CHANGED_DATE,
	PL.ROW_CREATED_DATE,PL.ROW_CREATED_BY
	FROM PDMDimSrc.DIM_RESERVES P
	INNER JOIN PDMTx.POOL PL ON P.POOL_ID = PL.POOL_ID
	LEFT OUTER JOIN (select POOL_ID,OIL_RESERVE, GAS_RESERVE, BOE_RESERVE,
	OIL_IN_PLACE, GAS_IN_PLACE, BOE_IN_PLACE, CUM_OIL, CUM_GAS, CUM_BOE, CUM_WATER,
	ROW_NUMBER() OVER (PARTITION BY POOL_ID ORDER BY DATE_KEY DESC) ROW_NUM
	from 
	PDMDimSrc.FACT_POOL_RESERVE_SUMMARY)PR ON (P.POOL_ID = PR.POOL_ID AND PR.ROW_NUM = 1)
	LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE OU ON P.OIL_UOM_KEY = OU.DIM_UOM_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE GU ON P.GAS_UOM_KEY = GU.DIM_UOM_KEY
);

CREATE VIEW POOL_WELL_COMPL_PERCENT
(
	POOL_ID string(40),
	ENTITY_ID string(40),
	POOL_NAME string(100),
	ENTITY_NAME string(255),
	WELL_COMPL_IND string(10),
	EFFECTIVE_DATE timestamp,
	EXPIRY_DATE timestamp,
	OIL_PERCENT bigdecimal(15,4),
	GAS_PERCENT bigdecimal(15,4),
	WATER_PERCENT bigdecimal(15,4),
	OTHER1_PERCENT bigdecimal(15,4),
	OTHER2_PERCENT bigdecimal(15,4),
	REMARKS string(2000),
	SOURCE_ID string(40),
	SOURCE_NAME string(100),
	ROW_CHANGED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
	 PRODUCTION_STATUS string (100), 
 OPERATING_STATUS string (100), 
 PRIMARY_PRODUCT string (100), 
 PRODUCTION_METHOD string (100), 
	POOL_WELL_COMPL_ID string(40),
CONSTRAINT PK_POOL_WELL_COMPL_DIM PRIMARY KEY (POOL_WELL_COMPL_ID))
OPTIONS (UPDATABLE 'FALSE',POOL_WELL_COMPL_PERCENT.IMPLEMENTED 'TRUE')
AS
(
	SELECT F.POOL_ID,DWC.WELL_OR_COMPLETION_ID,F.POOL_NAME,DWC.WELL_COMPLETION_NAME,
	DWC.WELL_OR_COMPLETION, CAST(EF.FORMATTEDDATE AS TIMESTAMP),
	CAST(EX.FORMATTEDDATE AS TIMESTAMP),F.OIL_PERCENT,
	F.GAS_PERCENT,F.WATER_PERCENT,F.OTHER1_PERCENT,F.OTHER2_PERCENT,F.REMARKS,NULL,
	NULL,NULL,NULL,
	CAST(RCRD.FORMATTEDDATE AS TIMESTAMP),F.ROW_CREATED_BY,
	DWC.PRODUCTION_STATUS, DWC.OPERATING_STATUS, DWC.PRIMARY_PRODUCT, DWC.PRODUCTION_METHOD,
	CAST(F.DIM_POOL_WELLCOMPL_KEY AS STRING)
	FROM 
	PDMDimSrc.DIMPOOL F
	INNER JOIN PDMDimSrc.DIMWELLCOMPLETION DWC ON F.DIM_WELLCOMPL_KEY = DWC.DIM_WELLCOMPL_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMDATE EF ON F.EFFECTIVE_DATE_ID = EF.DATE_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMDATE EX ON F.EXPIRY_DATE_ID = EX.DATE_KEY		
	LEFT OUTER JOIN PDMDimSrc.DIMDATE RCRD ON F.ROW_CREATED_DATE_ID = RCRD.DATE_KEY
);

CREATE VIEW POOL_PRODUCTION_VOLUME
(
 VOLUME_DATE	timestamp,
 PERIOD_TYPE	string	(100),
 OIL	bigdecimal	(15,4),
 OIL_POT	bigdecimal	(15,4),
 OIL_UOM	string	(20),
 GAS	bigdecimal	(15,4),
 GAS_POT	bigdecimal	(15,4),
 GAS_UOM	string	(20),
 WATER	bigdecimal	(15,4),
 WATER_POT	bigdecimal	(15,4),
 WATER_UOM	string	(20),
 LIQUID	bigdecimal	(15,4),
  LIQUID_POT	bigdecimal	(15,4),
  GAS_BOE	bigdecimal	(15,4),
 GAS_BOE_POT	bigdecimal(15,4),
 INJ_WATER	bigdecimal	(15,4),
 INJ_WATER_POT 	bigdecimal(15,4),
 INJ_STEAM	bigdecimal	(15,4),
 INJ_STEAM_POT	bigdecimal(15,4),
 INJ_STEAM_UOM	string(20),
 GOR	bigdecimal	(15,4),
 GOR_UOM	string	(20),
 WC	bigdecimal	(15,4),
 WC_UOM	string	(20),
 WOR	bigdecimal	(15,4),
 WOR_UOM	string	(20),
 GOR_POT	bigdecimal	(15,4),
 WC_POT	bigdecimal	(15,4),
 WOR_POT	bigdecimal	(15,4),
 OC	bigdecimal	(15,4),
 OC_UOM string(20),
 OC_POT	bigdecimal	(15,4),
 OGR	bigdecimal	(15,4),
 OGR_UOM string(20),
 OGR_POT	bigdecimal	(15,4),
CUM_OIL	bigdecimal	(15,4),
CUM_OIL_POT	bigdecimal	(15,4),
CUM_GAS	bigdecimal	(15,4),
CUM_GAS_POT	bigdecimal	(15,4),
CUM_WATER	bigdecimal	(15,4),
CUM_WATER_POT	bigdecimal	(15,4),
CUM_LIQUID	bigdecimal	(15,4),
CUM_LIQUID_POT	bigdecimal	(15,4),
CUM_GAS_BOE	bigdecimal	(15,4),
CUM_GAS_BOE_POT	bigdecimal	(15,4),
CUM_INJ_WATER	bigdecimal	(15,4),
CUM_INJ_WATER_POT	bigdecimal	(15,4),
CUM_INJ_STEAM	bigdecimal	(15,4),
CUM_INJ_STEAM_POT	bigdecimal	(15,4),
CUM_GOR	bigdecimal	(15,4),
CUM_WC	bigdecimal	(15,4),
CUM_WOR	bigdecimal	(15,4),
CUM_GOR_POT	bigdecimal	(15,4),
CUM_WC_POT	bigdecimal	(15,4),
CUM_WOR_POT	bigdecimal	(15,4),
CUM_OC	bigdecimal	(15,4),
CUM_OC_POT	bigdecimal	(15,4),
CUM_OGR	bigdecimal	(15,4),
CUM_OGR_POT	bigdecimal	(15,4),
CD_OIL	bigdecimal	(15,4),
CD_OIL_POT	bigdecimal	(15,4),
CD_GAS	bigdecimal	(15,4),
CD_GAS_POT	bigdecimal	(15,4),
CD_WATER	bigdecimal	(15,4),
CD_WATER_POT	bigdecimal	(15,4),
CD_LIQUID	bigdecimal	(15,4),
CD_LIQUID_POT	bigdecimal	(15,4),
CD_GAS_BOE	bigdecimal	(15,4),
CD_GAS_BOE_POT	bigdecimal	(15,4),
CD_INJ_WATER	bigdecimal	(15,4),
CD_INJ_WATER_POT	bigdecimal	(15,4),
CD_INJ_STEAM	bigdecimal	(15,4),
CD_INJ_STEAM_POT	bigdecimal	(15,4),
CD_GOR	bigdecimal	(15,4),
CD_WC	bigdecimal	(15,4),
CD_WOR	bigdecimal	(15,4),
CD_GOR_POT	bigdecimal	(15,4),
CD_WC_POT	bigdecimal	(15,4),
CD_WOR_POT	bigdecimal	(15,4),
CD_OC	bigdecimal	(15,4),
CD_OC_POT	bigdecimal	(15,4),
CD_OGR	bigdecimal	(15,4),
CD_OGR_POT	bigdecimal	(15,4),
 POOL_ID	string	(100)	NOT NULL	, 
 POOL_NAME	string	(255),
 SOURCE	string	(100),
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string	(100),
 POOL_VOL_ID	string	(40)	NOT NULL	,
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
 PRODUCTION_STATUS 	string	(100),
 OPERATING_STATUS 	string	(100),
 PRODUCTION_METHOD 	string	(100),
 ENTITY_ID string(40),
 ENTITY_NAME string(255),
CONSTRAINT PK_POOL_PROD_VOLUME PRIMARY KEY (POOL_VOL_ID))
OPTIONS (UPDATABLE 'FALSE', POOL_PRODUCTION_VOLUME.IMPLEMENTED 'TRUE')
AS
 ( 
  SELECT
CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS	VOLUME_DATE,
cast(FPS.PERIOD_ID as string) AS PERIOD_TYPE,FPS.OIL_ALLOCATED_VOLUME AS	 OIL,
FPS.OIL_PREDICTED_VOLUME AS	 OIL_POT,FPS.OIL_VOLUME_UOM AS OIL_UOM,
FPS.GAS_ALLOCATED_VOLUME AS	 GAS,FPS.GAS_PREDICTED_VOLUME AS	 GAS_POT,
FPS.GAS_VOLUME_UOM AS GAS_UOM,FPS.WATER_ALLOCATED_VOLUME AS WATER,
FPS.WATER_PREDICTED_VOLUME AS WATER_POT,FPS.WATER_VOLUME_UOM AS WATER_UOM,
FPS.LIQUID_ALLOC_VOLUME AS	LIQUID,FPS.LIQUID_PREDICTED_VOLUME AS	LIQUID_POT,
FPS.GAS_BOE AS GAS_BOE,FPS.GAS_BOE_POT  AS	GAS_BOE_POT,FPS.WATER_INJ_VOLUME AS INJ_WATER,
FPS.WATER_INJ_PREDICTED_VOLUME AS INJ_WATER_POT ,FPS.INJ_STEAM AS INJ_STEAM,
FPS.INJ_STEAM_POT AS INJ_STEAM_POT,FPS.INJ_STEAM_UOM AS INJ_STEAM_UOM,
FPS.GOR,cast(FPS.GAS_VOLUME_UOM as string) || '/' || cast(FPS.OIL_VOLUME_UOM as string),
FPS.WCT,cast(FPS.WATER_VOLUME_UOM as string) || '/' || cast(FPS.OIL_VOLUME_UOM as string),
FPS.WOR,cast(FPS.WATER_VOLUME_UOM as string) || '/' || cast(FPS.OIL_VOLUME_UOM as string),
FPS.GOR_PREDICTED AS GOR_POT,FPS.WCT_PREDICTED AS	 WC_POT,
FPS.WOR_PREDICTED AS WOR_POT,FPS.OCT,
cast(FPS.OIL_VOLUME_UOM as string) || '/' || cast(FPS.WATER_VOLUME_UOM as string),
FPS.OCT_PREDICTED AS OC_POT,FPS.OGR,
cast(FPS.OIL_VOLUME_UOM as string) || '/' || cast(FPS.GAS_VOLUME_UOM as string),
FPS.OGR_PREDICTED AS OGR_POT,FPS.CUM_OIL_VOLUME,FPS.CUM_OIL_POT,FPS.CUM_GAS_VOLUME,
FPS.CUM_GAS_POT,FPS.CUM_WATER_VOLUME,FPS.CUM_WATER_POT,FPS.CUM_LIQUID,FPS.CUM_LIQUID_POT,
FPS.CUM_GAS_BOE AS	CUM_GAS_BOE,FPS.CUM_GAS_BOE_POT AS	CUM_GAS_BOE_POT,FPS.CUM_INJ_WATER AS CUM_INJ_WATER,
FPS.CUM_INJ_WATER_POT AS CUM_INJ_WATER_POT,FPS.CUM_INJ_STEAM AS	CUM_INJ_STEAM,FPS.CUM_INJ_STEAM_POT AS	CUM_INJ_STEAM_POT,
FPS.CUM_GOR,FPS.CUM_WCT,FPS.CUM_WOR AS	CUM_WOR,FPS.CUM_GOR_POT,FPS.CUM_WCT_POT,
FPS.CUM_WOR_POT,FPS.CUM_OCT,FPS.CUM_OCT_POT,FPS.CUM_OGR AS CUM_OGR,FPS.CUM_OGR_POT,
FPS.CD_OIL,FPS.CD_OIL_POT,FPS.CD_GAS,FPS.CD_GAS_POT,FPS.CD_WATER,FPS.CD_WATER_POT,
FPS.CD_LIQUID,FPS.CD_LIQUID_POT,FPS.CD_GAS_BOE AS	CD_GAS_BOE,FPS.CD_GAS_BOE_POT AS	CD_GAS_BOE_POT,
FPS.CD_INJ_WATER AS CD_INJ_WATER,FPS.CD_INJ_WATER_POT AS CD_INJ_WATER_POT,FPS.CD_INJ_STEAM AS	CD_INJ_STEAM,
FPS.CD_INJ_STEAM_POT AS	CD_INJ_STEAM_POT,FPS.CD_GOR,FPS.CD_WCT,FPS.CD_WOR AS	CD_WOR,
FPS.CD_GOR_POT,FPS.CD_WCT_POT,FPS.CD_WOR_POT,FPS.CD_OCT,FPS.CD_OCT_POT,FPS.CD_OGR AS CD_OGR,
FPS.CD_OGR_POT,cast(FPS.POOL_ID as string),cast(FPS.POOL_NAME as string),
NULL AS	 SOURCE,NULL AS ROW_CHANGED_BY,
CAST(FPS.FORMATTEDDATE_RCHG AS TIMESTAMP) AS	 ROW_CHANGED_DATE,
CAST(FPS.FORMATTEDDATE_RCRT AS TIMESTAMP) AS ROW_CREATED_DATE,
 NULL AS ROW_CREATED_BY,
UUID() AS VOL_ID,cast(DAH.LEVEL1_ID as string),cast(DAH.LEVEL1_NAME as string),
cast(DAH.LEVEL1_TYPE as string),cast(DAH.LEVEL2_ID as string),cast(DAH.LEVEL2_NAME as string),cast(DAH.LEVEL2_TYPE as string),
cast(DAH.LEVEL3_ID as string),cast(DAH.LEVEL3_NAME as string),cast(DAH.LEVEL3_TYPE as string),
cast(DAH.LEVEL4_ID as string),cast(DAH.LEVEL4_NAME as string),cast(DAH.LEVEL4_TYPE as string),
cast(DAH.LEVEL5_ID as string),cast(DAH.LEVEL5_NAME as string),cast(DAH.LEVEL5_TYPE as string),
cast(DAH.LEVEL6_ID as string),cast(DAH.LEVEL6_NAME as string),cast(DAH.LEVEL6_TYPE as string) ,
FPS.PRODUCTION_STATUS, FPS.OPERATING_STATUS, FPS.PRODUCTION_METHOD,
FPS.WELL_COMPLETION_NAME, FPS.WELL_OR_COMPLETION_ID
 FROM PDMDimSrc.VW_FACTPOOLSUMMARY AS FPS
  LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AS DAH ON FPS.DIM_ASSETHIERARCHY_KEY = DAH.Dim_ASSETHIERARCHY_KEY
 );
 
CREATE VIEW ZONE
(
	ZONE_ID string(40),
	ZONE_NAME string(100),
	ZONE_STATUS string(100),
	BASE_DEPTH bigdecimal(15,4),
	TOP_DEPTH bigdecimal(15,4),
	DEPTH_UOM string(20),
	REMARKS string(2000),
	SOURCE_ID string(40),
	SOURCE_NAME string(100),
	ROW_CHANGED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
CONSTRAINT PK_ZONE_DIM PRIMARY KEY (ZONE_ID))
OPTIONS (UPDATABLE 'FALSE',ZONE.IMPLEMENTED 'TRUE')
AS
(
SELECT Z.ZONE_ID,Z.ZONE_NAME,Z.ZONE_STATUS,Z.BASE_DEPTH,Z.TOP_DEPTH, Z.DEPTH_UOM,
	Z.REMARKS, Z.SOURCE_ID,Z.SOURCE_NAME,Z.ROW_CHANGED_BY,Z.ROW_CHANGED_DATE,
	Z.ROW_CREATED_DATE,Z.ROW_CREATED_BY
	FROM PDMTx.ZONE Z
);

CREATE VIEW ZONE_WELL_COMPL_PERCENT
(
	ZONE_ID string(40),
	ENTITY_ID string(40),
	ZONE_NAME string(100),
	ENTITY_NAME string(255),
	WELL_COMPL_IND string(10),
	EFFECTIVE_DATE timestamp,
	EXPIRY_DATE timestamp,
	OIL_PERCENT bigdecimal(15,4),
	GAS_PERCENT bigdecimal(15,4),
	WATER_PERCENT bigdecimal(15,4),
	OTHER1_PERCENT bigdecimal(15,4),
	OTHER2_PERCENT bigdecimal(15,4),
	REMARKS string(2000),
	SOURCE_ID string(40),
	SOURCE_NAME string(100),
	ROW_CHANGED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
	ZONE_WELL_COMPL_ID string(40),
CONSTRAINT PK_ZONE_WELL_COMPL_DIM PRIMARY KEY (ZONE_WELL_COMPL_ID))
OPTIONS (UPDATABLE 'FALSE',ZONE_WELL_COMPL_PERCENT.IMPLEMENTED 'TRUE')
AS
(
	SELECT F.ZONE_ID,DWC.WELL_OR_COMPLETION_ID,F.ZONE_NAME,DWC.WELL_COMPLETION_NAME,
	DWC.WELL_OR_COMPLETION, CAST(EF.FORMATTEDDATE AS TIMESTAMP),
	CAST(EX.FORMATTEDDATE AS TIMESTAMP),F.OIL_PERCENT,
	F.GAS_PERCENT,F.WATER_PERCENT,F.OTHER1_PERCENT,F.OTHER2_PERCENT,F.REMARKS,NULL,
	NULL,NULL,NULL,
	CAST(RCRD.FORMATTEDDATE AS TIMESTAMP),F.ROW_CREATED_BY,
	CAST(F.DIM_ZONE_WELLCOMPL_KEY AS STRING)
	FROM 
	PDMDimSrc.DIMZONE F
	INNER JOIN PDMDimSrc.DIMWELLCOMPLETION DWC ON F.DIM_WELLCOMPL_KEY = DWC.DIM_WELLCOMPL_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMDATE EF ON F.EFFECTIVE_DATE_ID = EF.DATE_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMDATE EX ON F.EXPIRY_DATE_ID = EX.DATE_KEY		
	LEFT OUTER JOIN PDMDimSrc.DIMDATE RCRD ON F.ROW_CREATED_DATE_ID = RCRD.DATE_KEY
);

CREATE VIEW ZONE_PRODUCTION_VOLUME
(
 VOLUME_DATE	timestamp,
 PERIOD_TYPE	string	(100),
 OIL	bigdecimal	(15,4),
 OIL_POT	bigdecimal	(15,4),
 OIL_UOM	string	(20),
 GAS	bigdecimal	(15,4),
 GAS_POT	bigdecimal	(15,4),
 GAS_UOM	string	(20),
 WATER	bigdecimal	(15,4),
 WATER_POT	bigdecimal	(15,4),
 WATER_UOM	string	(20),
 LIQUID	bigdecimal	(15,4),
  LIQUID_POT	bigdecimal	(15,4),
  GAS_BOE	bigdecimal	(15,4),
 GAS_BOE_POT	bigdecimal(15,4),
 INJ_WATER	bigdecimal	(15,4),
 INJ_WATER_POT 	bigdecimal(15,4),
 INJ_STEAM	bigdecimal	(15,4),
 INJ_STEAM_POT	bigdecimal(15,4),
 INJ_STEAM_UOM	string(20),
 GOR	bigdecimal	(15,4),
 GOR_UOM	string	(20),
 WC	bigdecimal	(15,4),
 WC_UOM	string	(20),
 WOR	bigdecimal	(15,4),
 WOR_UOM	string	(20),
 GOR_POT	bigdecimal	(15,4),
 WC_POT	bigdecimal	(15,4),
 WOR_POT	bigdecimal	(15,4),
 OC	bigdecimal	(15,4),
 OC_UOM string(20),
 OC_POT	bigdecimal	(15,4),
 OGR	bigdecimal	(15,4),
 OGR_UOM string(20),
 OGR_POT	bigdecimal	(15,4),
CUM_OIL	bigdecimal	(15,4),
CUM_OIL_POT	bigdecimal	(15,4),
CUM_GAS	bigdecimal	(15,4),
CUM_GAS_POT	bigdecimal	(15,4),
CUM_WATER	bigdecimal	(15,4),
CUM_WATER_POT	bigdecimal	(15,4),
CUM_LIQUID	bigdecimal	(15,4),
CUM_LIQUID_POT	bigdecimal	(15,4),
CUM_GAS_BOE	bigdecimal	(15,4),
CUM_GAS_BOE_POT	bigdecimal	(15,4),
CUM_INJ_WATER	bigdecimal	(15,4),
CUM_INJ_WATER_POT	bigdecimal	(15,4),
CUM_INJ_STEAM	bigdecimal	(15,4),
CUM_INJ_STEAM_POT	bigdecimal	(15,4),
CUM_GOR	bigdecimal	(15,4),
CUM_WC	bigdecimal	(15,4),
CUM_WOR	bigdecimal	(15,4),
CUM_GOR_POT	bigdecimal	(15,4),
CUM_WC_POT	bigdecimal	(15,4),
CUM_WOR_POT	bigdecimal	(15,4),
CUM_OC	bigdecimal	(15,4),
CUM_OC_POT	bigdecimal	(15,4),
CUM_OGR	bigdecimal	(15,4),
CUM_OGR_POT	bigdecimal	(15,4),
CD_OIL	bigdecimal	(15,4),
CD_OIL_POT	bigdecimal	(15,4),
CD_GAS	bigdecimal	(15,4),
CD_GAS_POT	bigdecimal	(15,4),
CD_WATER	bigdecimal	(15,4),
CD_WATER_POT	bigdecimal	(15,4),
CD_LIQUID	bigdecimal	(15,4),
CD_LIQUID_POT	bigdecimal	(15,4),
CD_GAS_BOE	bigdecimal	(15,4),
CD_GAS_BOE_POT	bigdecimal	(15,4),
CD_INJ_WATER	bigdecimal	(15,4),
CD_INJ_WATER_POT	bigdecimal	(15,4),
CD_INJ_STEAM	bigdecimal	(15,4),
CD_INJ_STEAM_POT	bigdecimal	(15,4),
CD_GOR	bigdecimal	(15,4),
CD_WC	bigdecimal	(15,4),
CD_WOR	bigdecimal	(15,4),
CD_GOR_POT	bigdecimal	(15,4),
CD_WC_POT	bigdecimal	(15,4),
CD_WOR_POT	bigdecimal	(15,4),
CD_OC	bigdecimal	(15,4),
CD_OC_POT	bigdecimal	(15,4),
CD_OGR	bigdecimal	(15,4),
CD_OGR_POT	bigdecimal	(15,4),
 ZONE_ID	string	(100)	NOT NULL	, 
 ZONE_NAME	string	(255),
 SOURCE	string	(100),
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string	(100),
 ZONE_VOL_ID	string	(40)	NOT NULL	,
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
CONSTRAINT PK_ZONE_PROD_VOLUME PRIMARY KEY (ZONE_VOL_ID))
OPTIONS (UPDATABLE 'FALSE', ZONE_PRODUCTION_VOLUME.IMPLEMENTED 'TRUE')
AS
 ( 
  SELECT
CAST(FPS.FORMATTEDDATE AS TIMESTAMP) AS	VOLUME_DATE,
cast(FPS.PERIOD_ID as string) AS PERIOD_TYPE,FPS.OIL_ALLOCATED_VOLUME AS	 OIL,
FPS.OIL_PREDICTED_VOLUME AS	 OIL_POT,FPS.OIL_VOLUME_UOM AS OIL_UOM,
FPS.GAS_ALLOCATED_VOLUME AS	 GAS,FPS.GAS_PREDICTED_VOLUME AS	 GAS_POT,
FPS.GAS_VOLUME_UOM AS GAS_UOM,FPS.WATER_ALLOCATED_VOLUME AS WATER,
FPS.WATER_PREDICTED_VOLUME AS WATER_POT,FPS.WATER_VOLUME_UOM AS WATER_UOM,
FPS.LIQUID_ALLOC_VOLUME AS	LIQUID,FPS.LIQUID_PREDICTED_VOLUME AS	LIQUID_POT,
FPS.GAS_BOE AS GAS_BOE,FPS.GAS_BOE_POT  AS	GAS_BOE_POT,FPS.WATER_INJ_VOLUME AS INJ_WATER,
FPS.WATER_INJ_PREDICTED_VOLUME AS INJ_WATER_POT ,FPS.INJ_STEAM AS INJ_STEAM,
FPS.INJ_STEAM_POT AS INJ_STEAM_POT,FPS.INJ_STEAM_UOM AS INJ_STEAM_UOM,
FPS.GOR,cast(FPS.GAS_VOLUME_UOM as string) || '/' || cast(FPS.OIL_VOLUME_UOM as string),
FPS.WCT,cast(FPS.WATER_VOLUME_UOM as string) || '/' || cast(FPS.OIL_VOLUME_UOM as string),
FPS.WOR,cast(FPS.WATER_VOLUME_UOM as string) || '/' || cast(FPS.OIL_VOLUME_UOM as string),
FPS.GOR_PREDICTED AS GOR_POT,FPS.WCT_PREDICTED AS	 WC_POT,
FPS.WOR_PREDICTED AS WOR_POT,FPS.OCT,
cast(FPS.OIL_VOLUME_UOM as string) || '/' || cast(FPS.WATER_VOLUME_UOM as string),
FPS.OCT_PREDICTED AS OC_POT,FPS.OGR,
cast(FPS.OIL_VOLUME_UOM as string) || '/' || cast(FPS.GAS_VOLUME_UOM as string),
FPS.OGR_PREDICTED AS OGR_POT,FPS.CUM_OIL_VOLUME,FPS.CUM_OIL_POT,FPS.CUM_GAS_VOLUME,
FPS.CUM_GAS_POT,FPS.CUM_WATER_VOLUME,FPS.CUM_WATER_POT,FPS.CUM_LIQUID,FPS.CUM_LIQUID_POT,
FPS.CUM_GAS_BOE AS	CUM_GAS_BOE,FPS.CUM_GAS_BOE_POT AS	CUM_GAS_BOE_POT,FPS.CUM_INJ_WATER AS CUM_INJ_WATER,
FPS.CUM_INJ_WATER_POT AS CUM_INJ_WATER_POT,FPS.CUM_INJ_STEAM AS	CUM_INJ_STEAM,FPS.CUM_INJ_STEAM_POT AS	CUM_INJ_STEAM_POT,
FPS.CUM_GOR,FPS.CUM_WCT,FPS.CUM_WOR AS	CUM_WOR,FPS.CUM_GOR_POT,FPS.CUM_WCT_POT,
FPS.CUM_WOR_POT,FPS.CUM_OCT,FPS.CUM_OCT_POT,FPS.CUM_OGR AS CUM_OGR,FPS.CUM_OGR_POT,
FPS.CD_OIL,FPS.CD_OIL_POT,FPS.CD_GAS,FPS.CD_GAS_POT,FPS.CD_WATER,FPS.CD_WATER_POT,
FPS.CD_LIQUID,FPS.CD_LIQUID_POT,FPS.CD_GAS_BOE AS	CD_GAS_BOE,FPS.CD_GAS_BOE_POT AS	CD_GAS_BOE_POT,
FPS.CD_INJ_WATER AS CD_INJ_WATER,FPS.CD_INJ_WATER_POT AS CD_INJ_WATER_POT,FPS.CD_INJ_STEAM AS	CD_INJ_STEAM,
FPS.CD_INJ_STEAM_POT AS	CD_INJ_STEAM_POT,FPS.CD_GOR,FPS.CD_WCT,FPS.CD_WOR AS	CD_WOR,
FPS.CD_GOR_POT,FPS.CD_WCT_POT,FPS.CD_WOR_POT,FPS.CD_OCT,FPS.CD_OCT_POT,FPS.CD_OGR AS CD_OGR,
FPS.CD_OGR_POT,cast(FPS.ZONE_ID as string),cast(FPS.ZONE_NAME as string),
NULL AS	 SOURCE,NULL AS ROW_CHANGED_BY,
CAST(FPS.FORMATTEDDATE_RCHG AS TIMESTAMP) AS	 ROW_CHANGED_DATE,
CAST(FPS.FORMATTEDDATE_RCRT AS TIMESTAMP) AS ROW_CREATED_DATE,
 NULL AS ROW_CREATED_BY,
UUID() AS VOL_ID,cast(DAH.LEVEL1_ID as string),cast(DAH.LEVEL1_NAME as string),
cast(DAH.LEVEL1_TYPE as string),cast(DAH.LEVEL2_ID as string),cast(DAH.LEVEL2_NAME as string),cast(DAH.LEVEL2_TYPE as string),
cast(DAH.LEVEL3_ID as string),cast(DAH.LEVEL3_NAME as string),cast(DAH.LEVEL3_TYPE as string),
cast(DAH.LEVEL4_ID as string),cast(DAH.LEVEL4_NAME as string),cast(DAH.LEVEL4_TYPE as string),
cast(DAH.LEVEL5_ID as string),cast(DAH.LEVEL5_NAME as string),cast(DAH.LEVEL5_TYPE as string),
cast(DAH.LEVEL6_ID as string),cast(DAH.LEVEL6_NAME as string),cast(DAH.LEVEL6_TYPE as string) 
 FROM PDMDimSrc.VW_FACTZONESUMMARY AS FPS
  LEFT OUTER JOIN PDMDimSrc.DimAssetHierarchy AS DAH ON FPS.DIM_ASSETHIERARCHY_KEY = DAH.Dim_ASSETHIERARCHY_KEY
 );
 
CREATE VIEW PRODUCTION_ECONOMICS
(
VOLUME_DATE	timestamp NOT NULL,
PERIOD_TYPE	string	(100),
LIFTING_COST	bigdecimal(15,4),
LIFTING_COST_BOE	bigdecimal(15,4),
CAPACITY	bigdecimal(15,4),
SPARE_CAPACITY	bigdecimal(15,4),
FUEL_GAS_COST	bigdecimal(15,4),
FUEL_GAS_COST_BOE	bigdecimal(15,4),
TOTAL_REVENUE	bigdecimal(15,4),
TOTAL_REVENUE_POT	bigdecimal(15,4),
NOTED_REVENUE	bigdecimal(15,4),
LEASE_INCOME	bigdecimal(15,4),
LEASE_OPERATING_COST	bigdecimal(15,4),
LEASE_OPERATING_COST_BOE	bigdecimal(15,4),
LEASE_OPERATING_COST_POT	bigdecimal(15,4),
OPEX	bigdecimal(15,4),
OPEX_BOE	bigdecimal(15,4),
OPEX_POT	bigdecimal(15,4),
CAPEX	bigdecimal(15,4),
CAPEX_BOE	bigdecimal(15,4),
CAPEX_POT	bigdecimal(15,4),
WORKOVER_COST	bigdecimal(15,4),
WORKOVER_COST_BOE	bigdecimal(15,4),
WORKOVER_COST_POT	bigdecimal(15,4),
PRICE_BBL	bigdecimal(15,4),
PRICE_MCF	bigdecimal(15,4),
RESERVE_PROD_RATIO_GAS	bigdecimal(15,4),
RESERVE_PROD_RATIO_OIL	bigdecimal(15,4),
OIL_SALES	bigdecimal(15,4),
GAS_SALES	bigdecimal(15,4),
GAS_SALES_BOE	bigdecimal(15,4),
SPARE_CAPACITY_PERC	bigdecimal(15,4),
UTLIZATION	bigdecimal(15,4),
OPEX_K	bigdecimal(15,4),
WORKOVER_COST_K	bigdecimal(15,4),
FUEL_GAS_COST_K	bigdecimal(15,4),
LIFTING_COST_K	bigdecimal(15,4),
OIL_SALES_K	bigdecimal(15,4),
GAS_SALES_K	bigdecimal(15,4),
UNCLASS_COST_OIL	bigdecimal(15,4),
UNCLASS_COST_GAS	bigdecimal(15,4),
UNCLASS_COST_BOE	bigdecimal(15,4),
UNCLASS_COST	bigdecimal(15,4),
OIL_SALES_COST	bigdecimal(15,4),
GAS_SALES_COST	bigdecimal(15,4),
BOE_SALES_COST	bigdecimal(15,4),
OIL_SALES_COST_K	bigdecimal(15,4),
GAS_SALES_COST_K	bigdecimal(15,4),
BOE_SALES_COST_K	bigdecimal(15,4),
LIFTING_COST_POT BIGDECIMAL(15,4),
ENTITY_ID	string(40),
ENTITY_NAME	string(255) NOT NULL,
ENTITY_TYPE	string(20),
NETWORK_ID	string(40),
NETWORK_NAME	string(100),
PROD_DAYS	integer,
PRODUCTION_STATUS	string(100),
OPERATING_STATUS	string(100),
PRIMARY_PRODUCT	string(100),
PRODUCTION_METHOD	string(100),
SOURCE_NAME	string(100),
ROW_CHANGED_BY	string(100),
ROW_CHANGED_DATE	timestamp,
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string(100),
PROD_ECONOMICS_ID	string(40) NOT NULL, 
LEVEL1_ID	string	(40),
LEVEL1_NAME	string	(255),
LEVEL1_TYPE	string	(100),
LEVEL2_ID	string	(40),
LEVEL2_NAME	string	(255),
LEVEL2_TYPE	string	(100),
LEVEL3_ID	string	(40),
LEVEL3_NAME	string	(255),
LEVEL3_TYPE	string	(100),
LEVEL4_ID	string	(40),
LEVEL4_NAME	string	(255),
LEVEL4_TYPE	string	(100),
LEVEL5_ID	string	(40),
LEVEL5_NAME	string	(255),
LEVEL5_TYPE	string	(100),
LEVEL6_ID	string	(40),
LEVEL6_NAME	string	(255) NOT NULL,
LEVEL6_TYPE 	string	(100),
CONSTRAINT PK_PROD_ECONOMICS PRIMARY KEY (PROD_ECONOMICS_ID))
OPTIONS (UPDATABLE 'FALSE', PRODUCTION_ECONOMICS.IMPLEMENTED 'TRUE')
AS
 ( 
SELECT  CAST(DD.FORMATTEDDATE AS TIMESTAMP) VOLUME_DATE, 
 FP.PERIOD_ID, FPS.LIFTING_COST, FPS.LIFTING_COST_BOE,
 FP.CAPACITY, FP.SPARE_CAPACITY, FPS.FUEL_GAS_COST, FPS.FUEL_GAS_COST_BOE,
FP.TOTAL_REVENUE, FP.TOTAL_REVENUE_POT, FPS.NOTED_REVENUE, FPS.LEASE_INCOME,
FPS.LEASE_OPERATING_COST, FPS.LEASE_OPR_COST_BOE, FPS.LEASE_OPR_COST_POT,
FPS.OPEX, FPS.OPEX_BOE, FPS.OPEX_POT, FPS.CAPEX, FPS.CAPEX_BOE,
FPS.CAPEX_POT, FPS.WORKOVER_COST, FPS.WORKOVER_COST_BOE,
FPS.WORKOVER_COST_POT, FP.PRICE_BBL, FP.PRICE_MCF, FP.RESERVE_PROD_RATIO_GAS,
FP.RESERVE_PROD_RATIO_OIL, FPS.OIL_SALES, FPS.GAS_SALES, FPS.GAS_SALES_BOE,
(FP.SPARE_CAPACITY/FP.CAPACITY * 100) SPARE_CAPACITY_PERC, (100 - (FP.SPARE_CAPACITY/FP.CAPACITY * 100)) UTLIZATION,
(FPS.OPEX/1000) OPEX_K, (FPS.WORKOVER_COST/1000) WORKOVER_COST_K, (FPS.FUEL_GAS_COST/1000) FUEL_GAS_COST_K,
(FPS.LIFTING_COST/1000) LIFTING_COST_K, (FPS.OIL_SALES/1000) OIL_SALES_K,
(FPS.GAS_SALES/1000)GAS_SALES_K,  FPS.UNCLASSIFIED_COST_OIL, FPS.UNCLASSIFIED_COST_GAS,
FPS.UNCLASSIFIED_COST_BOE, FPS.UNCLASSIFIED_COST_OTHER, FPS.OIL_SALES_COST, FPS.GAS_SALES_COST,
FPS.BOE_SALES_COST, (FPS.OIL_SALES_COST/1000) OIL_SALES_COST_K, (FPS.GAS_SALES_COST/1000) GAS_SALES_COST_K,
(FPS.BOE_SALES_COST/1000) BOE_SALES_COST_K, FPS.LIFT_COST_POT, E.ENTITY_ID, E.ENTITY_NAME,
E.ENTITY_TYPE, N.NETWORK_ID, N.NETWORK_NAME, CAST(FP.INPRODDAYS AS INTEGER) PROD_DAYS,
PS.STATUS_NAME PRODUCTION_STATUS, OS.STATUS_NAME OPERATING_STATUS, P.STATUS_NAME PRIMARY_PRODUCT,
PM.STATUS_NAME PRODUCTION_METHOD, FPS.SOURCE_NAME,  NULL AS ROW_CHANGED_BY,  CAST(RCHD.FORMATTEDDATE AS TIMESTAMP) ROW_CHANGED_DATE, 
 CAST(RCRD.FORMATTEDDATE AS TIMESTAMP) ROW_CREATED_DATE,  FPS.ROW_CREATED_BY, 
 CASE WHEN FPS.FACT_COST_SUMMARY_KEY IS NOT NULL THEN  CAST(FPS.FACT_COST_SUMMARY_KEY AS STRING) ELSE  CAST(FP.FACT_PROD_SUMMARY_KEY AS STRING) END PROD_ECONOMICS_ID,  LEVEL1_ID, LEVEL1_NAME,
 LEVEL1_TYPE, LEVEL2_ID, LEVEL2_NAME, LEVEL2_TYPE, LEVEL3_ID, LEVEL3_NAME, LEVEL3_TYPE, LEVEL4_ID,
 LEVEL4_NAME, LEVEL4_TYPE, LEVEL5_ID, LEVEL5_NAME, LEVEL5_TYPE, LEVEL6_ID, LEVEL6_NAME,  LEVEL6_TYPE 
 FROM 
 PDMDimSrc.FACTCOSTSUMMARY FPS
 RIGHT OUTER JOIN PDMDimSrc.FACTPRODSUMMARY FP ON (FPS.W_WC_FAC_KEY = FP.W_WC_FAC_KEY AND FPS.DATE_KEY = FP.DATE_KEY AND FP.PERIOD_ID = 'D')
 INNER JOIN (SELECT DWC.DIM_WELLCOMPL_KEY AS ENTITY_KEY, DWC.WELL_OR_COMPLETION_ID ENTITY_ID,DWC.WELL_COMPLETION_NAME ENTITY_NAME,
	 'W' AS ENTITY_TYPE FROM PDMDimSrc.DIMWELLCOMPLETION DWC WHERE DWC.WELL_OR_COMPLETION = 'W'
	 UNION ALL
	 SELECT DF.DIM_FACILITY_KEY AS ENTITY_KEY, DF.FACILITY_ID ENTITY_ID,DF.FACILITY_NAME ENTITY_NAME,'F' AS ENTITY_TYPE 
	 FROM PDMDimSrc.DIMFACILITY DF
	 )E ON FP.W_WC_FAC_KEY = E.ENTITY_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMNETWORK N ON FP.DIM_NETWORK_KEY = N.DIM_NETWORK_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMSTATUSNMETHOD PS ON FP.DIM_STATUS_KEY = PS.DIM_STATUS_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMSTATUSNMETHOD OS ON FP.OPERATING_STATUS_KEY = OS.DIM_STATUS_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMSTATUSNMETHOD PM ON FP.PRODUCTION_METHOD_KEY = PM.DIM_STATUS_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMSTATUSNMETHOD P ON FP.PRIMARY_PRODUCT_KEY = P.DIM_STATUS_KEY 
 LEFT OUTER JOIN PDMDimSrc.DIMDATE DD ON FP.DATE_KEY = DD.DATE_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMDATE RCHD ON FP.ROW_CHANGED_DATE_ID = RCHD.DATE_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMDATE RCRD ON FP.ROW_CREATED_DATE_ID = RCRD.DATE_KEY
 INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON FP.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
 );
 
 CREATE VIEW ZONE_SUMMARY_EAV
 (
 ZONE_VOLUME_ID	string(40) NOT NULL,
ZONE_ID	string(40) NOT NULL,
ZONE_NAME	string (100)	NOT NULL,
DISPOSITION_NAME	string (100)	NOT NULL,
DISPOSITION_ID	string(40),
PRODUCT_NAME string (100)	NOT NULL,
PRODUCT_ID	string(40),
VOLUME_DATE	timestamp NOT NULL,
PERIOD_TYPE	string (100) NOT NULL,
ROW_CHANGED_DATE timestamp ,
ROW_CHANGED_BY	string(100),
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY	string(100),
LEVEL1_ID	string(40),
LEVEL1_NAME	string (255),
LEVEL1_TYPE	string (100),
LEVEL2_ID	string(40),
LEVEL2_NAME	string (255),
LEVEL2_TYPE	string (100),
LEVEL3_ID	string(40),
LEVEL3_NAME	string (255),
LEVEL3_TYPE	string (100),
LEVEL4_ID	string(40),
LEVEL4_NAME	string (255),
LEVEL4_TYPE	string (100),
LEVEL5_ID	string(40),
LEVEL5_NAME	string (255),
LEVEL5_TYPE	string (100)	,
LEVEL6_ID	string(40)NOT NULL,
LEVEL6_NAME	string (255),
LEVEL6_TYPE	string (100),
 CONSTRAINT PK_ZONE_SUMMARY PRIMARY KEY (ZONE_VOLUME_ID))
OPTIONS (UPDATABLE 'FALSE', ZONE_SUMMARY.IMPLEMENTED 'TRUE')
AS
 ( 
 SELECT UUID() AS ZONE_VOLUME_ID,DZE.ZONE_ID,DZE.ZONE_NAME,DPS.DISPOSITION_NAME,cast(DPS.DISPOSITION_ID as string),DP.PRODUCT_NAME,cast(DP.PRODUCT_ID as string),CAST (DD.FORMATTEDDATE AS TIMESTAMP) VOLUME_DATE,FZVS.PERIOD_ID,CAST(DRCH.FORMATTEDDATE AS TIMESTAMP) ROW_CHANGED_DATE,
FZVS.ROW_CHANGED_BY,CAST(DCR.FORMATTEDDATE AS TIMESTAMP)ROW_CREATED_DATE,FZVS.ROW_CREATED_BY,cast(DAH.LEVEL1_ID as string),cast(DAH.LEVEL1_NAME as string),cast(DAH.LEVEL1_TYPE as string),cast(DAH.LEVEL2_ID as string),cast(DAH.LEVEL2_NAME as string)
,cast(DAH.LEVEL2_TYPE as string),cast(DAH.LEVEL3_ID as string),cast(DAH.LEVEL3_NAME as string),cast(DAH.LEVEL3_TYPE as string),cast(DAH.LEVEL4_ID as string),cast(DAH.LEVEL4_NAME as string),cast(DAH.LEVEL4_TYPE as string),
cast(DAH.LEVEL5_ID as string),cast(DAH.LEVEL5_NAME as string),cast(DAH.LEVEL5_TYPE as string),cast(DAH.LEVEL6_ID as string),cast(DAH.LEVEL6_NAME as string),cast(DAH.LEVEL6_TYPE as string)
FROM PDMDimSrc.FACTZONEVOLUMESUMMARY FZVS
INNER JOIN PDMDimSrc.DIMZONEEAV DZE ON DZE.DIM_ZONE_EAV_WELLCOMPL_KEY=FZVS.DIM_ZONE_EAV_KEY
INNER JOIN PDMDimSrc.DIMDISPOSITION DPS ON DPS.DIM_DISPOSITION_KEY= FZVS.DIM_DISPOSITION_KEY
INNER JOIN PDMDimSrc.DIMPRODUCT DP ON DP.DIM_PRODUCT_KEY=FZVS.DIM_PRODUCT_KEY
INNER JOIN PDMDimSrc.DIMDATE DD ON DD.DATE_KEY=FZVS.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE DRCH ON DRCH.DATE_KEY=FZVS.ROW_CHANGED_DATE_ID
LEFT OUTER JOIN PDMDimSrc.DIMDATE DCR ON DCR.DATE_KEY=FZVS.ROW_CREATED_DATE_ID
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION DWC ON DWC.DIM_WELLCOMPL_KEY=DZE.DIM_WELLCOMPL_KEY
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON DAH.DIM_ASSETHIERARCHY_KEY=DWC.DIM_ASSETHIERARCHY_KEY
 );
 
CREATE VIEW POOL_SUMMARY_EAV
(
POOL_VOLUME_ID	string(40) NOT NULL,
POOL_ID	string(40) NOT NULL,
POOL_NAME	string (100) NOT NULL,
DISPOSITION_NAME	string (100) NOT NULL,
DISPOSITION_ID	string(40)	,
PRODUCT_NAME	string (100) NOT NULL,
PRODUCT_ID	string(40)	,
VOLUME_DATE	timestamp	NOT NULL,
PERIOD_TYPE	string (100) NOT NULL,
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY	string (100),
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string (100),
LEVEL1_ID	string(40)	,
LEVEL1_NAME	string	(255),
LEVEL1_TYPE	string (100)	,
LEVEL2_ID	string(40)	,
LEVEL2_NAME	string	(255),
LEVEL2_TYPE	string (100),
LEVEL3_ID	string(40)	,
LEVEL3_NAME	string	(255),
LEVEL3_TYPE	string (100),
LEVEL4_ID	string(40)	,
LEVEL4_NAME	string	(255),
LEVEL4_TYPE	string (100),
LEVEL5_ID	string(40)	,
LEVEL5_NAME	string	(255),
LEVEL5_TYPE	string (100)	,
LEVEL6_ID	string(40) NOT NULL,
LEVEL6_NAME	string	(255),
LEVEL6_TYPE	string (100),
CONSTRAINT PK_POOL_VOLUME_SUMMARY PRIMARY KEY (POOL_VOLUME_ID))
OPTIONS (UPDATABLE 'FALSE', POOL_SUMMARY.IMPLEMENTED 'TRUE')
AS
(
SELECT UUID() AS POOL_VOLUME_ID,DPE.POOL_ID,DPE.POOL_NAME,DPS.DISPOSITION_NAME,cast(DPS.DISPOSITION_ID as string),DP.PRODUCT_NAME,cast(DP.PRODUCT_ID as string),CAST (DD.FORMATTEDDATE AS TIMESTAMP) VOLUME_DATE,FPVS.PERIOD_ID,CAST(DRCH.FORMATTEDDATE AS TIMESTAMP) ROW_CHANGED_DATE,
FPVS.ROW_CHANGED_BY,CAST(DCR.FORMATTEDDATE AS TIMESTAMP)ROW_CREATED_DATE,FPVS.ROW_CREATED_BY,cast(DAH.LEVEL1_ID as string),cast(DAH.LEVEL1_NAME as string),cast(DAH.LEVEL1_TYPE as string),cast(DAH.LEVEL2_ID as string),cast(DAH.LEVEL2_NAME as string)
,cast(DAH.LEVEL2_TYPE as string),cast(DAH.LEVEL3_ID as string),cast(DAH.LEVEL3_NAME as string),cast(DAH.LEVEL3_TYPE as string),cast(DAH.LEVEL4_ID as string),cast(DAH.LEVEL4_NAME as string),cast(DAH.LEVEL4_TYPE as string),
cast(DAH.LEVEL5_ID as string),cast(DAH.LEVEL5_NAME as string),cast(DAH.LEVEL5_TYPE as string),cast(DAH.LEVEL6_ID as string),cast(DAH.LEVEL6_NAME as string),cast(DAH.LEVEL6_TYPE as string)
FROM PDMDimSrc.FACTPOOLVOLUMESUMMARY FPVS
INNER JOIN PDMDimSrc.DIMPOOLEAV DPE ON DPE.DIM_POOL_EAV_WELLCOMPL_KEY=FPVS.DIM_POOL_EAV_KEY
INNER JOIN PDMDimSrc.DIMDISPOSITION DPS ON DPS.DIM_DISPOSITION_KEY= FPVS.DIM_DISPOSITION_KEY
INNER JOIN PDMDimSrc.DIMPRODUCT DP ON DP.DIM_PRODUCT_KEY=FPVS.DIM_PRODUCT_KEY
INNER JOIN PDMDimSrc.DIMDATE DD ON DD.DATE_KEY=FPVS.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE DRCH ON DRCH.DATE_KEY=FPVS.ROW_CHANGED_DATE_ID
LEFT OUTER JOIN PDMDimSrc.DIMDATE DCR ON DCR.DATE_KEY=FPVS.ROW_CREATED_DATE_ID
INNER JOIN PDMDimSrc.DIMWELLCOMPLETION DWC ON DWC.DIM_WELLCOMPL_KEY=DPE.DIM_WELLCOMPL_KEY
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON DAH.DIM_ASSETHIERARCHY_KEY=DWC.DIM_ASSETHIERARCHY_KEY
);

CREATE VIEW PRODUCTION_LOSS
(
PROD_DATE	timestamp NOT NULL,
INCIDENT_START_DATE TIMESTAMP,
DOWNTIME	bigdecimal(10,4),
TIME_UOM	string(20),
DOWN_REASON	string(200),
DT_COLOR_CODE string(100),
DT_CATEGORY	string(100),
DT_CATEGORY_ID string(40),
DT_SUB_CATEGORY string(100),
UPTIME	bigdecimal(10,4),
OIL_ALLOC	bigdecimal(15,4),
GAS_ALLOC	bigdecimal(15,4),
BOE_ALLOC bigdecimal(15,4),
GAS_BOE_ALLOC	bigdecimal(15,4),
OIL_TEST	bigdecimal(15,4),
GAS_TEST	bigdecimal(15,4),
BOE_TEST bigdecimal(15,4),
GAS_BOE_TEST	bigdecimal(15,4),
OIL_UOM	string(20),
GAS_UOM	string(20),
OIL_LOSS_ALLOC	bigdecimal(15,4),
GAS_LOSS_ALLOC	bigdecimal(15,4),
BOE_LOSS_ALLOC bigdecimal(15,4),
GAS_BOE_LOSS_ALLOC	bigdecimal(15,4),
OIL_LOSS_TEST	bigdecimal(15,4),
GAS_LOSS_TEST	bigdecimal(15,4),
BOE_LOSS_TEST bigdecimal(15,4),
GAS_BOE_LOSS_TEST	bigdecimal(15,4),
CH_RED_OIL_LOSS bigdecimal(15,4),
CH_RED_GAS_LOSS bigdecimal(15,4),
CH_RED_BOE_LOSS bigdecimal(15,4),
CH_RED_GBOE_LOSS bigdecimal(15,4),
DEP_OIL_LOSS bigdecimal(15,4),
DEP_GAS_LOSS bigdecimal(15,4),
DEP_BOE_LOSS bigdecimal(15,4),
DEP_GBOE_LOSS bigdecimal(15,4),
CHOKE bigdecimal(15,4),
CHOKE_POT bigdecimal(15,4),
CHOKE_UOM string(20),
OIL_POT bigdecimal(15,4),
GAS_POT bigdecimal(15,4),
BOE_POT bigdecimal(15,4),
GBOE_POT bigdecimal(15,4),
UNC_OIL_LOSS bigdecimal(15,4),
UNC_GAS_LOSS bigdecimal(15,4),
UNC_BOE_LOSS bigdecimal(15,4),
UNC_GBOE_LOSS bigdecimal(15,4),
EVENT_COST bigdecimal(15,4),
OIL_REVENUE_LOST bigdecimal(15,4),
GAS_REVENUE_LOST bigdecimal(15,4),
BOE_REVENUE_LOST bigdecimal(15,4),
OPEN_ENDED_IND string(1),
ENTITY_ID	string(40),
ENTITY_NAME	string(255) NOT NULL,
ENTITY_TYPE string(20),
NETWORK_ID	string	(40),
NETWORK_NAME	string	(255),
SOURCE_NAME string(100),
 LEVEL1_ID	string(40),
 LEVEL1_NAME	string(100),
 LEVEL1_TYPE	string(100),
 LEVEL2_ID	string(40),
 LEVEL2_NAME	string(100),
 LEVEL2_TYPE	string(100),
 LEVEL3_ID	string(40),
 LEVEL3_NAME	string(100),
 LEVEL3_TYPE	string(100),
 LEVEL4_ID	string(40),
 LEVEL4_NAME	string(100),
 LEVEL4_TYPE	string(100),
 LEVEL5_ID	string(40),
 LEVEL5_NAME	string(100),
 LEVEL5_TYPE	string(100),
 LEVEL6_ID	string(40),
 LEVEL6_NAME	string(100),
 LEVEL6_TYPE 	string(100),
 PROD_LOSS_ID	string(40) NOT NULL,
CONSTRAINT PK_PROD_LOSS PRIMARY KEY (PROD_LOSS_ID))
OPTIONS (UPDATABLE 'FALSE', PRODUCTION_LOSS.IMPLEMENTED 'TRUE')
AS
(
SELECT cast(DT_DATETIME AS timestamp),CAST(DD.FORMATTEDDATE  AS TIMESTAMP) INCIDENT_START_DATE, 
cast(FPS.DOWNTIME_HOURS as bigdecimal), 'hr', DTC.DOWN_REASON, DTC.COLOR_CODE, DTC.DOWN_CATEGORY,
 cast(FPS.DT_REASON_KEY as string), 
 CASE DTC.DOWN_SUB_CATEGORY WHEN NULL THEN 'Unclassified' ELSE DTC.DOWN_SUB_CATEGORY END,
	cast(FPS.UP_TIMEHOURS as bigdecimal),
	FPS.OIL_VOLUME, FPS.GAS_VOLUME, FPS.BOE_VOLUME, (FPS.BOE_VOLUME - FPS.OIL_VOLUME) AS GAS_BOE_VOLUME,
	FPS.WT_OILVOLUME24, FPS.WT_GASVOLUME24,FPS.WT_BOEVOLUME24,
	(FPS.WT_BOEVOLUME24 - FPS.WT_OILVOLUME24) AS WT_GBOEVOLUME24,
	OU.UOM_NAME, GU.UOM_NAME,
	FPS.AL_OIL_LOSS,FPS.AL_GAS_LOSS, FPS.AL_BOE_LOSS, (FPS.AL_BOE_LOSS - FPS.AL_OIL_LOSS) AS AL_GBOE_LOSS,
		FPS.WT_OIL_LOSS, FPS.WT_GAS_LOSS, FPS.WT_BOE_LOSS, (FPS.WT_BOE_LOSS - FPS.WT_OIL_LOSS) AS WT_GBOE_LOSS,
	FPS.CH_RED_OIL_LOSS, FPS.CH_RED_GAS_LOSS, FPS.CH_RED_BOE_LOSS, (FPS.CH_RED_BOE_LOSS - FPS.CH_RED_OIL_LOSS) AS CH_RED_GBOE_LOSS,
	FPS.DECLINE_OIL_LOSS, FPS.DECLINE_GAS_LOSS,FPS.DECLINE_BOE_LOSS, (FPS.DECLINE_BOE_LOSS - FPS.DECLINE_OIL_LOSS) AS DECLINE_GBOE_LOSS,
	CHOKE, CHOKE_POT, U.UOM_NAME,
	OIL_PREDICTED_VOLUME, GAS_PREDICTED_VOLUME, BOE_PREDICTED_VOLUME, (BOE_PREDICTED_VOLUME - OIL_PREDICTED_VOLUME) AS GBOE_PREDICTED_VOLUME,
	UNC_LOSS_OIL, UNC_LOSS_GAS, UNC_LOSS_BOE, (UNC_LOSS_BOE - UNC_LOSS_OIL) AS UNC_LOSS_GBOE,
	FPS.EVENT_COST, OIL_REVENUE_LOST, GAS_REVENUE_LOST, BOE_REVENUE_LOST, 
	FDT.OPEN_ENDED_IND,
	DWC.WELL_OR_COMPLETION_ID, DWC.WELL_COMPLETION_NAME,DWC.WELL_OR_COMPLETION,
	CAST(N.NETWORK_ID AS STRING) AS	 NETWORK_ID,CAST(N.NETWORK_NAME AS STRING) AS NETWORK_NAME, NULL,
 DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE,
  DAH.LEVEL2_ID, DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE,
  DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, 
  DAH.LEVEL4_ID, DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE,
  DAH.LEVEL5_ID, DAH.LEVEL5_NAME, DAH.LEVEL5_TYPE,
  DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE,
	UUID() FROM PDMDimSrc.FACTPRODLOSSSUMMARY FPS
	LEFT OUTER JOIN PDMDimSrc.FACTDOWNTIME FDT ON FPS.FACT_DOWNTIME_KEY = FDT.FACT_DOWNTIME_KEY
	INNER JOIN PDMDimSrc.DIMWELLCOMPLETION DWC ON FPS.W_WC_FAC_KEY = DWC.DIM_WELLCOMPL_KEY
	LEFT OUTER JOIN PDMDimSrc.REF_DOWNTIMECATEGORY DTC ON FPS.DT_REASON_KEY = DTC.R_DOWN_TIME_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE U ON FPS.CHOKE_UOM_KEY = U.DIM_UOM_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE OU ON FPS.OIL_VOLUME_UOM_KEY = OU.DIM_UOM_KEY
	LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE GU ON FPS.GAS_VOLUME_UOM_KEY = GU.DIM_UOM_KEY
	INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON FPS.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY 
	LEFT OUTER JOIN PDMDimSrc.DIMDATE DD ON FDT.DATE_KEY = DD.DATE_KEY
	LEFT OUTER JOIN PDMDimSrc.DimNetwork N ON FPS.DIM_NETWORK_KEY = N.DIM_NETWORK_KEY
);

CREATE VIEW ASSET_OPERATION_SUMMARY
(
 PROD_DATE	timestamp NOT NULL,
 DOWNTIME	bigdecimal	(15,4),
 DURATION_UOM	string	(20),
 CUM_DOWNTIME bigdecimal(15,4),
 UPTIME bigdecimal(15,4),
 CUM_UPTIME bigdecimal(15,4),
 PLAN_DOWNTIME	bigdecimal	(15,4),
 UNPLAN_DOWNTIME	bigdecimal	(15,4),
 EQUIP_OP_DOWNTIME	bigdecimal	(15,4),
 SCHD_OP_DOWNTIME	bigdecimal	(15,4),
 PROD_TIME	bigdecimal	(15,4),
 POT_PROD_TIME	bigdecimal	(15,4),
 EQUIP_AVAIL_POT bigdecimal(15,4),
 EQUIP_AVAILABILITY bigdecimal(15,4),
 EQUIP_UTIL_POT bigdecimal(15,4),
 EQUIP_UTILIZATION bigdecimal(15,4),
 LOST_CAPACITY bigdecimal(15,4),
 MTBF bigdecimal(15,4),
 MTTR bigdecimal(15,4),
 PERIOD_ID string(1),
 REMARK string(2000),
 EQUIPMENT_NAME string(100),
 EQUIP_SUB_TYPE string(100),
 EQUIP_TYPE string(100),
 EQUIP_GROUP string(100),
 PRODUCT_NAME string(100),
 ENTITY_ID	string	(40	)	NOT NULL,
 ENTITY_NAME	string	(255),
 ENTITY_TYPE string(100),
 ENTITY_SUB_TYPE string(100),
 NETWORK_ID	string	(40),
NETWORK_NAME	string	(255),
LEVEL1_ID STRING (40),
LEVEL1_NAME STRING (255),
LEVEL1_TYPE STRING (100),
LEVEL2_ID STRING (40),
LEVEL2_NAME STRING (255),
LEVEL2_TYPE STRING (100),
LEVEL3_ID STRING (40),
LEVEL3_NAME STRING (255),
LEVEL3_TYPE STRING (100),
LEVEL4_ID STRING (40),
LEVEL4_NAME STRING (255),
LEVEL4_TYPE STRING (100),
LEVEL5_ID STRING (40),
LEVEL5_NAME STRING (255),
LEVEL5_TYPE STRING (100),
LEVEL6_ID STRING (40),
LEVEL6_NAME STRING (255),
LEVEL6_TYPE STRING (100), 
 SOURCE_NAME	string	(100),
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string	(100),
 ACTIVE_IND	string	(1),
 EQUIP_DOWNTIME_ID	string	(40)	NOT NULL,
CONSTRAINT PK_EQUIP_DT PRIMARY KEY (EQUIP_DOWNTIME_ID))
OPTIONS (UPDATABLE 'FALSE', EQUIP_DOWNTIME.IMPLEMENTED 'TRUE')
AS
( 
SELECT
CAST(DD.FORMATTEDDATE AS TIMESTAMP) INCIDENT_DATE,
(PLANNED_DOWNTIME + UNPLANNED_DOWNTIME),
'h',
NULL,
(24- (PLANNED_DOWNTIME + UNPLANNED_DOWNTIME)),
NULL,
PLANNED_DOWNTIME,
UNPLANNED_DOWNTIME,
EQUIP_OP_TIME,
SCHD_OP_TIME,
PROD_TIME,
POT_PROD_TIME,
TARGET_AVAILABILITY,
EQUIP_AVAIL_PERCENT,
TARGET_UTILIZATION,
EQUIP_UTILIZATION,
LOST_CAPACITY,
MTBF,
MTTR,
PERIOD_ID,
NULL,
DE.EQUIPMENT_NAME,
DE.EQUIPMENT_SUB_TYPE_NAME,
DE.EQUIPMENT_TYPE,
DE.EQUIPMENT_GROUP,
P.PRODUCT_NAME,
E.ENTITY_ID,
E.ENTITY_NAME,
E.ENTITY_TYPE,
E.ENTITY_SUB_TYPE,
CAST(N.NETWORK_ID AS STRING) AS	 NETWORK_ID,
CAST(N.NETWORK_NAME AS STRING) AS NETWORK_NAME,
DAH.LEVEL1_ID,
DAH.LEVEL1_NAME,
DAH.LEVEL1_TYPE,
DAH.LEVEL2_ID,
DAH.LEVEL2_NAME,
DAH.LEVEL2_TYPE,
DAH.LEVEL3_ID,
DAH.LEVEL3_NAME,
DAH.LEVEL3_TYPE,
DAH.LEVEL4_ID,
DAH.LEVEL4_NAME,
DAH.LEVEL4_TYPE,
DAH.LEVEL5_ID,
DAH.LEVEL5_NAME,
DAH.LEVEL5_TYPE,
DAH.LEVEL6_ID,
DAH.LEVEL6_NAME,
DAH.LEVEL6_TYPE,
NULL,
NULL,
CAST(RCHD.FORMATTEDDATE AS TIMESTAMP) ROW_CHANGED_DATE,
CAST(RCRD.FORMATTEDDATE AS TIMESTAMP) ROW_CREATED_DATE,
NULL AS ROW_CREATED_BY,
'Y' AS ACTIVE_IND,
CAST(FPS.FACT_EQUIPDT_KEY AS STRING) INCIDENT_ID 
FROM PDMDimSrc.FACTEQUIPDTSUMMARY FPS 
INNER JOIN (SELECT DIM_WELLCOMPL_KEY AS ENTITY_KEY, WELL_OR_COMPLETION_ID AS ENTITY_ID, WELL_COMPLETION_NAME AS ENTITY_NAME, 
	'Well' AS ENTITY_TYPE, NULL AS ENTITY_SUB_TYPE
	FROM PDMDimSrc.DIMWELLCOMPLETION DWC
	UNION ALL 
	SELECT DIM_FACILITY_KEY AS ENTITY_KEY, FACILITY_ID AS ENTITY_ID, FACILITY_NAME AS ENTITY_NAME, 'Facility' as ENTITY_TYPE, FACILITY_TYPE AS ENTITY_SUB_TYPE
	FROM PDMDimSrc.DIMFACILITY DF
	) E ON FPS.W_WC_FAC_KEY = E.ENTITY_KEY
LEFT OUTER JOIN PDMDimSrc.DIMEQUIPMENT DE ON FPS.DIM_EQUIPMENT_KEY = DE.DIM_EQUIPMENT_KEY
LEFT OUTER JOIN PDMDimSrc.DIMPRODUCT P ON FPS.DIM_PRODUCT_KEY = P.DIM_PRODUCT_KEY
LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY AS DAH ON FPS.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE DD ON FPS.DATE_KEY = DD.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE RCHD ON FPS.ROW_CHANGED_DATE_ID = RCHD.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE RCRD ON FPS.ROW_CREATED_DATE_ID = RCRD.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DimNetwork N ON FPS.DIM_NETWORK_KEY = N.DIM_NETWORK_KEY
 );

CREATE VIEW HSE_INCIDENT_DETAIL
(
HSE_INCIDENT_ID string (40),
HSE_CATALOG_ID string (40),
HSE_CATALOG_NAME string (100),
HSE_CATALOG_TYPE string (100),
HSE_CATALOG_DESC string (2000),
INCIDENT_DATE timestamp,
INCIDENT_DURATION bigdecimal(15,4),
DURATION_UOM string (20),
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
ACTIVE_IND string (1),
SOURCE_NAME string (100),
ROW_CHANGED_DATE timestamp,
ROW_CHANGED_BY  string (100),
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY string (100),
ENTITY_ID string (40),
ENTITY_NAME  string (255) ,
ENTITY_TYPE string (100),
LEVEL6_ID string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE   string (100),
LEVEL5_ID  string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE  string (100),
LEVEL4_ID  string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE  string (100),
LEVEL3_ID  string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE  string (100),
LEVEL2_ID  string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE  string (100),
LEVEL1_ID  string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE  string (100),
CONSTRAINT PK_HSE_INCIDENT PRIMARY KEY (HSE_INCIDENT_ID))
OPTIONS (UPDATABLE 'FALSE',HSE_INCIDENT_DETAIL.IMPLEMENTED 'TRUE')
AS
(
SELECT 
FHI.HSE_INCIDENT_ID,FHI.HSE_CATALOG_ID,FHI.HSE_CATALOG_NAME,FHI.HSE_CATALOG_TYPE,
FHI.HSE_CATALOG_DESC,FHI.INCIDENT_DATE,FHI.INCIDENT_DURATION,FHI.DURATION_UOM,
FHI.EFFECTIVE_DATE,FHI.EXPIRY_DATE,FHI.ACTIVE_IND,FHI.SOURCE_NAME,
FHI.ROW_CHANGED_DATE,FHI.ROW_CHANGED_BY,FHI.ROW_CREATED_DATE,
FHI.ROW_CREATED_BY,FHI.ENTITY_ID,FHI.ENTITY_NAME,FHI.ENTITY_TYPE,
DSH.LEVEL6_ID AS LEVEL6_ID,DSH.LEVEL6_NAME,DSH.LEVEL6_TYPE ,
DSH.LEVEL5_ID,DSH.LEVEL5_NAME,DSH.LEVEL5_TYPE ,
DSH.LEVEL4_ID,DSH.LEVEL4_NAME,DSH.LEVEL4_TYPE ,
DSH.LEVEL3_ID,DSH.LEVEL3_NAME,DSH.LEVEL3_TYPE ,
DSH.LEVEL2_ID,DSH.LEVEL2_NAME,DSH.LEVEL2_TYPE ,
DSH.LEVEL1_ID,DSH.LEVEL1_NAME,DSH.LEVEL1_TYPE 
FROM PDMDimSrc.FACT_HSE_INCIDENT FHI
LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY DSH
ON FHI.LEVEL6_ID = DSH.LEVEL6_ID
);
 
CREATE VIEW HSE_INCIDENT_KPI
(
HSE_INCIDENT_KPI_ID string (40),
HSE_CATALOG_ID string (40),
HSE_CATALOG_NAME string (100),
HSE_CATALOG_TYPE string (100),
HSE_CATALOG_DESC string (2000),
HSE_KPI_TYPE string (40),
HSE_KPI_VALUE bigdecimal(15,4),
HSE_KPI_VALUE_INT integer,
ACTIVE_IND string (1),
SOURCE_NAME string (100),
ROW_CHANGED_DATE timestamp,
ROW_CHANGED_BY  string (100),
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY string (100),
ENTITY_ID string (40),
ENTITY_NAME  string (255) ,
ENTITY_TYPE   string (100),
LEVEL6_ID string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE   string (100),
LEVEL5_ID  string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE  string (100),
LEVEL4_ID  string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE  string (100),
LEVEL3_ID  string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE  string (100),
LEVEL2_ID  string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE  string (100),
LEVEL1_ID  string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE  string (100),
CONSTRAINT PK_HSE_INCIDENT_KPI PRIMARY KEY (HSE_INCIDENT_KPI_ID))
OPTIONS (UPDATABLE 'FALSE',HSE_INCIDENT_KPI.IMPLEMENTED 'TRUE')
AS
(
SELECT 
UUID() AS HSE_INCIDENT_KPI_ID,
FHI.HSE_CATALOG_ID ,
MAX(FHI.HSE_CATALOG_NAME),
MAX(FHI.HSE_CATALOG_TYPE),
MAX(FHI.HSE_CATALOG_DESC),
'COUNT' AS HSE_KPI_TYPE ,
(cast(COUNT(FHI.HSE_INCIDENT_ID) AS bigdecimal)) AS HSE_KPI_VALUE ,
COUNT(FHI.HSE_INCIDENT_ID) AS HSE_KPI_VALUE_INT,
MAX(FHI.ACTIVE_IND) AS ACTIVE_IND,MAX(FHI.SOURCE_NAME) AS SOURCE_NAME,
MAX(FHI.ROW_CHANGED_DATE) AS ROW_CHANGED_DATE,MAX(FHI.ROW_CHANGED_BY) AS ROW_CHANGED_BY,
MAX(FHI.ROW_CREATED_DATE) AS ROW_CREATED_DATE,
MAX(FHI.ROW_CREATED_BY) AS ROW_CREATED_BY,MAX(FHI.ENTITY_ID) AS ENTITY_ID ,
MAX(FHI.ENTITY_NAME) AS ENTITY_NAME,MAX(FHI.ENTITY_TYPE) AS ENTITY_TYPE ,
MAX(DSH.LEVEL6_ID) AS LEVEL6_ID,MAX(DSH.LEVEL6_NAME) AS LEVEL6_NAME,MAX(DSH.LEVEL6_TYPE) AS LEVEL6_TYPE,
MAX(DSH.LEVEL5_ID) AS LEVEL5_ID,MAX(DSH.LEVEL5_NAME) AS LEVEL5_NAME,MAX(DSH.LEVEL5_TYPE) AS LEVEL5_TYPE,
MAX(DSH.LEVEL4_ID) AS LEVEL4_ID,MAX(DSH.LEVEL4_NAME) AS LEVEL4_NAME,MAX(DSH.LEVEL4_TYPE) AS LEVEL4_TYPE,
MAX(DSH.LEVEL3_ID) AS LEVEL3_ID,MAX(DSH.LEVEL3_NAME) AS LEVEL3_NAME,MAX(DSH.LEVEL3_TYPE) AS LEVEL3_TYPE,
MAX(DSH.LEVEL2_ID) AS LEVEL2_ID,MAX(DSH.LEVEL2_NAME) AS LEVEL2_NAME,MAX(DSH.LEVEL2_TYPE) AS LEVEL2_TYPE,
MAX(DSH.LEVEL1_ID) AS LEVEL1_ID,MAX(DSH.LEVEL1_NAME) AS LEVEL1_NAME,MAX(DSH.LEVEL1_TYPE) AS LEVEL1_TYPE
from PDMDimSrc.FACT_HSE_INCIDENT FHI 
LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY DSH
ON FHI.LEVEL6_ID = DSH.LEVEL6_ID 
GROUP BY FHI.LEVEL6_ID,FHI.HSE_CATALOG_ID
);

CREATE VIEW HSE_SUMMARY_DETAILS
(
HSE_INCIDENT_KPI_ID string (40),
HSE_CATALOG_ID string (40),
HSE_CATALOG_NAME string (100),
HSE_CATALOG_TYPE string (100),
HSE_CATALOG_DESC string (2000),
HSE_KPI_TYPE string (40),
HSE_KPI_VALUE bigdecimal(15,4),
HSE_KPI_VALUE_INT integer,
ACTIVE_IND string (1),
SOURCE_NAME string (100),
ROW_CHANGED_DATE timestamp,
ROW_CHANGED_BY  string (100),
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY string (100),
ENTITY_ID string (40),
ENTITY_NAME  string (255) ,
ENTITY_TYPE   string (100),
LEVEL6_ID string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE   string (100),
LEVEL5_ID  string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE  string (100),
LEVEL4_ID  string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE  string (100),
LEVEL3_ID  string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE  string (100),
LEVEL2_ID  string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE  string (100),
LEVEL1_ID  string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE  string (100),
CONSTRAINT PK_HSE_INCIDENT_KPI PRIMARY KEY (HSE_INCIDENT_KPI_ID))
OPTIONS (UPDATABLE 'FALSE',HSE_INCIDENT_KPI.IMPLEMENTED 'TRUE')
AS
(
SELECT 
UUID() AS HSE_INCIDENT_KPI_ID,
FHI.HSE_CATALOG_ID ,
MAX(FHI.HSE_CATALOG_NAME),
MAX(FHI.HSE_CATALOG_TYPE),
MAX(FHI.HSE_CATALOG_DESC),
'COUNT' AS HSE_KPI_TYPE ,
(cast(COUNT(FHI.HSE_INCIDENT_ID) AS bigdecimal)) AS HSE_KPI_VALUE ,
COUNT(FHI.HSE_INCIDENT_ID) AS HSE_KPI_VALUE_INT,
MAX(FHI.ACTIVE_IND) AS ACTIVE_IND,MAX(FHI.SOURCE_NAME) AS SOURCE_NAME,
MAX(FHI.ROW_CHANGED_DATE) AS ROW_CHANGED_DATE,MAX(FHI.ROW_CHANGED_BY) AS ROW_CHANGED_BY,
MAX(FHI.ROW_CREATED_DATE) AS ROW_CREATED_DATE,
MAX(FHI.ROW_CREATED_BY) AS ROW_CREATED_BY,MAX(FHI.ENTITY_ID) AS ENTITY_ID ,
MAX(FHI.ENTITY_NAME) AS ENTITY_NAME,MAX(FHI.ENTITY_TYPE) AS ENTITY_TYPE ,
MAX(DSH.LEVEL6_ID) AS LEVEL6_ID,MAX(DSH.LEVEL6_NAME) AS LEVEL6_NAME,MAX(DSH.LEVEL6_TYPE) AS LEVEL6_TYPE,
MAX(DSH.LEVEL5_ID) AS LEVEL5_ID,MAX(DSH.LEVEL5_NAME) AS LEVEL5_NAME,MAX(DSH.LEVEL5_TYPE) AS LEVEL5_TYPE,
MAX(DSH.LEVEL4_ID) AS LEVEL4_ID,MAX(DSH.LEVEL4_NAME) AS LEVEL4_NAME,MAX(DSH.LEVEL4_TYPE) AS LEVEL4_TYPE,
MAX(DSH.LEVEL3_ID) AS LEVEL3_ID,MAX(DSH.LEVEL3_NAME) AS LEVEL3_NAME,MAX(DSH.LEVEL3_TYPE) AS LEVEL3_TYPE,
MAX(DSH.LEVEL2_ID) AS LEVEL2_ID,MAX(DSH.LEVEL2_NAME) AS LEVEL2_NAME,MAX(DSH.LEVEL2_TYPE) AS LEVEL2_TYPE,
MAX(DSH.LEVEL1_ID) AS LEVEL1_ID,MAX(DSH.LEVEL1_NAME) AS LEVEL1_NAME,MAX(DSH.LEVEL1_TYPE) AS LEVEL1_TYPE
from PDMDimSrc.FACT_HSE_INCIDENT FHI 
LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY DSH
ON FHI.LEVEL6_ID = DSH.LEVEL6_ID 
GROUP BY FHI.LEVEL6_ID,FHI.HSE_CATALOG_ID
);

CREATE VIEW HSE_CATALOG_SUMMARY(
HSE_SUMMARY_ID string (40) NOT NULL,
HSE_DATE timestamp,
NUM_LTA integer,
NUM_TA integer,
NUM_DWRA integer,
NUM_HW bigdecimal(10,2),
LTR bigdecimal (15,4),
TAR bigdecimal (15,4),
ASR bigdecimal (15,4),
DIM_ASSETHIERARCHY_KEY bigdecimal(6,0),
W_WC_FAC_KEY bigdecimal(10,0),
W_WC_FAC_IND string (1),
LEVEL_NO integer,
ENTITY_ID string (40),
ENTITY_NAME  string (255) ,
ENTITY_TYPE   string (100),
AREA_ID string (40),
AREA_NAME string (255),
AREA_TYPE string (100),
ACTIVE_IND	string	(1),
SOURCE_NAME	string (100),
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY	string (100),
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string (100),
LEVEL1_ID	string (40),
LEVEL1_NAME	string (255),
LEVEL1_TYPE	string (100),
LEVEL2_ID	string (40),
LEVEL2_NAME	string (255),
LEVEL2_TYPE	string (100),
LEVEL3_ID	string (40),
LEVEL3_NAME	string (255),
LEVEL3_TYPE	string (100),
LEVEL4_ID	string (40),
LEVEL4_NAME	string (255),
LEVEL4_TYPE	string (100),
LEVEL5_ID	string (40),
LEVEL5_NAME	string (255),
LEVEL5_TYPE	string (100),
LEVEL6_ID	string	(40) ,
LEVEL6_NAME	string	(255) ,
LEVEL6_TYPE	string (100),
CONSTRAINT PK_HSE_CATALOG_SUMMARY PRIMARY KEY (HSE_SUMMARY_ID))
OPTIONS (UPDATABLE 'FALSE',HSE_SUMMARY.IMPLEMENTED 'TRUE')
AS
(
select FHCS.HSE_SUMMARY_ID,
CAST(DD.FORMATTEDDATE AS TIMESTAMP) AS HSE_DATE,CAST(NUM_LTA AS INTEGER),CAST(NUM_TA AS INTEGER),CAST(NUM_DWRA AS INTEGER),NUM_HW,LTR,TAR,ASR,DA.DIM_ASSETHIERARCHY_KEY,W_WC_FAC_KEY,W_WC_FAC_IND,cast(FHCS.LEVEL_NO AS INTEGER),
ENTITY_ID,ENTITY_NAME,ENTITY_TYPE,AREA_ID,AREA_NAME,AREA_TYPE,
FHCS.ACTIVE_IND,FHCS.SOURCE_NAME,FHCS.ROW_CHANGED_DATE,FHCS.ROW_CHANGED_BY,FHCS.ROW_CREATED_DATE,FHCS.ROW_CREATED_BY,
LEVEL1_ID,LEVEL1_NAME,LEVEL1_TYPE,
LEVEL2_ID,LEVEL2_NAME,LEVEL2_TYPE,
LEVEL3_ID,LEVEL3_NAME,LEVEL3_TYPE,
LEVEL4_ID,LEVEL4_NAME,LEVEL4_TYPE,
LEVEL5_ID,LEVEL5_NAME,LEVEL5_TYPE,
LEVEL6_ID,LEVEL6_NAME,LEVEL6_TYPE
FROM PDMDimSrc.FACTHSECATALOGSUMMARY FHCS
LEFT OUTER JOIN PDMDimSrc.DimDate AS DD ON DD.DATE_KEY = FHCS.DATE_KEY
INNER JOIN 
(select DA1.DIM_ASSETHIERARCHY_KEY,6 AS LEVEL_NO,DA1.LEVEL6_ID AS LEVEL_ID,
DA1.LEVEL1_ID,DA1.LEVEL1_NAME,DA1.LEVEL1_TYPE,
DA1.LEVEL2_ID,DA1.LEVEL2_NAME,DA1.LEVEL2_TYPE,
DA1.LEVEL3_ID,DA1.LEVEL3_NAME,DA1.LEVEL3_TYPE,
DA1.LEVEL4_ID,DA1.LEVEL4_NAME,DA1.LEVEL4_TYPE,
DA1.LEVEL5_ID,DA1.LEVEL5_NAME,DA1.LEVEL5_TYPE,
DA1.LEVEL6_ID,DA1.LEVEL6_NAME,DA1.LEVEL6_TYPE from PDMDimSrc.DIMASSETHIERARCHY DA1
INNER JOIN (SELECT DISTINCT LEVEL6_ID FROM PDMDimSrc.DIMASSETHIERARCHY) DA2
ON DA1.LEVEL6_ID = DA2.LEVEL6_ID
UNION
select NULL AS DIM_ASSETHIERARCHY_KEY,5 AS LEVEL_NO,MAX(DA1.LEVEL5_ID) AS LEVEL_ID,
MAX(DA1.LEVEL1_ID),MAX(DA1.LEVEL1_NAME),MAX(DA1.LEVEL1_TYPE),
MAX(DA1.LEVEL2_ID),MAX(DA1.LEVEL2_NAME),MAX(DA1.LEVEL2_TYPE),
MAX(DA1.LEVEL3_ID),MAX(DA1.LEVEL3_NAME),MAX(DA1.LEVEL3_TYPE),
MAX(DA1.LEVEL4_ID),MAX(DA1.LEVEL4_NAME),MAX(DA1.LEVEL4_TYPE),
MAX(DA1.LEVEL5_ID),MAX(DA1.LEVEL5_NAME),MAX(DA1.LEVEL5_TYPE),
NULL AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE from PDMDimSrc.DIMASSETHIERARCHY DA1
INNER JOIN (SELECT DISTINCT LEVEL5_ID FROM PDMDimSrc.DIMASSETHIERARCHY) DA2
ON DA1.LEVEL5_ID = DA2.LEVEL5_ID
GROUP BY DA1.LEVEL5_ID
UNION
select NULL AS DIM_ASSETHIERARCHY_KEY,4 AS LEVEL_NO,MAX(DA1.LEVEL4_ID) AS LEVEL_ID,
MAX(DA1.LEVEL1_ID),MAX(DA1.LEVEL1_NAME),MAX(DA1.LEVEL1_TYPE),
MAX(DA1.LEVEL2_ID),MAX(DA1.LEVEL2_NAME),MAX(DA1.LEVEL2_TYPE),
MAX(DA1.LEVEL3_ID),MAX(DA1.LEVEL3_NAME),MAX(DA1.LEVEL3_TYPE),
MAX(DA1.LEVEL4_ID),MAX(DA1.LEVEL4_NAME),MAX(DA1.LEVEL4_TYPE),
NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,
NULL AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE from PDMDimSrc.DIMASSETHIERARCHY DA1
INNER JOIN (SELECT DISTINCT LEVEL4_ID FROM PDMDimSrc.DIMASSETHIERARCHY) DA2
ON DA1.LEVEL4_ID = DA2.LEVEL4_ID
GROUP BY DA1.LEVEL4_ID
UNION
select NULL AS DIM_ASSETHIERARCHY_KEY,3 AS LEVEL_NO,MAX(DA1.LEVEL3_ID) AS LEVEL_ID,
MAX(DA1.LEVEL1_ID),MAX(DA1.LEVEL1_NAME),MAX(DA1.LEVEL1_TYPE),
MAX(DA1.LEVEL2_ID),MAX(DA1.LEVEL2_NAME),MAX(DA1.LEVEL2_TYPE),
MAX(DA1.LEVEL3_ID),MAX(DA1.LEVEL3_NAME),MAX(DA1.LEVEL3_TYPE),
NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE,
NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,
NULL AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE from PDMDimSrc.DIMASSETHIERARCHY DA1
INNER JOIN (SELECT DISTINCT LEVEL3_ID FROM PDMDimSrc.DIMASSETHIERARCHY) DA2
ON DA1.LEVEL3_ID = DA2.LEVEL3_ID
GROUP BY DA1.LEVEL3_ID
UNION
select NULL AS DIM_ASSETHIERARCHY_KEY,2 AS LEVEL_NO,MAX(DA1.LEVEL2_ID) AS LEVEL_ID,
MAX(DA1.LEVEL1_ID),MAX(DA1.LEVEL1_NAME),MAX(DA1.LEVEL1_TYPE),
MAX(DA1.LEVEL2_ID),MAX(DA1.LEVEL2_NAME),MAX(DA1.LEVEL2_TYPE),
NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE,
NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE,
NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,
NULL AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE from PDMDimSrc.DIMASSETHIERARCHY DA1
INNER JOIN (SELECT DISTINCT LEVEL2_ID FROM PDMDimSrc.DIMASSETHIERARCHY) DA2
ON DA1.LEVEL2_ID = DA2.LEVEL2_ID
GROUP BY DA1.LEVEL2_ID
UNION
select NULL AS DIM_ASSETHIERARCHY_KEY,1 AS LEVEL_NO,MAX(DA1.LEVEL1_ID) AS LEVEL_ID,
MAX(DA1.LEVEL1_ID),MAX(DA1.LEVEL1_NAME),MAX(DA1.LEVEL1_TYPE),
NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE,
NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE,
NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE,
NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,
NULL AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE from PDMDimSrc.DIMASSETHIERARCHY DA1
INNER JOIN (SELECT DISTINCT LEVEL1_ID FROM PDMDimSrc.DIMASSETHIERARCHY) DA2
ON DA1.LEVEL1_ID = DA2.LEVEL1_ID
GROUP BY DA1.LEVEL1_ID) DA
ON ((DA.LEVEL_ID = FHCS.AREA_ID AND DA.LEVEL_NO = FHCS.LEVEL_NO) 
OR FHCS.DIM_ASSETHIERARCHY_KEY = DA.DIM_ASSETHIERARCHY_KEY)
);

CREATE VIEW ANOMALY_DETAILS
(
	ANOMALY_TYPE	string(100)	NOT NULL,
	ANOMALY_TYPE_ID	string(40)	NOT NULL,
	COORDINATOR	string(100),
	OPEN_DATE	timestamp		NOT NULL,
	CLOSE_DATE	timestamp,
	ANOMALY_DESC	string(2000)	NOT NULL,
	ANOMALY_PLAN	string(2000),
	OPEN_DAYS	integer,
	ANOMALY_ID	string(40)	NOT NULL,
	OBSERVED_DATE	timestamp		NOT NULL,
	ANOMALY_CONCLUSION	string(2000),
	ANOMALY_CONCLUSION_ID	string(40),
	ANOMALY_EVAL_PRIORITY	string(100),
	ANOMALY_EVAL_PRIOR_ID	string(40),
	ROW_CREATED_DATE	timestamp,
	ROW_CREATED_BY	string(100),
	ROW_CHANGED_DATE	timestamp,
	ROW_CHANGED_BY	string(100),
	ACTIVE_IND	string(1),
	SOURCE_NAME	string(100),
	REMARK	string(2000),
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255),
	LEVEL1_ID	string(40),
	LEVEL1_NAME	string(255),
	LEVEL1_TYPE	string(100),
	LEVEL2_ID	string(40),
	LEVEL2_NAME	string(255),
	LEVEL2_TYPE	string(100),
	LEVEL3_ID	string(40),
	LEVEL3_NAME	string(255),
	LEVEL3_TYPE	string(100),
	LEVEL4_ID	string(40),
	LEVEL4_NAME	string(255),
	LEVEL4_TYPE	string(100),
	LEVEL5_ID	string(40),
	LEVEL5_NAME	string(255),
	LEVEL5_TYPE	string(100),
	LEVEL6_ID	string(40),
	LEVEL6_NAME	string(255) NOT NULL,
	LEVEL6_TYPE	string(100),
	ANOMALY_DETAILS_ID	string(40)	NOT NULL,
CONSTRAINT pk_ANOMALY_DETAILS_DIM PRIMARY KEY(ANOMALY_DETAILS_ID)
) OPTIONS(UPDATABLE 'FALSE',ANOMALY_DETAILS.IMPLEMENTED 'TRUE') 
AS
SELECT ANOMALY_TYPE, ANOMALY_TYPE_ID, COORDINATOR, OPEN_DATE,
	CLOSE_DATE, ANOMALY_DESC, ANOMALY_PLAN, OPEN_DAYS, ANOMALY_ID,
	OBSERVED_DATE, ANOMALY_CONCLUSION, ANOMALY_CONCLUSION_ID,
	ANOMALY_EVAL_PRIORITY, ANOMALY_EVAL_PRIOR_ID, A.ROW_CREATED_DATE,
	A.ROW_CREATED_BY, A.ROW_CHANGED_DATE, A.ROW_CHANGED_BY,
	A.ACTIVE_IND, A.SOURCE_NAME, A.REMARK, A.ENTITY_ID, A.ENTITY_NAME,
	DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE, DAH.LEVEL2_ID, DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE,
	DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, DAH.LEVEL4_ID, DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE,
	DAH.LEVEL5_ID, DAH.LEVEL5_NAME, DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE,
	ANOMALY_DETAILS_ID
FROM PDMTx.ANOMALY_DETAILS A
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON A.LEVEL6_ID = DAH.LEVEL6_ID
; 

CREATE VIEW WBE_IMPAIR_FAILURE
(
	IF_TYPE	string(100)	NOT NULL,
	IF_TYPE_ID	string(40)	NOT NULL,
	IF_DESC	string(2000)	NOT NULL,
	IF_CAUSE	string(2000)	,
	IF_CONSEQUENCE	string(100)	,
	IF_CONSEQUENCE_ID	string(40)	,
	IF_REMARK	string(2000)	,
	IF_EQUIP_SUB_TYPE	string(100)	NOT NULL,
	IF_EQUIP_SUB_TYPE_ID	string(40)	NOT NULL,
	IF_EQUIP_TYPE	string(100),
	IF_EQUIP_TYPE_ID	string(40),	
	IF_EQUIP_DESC	string(2000)	,
	IF_EQUIP_INSTALL_DATE	timestamp		,
	IF_START_DATE	timestamp		,
	IF_END_DATE	timestamp		,
	IF_CLOSE_IND	string(1)	,
	IF_RCFA_REQ_IND	string(1)	,
	IF_RCFA_REPORT_DATE	timestamp		,
	IF_MOC_IND	string(1)	,
	IF_RCFA_LOCATION	string(2000)	,
	IF_MOC_DATE	timestamp		,
	IF_MOC_REMARK	string(2000)	,
	IF_LINK_MOC_RECORD	string(2000)	,
	IF_MOC_EXPIRY_DATE	timestamp		,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	WBE_IF_ID	string(40)	NOT NULL,
	LEVEL1_ID	string(40),
	LEVEL1_NAME	string(255),
	LEVEL1_TYPE	string(100),
	LEVEL2_ID	string(40),
	LEVEL2_NAME	string(255),
	LEVEL2_TYPE	string(100),
	LEVEL3_ID	string(40),
	LEVEL3_NAME	string(255),
	LEVEL3_TYPE	string(100),
	LEVEL4_ID	string(40),
	LEVEL4_NAME	string(255),
	LEVEL4_TYPE	string(100),
	LEVEL5_ID	string(40),
	LEVEL5_NAME	string(255),
	LEVEL5_TYPE	string(100),
	LEVEL6_ID	string(40),
	LEVEL6_NAME	string(255) NOT NULL,
	LEVEL6_TYPE string(100),
CONSTRAINT PK_WBE_IMPAIR_FAILURE_DIM PRIMARY KEY (WBE_IF_ID))
OPTIONS (UPDATABLE 'FALSE', WBE_IMPAIR_FAILURE.IMPLEMENTED 'TRUE')
AS
SELECT IF_TYPE, IF_TYPE_ID, IF_DESC, IF_CAUSE, IF_CONSEQUENCE, IF_CONSEQUENCE_ID, IF_REMARK, IF_EQUIP_SUB_TYPE,
	IF_EQUIP_SUB_TYPE_ID, IF_EQUIP_TYPE, IF_EQUIP_TYPE_ID, IF_EQUIP_DESC, IF_EQUIP_INSTALL_DATE, IF_START_DATE, IF_END_DATE, IF_CLOSE_IND,
	IF_RCFA_REQ_IND, IF_RCFA_REPORT_DATE, IF_MOC_IND, IF_RCFA_LOCATION, IF_MOC_DATE, IF_MOC_REMARK,
	IF_LINK_MOC_RECORD, IF_MOC_EXPIRY_DATE, ENTITY_ID, ENTITY_NAME, WFI.ROW_CREATED_DATE, WFI.ROW_CREATED_BY, WFI.ROW_CHANGED_DATE,
	WFI.ROW_CHANGED_BY, WFI.ACTIVE_IND, WFI.SOURCE_NAME, WBE_IF_ID, DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE, DAH.LEVEL2_ID, DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE, DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, DAH.LEVEL4_ID, DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE,
	DAH.LEVEL5_ID, DAH.LEVEL5_NAME, DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE 
FROM PDMTx.WBE_IMPAIR_FAILURE WFI
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON WFI.LEVEL6_ID = DAH.LEVEL6_ID
;

CREATE VIEW DEVIATION(
DEVIATION_TYPE   string(100)    NOT NULL,
DEVIATION_TYPE_ID   string(40)    ,
DEV_COMMN_TYPE   string(100)    NOT NULL,
DEV_COMMN_TYPE_ID   string(40)    ,
DEV_START_DATE   timestamp    ,
DEV_END_DATE   timestamp    ,
DEV_NUM_DAYS   integer    ,
DEV_REMARK   string(2000)    NOT NULL,
EXCL_MISS_ANN_REP_IND   string(10)    ,
DEV_EQUIP_ID string(40),
DEV_EQUIP_NAME string(100),
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(10)    ,
SOURCE_NAME   string(100)    ,
DEVIATION_ID   string(40)    NOT NULL,
	LEVEL1_ID	string(40)	,
	LEVEL1_NAME	string(255)	,
	LEVEL1_TYPE	string(100)	,
	LEVEL2_ID	string(40)	,
	LEVEL2_NAME	string(255)	,
	LEVEL2_TYPE	string(100)	,
	LEVEL3_ID	string(40)	,
	LEVEL3_NAME	string(255)	,
	LEVEL3_TYPE	string(100)	,
	LEVEL4_ID	string(40)	,
	LEVEL4_NAME	string(255)	,
	LEVEL4_TYPE	string(100)	,
	LEVEL5_ID	string(40)	,
	LEVEL5_NAME	string(255)	,
	LEVEL5_TYPE	string(100)	,
	LEVEL6_ID	string(40)	,
	LEVEL6_NAME	string(255)	NOT NULL,
	LEVEL6_TYPE	string(100)	,
CONSTRAINT pk_DEVIATION_DIM   PRIMARY KEY(DEVIATION_ID)
)   OPTIONS(UPDATABLE 'FALSE',DEVIATION.IMPLEMENTED 'TRUE') 
AS
SELECT DEVIATION_TYPE, DEVIATION_TYPE_ID, DEV_COMMN_TYPE, DEV_COMMN_TYPE_ID, DEV_START_DATE,
DEV_END_DATE, DEV_NUM_DAYS, DEV_REMARK, EXCL_MISS_ANN_REP_IND, D.DEV_EQUIP_ID, D.DEV_EQUIP_NAME, D.ENTITY_ID, D.ENTITY_NAME, D.ROW_CREATED_DATE,
D.ROW_CREATED_BY, D.ROW_CHANGED_DATE, D.ROW_CHANGED_BY, D.ACTIVE_IND, D.SOURCE_NAME, DEVIATION_ID,
	DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE, DAH.LEVEL2_ID, DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE, DAH.LEVEL3_ID,
	DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, DAH.LEVEL4_ID, DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE, DAH.LEVEL5_ID,
	DAH.LEVEL5_NAME, DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE 
FROM PDMTx.DEVIATION D
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON D.LEVEL6_ID = DAH.LEVEL6_ID
;

CREATE VIEW BARRIER_ENV_TEST_HISTORY
(
	BE_TEST_DATE	timestamp,
	BE_TEST_TYPE	string(100),
	BE_TEST_TYPE_ID	string(40),
	BE_TEST_RESULT	string(100),
	BE_TEST_RESULT_ID	string(40),
	BE_PRESSURE	bigdecimal(15,4),
	PRESSURE_UOM	string(20)	,
	BE_RESET_FREQ_STATUS	string(100)	,
	BE_RESET_FREQ_STATUS_ID	string(40)	,
	BE_REMARK	string(2000),
	BE_TEST_FREQ	integer	,
	BE_TEST_HOURS	bigdecimal(15,4)	,
	FREQUENCY_UOM	string(20)	,
	BE_NEXT_TEST_DATE	timestamp		,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	BE_TEST_FREQ_ID string(40),
	BE_TEST_ID	string(40)	NOT NULL,
	LEVEL1_ID	string(40)	,
	LEVEL1_NAME	string(255)	,
	LEVEL1_TYPE	string(100)	,
	LEVEL2_ID	string(40)	,
	LEVEL2_NAME	string(255)	,
	LEVEL2_TYPE	string(100)	,
	LEVEL3_ID	string(40)	,
	LEVEL3_NAME	string(255)	,
	LEVEL3_TYPE	string(100)	,
	LEVEL4_ID	string(40)	,
	LEVEL4_NAME	string(255)	,
	LEVEL4_TYPE	string(100)	,
	LEVEL5_ID	string(40)	,
	LEVEL5_NAME	string(255)	,
	LEVEL5_TYPE	string(100)	,
	LEVEL6_ID	string(40)	NOT NULL,
	LEVEL6_NAME	string(255)	,
	LEVEL6_TYPE	string(100)	,	
CONSTRAINT PK_BAR_ENV_TEST_HIS_DIM PRIMARY KEY (BE_TEST_ID))
OPTIONS (UPDATABLE 'FALSE', BARRIER_ENV_TEST_HISTORY.IMPLEMENTED 'TRUE')
AS
SELECT BE_TEST_DATE, BE_TEST_TYPE, BE_TEST_TYPE_ID, BE_TEST_RESULT ,BE_TEST_RESULT_ID,
	BE_PRESSURE, PRESSURE_UOM, BE_RESET_FREQ_STATUS	, BE_RESET_FREQ_STATUS_ID,
	BE_REMARK, BE_TEST_FREQ	, BE_TEST_HOURS, FREQUENCY_UOM, BE_NEXT_TEST_DATE,
	ENTITY_ID, ENTITY_NAME, BT.ROW_CREATED_DATE, BT.ROW_CREATED_BY, BT.ROW_CHANGED_DATE,
	BT.ROW_CHANGED_BY, BT.ACTIVE_IND, BT.SOURCE_NAME, BT.REMARK, BE_TEST_FREQ_ID, BE_TEST_ID,
	DAH.LEVEL1_ID, 	DAH.LEVEL1_NAME,	DAH.LEVEL1_TYPE,	DAH.LEVEL2_ID,	DAH.LEVEL2_NAME,	DAH.LEVEL2_TYPE,
	DAH.LEVEL3_ID,	DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, DAH.LEVEL4_ID, DAH.LEVEL4_NAME,	DAH.LEVEL4_TYPE,
	DAH.LEVEL5_ID, DAH.LEVEL5_NAME,	DAH.LEVEL5_TYPE	,	DAH.LEVEL6_ID,	DAH.LEVEL6_NAME,	DAH.LEVEL6_TYPE
FROM PDMTx.BARRIER_ENV_TEST_HISTORY BT
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON BT.LEVEL6_ID = DAH.LEVEL6_ID
;

CREATE VIEW REGULATORY_DEPARTURE
(
ANNULUS_NAME   string(100)    NOT NULL,
ANNULUS_ID   string(40)    ,
REG_DEPT_DESC   string(2000)    NOT NULL,
SUBMISSION_DATE   timestamp   ,
APPROVAL_DATE   timestamp   ,
EXPIRY_DATE   timestamp   ,
PRESSURE_LIMIT   bigdecimal(15,4)    ,
PRESSURE_UOM   string(20)    ,
LEAD_TIME   integer    ,
LEAD_TIME_UOM   string(20)    ,
RESOLVED_IND   string(10)    ,
REG_DEPT_REMARK   string(2000),
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp   ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp   ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
SOURCE_NAME   string(100)    ,
REG_DEPT_ID   string(40)    NOT NULL,
LEVEL1_ID  string (   40),
LEVEL1_NAME  string (   255),
LEVEL1_TYPE  string (   100),
LEVEL2_ID  string (   40),
LEVEL2_NAME  string (   255),
LEVEL2_TYPE  string (   100),
LEVEL3_ID  string (   40  ),
LEVEL3_NAME  string (   255),
LEVEL3_TYPE  string (   100),
LEVEL4_ID  string (   40  ),
LEVEL4_NAME  string (   255),
LEVEL4_TYPE  string (   100),
LEVEL5_ID  string (   40  ),
LEVEL5_NAME  string (   255),
LEVEL5_TYPE  string (   100),
LEVEL6_ID  string (   40  ) NOT NULL,
LEVEL6_NAME  string (   255),
LEVEL6_TYPE  string (100),
CONSTRAINT pk_REG_DEPARTURE_DIM   PRIMARY KEY(REG_DEPT_ID)
)   OPTIONS(UPDATABLE 'FALSE',REGULATORY_DEPARTURE.IMPLEMENTED 'TRUE') 
AS
 SELECT ANNULUS_NAME, ANNULUS_ID, REG_DEPT_DESC, SUBMISSION_DATE, APPROVAL_DATE, D.EXPIRY_DATE, PRESSURE_LIMIT,
PRESSURE_UOM, LEAD_TIME, LEAD_TIME_UOM, RESOLVED_IND, REG_DEPT_REMARK, D.ENTITY_ID,
D.ENTITY_NAME, D.ROW_CREATED_DATE, D.ROW_CREATED_BY, D.ROW_CHANGED_DATE, D.ROW_CHANGED_BY,
D.ACTIVE_IND, D.SOURCE_NAME, REG_DEPT_ID, DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE,
DAH.LEVEL2_ID, DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE, DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, DAH.LEVEL4_ID,
DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE, DAH.LEVEL5_ID, DAH.LEVEL5_NAME, DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE
FROM PDMTx.REGULATORY_DEPARTURE D
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON D.LEVEL6_ID = DAH.LEVEL6_ID
; 

CREATE VIEW PM_EVENT(
PM_EVENT_TYPE string(100) NOT NULL,
PM_EVENT_TYPE_ID string(40),
PM_EVENT_DATE timestamp,
ANNULUS_NAME string(100) NOT NULL,
ANNULUS_ID string(40),
START_PRESSURE bigdecimal(15,4),
END_PRESSURE bigdecimal(15,4),
START_TEMPERATURE bigdecimal(15,4),
END_TEMPERATURE bigdecimal(15,4),
PRESSURE_UOM string(20),
TEMPERATURE_UOM string(20),
PM_EVENT_DURATION bigdecimal(15,4),
DURATION_UOM string(20),
PM_EVENT_VOLUME bigdecimal(15,4),
VOLUME_UOM string(20),
OPERATOR_NAME string(100),
OPERATOR_ID string(40),
SAMPLE_TAKEN_IND string(10),
FLUID_GRAVITY bigdecimal(15,4),
GRAVITY_UOM string(20),
FLUID_DESC string(200),
FLUID_OTHER string(100),
PRE_BLEED_PRESSURE bigdecimal(15,4),
POST_BLEED_PRESSURE bigdecimal(15,4),
POST_DAY_PRESSURE bigdecimal(15,4),
PM_EVENT_REMARK string(2000),
PM_EVENT_REC_CHART_IND string(10),
ENTITY_ID string(40) NOT NULL,
ENTITY_NAME string(255) NOT NULL,
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CHANGED_BY string(100),
ACTIVE_IND string(10),
SOURCE_NAME string(100),
PM_EVENT_ID string(40) NOT NULL,
LEVEL1_ID	string(40)	,
LEVEL1_NAME	string(255)	,
LEVEL1_TYPE	string(100)	,
LEVEL2_ID	string(40)	,
LEVEL2_NAME	string(255)	,
LEVEL2_TYPE	string(100)	,
LEVEL3_ID	string(40)	,
LEVEL3_NAME	string(255)	,
LEVEL3_TYPE	string(100)	,
LEVEL4_ID	string(40)	,
LEVEL4_NAME	string(255)	,
LEVEL4_TYPE	string(100)	,
LEVEL5_ID	string(40)	,
LEVEL5_NAME	string(255)	,
LEVEL5_TYPE	string(100)	,
LEVEL6_ID	string(40)	NOT NULL,
LEVEL6_NAME	string(255)	,
LEVEL6_TYPE	string(100)	,
CONSTRAINT PK_PM_EVENT_DIM PRIMARY KEY (PM_EVENT_ID))
OPTIONS (UPDATABLE 'FALSE', PM_EVENT.IMPLEMENTED 'TRUE')
AS
SELECT PM_EVENT_TYPE, PM_EVENT_TYPE_ID, PM_EVENT_DATE, ANNULUS_NAME, ANNULUS_ID, START_PRESSURE,
END_PRESSURE, START_TEMPERATURE, END_TEMPERATURE, PRESSURE_UOM, TEMPERATURE_UOM,
PM_EVENT_DURATION, DURATION_UOM, PM_EVENT_VOLUME, VOLUME_UOM, OPERATOR_NAME,
OPERATOR_ID, SAMPLE_TAKEN_IND, FLUID_GRAVITY, GRAVITY_UOM, FLUID_DESC, FLUID_OTHER,
PRE_BLEED_PRESSURE, POST_BLEED_PRESSURE, POST_DAY_PRESSURE, PM_EVENT_REMARK,
PM_EVENT_REC_CHART_IND, PE.ENTITY_ID, PE.ENTITY_NAME, PE.ROW_CREATED_DATE, PE.ROW_CREATED_BY,
PE.ROW_CHANGED_DATE, PE.ROW_CHANGED_BY, PE.ACTIVE_IND, PE.SOURCE_NAME, PM_EVENT_ID,
DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE, DAH.LEVEL2_ID, DAH.LEVEL2_NAME,
DAH.LEVEL2_TYPE, DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, DAH.LEVEL4_ID,
DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE, DAH.LEVEL5_ID, DAH.LEVEL5_NAME, DAH.LEVEL5_TYPE,
DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE	FROM PDMTx.PM_EVENT PE
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON PE.LEVEL6_ID = DAH.LEVEL6_ID
;

CREATE VIEW WELL_AUDIT
(
	AUDIT_DATE	timestamp		NOT NULL,
	AUDIT_ID	string(40)	NOT NULL,
	AUDIT_REPORT_FILE	string(2000)	,
	CLIENT_REPRESENTATIVE	string(100)	,
	CLIENT_REP_ID	string(40)	,
	AUDITOR_NAME	string(100)	,
	AUDITOR_ID	string(40)	,
	FIELD_NAME	string(100)	,
	PRODUCTION_STATUS	string(100)	,
	OPERATING_STATUS	string(100)	,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	LEVEL1_ID	string(40)	,
	LEVEL1_NAME	string(255)	,
	LEVEL1_TYPE	string(100)	,
	LEVEL2_ID	string(40)	,
	LEVEL2_NAME	string(255)	,
	LEVEL2_TYPE	string(100)	,
	LEVEL3_ID	string(40)	,
	LEVEL3_NAME	string(255)	,
	LEVEL3_TYPE	string(100)	,
	LEVEL4_ID	string(40)	,
	LEVEL4_NAME	string(255)	,
	LEVEL4_TYPE	string(100)	,
	LEVEL5_ID	string(40)	,
	LEVEL5_NAME	string(255)	,
	LEVEL5_TYPE	string(100)	,
	LEVEL6_ID	string(40)	,
	LEVEL6_NAME	string(255)	NOT NULL,
	LEVEL6_TYPE	string(100)	,
	WELL_AUDIT_ID	string(40)	NOT NULL,
CONSTRAINT PK_WELL_AUDIT_DIM PRIMARY KEY (WELL_AUDIT_ID))
OPTIONS (UPDATABLE 'FALSE', WELL_AUDIT.IMPLEMENTED 'TRUE')
AS
SELECT AUDIT_DATE, AUDIT_ID, AUDIT_REPORT_FILE, CLIENT_REPRESENTATIVE, CLIENT_REP_ID, AUDITOR_NAME, 
	AUDITOR_ID, FIELD_NAME, PRODUCTION_STATUS, OPERATING_STATUS, WA.ENTITY_ID, WA.ENTITY_NAME,
	WA.ROW_CREATED_DATE, WA.ROW_CREATED_BY, WA.ROW_CHANGED_DATE, WA.ROW_CHANGED_BY, 
	WA.ACTIVE_IND, WA.SOURCE_NAME, WA.REMARK, DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE, 
	DAH.LEVEL2_ID, DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE, DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, DAH.LEVEL4_ID, DAH.LEVEL4_NAME, 
	DAH.LEVEL4_TYPE, DAH.LEVEL5_ID, DAH.LEVEL5_NAME, DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE, WELL_AUDIT_ID
FROM PDMTx.WELL_AUDIT WA
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON WA.LEVEL6_ID = DAH.LEVEL6_ID;

CREATE VIEW ANNULUS_PLOT
(
ANNULUS_PLOT_ID string(40) NOT NULL,
A_ANN_PRESSURE bigdecimal(15,4),
B_ANN_PRESSURE bigdecimal(15,4),
C_ANN_PRESSURE bigdecimal(15,4),
D_ANN_PRESSURE bigdecimal(15,4),
E_ANN_PRESSURE bigdecimal(15,4),
TUBING_PRESSURE bigdecimal(15,4),
PRESSURE_UOM string(20),
WH_TEMPERATURE bigdecimal(15,4),
TEMPERATURE_UOM string(20),
A_UNOL bigdecimal(15,4),
A_LNOL bigdecimal(15,4),
B_UNOL bigdecimal(15,4),
B_LNOL bigdecimal(15,4),
C_UNOL bigdecimal(15,4),
C_LNOL bigdecimal(15,4),
D_UNOL bigdecimal(15,4),
D_LNOL bigdecimal(15,4),
E_UNOL bigdecimal(15,4),
E_LNOL bigdecimal(15,4),
ENTITY_ID string(40)  not null,
ENTITY_NAME string(255)  not null,
MEASUREMENT_DATE timestamp,
WELL_ON_DURATION bigdecimal(15,4),
DURATION_UOM string(20),
BLEED_VOLUME bigdecimal(15,4),
TOP_UP_VOLUME bigdecimal(15,4),
VOLUME_UOM string(20),
LEVEL1_ID  string (   40),
LEVEL1_NAME  string (   255),
LEVEL1_TYPE  string (   100),
LEVEL2_ID  string (   40),
LEVEL2_NAME  string (   255),
LEVEL2_TYPE  string (   100),
LEVEL3_ID  string (   40  ),
LEVEL3_NAME  string (   255),
LEVEL3_TYPE  string (   100),
LEVEL4_ID  string (   40  ),
LEVEL4_NAME  string (   255),
LEVEL4_TYPE  string (   100),
LEVEL5_ID  string (   40  ),
LEVEL5_NAME  string (   255),
LEVEL5_TYPE  string (   100),
LEVEL6_ID  string (   40  ) NOT NULL,
LEVEL6_NAME  string (   255),
LEVEL6_TYPE  string (100),
CONSTRAINT pk_ANN_PLOT_DIM  PRIMARY KEY(ANNULUS_PLOT_ID)
)   OPTIONS(UPDATABLE 'FALSE',ANNULUS_PLOT.IMPLEMENTED 'TRUE') 
AS
SELECT ANNULUS_PLOT_ID, A_ANN_PRESSURE, B_ANN_PRESSURE, C_ANN_PRESSURE, D_ANN_PRESSURE, E_ANN_PRESSURE, TUBING_PRESSURE,
PRESSURE_UOM, WH_TEMPERATURE, TEMPERATURE_UOM, A_UNOL, A_LNOL, B_UNOL, B_LNOL, C_UNOL, C_LNOL, D_UNOL,
D_LNOL,E_UNOL, E_LNOL, ENTITY_ID, ENTITY_NAME, MEASUREMENT_DATE, WELL_ON_DURATION, DURATION_UOM, BLEED_VOLUME, 
TOP_UP_VOLUME, VOLUME_UOM, DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE, DAH.LEVEL2_ID, DAH.LEVEL2_NAME, 
DAH.LEVEL2_TYPE, DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, DAH.LEVEL4_ID, DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE, 
DAH.LEVEL5_ID, DAH.LEVEL5_NAME, DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE 
FROM PDMTx.ANNULUS_PLOT A
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON A.LEVEL6_ID = DAH.LEVEL6_ID;

CREATE VIEW ASSET_WI_KPI_STATS
(
KPI_DATE timestamp,
KPI string(100) NOT NULL,
KPI_ID string(40),
KPI_TYPE string(100),
KPI_VALUE integer,
KPI_VALUE_UOM string(20),
SOURCE_NAME string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND    string (1),
ASSET_KPI_STATS_ID string (40) NOT NULL,
LEVEL1_ID	string(40)	,
LEVEL1_NAME	string(255)	,
LEVEL1_TYPE	string(100)	,
LEVEL2_ID	string(40)	,
LEVEL2_NAME	string(255)	,
LEVEL2_TYPE	string(100)	,
LEVEL3_ID	string(40)	,
LEVEL3_NAME	string(255)	,
LEVEL3_TYPE	string(100)	,
LEVEL4_ID	string(40)	,
LEVEL4_NAME	string(255)	,
LEVEL4_TYPE	string(100)	,
LEVEL5_ID	string(40)	,
LEVEL5_NAME	string(255)	,
LEVEL5_TYPE	string(100)	,
LEVEL6_ID	string(40)	NOT NULL,
LEVEL6_NAME	string(255)	,
LEVEL6_TYPE	string(100)	,
CONSTRAINT PK_ASSET_KPI_STATS PRIMARY KEY (ASSET_KPI_STATS_ID))
OPTIONS (UPDATABLE 'FALSE',ASSET_WI_KPI_STATS.IMPLEMENTED 'TRUE')
AS
SELECT KPI_DATE, KPI, NULL, 'Well Count', CAST(KPI_VALUE AS INTEGER), NULL, 'DSWIM', NULL, NULL, NOW(), 'DSWIM', 'Y', UUID(),
CASE WHEN LEVEL_ALIAS = 'LEVEL1' THEN LEVEL_ID END,
CASE WHEN LEVEL_ALIAS = 'LEVEL1' THEN LEVEL_NAME END,
CASE WHEN LEVEL_ALIAS = 'LEVEL1' THEN LEVEL_TYPE END,
CASE WHEN LEVEL_ALIAS = 'LEVEL2' THEN LEVEL_ID END,
CASE WHEN LEVEL_ALIAS = 'LEVEL2' THEN LEVEL_NAME END,
CASE WHEN LEVEL_ALIAS = 'LEVEL2' THEN LEVEL_TYPE END,
CASE WHEN LEVEL_ALIAS = 'LEVEL3' THEN LEVEL_ID END,
CASE WHEN LEVEL_ALIAS = 'LEVEL3' THEN LEVEL_NAME END,
CASE WHEN LEVEL_ALIAS = 'LEVEL3' THEN LEVEL_TYPE END,
CASE WHEN LEVEL_ALIAS = 'LEVEL4' THEN LEVEL_ID END,
CASE WHEN LEVEL_ALIAS = 'LEVEL4' THEN LEVEL_NAME END,
CASE WHEN LEVEL_ALIAS = 'LEVEL4' THEN LEVEL_TYPE END,
CASE WHEN LEVEL_ALIAS = 'LEVEL5' THEN LEVEL_ID END,
CASE WHEN LEVEL_ALIAS = 'LEVEL5' THEN LEVEL_NAME END,
CASE WHEN LEVEL_ALIAS = 'LEVEL5' THEN LEVEL_TYPE END,
CASE WHEN LEVEL_ALIAS = 'LEVEL6' THEN LEVEL_ID END,
CASE WHEN LEVEL_ALIAS = 'LEVEL6' THEN LEVEL_NAME END,
CASE WHEN LEVEL_ALIAS = 'LEVEL6' THEN LEVEL_TYPE END
FROM
(
SELECT KPI, KPI_DATE,KPI_VALUE AS KPI_VALUE, LEVEL6_NAME AS LEVEL_NAME, LEVEL6_TYPE AS LEVEL_TYPE, LEVEL6_ID AS LEVEL_ID, 
'LEVEL6' AS LEVEL_ALIAS
FROM PDMTx.ASSET_WI_KPI_STATS A
UNION ALL 
SELECT KPI, KPI_DATE,SUM(KPI_VALUE) AS KPI_VALUE, DAH.LEVEL5_NAME AS LEVEL_NAME, DAH.LEVEL5_TYPE AS LEVEL_TYPE, DAH.LEVEL5_ID AS LEVEL_ID, 
'LEVEL5' AS LEVEL_ALIAS 
FROM PDMTx.ASSET_WI_KPI_STATS A
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON A.LEVEL6_ID = DAH.LEVEL6_ID
GROUP BY KPI, KPI_DATE,DAH.LEVEL5_NAME, DAH.LEVEL5_TYPE, DAH.LEVEL5_ID
UNION ALL
SELECT KPI, KPI_DATE,SUM(KPI_VALUE) AS KPI_VALUE, DAH.LEVEL4_NAME AS LEVEL_NAME, DAH.LEVEL4_TYPE AS LEVEL_TYPE, DAH.LEVEL4_ID  AS LEVEL_ID, 'LEVEL4' AS LEVEL_ALIAS  
FROM PDMTx.ASSET_WI_KPI_STATS A
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON A.LEVEL6_ID = DAH.LEVEL6_ID
GROUP BY KPI, KPI_DATE,DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE, DAH.LEVEL4_ID
UNION ALL
SELECT KPI, KPI_DATE,SUM(KPI_VALUE) AS KPI_VALUE, DAH.LEVEL3_NAME AS LEVEL_NAME, DAH.LEVEL3_TYPE AS LEVEL_TYPE, DAH.LEVEL3_ID  AS LEVEL_ID, 'LEVEL3' AS LEVEL_ALIAS 
FROM PDMTx.ASSET_WI_KPI_STATS A
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON A.LEVEL6_ID = DAH.LEVEL6_ID
GROUP BY KPI, KPI_DATE,DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, DAH.LEVEL3_ID
UNION ALL
SELECT KPI, KPI_DATE,SUM(KPI_VALUE) AS KPI_VALUE, DAH.LEVEL2_NAME AS LEVEL_NAME, DAH.LEVEL2_TYPE AS LEVEL_TYPE, DAH.LEVEL2_ID  AS LEVEL_ID , 'LEVEL2' AS LEVEL_ALIAS 
FROM PDMTx.ASSET_WI_KPI_STATS A
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON A.LEVEL6_ID = DAH.LEVEL6_ID
GROUP BY KPI, KPI_DATE,DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE, DAH.LEVEL2_ID
UNION ALL
SELECT KPI, KPI_DATE,SUM(KPI_VALUE) AS KPI_VALUE, DAH.LEVEL1_NAME AS LEVEL_NAME, DAH.LEVEL1_TYPE AS LEVEL_TYPE, DAH.LEVEL1_ID  AS LEVEL_ID , 'LEVEL1' AS LEVEL_ALIAS 
FROM PDMTx.ASSET_WI_KPI_STATS A
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON A.LEVEL6_ID = DAH.LEVEL6_ID
GROUP BY KPI, KPI_DATE,DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE, DAH.LEVEL1_ID
)T
;

CREATE VIEW GLOBAL_WI_KPI_STATS
(
KPI_OVERDUE integer,
KPI_SCP integer,
KPI_FAILED_TEST integer,
KPI_VALUE_UOM string(20),
SOURCE_NAME string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND    string (1),
LATITUDE bigdecimal(10,4),
LONGITUDE bigdecimal(10,4),
GLOBAL_KPI_STATS_ID string (40) NOT NULL,
LEVEL_ID	string(40)	,
LEVEL_NAME	string(255)	,
LEVEL_TYPE	string(100),
CONSTRAINT PK_GLOBAL_KPI_STATS PRIMARY KEY (GLOBAL_KPI_STATS_ID))
OPTIONS (UPDATABLE 'FALSE',GLOBAL_KPI_STATS.IMPLEMENTED 'TRUE')
AS
SELECT cast(SUM(CASE WHEN KPI = 'Overdue' THEN KPI_VALUE END) as integer) OVERDUE,
cast(SUM(CASE WHEN KPI = 'SCP' THEN KPI_VALUE END) as integer) SCP,
cast(SUM(CASE WHEN KPI = 'Failed Test' THEN KPI_VALUE END) as integer) FAILED_TEST,
NULL, 'DSWIM', NULL, NULL, NOW(), 'DSWIM', 'Y', MAX(CASE WHEN DAH.LATITUDE IS NOT NULL THEN CAST(DAH.LATITUDE AS bigdecimal) ELSE NULL END) LATITUDE, 
MAX(CASE WHEN DAH.LONGITUDE IS NOT NULL THEN CAST(DAH.LONGITUDE AS bigdecimal) ELSE NULL END) LONGITUDE, UUID(),
CASE WHEN DAH.LEVEL1_ID IS NULL THEN CASE WHEN DAH.LEVEL2_ID IS NULL THEN CASE WHEN DAH.LEVEL3_ID IS NULL THEN
	CASE WHEN DAH.LEVEL4_ID IS NULL THEN CASE WHEN DAH.LEVEL5_ID IS NULL THEN DAH.LEVEL6_ID ELSE DAH.LEVEL5_ID END
		ELSE DAH.LEVEL4_ID END ELSE DAH.LEVEL3_ID END ELSE DAH.LEVEL2_ID END ELSE DAH.LEVEL1_ID END,
CASE WHEN DAH.LEVEL1_NAME IS NULL THEN CASE WHEN DAH.LEVEL2_NAME IS NULL THEN CASE WHEN DAH.LEVEL3_NAME IS NULL THEN
	CASE WHEN DAH.LEVEL4_NAME IS NULL THEN CASE WHEN DAH.LEVEL5_NAME IS NULL THEN DAH.LEVEL6_NAME ELSE DAH.LEVEL5_NAME END
		ELSE DAH.LEVEL4_NAME END ELSE DAH.LEVEL3_NAME END ELSE DAH.LEVEL2_NAME END ELSE DAH.LEVEL1_NAME END,
CASE WHEN DAH.LEVEL1_TYPE IS NULL THEN CASE WHEN DAH.LEVEL2_TYPE IS NULL THEN CASE WHEN DAH.LEVEL3_TYPE IS NULL THEN
	CASE WHEN DAH.LEVEL4_TYPE IS NULL THEN CASE WHEN DAH.LEVEL5_TYPE IS NULL THEN DAH.LEVEL6_TYPE ELSE DAH.LEVEL5_TYPE END
		ELSE DAH.LEVEL4_TYPE END ELSE DAH.LEVEL3_TYPE END ELSE DAH.LEVEL2_TYPE END ELSE DAH.LEVEL1_TYPE END
 FROM PDMTx.ASSET_WI_KPI_STATS A
 RIGHT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON A.LEVEL6_ID = DAH.LEVEL6_ID
 GROUP BY 
CASE WHEN DAH.LEVEL1_ID IS NULL THEN CASE WHEN DAH.LEVEL2_ID IS NULL THEN CASE WHEN DAH.LEVEL3_ID IS NULL THEN
	CASE WHEN DAH.LEVEL4_ID IS NULL THEN CASE WHEN DAH.LEVEL5_ID IS NULL THEN DAH.LEVEL6_ID ELSE DAH.LEVEL5_ID END
		ELSE DAH.LEVEL4_ID END ELSE DAH.LEVEL3_ID END ELSE DAH.LEVEL2_ID END ELSE DAH.LEVEL1_ID END,
CASE WHEN DAH.LEVEL1_NAME IS NULL THEN CASE WHEN DAH.LEVEL2_NAME IS NULL THEN CASE WHEN DAH.LEVEL3_NAME IS NULL THEN
	CASE WHEN DAH.LEVEL4_NAME IS NULL THEN CASE WHEN DAH.LEVEL5_NAME IS NULL THEN DAH.LEVEL6_NAME ELSE DAH.LEVEL5_NAME END
		ELSE DAH.LEVEL4_NAME END ELSE DAH.LEVEL3_NAME END ELSE DAH.LEVEL2_NAME END ELSE DAH.LEVEL1_NAME END,
CASE WHEN DAH.LEVEL1_TYPE IS NULL THEN CASE WHEN DAH.LEVEL2_TYPE IS NULL THEN CASE WHEN DAH.LEVEL3_TYPE IS NULL THEN
	CASE WHEN DAH.LEVEL4_TYPE IS NULL THEN CASE WHEN DAH.LEVEL5_TYPE IS NULL THEN DAH.LEVEL6_TYPE ELSE DAH.LEVEL5_TYPE END
		ELSE DAH.LEVEL4_TYPE END ELSE DAH.LEVEL3_TYPE END ELSE DAH.LEVEL2_TYPE END ELSE DAH.LEVEL1_TYPE END
;


CREATE VIEW BARRIER_EQUIP_TEST_DETAILS
(
BE_TEST_DATE   timestamp    NOT NULL,
BE_TEST_TYPE   string(100)    NOT NULL,
BE_TEST_TYPE_ID   string(40)    ,
BE_TEST_DETAILS   string(2000)    ,
BE_TEST_RESULT   string(200)    ,
BE_TEST_RESULT_ID   string(40)    ,
BE_TEST_RESULT_UOM   string(20)    ,
BARRIER_EQUIP_ID   string(40),
BARRIER_EQUIP_NAME   string(100)    NOT NULL,
BARRIER_EQUIP_SEC_ID   string(40),
BARRIER_EQUIP_SEC_NAME   string(100)    NOT NULL,
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
SOURCE_NAME   string(100)    ,
REMARK   string(2000)    ,
BARRIER_EQUIP_TEST_ID   string(40)    NOT NULL,
LEVEL1_ID	string(40)	,
LEVEL1_NAME	string(255)	,
LEVEL1_TYPE	string(100)	,
LEVEL2_ID	string(40)	,
LEVEL2_NAME	string(255)	,
LEVEL2_TYPE	string(100)	,
LEVEL3_ID	string(40)	,
LEVEL3_NAME	string(255)	,
LEVEL3_TYPE	string(100)	,
LEVEL4_ID	string(40)	,
LEVEL4_NAME	string(255)	,
LEVEL4_TYPE	string(100)	,
LEVEL5_ID	string(40)	,
LEVEL5_NAME	string(255)	,
LEVEL5_TYPE	string(100)	,
LEVEL6_ID	string(40)	NOT NULL,
LEVEL6_NAME	string(255)	,
LEVEL6_TYPE	string(100),	
CONSTRAINT pk_BE_TEST_DETAILS_DIM   PRIMARY KEY(BARRIER_EQUIP_TEST_ID)
)   OPTIONS(UPDATABLE 'FALSE',BARRIER_EQUIP_TEST_DETAILS.IMPLEMENTED 'TRUE') 
AS
SELECT BE_TEST_DATE, BE_TEST_TYPE, BE_TEST_TYPE_ID, BE_TEST_DETAILS, BE_TEST_RESULT, BE_TEST_RESULT_ID,
BE_TEST_RESULT_UOM, BARRIER_EQUIP_ID, BARRIER_EQUIP_NAME, BARRIER_EQUIP_SEC_ID, BARRIER_EQUIP_SEC_NAME,
B.ENTITY_ID, B.ENTITY_NAME, B.ROW_CREATED_DATE, B.ROW_CREATED_BY, B.ROW_CHANGED_DATE, B.ROW_CHANGED_BY, 
B.ACTIVE_IND, B.SOURCE_NAME, B.REMARK, B.BARRIER_EQUIP_TEST_ID, DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE,
DAH.LEVEL2_ID, DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE, DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, DAH.LEVEL4_ID, DAH.LEVEL4_NAME,
DAH.LEVEL4_TYPE, DAH.LEVEL5_ID, DAH.LEVEL5_NAME, DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE
FROM PDMTx.BARRIER_EQUIP_TEST_DETAILS B
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON B.LEVEL6_ID = DAH.LEVEL6_ID
;

CREATE VIEW AP_ENVELOPE
(
AP_ENVELOPE_ID string(40) NOT NULL,
MEASUREMENT_DATE timestamp,
A_ANN_PRESSURE bigdecimal(15,4),
B_ANN_PRESSURE bigdecimal(15,4),
C_ANN_PRESSURE bigdecimal(15,4),
D_ANN_PRESSURE bigdecimal(15,4),
E_ANN_PRESSURE bigdecimal(15,4),
TBG_PRESSURE bigdecimal(15,4),
PRESSURE_UOM string(20),
A_UNOL bigdecimal(15,4),
A_LNOL bigdecimal(15,4),
B_UNOL bigdecimal(15,4),
B_LNOL bigdecimal(15,4),
C_UNOL bigdecimal(15,4),
C_LNOL bigdecimal(15,4),
D_UNOL bigdecimal(15,4),
D_LNOL bigdecimal(15,4),
E_UNOL bigdecimal(15,4),
E_LNOL bigdecimal(15,4),
ENTITY_ID string(40)  not null,
ENTITY_NAME string(255)  not null,
LEVEL1_ID  string (   40),
LEVEL1_NAME  string (   255),
LEVEL1_TYPE  string (   100),
LEVEL2_ID  string (   40),
LEVEL2_NAME  string (   255),
LEVEL2_TYPE  string (   100),
LEVEL3_ID  string (   40  ),
LEVEL3_NAME  string (   255),
LEVEL3_TYPE  string (   100),
LEVEL4_ID  string (   40  ),
LEVEL4_NAME  string (   255),
LEVEL4_TYPE  string (   100),
LEVEL5_ID  string (   40  ),
LEVEL5_NAME  string (   255),
LEVEL5_TYPE  string (   100),
LEVEL6_ID  string (   40  ) NOT NULL,
LEVEL6_NAME  string (   255),
LEVEL6_TYPE  string (100),
CONSTRAINT pk_AP_ENV_DIM  PRIMARY KEY(AP_ENVELOPE_ID)
)   OPTIONS(UPDATABLE 'FALSE',AP_ENVELOPE.IMPLEMENTED 'TRUE') 
AS
SELECT AP_ENVELOPE_ID, MEASUREMENT_DATE,A_ANN_PRESSURE, B_ANN_PRESSURE, C_ANN_PRESSURE, D_ANN_PRESSURE, E_ANN_PRESSURE, 
TBG_PRESSURE, PRESSURE_UOM, 
A_UNOL, A_LNOL, B_UNOL, B_LNOL, C_UNOL, C_LNOL, D_UNOL, D_LNOL, E_UNOL, E_LNOL,  ENTITY_ID, ENTITY_NAME,
DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE, DAH.LEVEL2_ID, DAH.LEVEL2_NAME, 
DAH.LEVEL2_TYPE, DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, DAH.LEVEL4_ID, DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE, 
DAH.LEVEL5_ID, DAH.LEVEL5_NAME, DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE
FROM PDMTx.AP_ENVELOPE A
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON A.LEVEL6_ID = DAH.LEVEL6_ID
;

CREATE VIEW WI_KPI_STATISTICS
(
KPI_DATE timestamp NOT NULL,
KPI string(100) NOT NULL,
KPI_ID string(40),
KPI_TYPE string(100),
KPI_VALUE integer,
KPI_VALUE_UOM string(20),
ENTITY_ID string (40) NOT NULL,
ENTITY_NAME  string (255),
SOURCE_NAME string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND    string (1),
KPI_STATS_ID string (40) NOT NULL,
LEVEL1_ID	string(40)	,
LEVEL1_NAME	string(255)	,
LEVEL1_TYPE	string(100)	,
LEVEL2_ID	string(40)	,
LEVEL2_NAME	string(255)	,
LEVEL2_TYPE	string(100)	,
LEVEL3_ID	string(40)	,
LEVEL3_NAME	string(255)	,
LEVEL3_TYPE	string(100)	,
LEVEL4_ID	string(40)	,
LEVEL4_NAME	string(255)	,
LEVEL4_TYPE	string(100)	,
LEVEL5_ID	string(40)	,
LEVEL5_NAME	string(255)	,
LEVEL5_TYPE	string(100)	,
LEVEL6_ID	string(40)	NOT NULL,
LEVEL6_NAME	string(255)	,
LEVEL6_TYPE	string(100)	,
CONSTRAINT PK_KPI_STATS_DIM PRIMARY KEY (KPI_STATS_ID))
OPTIONS (UPDATABLE 'FALSE',WI_KPI_STATISTICS.IMPLEMENTED 'TRUE')
AS
SELECT KPI_DATE, KPI, NULL, 'Well', KPI_VALUE, KPI_VALUE_UOM, ENTITY_ID, ENTITY_NAME,
SOURCE_NAME, NULL, NULL, ROW_CREATED_DATE, ROW_CREATED_BY, 'Y', UUID(), 
LEVEL1_ID, LEVEL1_NAME, LEVEL1_TYPE,
LEVEL2_ID, LEVEL2_NAME, LEVEL2_TYPE, LEVEL3_ID, LEVEL3_NAME, LEVEL3_TYPE,
LEVEL4_ID, LEVEL4_NAME, LEVEL4_TYPE, LEVEL5_ID, LEVEL5_NAME,
LEVEL5_TYPE, LEVEL6_ID, LEVEL6_NAME, LEVEL6_TYPE
FROM
( 
SELECT KPI_DATE, KPI, cast(SUM(KPI_VALUE) as integer) AS KPI_VALUE, MAX(KPI_VALUE_UOM) AS KPI_VALUE_UOM, ENTITY_ID,
ENTITY_NAME, MAX(K.SOURCE_NAME) AS SOURCE_NAME, MAX(K.ROW_CREATED_DATE) AS ROW_CREATED_DATE, MAX(K.ROW_CREATED_BY) AS ROW_CREATED_BY,
DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE,
DAH.LEVEL2_ID, DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE, DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE,
DAH.LEVEL4_ID, DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE, DAH.LEVEL5_ID, DAH.LEVEL5_NAME,
DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE FROM
PDMTx.WI_KPI_STATISTICS K
INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON K.LEVEL6_ID = DAH.LEVEL6_ID
GROUP BY DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE,
DAH.LEVEL2_ID, DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE, DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE,
DAH.LEVEL4_ID, DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE, DAH.LEVEL5_ID, DAH.LEVEL5_NAME,
DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE, KPI_DATE, KPI,ENTITY_ID, ENTITY_NAME
UNION ALL 
SELECT PARSETIMESTAMP((MONTH(CASE WHEN WI.ROW_CHANGED_DATE IS NOT NULL THEN WI.ROW_CHANGED_DATE ELSE WI.ROW_CREATED_DATE END) || '/01/' 
|| YEAR(CASE WHEN WI.ROW_CHANGED_DATE IS NOT NULL THEN WI.ROW_CHANGED_DATE ELSE WI.ROW_CREATED_DATE END) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss') AS KPI_DATE,
WIS.WI_STATUS AS KPI, cast(COUNT(WI.ENTITY_ID) as integer) AS KPI_VALUE, NULL AS KPI_VALUE_UOM, WI.ENTITY_ID, WI.ENTITY_NAME,
MAX(WI.SOURCE_NAME) AS SOURCE_NAME, MAX(WI.ROW_CREATED_DATE) AS ROW_CREATED_DATE, MAX(WI.ROW_CREATED_BY) AS ROW_CREATED_BY,
DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE,
DAH.LEVEL2_ID, DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE, DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE,
DAH.LEVEL4_ID, DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE, DAH.LEVEL5_ID, DAH.LEVEL5_NAME,
DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE
 FROM PDMTx.R_WI_STATUS WIS
 RIGHT OUTER JOIN PDMTx.WI_STATUS WI ON WIS.WI_STATUS_ID = WI.R_WI_STATUS_ID
 INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON WI.LEVEL6_ID = DAH.LEVEL6_ID
 WHERE WIS.WI_STATUS_ID IS NOT NULL
 GROUP BY DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE,
DAH.LEVEL2_ID, DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE, DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE,
DAH.LEVEL4_ID, DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE, DAH.LEVEL5_ID, DAH.LEVEL5_NAME,
DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE, WI.ENTITY_ID, WI.ENTITY_NAME,
WIS.WI_STATUS,PARSETIMESTAMP((MONTH(CASE WHEN WI.ROW_CHANGED_DATE IS NOT NULL THEN WI.ROW_CHANGED_DATE ELSE WI.ROW_CREATED_DATE END) || '/01/' 
|| YEAR(CASE WHEN WI.ROW_CHANGED_DATE IS NOT NULL THEN WI.ROW_CHANGED_DATE ELSE WI.ROW_CREATED_DATE END) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss'),
WI.LEVEL6_ID, WI.LEVEL6_NAME, WI.LEVEL6_TYPE
)T
;

CREATE VIEW POOL_RESERVE_SUMMARY
(
 PROD_DATE	timestamp,
 OIL_RESERVE	bigdecimal	(15,4),
 OIL_IN_PLACE	bigdecimal	(15,4),
 OIL_EUR bigdecimal	(15,4),
 OIL_UNREC bigdecimal	(15,4),
 OIL_CUM bigdecimal	(15,4),
 OIL_UOM	string	(20),
 GAS_RESERVE bigdecimal	(15,4),
 GAS_IN_PLACE	bigdecimal	(15,4),
 GAS_EUR bigdecimal	(15,4),
 GAS_UNREC bigdecimal	(15,4),
 GAS_CUM bigdecimal	(15,4),
 GAS_UOM	string	(20),
 BOE_RESERVE bigdecimal	(15,4),
 BOE_IN_PLACE	bigdecimal	(15,4),
 BOE_EUR bigdecimal	(15,4),
 BOE_UNREC bigdecimal	(15,4),
 BOE_CUM bigdecimal	(15,4),
 WATER_CUM bigdecimal	(15,4),
 POOL_ID	string	(100)	NOT NULL, 
 POOL_NAME	string	(255),
 LATITUDE bigdecimal	(15,4),
 LONGITUDE bigdecimal	(15,4),
 SOURCE_NAME	string	(100),
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string	(100),
 ESTIMATED_BY string	(100),
 POOL_RES_ID	string	(40)	NOT NULL,
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
CONSTRAINT PK_POOL_RES_VOLUME PRIMARY KEY (POOL_RES_ID))
OPTIONS (UPDATABLE 'FALSE', POOL_RESERVE_SUMMARY.IMPLEMENTED 'TRUE')
AS
 (
 SELECT cast(DD.FORMATTEDDATE AS TIMESTAMP),
 OIL_RESERVE,
 OIL_IN_PLACE,
 OIL_EUR,
 UNRECOVERABLE_OIL,
 CUM_OIL ,
 OU.UOM_NAME,
 GAS_RESERVE ,
 GAS_IN_PLACE	,
 GAS_EUR ,
 UNRECOVERABLE_GAS,
 CUM_GAS ,
 GU.UOM_NAME,
 BOE_RESERVE ,
 BOE_IN_PLACE	,
 BOE_EUR ,
 UNRECOVERABLE_BOE,
 CUM_BOE ,
 CUM_WATER,
 POOL_ID, 
 POOL_NAME	,
 FPS.LATITUDE ,
 FPS.LONGITUDE ,
 FPS.SOURCE,
 FPS.ROW_CHANGED_BY,
 CAST(RCD.FORMATTEDDATE AS TIMESTAMP) AS ROW_CHANGED_DATE,
 CAST(RCHD.FORMATTEDDATE AS TIMESTAMP) AS ROW_CREATED_DATE,
 FPS.ROW_CREATED_BY,
 FPS.RESERVE_ESTIMATOR,
 CAST(FACT_POOLRES_SUM_KEY AS STRING),
 LEVEL1_ID,
 LEVEL1_NAME,
 LEVEL1_TYPE,
 LEVEL2_ID,
 LEVEL2_NAME,
 LEVEL2_TYPE,
 LEVEL3_ID,
 LEVEL3_NAME,
 LEVEL3_TYPE,
 LEVEL4_ID,
 LEVEL4_NAME,
 LEVEL4_TYPE,
 LEVEL5_ID,
 LEVEL5_NAME,
 LEVEL5_TYPE,
 LEVEL6_ID,
 LEVEL6_NAME,
 LEVEL6_TYPE
FROM PDMDimSrc.FACT_POOL_RESERVE_SUMMARY FPS
INNER JOIN PDMDimSrc.DIMDATE DD ON FPS.DATE_KEY = DD.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON FPS.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE OU ON FPS.OIL_UOM_KEY = OU.DIM_UOM_KEY
LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE GU ON FPS.GAS_UOM_KEY = GU.DIM_UOM_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE RCD ON FPS.ROW_CREATED_DATE_ID = RCD.DATE_KEY
LEFT OUTER JOIN PDMDimSrc.DIMDATE RCHD ON FPS.ROW_CHANGED_DATE_ID = RCHD.DATE_KEY
 );
 
 CREATE VIEW TANK_BATTERY_SUMMARY
(
 PROD_DATE	timestamp,
 PR_PROD_NAME	string	(100),
 PR_PROD_VOLUME	bigdecimal	(15,4),
 SEC_PROD_NAME	string	(100),
 SEC_PROD_VOLUME	bigdecimal	(15,4),
 PR_PROD_UOM	string	(20),
 SEC_PROD_UOM	string	(20),
 CAPACITY bigdecimal	(15,4),
 SPARE_CAPACITY bigdecimal	(15,4),
 TANK_ID string(40),
 TANK_NAME string(100) NOT NULL,
 ENTITY_ID	string	(40) NOT NULL, 
 ENTITY_NAME	string	(255),
 NETWORK_ID	string	(40), 
 NETWORK_NAME	string	(100),
 NETWORK_EQUIP_ID	string	(40),
 NETWORK_EQUIP_NAME	string	(100),
 NETWORK_VERSION	integer,
 NW_EFFECTIVE_DATE timestamp,
 NW_EXPIRY_DATE timestamp,
 SOURCE_NAME	string	(100),
  LATITUDE bigdecimal	(15,4),
 LONGITUDE bigdecimal	(15,4),
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string	(100),
 TANK_BAT_SUM_ID string	(40)	NOT NULL,
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
CONSTRAINT PK_TANK_BAT_SUM PRIMARY KEY (TANK_BAT_SUM_ID))
OPTIONS (UPDATABLE 'FALSE', TANK_BATTERY_SUMMARY.IMPLEMENTED 'TRUE')
AS
 (
 SELECT CAST(DD.FORMATTEDDATE AS TIMESTAMP) AS PROD_DATE,
 PP.PRODUCT_NAME AS PR_PROD_NAME,
 PRIMARY_PRODUCT_VOLUME,
 SP.PRODUCT_NAME AS SEC_PROD_VOLUME,
 SECONDARY_PRODUCT_VOLUME, 
 PU.UOM_NAME AS PR_PROD_UOM,
 SU.UOM_NAME AS SEC_PROD_UOM,
 FT.CAPACITY,
 FT.SPARE_CAPACITY,
 DE.EQUIPMENT_ID AS TANK_ID,
 DE.EQUIPMENT_NAME AS TANK_NAME,
 DF.FACILITY_ID AS ENTITY_ID, 
 DF.FACILITY_NAME AS ENTITY_NAME,
 DN.NETWORK_ID, 
 DN.NETWORK_NAME,
 DEN.NETWORK_ID AS NETWORK_EQUIP_ID,
 DEN.NETWORK_NAME AS NETWORK_EQUIP_NAME,
 cast(NW_VERSION_NUMBER as INTEGER),
 CAST(EFD.FORMATTEDDATE AS TIMESTAMP) AS NW_EFFECTIVE_DATE,
 CAST(EXD.FORMATTEDDATE AS TIMESTAMP) AS NW_EXPIRY_DATE,
 FT.SOURCE,
  DF.LATITUDE ,
 DF.LONGITUDE ,
 FT.ROW_CHANGED_BY,
 CAST(RCHD.FORMATTEDDATE AS TIMESTAMP) AS ROW_CHANGED_DATE,
 CAST(RD.FORMATTEDDATE AS TIMESTAMP) AS ROW_CREATED_DATE,
 FT.ROW_CREATED_BY,
 CAST(FACT_TANKBATTERY_KEY AS string) AS TANK_BAT_SUM_ID,
 LEVEL1_ID,
 LEVEL1_NAME,
 LEVEL1_TYPE,
 LEVEL2_ID,
 LEVEL2_NAME,
 LEVEL2_TYPE,
 LEVEL3_ID,
 LEVEL3_NAME,
 LEVEL3_TYPE,
 LEVEL4_ID,
 LEVEL4_NAME,
 LEVEL4_TYPE,
 LEVEL5_ID,
 LEVEL5_NAME,
 LEVEL5_TYPE,
 LEVEL6_ID,
 LEVEL6_NAME,
 LEVEL6_TYPE 
 FROM PDMDimSrc.FACT_TANKBATTERY FT
 INNER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON FT.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
 INNER JOIN PDMDimSrc.DIMEQUIPMENT DE ON FT.DIM_EQUIPMENT_KEY = DE.DIM_EQUIPMENT_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMNETWORK DN ON FT.DIM_NETWORK_KEY = DN.DIM_NETWORK_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMNETWORK DEN ON FT.DIM_NETWORK_EQUIP_KEY = DEN.DIM_NETWORK_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMFACILITY DF ON FT.DIM_FACILITY_KEY = DF.DIM_FACILITY_KEY
 INNER JOIN PDMDimSrc.DIMDATE DD ON FT.MEASUREMENT_DATE_KEY = DD.DATE_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMPRODUCT PP ON FT.PRIMARY_PRODUCT_KEY = PP.DIM_PRODUCT_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMPRODUCT SP ON FT.SECONDARY_PRODUCT_KEY = SP.DIM_PRODUCT_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMDATE EFD ON FT.NW_EFFECTIVE_DATE_KEY = EFD.DATE_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMDATE EXD ON FT.NW_EXPIRY_DATE_KEY = EXD.DATE_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE PU ON FT.PR_PROD_UOM_KEY = PU.DIM_UOM_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE SU ON FT.SEC_PROD_UOM_KEY = SU.DIM_UOM_KEY
  LEFT OUTER JOIN PDMDimSrc.DIMDATE RD ON FT.ROW_CREATED_DATE_ID = RD.DATE_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMDATE RCHD ON FT.ROW_CHANGED_DATE_ID = RCHD.DATE_KEY
 );
 
  CREATE VIEW REVENUE_SALES
(
EVENT_DATE	timestamp,
EVENT_EFF_DATE timestamp,
EVENT_EXP_DATE timestamp,
 NET_OIL_VOLUME	bigdecimal	(15,4),
NET_GAS_VOLUME	bigdecimal	(15,4),
 OIL_UOM	string	(20),
 GAS_UOM	string	(20),
NET_GASBOE_VOLUME	bigdecimal	(15,4),
NET_BOE_VOLUME	bigdecimal	(15,4),
 ENTITY_ID	string	(40) NOT NULL, 
 ENTITY_NAME	string	(255),
 ENTITY_SUB_TYPE string(100),
 ENTITY_TYPE string(20),
 OIL_PRICE bigdecimal	(15,4),
 GAS_PRICE bigdecimal	(15,4),
REV_SALES_ID string	(40)	NOT NULL,
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
 REVENUE_OIL bigdecimal(15,4),
 REVENUE_GAS bigdecimal(15,4),
 REVENUE bigdecimal(18,4),
 REVENUE_BOE bigdecimal(18,4),
 OPEX bigdecimal(15,4),
 OPEX_BOE bigdecimal(18,4),
 OPEX_POT bigdecimal(18,4),
 REVENUE_POT bigdecimal(18,4),
CONSTRAINT PK_REV_SALES PRIMARY KEY (REV_SALES_ID))
OPTIONS (UPDATABLE 'FALSE', REVENUE_SALES.IMPLEMENTED 'TRUE')
AS
 (
 SELECT CAST(EVENT_DATE AS TIMESTAMP)
      ,CAST(EFF_EDATE AS TIMESTAMP)
      ,CAST(EXP_EDATE AS TIMESTAMP)
      ,NET_OIL_VOLUME
      ,NET_GAS_VOLUME
      ,OIL_UOM
      ,GAS_UOM
      ,NET_GBOE_VOLUME	  
      ,NET_BOE_VOLUME
	  ,ENTITY_ID
	  ,ENTITY_NAME
	  ,ENTITY_SUB_TYPE
	  ,ENTITY_TYPE
      ,OIL_PRICE
      ,GAS_PRICE
	  ,UUID()
      ,LEVEL1_ID
      ,LEVEL1_NAME
      ,LEVEL1_TYPE
      ,LEVEL2_ID
      ,LEVEL2_NAME
      ,LEVEL2_TYPE
      ,LEVEL3_ID
      ,LEVEL3_NAME
      ,LEVEL3_TYPE
      ,LEVEL4_ID
      ,LEVEL4_NAME
      ,LEVEL4_TYPE
      ,LEVEL5_ID
      ,LEVEL5_NAME
      ,LEVEL5_TYPE
      ,LEVEL6_ID
      ,LEVEL6_NAME
      ,LEVEL6_TYPE
	        ,NET_OIL_REVENUE
      ,NET_GAS_REVENUE
      ,NET_REVENUE
      ,NET_REVENUE_BOE
	  ,OPEX
	  ,OPEX_BOE
	  ,OPEX_POT
	  ,REVENUE_POT
	  FROM PDMDimSrc.VW_SALES_REVENUE
 );

  CREATE VIEW INVENTORY_SALES
(
EVENT_DATE	timestamp,
EVENT_EFF_DATE timestamp,
EVENT_EXP_DATE timestamp,
PRODUCT_ID	string	(40),
 PRODUCT_NAME	string	(100),
 BEGINNING_VOLUME	bigdecimal	(15,4),
 ENDING_VOLUME	bigdecimal	(15,4),
 VOLUME_UOM	string	(20),
 BEGINNING_MEASURE	bigdecimal	(15,4),
 ENDING_MEASURE bigdecimal	(15,4),
MEASURE_UOM	string	(20),
 BEGINNING_TEMP	bigdecimal	(15,4),
 ENDING_TEMP bigdecimal	(15,4),
OBSERVED_TEMP bigdecimal	(15,4),
 TEMP_UOM	string	(20),
GRAVITY bigdecimal	(15,4),
CORRECTED_GRAVITY bigdecimal	(15,4),
CORRECTED_VOLUME bigdecimal	(15,4),
ADJ_GROSS_VOLUME bigdecimal	(15,4),
GROSS_STD_VOLUME bigdecimal	(15,4),
SHRINK_FACTOR bigdecimal	(15,4),
VOLUME_QUALITY bigdecimal	(15,4),
CORRECTED_VOL_QUALITY bigdecimal	(15,4),
BSW bigdecimal	(15,4),
FW bigdecimal	(15,4),
EW bigdecimal	(15,4),
 NET_VOLUME_METHOD string(100),
 GRAVITY_INPUT string(100),
 TICKET_NUMBER string(100),
 SEAL_ON string(100),
 SEAL_OFF string(100),
 BARCODE string(100),
 PURCHASED_BY string(100),
 HAUL_TYPE string(100),
 RECV_ENTITY_ID	string	(40) , 
 RECV_ENTITY_NAME	string	(255),
 ENTITY_ID	string	(40) NOT NULL, 
 ENTITY_NAME	string	(255),
 EQUIPMENT_ID	string	(40) NOT NULL,
 EQUIPMENT_NAME	string	(100),
 DISPOSITION_ID	string	(40),
 DISPOSITION	string	(100),
 MEASUREMENT_SYSTEM	string	(100),
 PERIOD_ID	string	(10),
 PRESSURE bigdecimal	(15,4),
 LMF bigdecimal	(15,4),
 CPL bigdecimal	(15,4),
 CTL bigdecimal	(15,4),
 BEGINNING_VCF bigdecimal	(15,4),
 ENDING_VCF bigdecimal	(15,4),
 PURCHASER_VOLUME bigdecimal	(15,4),
 PURCHASER_NET_VOLUME bigdecimal	(15,4),
 PRICE bigdecimal	(15,4),
 NET_VOLUME bigdecimal	(15,4),
 GROSS_BARRELS_HAULED bigdecimal	(15,4),
 RUN_VOLUME bigdecimal	(15,4),
 OIL_PRICE_PER_UNIT bigdecimal	(15,4),
 HEAT_CONTENT bigdecimal	(15,4),
 CORRECTED_HEAT_CONTENT bigdecimal	(15,4),
 PRESSURE_UOM	string	(20),
 TRANSPORTED_BY	string	(100),
 DOWNSTREAM_IND	string	(10),
 HEAT_CONT_UOM	string	(10),
 SOURCE_NAME	string	(100),
 REMARK string(2000),
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string	(100),
 PURCHASE_STATEMENT_TYPE string (200),
 INV_SALES_ID string	(40)	NOT NULL,
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
 REVENUE bigdecimal(15,4),
CONSTRAINT PK_INV_SALES PRIMARY KEY (INV_SALES_ID))
OPTIONS (UPDATABLE 'FALSE', INVENTORY_SALES.IMPLEMENTED 'TRUE')
AS
 (
SELECT  CAST(EV.FORMATTEDDATE AS TIMESTAMP) EVENT_DATE, 
CAST(EF.FORMATTEDDATE AS TIMESTAMP) EVENT_EFF_DATE, 
CAST(EX.FORMATTEDDATE AS TIMESTAMP) EVENT_EXP_DATE,
CAST(PR.PRODUCT_ID AS string),  PR.PRODUCT_NAME,
 BEGINNING_VOLUME,  ENDING_VOLUME,  V.UOM_NAME AS VOLUME_UOM,
 BEGINNING_MEASURE,  ENDING_MEASURE, M.UOM_NAME AS MEASURE_UOM,
 BEGINNING_TEMP,  ENDING_TEMP, OBSERVED_TEMP,  T.UOM_NAME AS TEMP_UOM,
GRAVITY, CORRECTED_GRAVITY,
CORRECTED_VOLUME, ADJ_GROSS_VOLUME, GROSS_STD_VOLUME,
SHRINK_FACTOR,  VOLUME_QUALITY, CORRECTED_VOL_QUALITY,
BSW, FW, EW, NET_VOLUME_METHOD,  GRAVITY_INPUT,
 TICKET_NUMBER,  SEAL_ON, SEAL_OFF, BARCODE, PURCHASED_BY, FIS.HAUL_TYPE,
 RDWC.FACILITY_ID AS RECV_ENTITY_ID ,   RDWC.FACILITY_NAME AS RECV_ENTITY_NAME,
 DWC.FACILITY_ID AS ENTITY_ID,   DWC.FACILITY_NAME AS ENTITY_NAME,
 E.EQUIPMENT_ID, E.EQUIPMENT_NAME,
 CAST(D.DISPOSITION_ID AS string), D.DISPOSITION_NAME,  MEASUREMENT_SYSTEM,
 PERIOD_ID,
 PRESSURE,  LMF,  CPL,  CTL,
 BEGINNING_VCF,  ENDING_VCF,  PURCHASER_VOLUME,  PURCHASER_NET_VOLUME,
 PRICE,  NET_VOLUME,  GROSS_BARRELS_HAULED,  RUN_VOLUME,
 OIL_PRICE_PER_UNIT,  HEAT_CONTENT,  CORRECTED_HEAT_CONTENT,
 P.UOM_NAME AS PRESSURE_UOM,
 TRANSPORTED_BY,  DOWNSTREAM_IND, H.UOM_NAME AS  HEAT_CONT_UOM,
 FIS.SOURCE,FIS.REMARK, FIS.ROW_CHANGED_BY, 
 CAST(RCHD.FORMATTEDDATE AS TIMESTAMP)  ROW_CHANGED_DATE,
 CAST(RC.FORMATTEDDATE AS TIMESTAMP)  ROW_CREATED_DATE, 
 FIS.ROW_CREATED_BY,PURCHASE_STAT_TYPE, CAST(FACT_INV_SALES_KEY AS STRING) AS INV_SALES_ID ,
 LEVEL1_ID,  LEVEL1_NAME,  LEVEL1_TYPE,  LEVEL2_ID,  LEVEL2_NAME,
 LEVEL2_TYPE,  LEVEL3_ID,  LEVEL3_NAME,  LEVEL3_TYPE,  LEVEL4_ID,
 LEVEL4_NAME, LEVEL4_TYPE,  LEVEL5_ID,  LEVEL5_NAME,  LEVEL5_TYPE,
 LEVEL6_ID,  LEVEL6_NAME,  LEVEL6_TYPE , (PURCHASER_VOLUME * PRICE) AS REVENUE
 FROM  PDMDimSrc.FACT_INVENTORY_SALES FIS
 LEFT OUTER JOIN PDMDimSrc.DIMDATE EV ON FIS.EDATE_KEY = EV.DATE_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMDATE EF ON FIS.EFF_EDATE_KEY = EF.DATE_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMDATE EX ON FIS.EXP_EDATE_KEY = EX.DATE_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMPRODUCT PR ON FIS.DIM_PRODUCT_KEY = PR.DIM_PRODUCT_KEY
 INNER JOIN PDMDimSrc.DIMFACILITY DWC ON FIS.W_WC_FAC_KEY = DWC.DIM_FACILITY_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMFACILITY RDWC ON FIS.W_WC_FAC_KEY = RDWC.DIM_FACILITY_KEY
 INNER JOIN PDMDimSrc.DIMEQUIPMENT E ON FIS.DIM_EQUIPMENT_KEY = E.DIM_EQUIPMENT_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE V ON FIS.VOLUME_UOM_KEY = V.DIM_UOM_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE M ON FIS.MEASURE_UOM_KEY = M.DIM_UOM_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE T ON FIS.TEMP_UOM_KEY = T.DIM_UOM_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE H ON FIS.HEAT_CONT_UOM_KEY = H.DIM_UOM_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMUNITOFMEASURE P ON FIS.PRESSURE_UOM_KEY = P.DIM_UOM_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMDISPOSITION D ON FIS.DIM_DISPOSITION_KEY = D.DIM_DISPOSITION_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMMEASUREDFOR MP ON FIS.DIM_MEASURED_FOR_KEY = MP.DIM_MEASURED_FOR_KEY
  LEFT OUTER JOIN PDMDimSrc.DIMDATE RC ON FIS.ROW_CREATED_DATE_ID = RC.DATE_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMDATE RCHD ON FIS.ROW_CHANGED_DATE_ID = RCHD.DATE_KEY
 LEFT OUTER JOIN PDMDimSrc.DIMASSETHIERARCHY DAH ON FIS.DIM_ASSETHIERARCHY_KEY = DAH.DIM_ASSETHIERARCHY_KEY
 );
 
CREATE PROCEDURE ds_GET_MULTI_WELL(xml_sp_params string(999999)) 
RETURNS TABLE (VOLUME_DATE timestamp, 
				PROD_DAYS integer,
				OIL bigdecimal	(15,4), 
				GAS bigdecimal	(15,4), 
				WATER bigdecimal	(15,4), 
				CUM_OIL bigdecimal	(15,4),  
				CUM_GAS bigdecimal	(15,4), 
				CUM_WATER bigdecimal	(15,4),
				OIL_UOM	string	(20),
				GAS_UOM	string	(20),
				WATER_UOM	string	(20)) AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMDim.ds_GET_MULTI_WELL.xml_sp_params;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.TYPE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'TYPE');
	DECLARE string VARIABLES.AVERAGE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'AVERAGE');
	DECLARE string VARIABLES.NORMALIZE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'NORMALIZE');
	DECLARE string VARIABLES.PERIOD_TYPE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PERIOD_TYPE');
	DECLARE timestamp VARIABLES.VOLUME_DATE_GE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN CAST(#tempXML.ValueRes as timestamp) ELSE null END FROM #tempXML WHERE #tempXML.Name = 'VOLUME_DATE_GE');
	DECLARE timestamp VARIABLES.VOLUME_DATE_LT = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN CAST(#tempXML.ValueRes as timestamp) ELSE null END FROM #tempXML WHERE #tempXML.Name = 'VOLUME_DATE_LT');
	DECLARE bigdecimal VARIABLES.CUM_GE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN CAST(#tempXML.ValueRes as bigdecimal) ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CUM_GE');
	DECLARE bigdecimal VARIABLES.CUM_LT = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN CAST(#tempXML.ValueRes as bigdecimal) ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CUM_LT');
	
	IF((VARIABLES.NORMALIZE IS NOT NULL) AND (VARIABLES.NORMALIZE = 'Y'))
	BEGIN
		IF((VARIABLES.TYPE IS NOT NULL) AND (VARIABLES.TYPE = 'OIL'))
		BEGIN
			IF((VARIABLES.AVERAGE IS NOT NULL) AND (VARIABLES.AVERAGE = 'Y'))
			BEGIN
				SELECT MIN(VOLUME_DATE), PROD_DAYS, AVG(OIL) as OIL, 0.0, 0.0, AVG(CUM_OIL) as CUM_OIL, 0.0, 0.0, OIL_UOM, '', ''
				FROM PDMDim.PRODUCTION_VOLUME
				WHERE ENTITY_ID IN (SELECT #tempXML.Name from #tempXML WHERE #tempXML.ValueRes = 'WELL') AND PERIOD_TYPE = VARIABLES.PERIOD_TYPE
				AND ((VARIABLES.VOLUME_DATE_GE IS NOT NULL AND VOLUME_DATE >= VARIABLES.VOLUME_DATE_GE) OR VARIABLES.VOLUME_DATE_GE IS NULL)
				AND ((VARIABLES.VOLUME_DATE_LT IS NOT NULL AND VOLUME_DATE < VARIABLES.VOLUME_DATE_LT) OR VARIABLES.VOLUME_DATE_LT IS NULL)
				AND ((VARIABLES.CUM_GE IS NOT NULL AND CUM_OIL >= VARIABLES.CUM_GE) OR VARIABLES.CUM_GE IS NULL)
				AND ((VARIABLES.CUM_LT IS NOT NULL AND CUM_OIL < VARIABLES.CUM_LT) OR VARIABLES.CUM_LT IS NULL)
				GROUP BY PROD_DAYS, OIL_UOM ORDER BY 1;
			END
			ELSE		
			BEGIN
				SELECT MIN(VOLUME_DATE), PROD_DAYS, SUM(OIL) as OIL, 0.0, 0.0, SUM(CUM_OIL) as CUM_OIL, 0.0, 0.0, OIL_UOM, '', ''
				FROM  PDMDim.PRODUCTION_VOLUME
				WHERE ENTITY_ID IN (SELECT #tempXML.Name from #tempXML WHERE #tempXML.ValueRes = 'WELL') AND PERIOD_TYPE = VARIABLES.PERIOD_TYPE
				AND ((VARIABLES.VOLUME_DATE_GE IS NOT NULL AND VOLUME_DATE >= VARIABLES.VOLUME_DATE_GE) OR VARIABLES.VOLUME_DATE_GE IS NULL)
				AND ((VARIABLES.VOLUME_DATE_LT IS NOT NULL AND VOLUME_DATE < VARIABLES.VOLUME_DATE_LT) OR VARIABLES.VOLUME_DATE_LT IS NULL)
				AND ((VARIABLES.CUM_GE IS NOT NULL AND CUM_OIL >= VARIABLES.CUM_GE) OR VARIABLES.CUM_GE IS NULL)
				AND ((VARIABLES.CUM_LT IS NOT NULL AND CUM_OIL < VARIABLES.CUM_LT) OR VARIABLES.CUM_LT IS NULL)
				GROUP BY PROD_DAYS, OIL_UOM ORDER BY 1;		
			END
		END

		IF((VARIABLES.TYPE IS NOT NULL) AND (VARIABLES.TYPE = 'GAS'))
		BEGIN
			IF((VARIABLES.AVERAGE IS NOT NULL) AND (VARIABLES.AVERAGE = 'Y'))
			BEGIN
				SELECT MIN(VOLUME_DATE), PROD_DAYS, 0.0, AVG(GAS) as GAS, 0.0, 0.0, AVG(CUM_GAS) as CUM_GAS, 0.0, '', GAS_UOM, ''
				FROM  PDMDim.PRODUCTION_VOLUME
				WHERE ENTITY_ID IN (SELECT #tempXML.Name from #tempXML WHERE #tempXML.ValueRes = 'WELL') AND PERIOD_TYPE = VARIABLES.PERIOD_TYPE
				AND ((VARIABLES.VOLUME_DATE_GE IS NOT NULL AND VOLUME_DATE >= VARIABLES.VOLUME_DATE_GE) OR VARIABLES.VOLUME_DATE_GE IS NULL)
				AND ((VARIABLES.VOLUME_DATE_LT IS NOT NULL AND VOLUME_DATE < VARIABLES.VOLUME_DATE_LT) OR VARIABLES.VOLUME_DATE_LT IS NULL)
				AND ((VARIABLES.CUM_GE IS NOT NULL AND CUM_GAS >= VARIABLES.CUM_GE) OR VARIABLES.CUM_GE IS NULL)
				AND ((VARIABLES.CUM_LT IS NOT NULL AND CUM_GAS < VARIABLES.CUM_LT) OR VARIABLES.CUM_LT IS NULL)
				GROUP BY PROD_DAYS, GAS_UOM ORDER BY 1;
			END
			ELSE				
			BEGIN
				SELECT MIN(VOLUME_DATE), PROD_DAYS, 0.0, SUM(GAS) as GAS, 0.0, 0.0, SUM(CUM_GAS) as CUM_GAS, 0.0, '', GAS_UOM, ''
				FROM  PDMDim.PRODUCTION_VOLUME
				WHERE ENTITY_ID IN (SELECT #tempXML.Name from #tempXML WHERE #tempXML.ValueRes = 'WELL') AND PERIOD_TYPE = VARIABLES.PERIOD_TYPE
				AND ((VARIABLES.VOLUME_DATE_GE IS NOT NULL AND VOLUME_DATE >= VARIABLES.VOLUME_DATE_GE) OR VARIABLES.VOLUME_DATE_GE IS NULL)
				AND ((VARIABLES.VOLUME_DATE_LT IS NOT NULL AND VOLUME_DATE < VARIABLES.VOLUME_DATE_LT) OR VARIABLES.VOLUME_DATE_LT IS NULL)
				AND ((VARIABLES.CUM_GE IS NOT NULL AND CUM_GAS >= VARIABLES.CUM_GE) OR VARIABLES.CUM_GE IS NULL)
				AND ((VARIABLES.CUM_LT IS NOT NULL AND CUM_GAS < VARIABLES.CUM_LT) OR VARIABLES.CUM_LT IS NULL)
				GROUP BY PROD_DAYS, GAS_UOM ORDER BY 1;
			END
		END

		IF((VARIABLES.TYPE IS NOT NULL) AND (VARIABLES.TYPE = 'WATER'))
		BEGIN
			IF((VARIABLES.AVERAGE IS NOT NULL) AND (VARIABLES.AVERAGE = 'Y'))
			BEGIN
				SELECT MIN(VOLUME_DATE), PROD_DAYS, 0.0, 0.0, AVG(WATER) as WATER, 0.0, 0.0, AVG(CUM_WATER) as CUM_WATER, '', '', WATER_UOM
				FROM  PDMDim.PRODUCTION_VOLUME
				WHERE ENTITY_ID IN (SELECT #tempXML.Name from #tempXML WHERE #tempXML.ValueRes = 'WELL') AND PERIOD_TYPE = VARIABLES.PERIOD_TYPE
				AND ((VARIABLES.VOLUME_DATE_GE IS NOT NULL AND VOLUME_DATE >= VARIABLES.VOLUME_DATE_GE) OR VARIABLES.VOLUME_DATE_GE IS NULL)
				AND ((VARIABLES.VOLUME_DATE_LT IS NOT NULL AND VOLUME_DATE < VARIABLES.VOLUME_DATE_LT) OR VARIABLES.VOLUME_DATE_LT IS NULL)
				AND ((VARIABLES.CUM_GE IS NOT NULL AND CUM_WATER >= VARIABLES.CUM_GE) OR VARIABLES.CUM_GE IS NULL)
				AND ((VARIABLES.CUM_LT IS NOT NULL AND CUM_WATER < VARIABLES.CUM_LT) OR VARIABLES.CUM_LT IS NULL)
				GROUP BY PROD_DAYS, WATER_UOM ORDER BY 1;
			END
			ELSE		
			BEGIN
				SELECT MIN(VOLUME_DATE), PROD_DAYS, 0.0, 0.0, SUM(WATER) as WATER, 0.0, 0.0, SUM(CUM_WATER) as CUM_WATER, '', '', WATER_UOM
				FROM  PDMDim.PRODUCTION_VOLUME
				WHERE ENTITY_ID IN (SELECT #tempXML.Name from #tempXML WHERE #tempXML.ValueRes = 'WELL') AND PERIOD_TYPE = VARIABLES.PERIOD_TYPE
				AND ((VARIABLES.VOLUME_DATE_GE IS NOT NULL AND VOLUME_DATE >= VARIABLES.VOLUME_DATE_GE) OR VARIABLES.VOLUME_DATE_GE IS NULL)
				AND ((VARIABLES.VOLUME_DATE_LT IS NOT NULL AND VOLUME_DATE < VARIABLES.VOLUME_DATE_LT) OR VARIABLES.VOLUME_DATE_LT IS NULL)
				AND ((VARIABLES.CUM_GE IS NOT NULL AND CUM_WATER >= VARIABLES.CUM_GE) OR VARIABLES.CUM_GE IS NULL)
				AND ((VARIABLES.CUM_LT IS NOT NULL AND CUM_WATER < VARIABLES.CUM_LT) OR VARIABLES.CUM_LT IS NULL)
				GROUP BY PROD_DAYS, WATER_UOM ORDER BY 1;	
			END
		END
	END
	ELSE
	BEGIN
		IF((VARIABLES.TYPE IS NOT NULL) AND (VARIABLES.TYPE = 'OIL'))
		BEGIN
			IF((VARIABLES.AVERAGE IS NOT NULL) AND (VARIABLES.AVERAGE = 'Y'))
			BEGIN
				SELECT VOLUME_DATE, 0, AVG(OIL) as OIL, 0.0, 0.0, AVG(CUM_OIL) as CUM_OIL, 0.0, 0.0, OIL_UOM, '', ''
				FROM  PDMDim.PRODUCTION_VOLUME
				WHERE ENTITY_ID IN (SELECT #tempXML.Name from #tempXML WHERE #tempXML.ValueRes = 'WELL') AND PERIOD_TYPE = VARIABLES.PERIOD_TYPE
				AND ((VARIABLES.VOLUME_DATE_GE IS NOT NULL AND VOLUME_DATE >= VARIABLES.VOLUME_DATE_GE) OR VARIABLES.VOLUME_DATE_GE IS NULL)
				AND ((VARIABLES.VOLUME_DATE_LT IS NOT NULL AND VOLUME_DATE < VARIABLES.VOLUME_DATE_LT) OR VARIABLES.VOLUME_DATE_LT IS NULL)
				AND ((VARIABLES.CUM_GE IS NOT NULL AND CUM_OIL >= VARIABLES.CUM_GE) OR VARIABLES.CUM_GE IS NULL)
				AND ((VARIABLES.CUM_LT IS NOT NULL AND CUM_OIL < VARIABLES.CUM_LT) OR VARIABLES.CUM_LT IS NULL)
				GROUP BY VOLUME_DATE, OIL_UOM ORDER BY 1;
			END
			ELSE				
			BEGIN
				SELECT VOLUME_DATE, 0, SUM(OIL) as OIL, 0.0, 0.0, SUM(CUM_OIL) as CUM_OIL, 0.0, 0.0, OIL_UOM, '', ''
				FROM  PDMDim.PRODUCTION_VOLUME
				WHERE ENTITY_ID IN (SELECT #tempXML.Name from #tempXML WHERE #tempXML.ValueRes = 'WELL') AND PERIOD_TYPE = VARIABLES.PERIOD_TYPE
				AND ((VARIABLES.VOLUME_DATE_GE IS NOT NULL AND VOLUME_DATE >= VARIABLES.VOLUME_DATE_GE) OR VARIABLES.VOLUME_DATE_GE IS NULL)
				AND ((VARIABLES.VOLUME_DATE_LT IS NOT NULL AND VOLUME_DATE < VARIABLES.VOLUME_DATE_LT) OR VARIABLES.VOLUME_DATE_LT IS NULL)
				AND ((VARIABLES.CUM_GE IS NOT NULL AND CUM_OIL >= VARIABLES.CUM_GE) OR VARIABLES.CUM_GE IS NULL)
				AND ((VARIABLES.CUM_LT IS NOT NULL AND CUM_OIL < VARIABLES.CUM_LT) OR VARIABLES.CUM_LT IS NULL)
				GROUP BY VOLUME_DATE, OIL_UOM ORDER BY 1;
			END
		END

		IF((VARIABLES.TYPE IS NOT NULL) AND (VARIABLES.TYPE = 'GAS'))
		BEGIN
			IF((VARIABLES.AVERAGE IS NOT NULL) AND (VARIABLES.AVERAGE = 'Y'))
			BEGIN
				SELECT VOLUME_DATE, 0, 0.0, AVG(GAS) as GAS, 0.0, 0.0, AVG(CUM_GAS) as CUM_GAS, 0.0, '', GAS_UOM, ''
				FROM  PDMDim.PRODUCTION_VOLUME
				WHERE ENTITY_ID IN (SELECT #tempXML.Name from #tempXML WHERE #tempXML.ValueRes = 'WELL') AND PERIOD_TYPE = VARIABLES.PERIOD_TYPE
				AND ((VARIABLES.VOLUME_DATE_GE IS NOT NULL AND VOLUME_DATE >= VARIABLES.VOLUME_DATE_GE) OR VARIABLES.VOLUME_DATE_GE IS NULL)
				AND ((VARIABLES.VOLUME_DATE_LT IS NOT NULL AND VOLUME_DATE < VARIABLES.VOLUME_DATE_LT) OR VARIABLES.VOLUME_DATE_LT IS NULL)
				AND ((VARIABLES.CUM_GE IS NOT NULL AND CUM_GAS >= VARIABLES.CUM_GE) OR VARIABLES.CUM_GE IS NULL)
				AND ((VARIABLES.CUM_LT IS NOT NULL AND CUM_GAS < VARIABLES.CUM_LT) OR VARIABLES.CUM_LT IS NULL)
				GROUP BY VOLUME_DATE, GAS_UOM ORDER BY 1;
			END
			ELSE			
			BEGIN
				SELECT VOLUME_DATE, 0, 0.0, SUM(GAS) as GAS, 0.0, 0.0, SUM(CUM_GAS) as CUM_GAS, 0.0, '', GAS_UOM, ''
				FROM  PDMDim.PRODUCTION_VOLUME
				WHERE ENTITY_ID IN (SELECT #tempXML.Name from #tempXML WHERE #tempXML.ValueRes = 'WELL') AND PERIOD_TYPE = VARIABLES.PERIOD_TYPE
				AND ((VARIABLES.VOLUME_DATE_GE IS NOT NULL AND VOLUME_DATE >= VARIABLES.VOLUME_DATE_GE) OR VARIABLES.VOLUME_DATE_GE IS NULL)
				AND ((VARIABLES.VOLUME_DATE_LT IS NOT NULL AND VOLUME_DATE < VARIABLES.VOLUME_DATE_LT) OR VARIABLES.VOLUME_DATE_LT IS NULL)
				AND ((VARIABLES.CUM_GE IS NOT NULL AND CUM_GAS >= VARIABLES.CUM_GE) OR VARIABLES.CUM_GE IS NULL)
				AND ((VARIABLES.CUM_LT IS NOT NULL AND CUM_GAS < VARIABLES.CUM_LT) OR VARIABLES.CUM_LT IS NULL)
				GROUP BY VOLUME_DATE, GAS_UOM ORDER BY 1;
			END
		END

		IF((VARIABLES.TYPE IS NOT NULL) AND (VARIABLES.TYPE = 'WATER'))
		BEGIN
			IF((VARIABLES.AVERAGE IS NOT NULL) AND (VARIABLES.AVERAGE = 'Y'))
			BEGIN
				SELECT VOLUME_DATE, 0, 0.0, 0.0, AVG(WATER) as WATER, 0.0, 0.0, AVG(CUM_WATER) as CUM_WATER, '', '', WATER_UOM
				FROM  PDMDim.PRODUCTION_VOLUME
				WHERE ENTITY_ID IN (SELECT #tempXML.Name from #tempXML WHERE #tempXML.ValueRes = 'WELL') AND PERIOD_TYPE = VARIABLES.PERIOD_TYPE
				AND ((VARIABLES.VOLUME_DATE_GE IS NOT NULL AND VOLUME_DATE >= VARIABLES.VOLUME_DATE_GE) OR VARIABLES.VOLUME_DATE_GE IS NULL)
				AND ((VARIABLES.VOLUME_DATE_LT IS NOT NULL AND VOLUME_DATE < VARIABLES.VOLUME_DATE_LT) OR VARIABLES.VOLUME_DATE_LT IS NULL)
				AND ((VARIABLES.CUM_GE IS NOT NULL AND CUM_WATER >= VARIABLES.CUM_GE) OR VARIABLES.CUM_GE IS NULL)
				AND ((VARIABLES.CUM_LT IS NOT NULL AND CUM_WATER < VARIABLES.CUM_LT) OR VARIABLES.CUM_LT IS NULL)
				GROUP BY VOLUME_DATE, WATER_UOM ORDER BY 1;
			END
			ELSE	
			BEGIN
				SELECT VOLUME_DATE, 0, 0.0, 0.0, SUM(WATER) as WATER, 0.0, 0.0, SUM(CUM_WATER) as CUM_WATER, '', '', WATER_UOM
				FROM  PDMDim.PRODUCTION_VOLUME
				WHERE ENTITY_ID IN (SELECT #tempXML.Name from #tempXML WHERE #tempXML.ValueRes = 'WELL') AND PERIOD_TYPE = VARIABLES.PERIOD_TYPE
				AND ((VARIABLES.VOLUME_DATE_GE IS NOT NULL AND VOLUME_DATE >= VARIABLES.VOLUME_DATE_GE) OR VARIABLES.VOLUME_DATE_GE IS NULL)
				AND ((VARIABLES.VOLUME_DATE_LT IS NOT NULL AND VOLUME_DATE < VARIABLES.VOLUME_DATE_LT) OR VARIABLES.VOLUME_DATE_LT IS NULL)
				AND ((VARIABLES.CUM_GE IS NOT NULL AND CUM_WATER >= VARIABLES.CUM_GE) OR VARIABLES.CUM_GE IS NULL)
				AND ((VARIABLES.CUM_LT IS NOT NULL AND CUM_WATER < VARIABLES.CUM_LT) OR VARIABLES.CUM_LT IS NULL)
				GROUP BY VOLUME_DATE, WATER_UOM ORDER BY 1;		
			END
		END
	END
END;

CREATE PROCEDURE ds_SAVE_ALARM_REMARK(sp_custom_error_message string(4000), xml_sp_params string(999999)) RETURNS (OP string(4000)) AS
BEGIN
	EXEC PDMTx.ds_SAVE_ALARM_REMARK(sp_custom_error_message, xml_sp_params);
END;
CREATE VIEW DSRTA_DATA
(
	 ID STRING(50)
  ,BARRIER_EQUIP_TEST_ID STRING(50)
  ,BARRIER_EQUIP_TEST_MEAS_ID STRING(50)
, UWI STRING(50)
,  WELL_NAME STRING(50)
,    WELL_ID  STRING(50)
,   EQUIPMENT_ID   STRING(50)
,  EQUIPMENT_NAME  STRING(50)
,  CAT_EQUIP_TYPE_ID  STRING(50)
,  CAT_EQUIP_TYPE  STRING(50)
,  CAT_EQUIP_SUB_TYPE_ID  STRING(50)
,  CAT_EQUIP_SUB_TYPE  STRING(50)
,   TEST_GROUP  STRING(50)
,   TEST_DATE  timestamp
,   SEVERITY_ID   STRING(50)
,  SEVERITY  STRING(50)
,  TEST_RESULT  STRING(50)
,  ABBREVIATION  STRING(50)
,   BARRIER_EQUIP_TEST_TYPE_ID   STRING(50)
,   BARRIER_EQUIP_TEST_TYPE   STRING(50)
, g2SORT_ORDER  integer
,   R_MEASUREMENT_POINT_ID   STRING(50)
,   R_MEASUREMENT_POINT   STRING(50)
, G3SORT_ORDER  integer
,  "VALUE"  STRING(50)
,  UOM  STRING(50)
,  SOURCE_NAME  STRING(50)
,  ROW_QUALITY_NAME  STRING(50)
,   ROW_CHANGED_BY   STRING(50)
,   ROW_CHANGED_DATE  timestamp
,   ROW_CREATED_BY   STRING(50)
,   ROW_CREATED_DATE  timestamp
, v_0c_2  string(50)
, v_1c_2  bigdecimal
, v_1c_3  string(50)
, v_2c_2  bigdecimal
, v_2c_3   string(50)
,CONSTRAINT PK_DSRTA_DATA PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',DSRTA_DATA.IMPLEMENTED 'TRUE')
 as
 SELECT 
 ID  
  ,BARRIER_EQUIP_TEST_ID  
  ,BARRIER_EQUIP_TEST_MEAS_ID  
, UWI  
,  WELL_NAME 
,    WELL_ID  
,   EQUIPMENT_ID    
,  EQUIPMENT_NAME   
,  CAT_EQUIP_TYPE_ID   
,  CAT_EQUIP_TYPE   
,  CAT_EQUIP_SUB_TYPE_ID  
,  CAT_EQUIP_SUB_TYPE   
,   TEST_GROUP   
,   TEST_DATE   
,   SEVERITY_ID    
,  SEVERITY  
,  TEST_RESULT  
,  ABBREVIATION   
,   BARRIER_EQUIP_TEST_TYPE_ID   
,   BARRIER_EQUIP_TEST_TYPE    
, g2SORT_ORDER  r
,   R_MEASUREMENT_POINT_ID   
,   R_MEASUREMENT_POINT   
, G3SORT_ORDER   
,  "VALUE"  
,  UOM  
,  SOURCE_NAME   
,  ROW_QUALITY_NAME   
,   ROW_CHANGED_BY    
,   ROW_CHANGED_DATE   
,   ROW_CREATED_BY    
,   ROW_CREATED_DATE   
, v_0c_2  
, v_1c_2   
, v_1c_3   
, v_2c_2   
, v_2c_3    
  FROM PDMTx.DSRTA_DATA
