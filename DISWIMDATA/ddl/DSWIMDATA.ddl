CREATE VIEW BARRIER_ENV_TEST_HISTORY
(
	BE_TEST_DATE	timestamp,
	BE_TEST_TYPE	string(100),
	BE_TEST_TYPE_ID	string(40),
	BE_TEST_RESULT	string(100),
	BE_TEST_RESULT_ID	string(40),
	BE_PRESSURE	bigdecimal(15,4),
	PRESSURE_UOM	string(20)	,
	BE_RESET_FREQ_STATUS	string(100)	,
	BE_RESET_FREQ_STATUS_ID	string(40)	,
	BE_REMARK	string(2000),
	BE_TEST_FREQ	integer	,
	BE_TEST_HOURS	bigdecimal(15,4)	,
	FREQUENCY_UOM	string(20)	,
	BE_NEXT_TEST_DATE	timestamp		,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	BE_TEST_FREQ_ID string(40),
	BE_TEST_ID	string(40)	NOT NULL,
	LEVEL1_ID	string(40)	,
	LEVEL1_NAME	string(255)	,
	LEVEL1_TYPE	string(100)	,
	LEVEL2_ID	string(40)	,
	LEVEL2_NAME	string(255)	,
	LEVEL2_TYPE	string(100)	,
	LEVEL3_ID	string(40)	,
	LEVEL3_NAME	string(255)	,
	LEVEL3_TYPE	string(100)	,
	LEVEL4_ID	string(40)	,
	LEVEL4_NAME	string(255)	,
	LEVEL4_TYPE	string(100)	,
	LEVEL5_ID	string(40)	,
	LEVEL5_NAME	string(255)	,
	LEVEL5_TYPE	string(100)	,
	LEVEL6_ID	string(40)	NOT NULL,
	LEVEL6_NAME	string(255)	,
	LEVEL6_TYPE	string(100)	,
CONSTRAINT PK_BAR_ENV_TEST_HIS PRIMARY KEY (BE_TEST_ID))
OPTIONS (UPDATABLE 'FALSE', BARRIER_ENV_TEST_HISTORY.IMPLEMENTED 'TRUE')
AS
SELECT BT.TEST_DATE,RTT.R_TEST_TYPE,BTF.BE_TEST_TYPE_ID,RTR.TEST_RESULT,BT.TEST_RESULT_ID,BT.TEST_PRESSURE,BT.TEST_PRESS_UOM,BT.RESET_IND,NULL,
BT.REMARKS,cast(BTF.BE_TEST_FREQUENCY as integer),null,BTF.FREQUENCY_UOM,
CASE WHEN (BTF.BE_TEST_FREQUENCY IS NOT NULL AND BTF.BE_TEST_FREQUENCY <> '') THEN TIMESTAMPADD(SQL_TSI_MONTH, cast(BTF.BE_TEST_FREQUENCY as integer), BT.TEST_DATE) ELSE NULL END,
BT.ENTITY_ID,W.WELL_NAME AS ENTITY_NAME,BT.ROW_CREATED_DATE,BT.ROW_CREATED_BY,
BT.ROW_CHANGED_DATE,BT.ROW_CHANGED_BY,BT.ACTIVE_IND,BT.SOURCE_NAME,BT.REMARKS,BT.BE_TEST_FREQ_ID,BE_TEST_ID
 ,DAH.LEVEL1_ID
      ,DAH.LEVEL1_NAME
      ,DAH.LEVEL1_TYPE
      ,DAH.LEVEL2_ID
      ,DAH.LEVEL2_NAME
      ,DAH.LEVEL2_TYPE
      ,DAH.LEVEL3_ID
      ,DAH.LEVEL3_NAME
      ,DAH.LEVEL3_TYPE
      ,DAH.LEVEL4_ID
      ,DAH.LEVEL4_NAME
      ,DAH.LEVEL4_TYPE
      ,DAH.LEVEL5_ID
      ,DAH.LEVEL5_NAME
      ,DAH.LEVEL5_TYPE
      ,DAH.LEVEL6_ID
      ,DAH.LEVEL6_NAME
      ,DAH.LEVEL6_TYPE
FROM DSWIMDATASRC.BE_ENV_TEST BT
INNER JOIN DSWIMDATASRC.WELL W ON BT.ENTITY_ID = W.WELL_ID
INNER JOIN DSWIMDATASRC.WELL_AREA WA ON W.WELL_ID = WA.WELL_ID
INNER JOIN DSWIMDATASRC.R_TEST_TYPE RTT ON RTT.R_TEST_TYPE_ID = BT.TEST_TYPE_ID
 INNER JOIN DSWIMDATASRC.DIMASSETHIERARCHY DAH ON WA.AREA_ID = DAH.LEVEL6_ID
LEFT OUTER JOIN DSWIMDATASRC.BE_TEST_FREQUENCY BTF ON (BT.TEST_TYPE_ID = BTF.BE_TEST_TYPE_ID AND BTF.ENTITY_ID = W.WELL_ID)
LEFT OUTER JOIN DSWIMDATASRC.R_TEST_RESULT RTR ON RTR.R_TEST_RESULT_ID = BT.TEST_RESULT_ID
;

CREATE VIEW BARRIER_ENV_TEST_FREQUENCY
(
	BET_FREQ_INTERVAL	bigdecimal(15,4)	NOT NULL,
	FREQUENCY_UOM	string(20)	,
	BET_FREQ_REMARK	string(2000),
	BE_TEST_TYPE	string(100),
	BE_TEST_TYPE_ID	string(40)	NOT NULL,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255),
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	BET_FREQ_ID	string(40)	NOT NULL,
CONSTRAINT PK_BAR_ENV_TEST_FREQ PRIMARY KEY (BET_FREQ_ID))
OPTIONS (UPDATABLE 'FALSE', BARRIER_ENV_TEST_FREQUENCY.IMPLEMENTED 'TRUE')
AS
SELECT cast(BTF.BE_TEST_FREQUENCY as bigdecimal),BTF.FREQUENCY_UOM,BTF.REMARKS,RTT.R_TEST_TYPE,BTF.BE_TEST_TYPE_ID,BTF.ENTITY_ID,
W.WELL_NAME AS ENTITY_NAME,
cast(BTF.ROW_CREATED_DATE as timestamp),BTF.ROW_CREATED_BY,cast(BTF.ROW_CHANGED_DATE as timestamp),BTF.ROW_CHANGED_BY,BTF.ACTIVE_IND,BTF.SOURCE_NAME,BTF.REMARKS,
BE_TEST_FREQUENCY_ID AS BET_FREQ_ID
FROM DSWIMDATASRC.BE_TEST_FREQUENCY BTF
INNER JOIN DSWIMDATASRC.R_TEST_TYPE RTT ON RTT.R_TEST_TYPE_ID=BTF.BE_TEST_TYPE_ID
INNER JOIN DSWIMDATASRC.WELL W ON BTF.ENTITY_ID = W.WELL_ID
WHERE BTF.ACTIVE_IND='Y'
;

CREATE VIEW BARRIER_ENV_TEST_FREQ_AUDIT
(
	BET_FREQ_INTERVAL	integer,
	FREQUENCY_UOM	string(20)	,
	BET_FREQ_REMARK	string(2000),
	BE_TEST_TYPE	string(100),
	BE_TEST_TYPE_ID	string(40),
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255),
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	BET_FREQ_AUD_ID	string(40)	NOT NULL,
CONSTRAINT PK_BAR_EV_TST_FREQ_AUD PRIMARY KEY (BET_FREQ_AUD_ID))
OPTIONS (UPDATABLE 'FALSE', BARRIER_ENV_TEST_FREQ_AUDIT.IMPLEMENTED 'TRUE')
AS
SELECT cast(BTF.BE_TEST_FREQUENCY as integer),BTF.FREQUENCY_UOM,BTA.REMARKS,RTT.R_TEST_TYPE,BTF.BE_TEST_TYPE_ID,BTA.ENTITY_ID,W.WELL_NAME AS ENTITY_NAME,
BTA.ROW_CREATED_DATE,BTA.ROW_CREATED_BY,BTA.ROW_CHANGED_DATE,BTA.ROW_CHANGED_BY,BTA.ACTIVE_IND,BTA.SOURCE_NAME,
BTA.REMARKS,BE_TEST_FREQ_AUD_ID AS BET_FREQ_AUD_ID
FROM DSWIMDATASRC.BE_TEST_FREQ_AUDIT BTA
LEFT OUTER JOIN DSWIMDATASRC.BE_TEST_FREQUENCY BTF ON BTF.BE_TEST_FREQUENCY_ID= BTA.BE_TEST_FREQUENCY_ID
LEFT OUTER JOIN DSWIMDATASRC.R_TEST_TYPE RTT ON RTT.R_TEST_TYPE_ID=BTA.BE_TEST_TYPE_ID
LEFT OUTER JOIN DSWIMDATASRC.WELL W ON BTA.ENTITY_ID = W.WELL_ID
;

CREATE VIEW BARRIER_ENV_TEST_DOCUMENT
(
	BET_DOC_FULL_PATH	string(2000)	,
	WPH_DOC_PATH	string(2000)	,
	WPH_DOC_TITLE	string(200)	,
	WPH_DOC_CATEGORY	string(100)	,
	WPH_DOC_CATEGORY_ID	string(40)	,
	WPH_DOC_SUB_CATEGORY	string(100)	,
	WPH_DOC_SUB_CATEGORY_ID	string(40)	,
	WPH_DOC_TYPE	string	(50)	,
	WPH_FIG_REFERENCE	string(100)	,
	WPH_DOC_PUBLISHER	string(255)	,
	WPH_DOC_ISSUE	string	(50)	,
	WPH_DOC_LANGUAGE	string(100)	,
	BE_TEST_ID	string(40)	,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255),
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string	(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	SOURCE_DOCUMENT string(2000),
	WPH_DOC_ID string(40),
	BET_DOC_ID	string(40)	NOT NULL,
CONSTRAINT PK_BAR_ENV_TEST_DOC PRIMARY KEY (BET_DOC_ID))
OPTIONS (UPDATABLE 'FALSE', BARRIER_ENV_TEST_DOCUMENT.IMPLEMENTED 'TRUE')
AS
SELECT SD.DOCUMENT_FULL_PATH,SD.SOURCE_DOCUMENT AS WPH_DOC_PATH,SD.DOCUMENT_TITLE AS WPH_DOC_TITLE,SD.DOC_CATEGORY AS WPH_DOC_CATEGORY,
SD.DOC_CATEGORY_ID,SD.DOC_SUB_CATEGORY AS WPH_DOC_SUB_CATEGORY,
SD.DOC_SUB_CATEGORY_ID,SD.DOCUMENT_TYPE AS WPH_DOC_TYPE,SD.FIGURE_REFERENCE,SD.PUBLISHER,SD.ISSUE,SD.DOC_LANGUAGE,BT.BE_TEST_ID,
BT.ENTITY_ID,W.WELL_NAME AS ENTITY_NAME,SD.ROW_CREATED_DATE,SD.ROW_CREATED_BY,SD.ROW_CHANGED_DATE,SD.ROW_CHANGED_BY,SD.ACTIVE_IND,
SD.SOURCE_NAME,SD.REMARKS,SD.SOURCE_DOCUMENT,SD.SOURCE_DOCUMENT_ID AS WPH_DOC_ID,
UUID() AS BET_DOC_ID
FROM DSWIMDATASRC.SOURCE_DOCUMENT SD
INNER JOIN DSWIMDATASRC.BE_ENV_TEST BT ON SD.OBJECT_ID = BT.BE_TEST_ID
INNER JOIN DSWIMDATASRC.WELL W ON BT.ENTITY_ID = W.WELL_ID
;

CREATE VIEW R_TEST_TYPE(
	R_TEST_TYPE_ID string(40) NOT NULL,
	TEST_TYPE string(100) NOT NULL,
	ACTIVE_IND string(1) ,
	EFFECTIVE_DATE timestamp ,
	EXPIRY_DATE timestamp ,
	REMARK string(2000) ,
	SOURCE_NAME string(100) ,
	ROW_CHANGED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CREATED_BY string(100)  ,
	ROW_CREATED_DATE timestamp  ,
	CONSTRAINT PK_R_TEST_TYPE PRIMARY KEY (R_TEST_TYPE_ID))
OPTIONS (UPDATABLE 'FALSE', R_TEST_TYPE.IMPLEMENTED 'TRUE')
AS
SELECT 	R_TEST_TYPE_ID ,R_TEST_TYPE ,ACTIVE_IND ,EFFECTIVE_DATE,EXPIRY_DATE,REMARKS,SOURCE_NAME,ROW_CHANGED_BY,ROW_CHANGED_DATE,ROW_CREATED_BY ,ROW_CREATED_DATE 
FROM DSWIMDATASRC.R_TEST_TYPE
;

CREATE VIEW R_TEST_RESULT(
	R_TEST_RESULT_ID string(40) NOT NULL,
	TEST_RESULT string(100) NOT NULL,
	ACTIVE_IND string(1) ,
	EFFECTIVE_DATE timestamp ,
	EXPIRY_DATE timestamp ,
	REMARK string(2000) ,
	SOURCE_NAME string(100) ,
	ROW_CHANGED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CREATED_BY string(100)  ,
	ROW_CREATED_DATE timestamp  ,
CONSTRAINT PK_R_TEST_RESULT_ID PRIMARY KEY (R_TEST_RESULT_ID))
OPTIONS (UPDATABLE 'FALSE', R_TEST_RESULT.IMPLEMENTED 'TRUE')
AS
SELECT 	R_TEST_RESULT_ID,TEST_RESULT ,ACTIVE_IND,EFFECTIVE_DATE,EXPIRY_DATE,REMARKS,SOURCE_NAME,ROW_CHANGED_BY ,ROW_CHANGED_DATE  ,ROW_CREATED_BY ,	ROW_CREATED_DATE
FROM DSWIMDATASRC.R_TEST_RESULT
;
CREATE VIRTUAL PROCEDURE ds_SAVE_BARRIER_TEST_HISTORY (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = ds_SAVE_BARRIER_TEST_HISTORY.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = ds_SAVE_BARRIER_TEST_HISTORY.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	SELECT * INTO #tempdocXML FROM (SELECT * FROM XMLTABLE('/Parameters/Document' PASSING convert(VARIABLES.xml_sp_params,xml) COLUMNS DOCUMENT_TITLE string PATH '@DOCUMENT_TITLE', DOCUMENT_FULL_PATH string PATH '@DOCUMENT_FULL_PATH', DOCUMENT_TYPE string PATH '@DOCUMENT_TYPE') AS Y) AS y;
	
	
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE string VARIABLES.NEXT_TEST_DATE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_NEXT_TEST_DATE');
	DECLARE string VARIABLES.BE_TEST_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_TEST_ID');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_REMARK');
	DECLARE string VARIABLES.RESET_IND = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_RESET_FREQ_STATUS');
	DECLARE string VARIABLES.TEST_DATE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_TEST_DATE');
	DECLARE string VARIABLES.TEST_RESULT_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_TEST_RESULT_ID');
	DECLARE string VARIABLES.TEST_TYPE_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_TEST_TYPE_ID');
	DECLARE string VARIABLES.BE_PRESSURE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_PRESSURE');
	
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.Next_Test_Date_Timestamp = null;
	DECLARE TIMESTAMP VARIABLES.Test_Date_Timestamp = null;
	DECLARE BIGDECIMAL VARIABLES.BE_Pressure_Decimal = null;
	DECLARE TIMESTAMP VARIABLES.NOW_DATE = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');

	IF(VARIABLES.NEXT_TEST_DATE IS NOT NULL)
	BEGIN
		VARIABLES.Next_Test_Date_Timestamp = parsetimestamp(VARIABLES.NEXT_TEST_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	IF(VARIABLES.TEST_DATE IS NOT NULL)
	BEGIN
		VARIABLES.Test_Date_Timestamp = parsetimestamp(VARIABLES.TEST_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	IF(VARIABLES.BE_PRESSURE IS NOT NULL)
	BEGIN
		VARIABLES.BE_Pressure_Decimal = CONVERT(VARIABLES.BE_PRESSURE, BIGDECIMAL);
	END
	
	DECLARE string VARIABLES.BE_TEST_FREQ_ID = (SELECT BE_TEST_FREQUENCY_ID FROM DSWIMDATASRC.BE_TEST_FREQUENCY WHERE BE_TEST_TYPE_ID = VARIABLES.TEST_TYPE_ID LIMIT 1);
	
	IF(VARIABLES.BE_TEST_ID IS NULL)
	BEGIN
		VARIABLES.BE_TEST_ID = (SELECT UUID());

		INSERT INTO DSWIMDATASRC.BE_ENV_TEST (DSWIMDATASRC.BE_ENV_TEST.BE_TEST_ID, DSWIMDATASRC.BE_ENV_TEST.ENTITY_ID,DSWIMDATASRC.BE_ENV_TEST.ACTIVE_IND, 
		DSWIMDATASRC.BE_ENV_TEST.TEST_DATE, DSWIMDATASRC.BE_ENV_TEST.TEST_RESULT_ID, DSWIMDATASRC.BE_ENV_TEST.TEST_PRESSURE, 
		DSWIMDATASRC.BE_ENV_TEST.TEST_PRESS_UOM, DSWIMDATASRC.BE_ENV_TEST.ROW_CREATED_BY, DSWIMDATASRC.BE_ENV_TEST.ROW_CREATED_DATE, 
		DSWIMDATASRC.BE_ENV_TEST.RESET_IND, 
		DSWIMDATASRC.BE_ENV_TEST.TEST_TYPE_ID, 
		DSWIMDATASRC.BE_ENV_TEST.BE_TEST_FREQ_ID, 
		DSWIMDATASRC.BE_ENV_TEST.REMARKS, DSWIMDATASRC.BE_ENV_TEST.SOURCE_NAME) VALUES (VARIABLES.BE_TEST_ID, 
		VARIABLES.ENTITY_ID, 'Y', VARIABLES.Test_Date_Timestamp, 
		VARIABLES.TEST_RESULT_ID, VARIABLES.BE_Pressure_Decimal, 'psi', VARIABLES.SP_USER, VARIABLES.now, 
		VARIABLES.RESET_IND, VARIABLES.TEST_TYPE_ID, VARIABLES.BE_TEST_FREQ_ID,
		VARIABLES.REMARK, 'DSWIM');
		
		LOOP ON (SELECT #tempdocXML.DOCUMENT_FULL_PATH,#tempdocXML.DOCUMENT_TITLE,#tempDocXML.DOCUMENT_TYPE FROM #tempdocXML) AS barDocCursor
		BEGIN
		    DECLARE varchar VARIABLES.BarDOCIDVal = (SELECT UUID()); 
			INSERT INTO DSWIMDATASRC.SOURCE_DOCUMENT (SOURCE_DOCUMENT_ID, SOURCE_DOCUMENT,OBJECT_ID,ACTIVE_IND, DOCUMENT_TYPE,
			SOURCE_NAME,ROW_CREATED_BY, ROW_CREATED_DATE, DOC_CATEGORY,DOC_SUB_CATEGORY,
			ENTITY_ID,DOCUMENT_FULL_PATH,DOCUMENT_TITLE)
			VALUES (VARIABLES.BarDOCIDVal, barDocCursor.DOCUMENT_FULL_PATH,VARIABLES.BE_TEST_ID, 'Y', barDocCursor.DOCUMENT_TYPE, 'DSWIM', VARIABLES.SP_USER, VARIABLES.now,'Well Files','WellBarrier',
			VARIABLES.ENTITY_ID,barDocCursor.DOCUMENT_FULL_PATH,barDocCursor.DOCUMENT_TITLE);
		
		END
	END
	ELSE
	BEGIN
		UPDATE DSWIMDATASRC.BE_ENV_TEST SET REMARKS = VARIABLES.REMARK, ENTITY_ID = VARIABLES.ENTITY_ID, ROW_CHANGED_BY = VARIABLES.SP_USER, 
		ROW_CHANGED_DATE = VARIABLES.now, TEST_PRESSURE = VARIABLES.BE_Pressure_Decimal, TEST_DATE = VARIABLES.Test_Date_Timestamp, 
		BE_TEST_FREQ_ID = VARIABLES.BE_TEST_FREQ_ID, 
		TEST_TYPE_ID = VARIABLES.TEST_TYPE_ID,
		TEST_RESULT_ID = VARIABLES.TEST_RESULT_ID, RESET_IND = VARIABLES.RESET_IND, 
		SOURCE_NAME = 'DSWIM' WHERE DSWIMDATASRC.BE_ENV_TEST.BE_TEST_ID = VARIABLES.BE_TEST_ID;
		IF(exists(SELECT 1 FROM DSWIMDATASRC.SOURCE_DOCUMENT WHERE DSWIMDATASRC.SOURCE_DOCUMENT.OBJECT_ID = VARIABLES.BE_TEST_ID))
		begin
		  DELETE FROM DSWIMDATASRC.SOURCE_DOCUMENT WHERE DSWIMDATASRC.SOURCE_DOCUMENT.OBJECT_ID = VARIABLES.BE_TEST_ID;
		end
		LOOP ON (SELECT #tempdocXML.DOCUMENT_FULL_PATH,#tempdocXML.DOCUMENT_TITLE,#tempDocXML.DOCUMENT_TYPE FROM #tempdocXML) AS barDocCursor
		BEGIN
		 DECLARE varchar VARIABLES.BarDOCIDVal = (SELECT UUID()); 
		  INSERT INTO DSWIMDATASRC.SOURCE_DOCUMENT (SOURCE_DOCUMENT_ID, SOURCE_DOCUMENT,OBJECT_ID,ACTIVE_IND, DOCUMENT_TYPE,
			SOURCE_NAME,ROW_CREATED_BY, ROW_CREATED_DATE, DOC_CATEGORY,DOC_SUB_CATEGORY,
			ENTITY_ID,DOCUMENT_FULL_PATH,DOCUMENT_TITLE)
			VALUES (VARIABLES.BarDOCIDVal, barDocCursor.DOCUMENT_FULL_PATH,VARIABLES.BE_TEST_ID, 'Y', barDocCursor.DOCUMENT_TYPE, 'DSWIM', VARIABLES.SP_USER, VARIABLES.now,'Well Files','WellBarrier',
			VARIABLES.ENTITY_ID,barDocCursor.DOCUMENT_FULL_PATH,barDocCursor.DOCUMENT_TITLE);
		 
		END
	END
	SELECT 'Success' AS OP;
END;
CREATE VIEW WELL 
(
	 WELL_NAME STRING(100),
           ENTITY_ID STRING(100),
           PRODUCTION_STATUS STRING(100),
           OPERATING_STATUS STRING(100),
           PROD_FLOW_RATE  BIGDECIMAL,
           WI_STATUS STRING(100),
           OPEN_ANOMALY_COUNT long,
           RISK_SEVERITY STRING(100),
           RISK_RANK bigdecimal,
           RISK_SEV_COLOR STRING(100),
           IF_TYPE STRING(100),
           DEVIATION STRING(100),
           EVAL_START_DATE timestamp,
           LEVEL5_NAME STRING(100),
           LEVEL5_ID STRING(100),
           LEVEL6_NAME STRING(100),
           LEVEL6_ID STRING(100),
		   LATITUDE BIGDECIMAL,
		   LONGITUDE BIGDECIMAL,
		   CONSTRAINT PK_WELL_ID PRIMARY KEY (ENTITY_ID))
OPTIONS (UPDATABLE 'FALSE', WELL.IMPLEMENTED 'TRUE')
AS
SELECT
W.WELL_NAME
,W.WELL_ID AS ENTITY_ID
,WS.PRODUCTION_STATUS
,WS.OPERATING_STATUS
,PM.PROD_FLOW_RATE
,WI.WI_STATUS
,AN.OPEN_ANOMALY_COUNT
,RISK_SEVERITY
 ,RISK_RANK
 ,RISK_SEV_COLOR
 ,IF_TYPE
 ,CAST(RESTRICTION_TYPE AS string) DEVIATION
 ,EV.EVAL_START_DATE
 ,F.FIELD LEVEL5_NAME
 ,W.ASSIGNED_FIELD LEVEL5_ID
 ,AR.PREFERRED_NAME LEVEL6_NAME
 ,WA.AREA_ID LEVEL6_ID
 ,Dwc.SURFACE_LATITUDE AS LATITUDE
 , Dwc.SURFACE_LONGITUDE AS LONGITUDE
FROM DSWIMDATASRC.WELL W
LEFT JOIN
(
SELECT WS.WELL_ID, 
MAX(CASE WS.STATUS_TYPE WHEN 'Production' THEN  WS.STATUS  END) AS  PRODUCTION_STATUS,
MAX(CASE WS.STATUS_TYPE WHEN 'Operating' THEN WS.STATUS END) AS  OPERATING_STATUS, 
MAX(CASE WS.STATUS_TYPE WHEN 'Product' THEN WS.STATUS END) AS  PRIMARY_PRODUCT
FROM (
SELECT WS.WELL_ID, RWST.STATUS_TYPE, RWS.STATUS, WS.STATUS_DATE,
ROW_NUMBER() OVER (PARTITION BY WS.WELL_ID, RWST.STATUS_TYPE ORDER BY WS.STATUS_DATE DESC, WS.ROW_CREATED_DATE DESC) ROW_NUM
FROM DSWIMDATASRC.WELL_STATUS WS
INNER JOIN DSWIMDATASRC.R_WELL_STATUS RWS ON WS.R_WELL_STATUS_ID = RWS.R_WELL_STATUS_ID
INNER JOIN DSWIMDATASRC.R_WELL_STATUS_TYPE RWST ON RWS.R_WELL_STATUS_TYPE_ID = RWST.R_WELL_STATUS_TYPE_ID
WHERE RWST.STATUS_TYPE IN ('Production','Operating','Product')) WS 
WHERE WS.ROW_NUM = 1
GROUP BY WS.WELL_ID
) WS
ON W.WELL_ID=WS.WELL_ID
LEFT JOIN
(
SELECT
WELL_ID,PROD_FLOW_RATE
FROM
(
SELECT WELL_ID
,PM.VALUE PROD_FLOW_RATE
,ROW_NUMBER()OVER(PARTITION BY WELL_ID ORDER BY PM.MEASUREMENT_DATE DESC,PM.ROW_CREATED_DATE DESC) ROW_NUMBER 
FROM  DSWIMDATASRC.PDEN_MEASUREMENT PM
INNER JOIN DSWIMDATASRC.PDEN_EQUIPMENT PE ON PM.PDEN_EQUIPMENT_ID = PE.PDEN_EQUIPMENT_ID
INNER JOIN DSWIMDATASRC.EQUIPMENT E ON PE.EQUIPMENT_ID = E.EQUIPMENT_ID AND E.ACTIVE_IND='Y'
INNER JOIN  DSWIMDATASRC.PDEN_WELL PW ON PE.PDEN_ID = PW.PDEN_ID
) TM
WHERE TM.ROW_NUMBER=1
) PM
ON PM.WELL_ID=W.WELL_ID
LEFT JOIN DSWIMDATASRC.R_WI_STATUS WI
ON WI.WI_STATUS_ID=W.R_WI_STATUS_ID
LEFT JOIN 
(
SELECT
ENTITY_ID WELL_ID, SUM(1) OPEN_ANOMALY_COUNT
FROM DSWIMDATASRC.ANOMALY AN
WHERE AN.CLOSE_DATE IS NULL
GROUP BY ENTITY_ID
) AN
ON AN.WELL_ID=W.WELL_ID
LEFT JOIN
(
 SELECT PMTR.ENTITY_ID WELL_ID,PMTR.WEIGHTAGE_FACTOR RISK_RANK,RP.R_PRIORITY RISK_SEVERITY
 ,RP.COLOR_CODE RISK_SEV_COLOR
 FROM DSWIMDATASRC.PROCESS_MATRIX PMTR INNER JOIN DSWIMDATASRC.R_PRIORITY RP ON RP.R_PRIORITY_ID=PMTR.SEVERITY_TYPE
 WHERE PMTR.ENTITY_ID IS NOT NULL
) RISK
ON RISK.WELL_ID=W.WELL_ID
LEFT JOIN
(
SELECT WELL_ID,IF_TYPE
FROM
(
 SELECT WE.ENTITY_ID WELL_ID, 
	CONCAT2(FT.R_IF_TYPE,(CASE WHEN EST.CAT_EQUIP_SUB_TYPE IS NOT NULL THEN CONCAT2(',' , EST.CAT_EQUIP_SUB_TYPE) ELSE '' END)) AS IF_TYPE,
		ROW_NUMBER() OVER (PARTITION BY ENTITY_ID ORDER BY (CASE WHEN (IF_END_DATE IS NULL) THEN 1 ELSE 0 END) DESC, IF_END_DATE DESC) ROW_NUM
		 FROM  DSWIMDATASRC.WI_FAILURE_IMPAIRMENT WE
		INNER JOIN  DSWIMDATASRC.R_IF_TYPE FT ON WE.FAILURE_IMPAIR_TYPE_ID = FT.R_IF_TYPE_ID
		LEFT OUTER JOIN  DSWIMDATASRC.R_CAT_EQUIP_SUB_TYPE EST ON WE.EQUIP_SUB_TYPE_ID = EST.CAT_EQUIP_SUB_TYPE_ID
		WHERE (WE.FAILURE_IMPAIR_TYPE_ID IS NOT NULL AND WE.FAILURE_IMPAIR_TYPE_ID <> '')
) WWE
WHERE WWE.ROW_NUM=1
) WE
ON WE.WELL_ID=W.WELL_ID
LEFT JOIN
(SELECT ENTITY_ID, string_agg(RESTRICTION_TYPE,',') AS RESTRICTION_TYPE
	FROM
	(
	SELECT ENTITY_ID, RT.RESTRICTION_TYPE, 
	ROW_NUMBER() OVER (PARTITION BY ENTITY_ID, RT.RESTRICTION_TYPE ORDER BY START_DATE DESC, D.ROW_CREATED_DATE DESC, D.ROW_CHANGED_DATE DESC) ROW_NUM
	FROM  DSWIMDATASRC.DEVIATION D
	INNER JOIN  DSWIMDATASRC.R_REST_TYPE RT ON D.R_DEVIATION_TYPE_ID = RT.R_REST_TYPE_ID
	)D 
	WHERE D.ROW_NUM = 1
	GROUP BY ENTITY_ID)D ON (W.WELL_ID = D.ENTITY_ID) 
LEFT JOIN (
SELECT EV.ENTITY_ID,MAX(EVAL_START_DATE) EVAL_START_DATE
FROM
DSWIMDATASRC.EVALUATION EV
GROUP BY EV.ENTITY_ID) EV
ON EV.ENTITY_ID=W.WELL_ID
LEFT JOIN DSWIMDATASRC.FIELD F
ON F.FIELD_ID=W.ASSIGNED_FIELD
LEFT JOIN DSWIMDATASRC.WELL_AREA WA
ON WA.WELL_ID=W.WELL_ID
LEFT JOIN DSWIMDATASRC.AREA AR
ON AR.AREA_ID=WA.AREA_ID
LEFT JOIN DSWIMDATASRC.DimWellCompletion Dwc
ON Dwc.WELL_OR_COMPLETION_ID=W.WELL_ID;
CREATE VIEW ASSET_WI_KPI_STATS
(
KPI_DATE date,
KPI string(100) NOT NULL,
KPI_ID string(40),
KPI_TYPE string(100),
KPI_VALUE integer,
KPI_VALUE_UOM string(20),
SOURCE_NAME string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND    string (1),
ASSET_KPI_STATS_ID string (40),
LEVEL1_ID	string(40)	,
LEVEL1_NAME	string(255)	,
LEVEL1_TYPE	string(100)	,
LEVEL2_ID	string(40)	,
LEVEL2_NAME	string(255)	,
LEVEL2_TYPE	string(100)	,
LEVEL3_ID	string(40)	,
LEVEL3_NAME	string(255)	,
LEVEL3_TYPE	string(100)	,
LEVEL4_ID	string(40)	,
LEVEL4_NAME	string(255)	,
LEVEL4_TYPE	string(100)	,
LEVEL5_ID	string(40)	,
LEVEL5_NAME	string(255)	,
LEVEL5_TYPE	string(100)	,
LEVEL6_ID	string(40),
LEVEL6_NAME	string(255)	,
LEVEL6_TYPE	string(100)	,
CONSTRAINT PK_ASSET_KPI_STATS PRIMARY KEY (ASSET_KPI_STATS_ID))
OPTIONS (UPDATABLE 'FALSE',ASSET_WI_KPI_STATS.IMPLEMENTED 'TRUE')
AS
SELECT  
KPI_DATE  ,
KPI  ,
NULL KPI_ID  ,
NULL KPI_TYPE  ,
KPI_VALUE ,
NULL KPI_VALUE_UOM ,
SOURCE_NAME ,
ROW_CHANGED_BY ,
ROW_CHANGED_DATE,
ROW_CREATED_DATE,
ROW_CREATED_BY,
ACTIVE_IND,
ASSET_KPI_STATS_ID ,
NULL LEVEL1_ID ,
NULL LEVEL1_NAME,
NULL LEVEL1_TYPE,
NULL LEVEL2_ID,
NULL LEVEL2_NAME,
NULL LEVEL2_TYPE,
NULL LEVEL3_ID,
NULL LEVEL3_NAME,
NULL LEVEL3_TYPE,
LEVEL4_ID,
LEVEL4_NAME,
LEVEL4_TYPE,
LEVEL5_ID,
LEVEL5_NAME,
LEVEL5_TYPE,
LEVEL6_ID,
LEVEL6_NAME,
LEVEL6_TYPE 
FROM DSWIMDATASRC.VW_ASSET_WI_KPI_STATISTICS;
CREATE VIEW ANOMALY_DETAILS
(
	ANOMALY_TYPE	string(100)	NOT NULL,
	ANOMALY_TYPE_ID	string(40)	NOT NULL,
	COORDINATOR	string(100),
	OPEN_DATE	timestamp		NOT NULL,
	CLOSE_DATE	timestamp,
	ANOMALY_DESC	string(2000)	NOT NULL,
	ANOMALY_PLAN	string(2000),
	OPEN_DAYS	integer,
	ANOMALY_ID	string(40)	NOT NULL,
	OBSERVED_DATE	timestamp		NOT NULL,
	ANOMALY_CONCLUSION	string(2000),
	ANOMALY_CONCLUSION_ID	string(40),
	ANOMALY_EVAL_PRIORITY	string(100),
	ANOMALY_EVAL_PRIOR_ID	string(40),
	ROW_CREATED_DATE	timestamp,
	ROW_CREATED_BY	string(100),
	ROW_CHANGED_DATE	timestamp,
	ROW_CHANGED_BY	string(100),
	ACTIVE_IND	string(1),
	SOURCE_NAME	string(100),
	REMARK	string(2000),
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255),
	LEVEL1_ID	string(40),
	LEVEL1_NAME	string(255),
	LEVEL1_TYPE	string(100),
	LEVEL2_ID	string(40),
	LEVEL2_NAME	string(255),
	LEVEL2_TYPE	string(100),
	LEVEL3_ID	string(40),
	LEVEL3_NAME	string(255),
	LEVEL3_TYPE	string(100),
	LEVEL4_ID	string(40),
	LEVEL4_NAME	string(255),
	LEVEL4_TYPE	string(100),
	LEVEL5_ID	string(40),
	LEVEL5_NAME	string(255),
	LEVEL5_TYPE	string(100),
	LEVEL6_ID	string(40),
	LEVEL6_NAME	string(255) NOT NULL,
	LEVEL6_TYPE	string(100),
	ANOMALY_DETAILS_ID	string(40)	NOT NULL,
CONSTRAINT pk_ANOMALY_DETAILS PRIMARY KEY(ANOMALY_DETAILS_ID)
) OPTIONS(UPDATABLE 'FALSE',ANOMALY_DETAILS_ID.IMPLEMENTED 'TRUE') 
AS
SELECT   WB.ANOMALY_TYPE
      ,WB.ANOMALY_TYPE_ID
      ,WB.COORIDIATOR
      ,WB.OPEN_DATE
      ,WB.CLOSE_DATE
      ,WB.ANOMALY_DESC
      ,WB.ANOMALY_PLAN
      ,WB.OPEN_DAYS
      ,WB.ANOMALY_ID
      ,WB.OBSERVED_DATE
      ,WB.R_ANOMALY_CONCLUSION
      ,WB.ANOMALY_CONCLUSION_ID
      ,WB.ANOMALY_EVAL_PRIORITY
      ,WB.ANOMALY_EVAL_PRIOR_ID
      ,WB.ROW_CREATED_DATE
      ,WB.ROW_CREATED_BY
      ,WB.ROW_CHANGED_DATE
      ,WB.ROW_CHANGED_BY
      ,WB.ACTIVE_IND
      ,WB.SOURCE_NAME
      ,WB.REMARK
      ,WB.ENTITY_ID
      ,WB.WELL_NAME
      ,DAH.LEVEL1_ID
      ,DAH.LEVEL1_NAME
      ,DAH.LEVEL1_TYPE
      ,DAH.LEVEL2_ID
      ,DAH.LEVEL2_NAME
      ,DAH.LEVEL2_TYPE
      ,DAH.LEVEL3_ID
      ,DAH.LEVEL3_NAME
      ,DAH.LEVEL3_TYPE
      ,DAH.LEVEL4_ID
      ,DAH.LEVEL4_NAME
      ,DAH.LEVEL4_TYPE
      ,DAH.LEVEL5_ID
      ,DAH.LEVEL5_NAME
      ,DAH.LEVEL5_TYPE
      ,DAH.LEVEL6_ID
      ,DAH.LEVEL6_NAME
      ,DAH.LEVEL6_TYPE
      ,ANOMALY_DETAILS_ID
  FROM   DSWIMDATASRC.VW_ANOMALY_DETAILS WB
 INNER JOIN DSWIMDATASRC.DIMASSETHIERARCHY DAH ON WB.LEVEL6_ID = DAH.LEVEL6_ID;
CREATE VIEW WI_KPI_STATISTICS
(
KPI_DATE date NOT NULL,
KPI string(100) NOT NULL,
KPI_ID string(40),
KPI_TYPE string(100),
KPI_VALUE integer,
KPI_VALUE_UOM string(20),
ENTITY_ID string (40) NOT NULL,
ENTITY_NAME  string (255),
SOURCE_NAME string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND    string (1),
KPI_STATS_ID string (40),
LEVEL1_ID	string(40)	,
LEVEL1_NAME	string(255)	,
LEVEL1_TYPE	string(100)	,
LEVEL2_ID	string(40)	,
LEVEL2_NAME	string(255)	,
LEVEL2_TYPE	string(100)	,
LEVEL3_ID	string(40)	,
LEVEL3_NAME	string(255)	,
LEVEL3_TYPE	string(100)	,
LEVEL4_ID	string(40)	,
LEVEL4_NAME	string(255)	,
LEVEL4_TYPE	string(100)	,
LEVEL5_ID	string(40)	,
LEVEL5_NAME	string(255)	,
LEVEL5_TYPE	string(100)	,
LEVEL6_ID	string(40),
LEVEL6_NAME	string(255)	,
LEVEL6_TYPE	string(100)	,
CONSTRAINT PK_KPI_STATS PRIMARY KEY (KPI_STATS_ID))
OPTIONS (UPDATABLE 'FALSE',WI_KPI_STATISTICS.IMPLEMENTED 'TRUE')
AS
SELECT  WB.KPI_DATE
      ,WB.KPI
      ,WB.KPI_ID
      ,WB.KPI_TYPE
      ,WB.KPI_VALUE
      ,WB.KPI_VALUE_UOM
      ,WB.ENTITY_ID
	  ,WB.ENTITY_NAME
      ,WB.SOURCE_NAME
      ,WB.ROW_CHANGED_BY
      ,WB.ROW_CHANGED_DATE
      ,WB.ROW_CREATE_DATE
      ,WB.ROW_CREATED_BY
      ,WB.ACTIVE_IND
      ,WB.KPI_STATS_ID
      ,NULL LEVEL1_ID
      ,NULL LEVEL1_NAME
      ,NULL LEVEL1_TYPE
      ,NULL LEVEL2_ID
      ,NULL LEVEL2_NAME
      ,NULL LEVEL2_TYPE
      ,NULL LEVEL3_ID
      ,NULL LEVEL3_NAME
      ,NULL LEVEL3_TYPE
      ,WB.LEVEL4_ID
      ,WB.LEVEL4_NAME
      ,WB.LEVEL4_TYPE
      ,WB.LEVEL5_ID
      ,WB.LEVEL5_NAME
      ,WB.LEVEL5_TYPE
      ,WB.LEVEL6_ID
      ,WB.LEVEL6_NAME
      ,WB.LEVEL6_TYPE
  FROM  DSWIMDATASRC.VW_WI_KPI_STATISTICS WB;
CREATE VIEW AP_ENVELOPE
(
AP_ENVELOPE_ID string(40) NOT NULL,
MEASUREMENT_DATE timestamp,
A_ANN_PRESSURE bigdecimal(15,4),
B_ANN_PRESSURE bigdecimal(15,4),
C_ANN_PRESSURE bigdecimal(15,4),
D_ANN_PRESSURE bigdecimal(15,4),
E_ANN_PRESSURE bigdecimal(15,4),
TBG_PRESSURE bigdecimal(15,4),
PRESSURE_UOM string(20),
A_UNOL bigdecimal(15,4),
A_LNOL bigdecimal(15,4),
B_UNOL bigdecimal(15,4),
B_LNOL bigdecimal(15,4),
C_UNOL bigdecimal(15,4),
C_LNOL bigdecimal(15,4),
D_UNOL bigdecimal(15,4),
D_LNOL bigdecimal(15,4),
E_UNOL bigdecimal(15,4),
E_LNOL bigdecimal(15,4),
ENTITY_ID string(40)  not null,
ENTITY_NAME string(255)  not null,
LEVEL1_ID  string (   40),
LEVEL1_NAME  string (   255),
LEVEL1_TYPE  string (   100),
LEVEL2_ID  string (   40),
LEVEL2_NAME  string (   255),
LEVEL2_TYPE  string (   100),
LEVEL3_ID  string (   40  ),
LEVEL3_NAME  string (   255),
LEVEL3_TYPE  string (   100),
LEVEL4_ID  string (   40  ),
LEVEL4_NAME  string (   255),
LEVEL4_TYPE  string (   100),
LEVEL5_ID  string (   40  ),
LEVEL5_NAME  string (   255),
LEVEL5_TYPE  string (   100),
LEVEL6_ID  string (   40  ) NOT NULL,
LEVEL6_NAME  string (   255),
LEVEL6_TYPE  string (100),
CONSTRAINT pk_AP_ENV_DIM  PRIMARY KEY(AP_ENVELOPE_ID)
)   OPTIONS(UPDATABLE 'FALSE',AP_ENVELOPE.IMPLEMENTED 'TRUE') 
AS
SELECT  AP_ENVELOPE_ID
      ,MEASUREMENT_DATE
      ,A_ANN_PRESSURE
      ,B_ANN_PRESSURE
      ,C_ANN_PRESSURE
      ,D_ANN_PRESSURE
      ,E_ANN_PRESSURE
      ,TBG_PRESSURE
      ,PRESSURE_UOM
      ,A_UNOL
      ,A_LNOL
      ,B_UNOL
      ,B_LNOL
      ,C_UNOL
      ,C_LNOL
      ,D_UNOL
      ,D_LNOL
      ,E_UNOL
      ,E_LNOL
      ,ENTITY_ID
      ,ENTITY_NAME
      ,LEVEL1_ID
      ,LEVEL1_NAME
      ,LEVEL1_TYPE
      ,LEVEL2_ID
      ,LEVEL2_NAME
      ,LEVEL2_TYPE
      ,LEVEL3_ID
      ,LEVEL3_NAME
      ,LEVEL3_TYPE
      ,LEVEL4_ID
      ,LEVEL4_NAME
      ,LEVEL4_TYPE
      ,LEVEL5_ID
      ,LEVEL5_NAME
      ,LEVEL5_TYPE
      ,LEVEL6_ID
      ,LEVEL6_NAME
      ,LEVEL6_TYPE
  FROM  DSWIMDATASRC.VW_AP_ENVELOPE;
  CREATE VIEW REGULATORY_DEPARTURE
(
ANNULUS_NAME   string(100)    NOT NULL,
ANNULUS_ID   string(40)    ,
REG_DEPT_DESC   string(2000)    NOT NULL,
SUBMISSION_DATE   timestamp   ,
APPROVAL_DATE   timestamp   ,
EXPIRY_DATE   timestamp   ,
PRESSURE_LIMIT   bigdecimal(15,4)    ,
PRESSURE_UOM   string(20)    ,
LEAD_TIME   integer    ,
LEAD_TIME_UOM   string(20)    ,
RESOLVED_IND   string(10)    ,
REG_DEPT_REMARK   string(2000),
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp   ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp   ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
SOURCE_NAME   string(100)    ,
REG_DEPT_ID   string(40)    NOT NULL,
LEVEL1_ID  string (   40),
LEVEL1_NAME  string (   255),
LEVEL1_TYPE  string (   100),
LEVEL2_ID  string (   40),
LEVEL2_NAME  string (   255),
LEVEL2_TYPE  string (   100),
LEVEL3_ID  string (   40  ),
LEVEL3_NAME  string (   255),
LEVEL3_TYPE  string (   100),
LEVEL4_ID  string (   40  ),
LEVEL4_NAME  string (   255),
LEVEL4_TYPE  string (   100),
LEVEL5_ID  string (   40  ),
LEVEL5_NAME  string (   255),
LEVEL5_TYPE  string (   100),
LEVEL6_ID  string (   40  ) NOT NULL,
LEVEL6_NAME  string (   255),
LEVEL6_TYPE  string (100),
WI_STATUS  string(100),
PRODUCTION_STATUS string(100),
CONSTRAINT pk_REG_DEPARTURE   PRIMARY KEY(REG_DEPT_ID)
)   OPTIONS(UPDATABLE 'FALSE',REGULATORY_DEPARTURE.IMPLEMENTED 'TRUE') 
AS
 SELECT EQUIPMENT_NAME AS ANNULUS_NAME,EQUIPMENT_ID AS ANNULUS_ID,DEPARTURE_DESC AS REG_DEPT_DESC,SUBMISSION_DATE,APPROVAL_DATE,
 D.EXPIRY_DATE,CAST (PRESSURE_LIMIT AS bigdecimal) AS PRESSURE_LIMIT,
PRESSURE_UOM, 
CAST(
 TIMESTAMPDIFF(SQL_TSI_DAY, CAST((CASE WHEN D.EXPIRY_DATE IS NULL THEN NOW() ELSE D.EXPIRY_DATE END) AS DATE),
 NOW())   AS INTEGER)
  AS LEAD_TIME, 
 'Days' AS LEAD_TIME_UOM,R_DEP_RESOLVE_ID AS RESOLVED_IND,
D.REMARK AS REG_DEPT_REMARK, D.ENTITY_ID,W.WELL_NAME,D.ROW_CREATED_DATE    ,
D.ROW_CREATED_BY  ,D.ROW_CHANGED_DATE ,D.ROW_CHANGED_BY,D.ACTIVE_IND ,D.SOURCE_NAME ,
DEPARTURE_ID AS REG_DEPT_ID, DAH.LEVEL1_ID, DAH.LEVEL1_NAME, DAH.LEVEL1_TYPE,
DAH.LEVEL2_ID, DAH.LEVEL2_NAME, DAH.LEVEL2_TYPE, DAH.LEVEL3_ID, DAH.LEVEL3_NAME, DAH.LEVEL3_TYPE, DAH.LEVEL4_ID,
DAH.LEVEL4_NAME, DAH.LEVEL4_TYPE, DAH.LEVEL5_ID, DAH.LEVEL5_NAME, DAH.LEVEL5_TYPE, DAH.LEVEL6_ID, DAH.LEVEL6_NAME, DAH.LEVEL6_TYPE,
W.WI_STATUS,W.PRODUCTION_STATUS
FROM DSWIMDATASRC.DEPARTURE D
INNER JOIN DSWIMDATA.WELL W ON D.ENTITY_ID = W.ENTITY_ID
INNER JOIN DSWIMDATASRC.DIMASSETHIERARCHY DAH ON W.LEVEL6_ID = DAH.LEVEL6_ID;
CREATE VIEW WBE_IMPAIR_FAILURE
(
	IF_TYPE	string(100)	NOT NULL,
	IF_TYPE_ID	string(40)	NOT NULL,
	IF_DESC	string(2000)	NOT NULL,
	IF_CAUSE	string(2000)	,
	IF_CONSEQUENCE	string(100)	,
	IF_CONSEQUENCE_ID	string(40)	,
	IF_REMARK	string(2000)	,
	IF_EQUIP_SUB_TYPE	string(100)	NOT NULL,
	IF_EQUIP_SUB_TYPE_ID	string(40)	NOT NULL,
	IF_EQUIP_TYPE	string(100),
	IF_EQUIP_TYPE_ID	string(40),	
	IF_EQUIP_DESC	string(2000)	,
	IF_EQUIP_INSTALL_DATE	timestamp		,
	IF_START_DATE	timestamp		,
	IF_END_DATE	timestamp		,
	IF_CLOSE_IND	string(1)	,
	IF_RCFA_REQ_IND	string(1)	,
	IF_RCFA_REPORT_DATE	timestamp		,
	IF_MOC_IND	string(1)	,
	IF_RCFA_LOCATION	string(2000)	,
	IF_MOC_DATE	timestamp		,
	IF_MOC_REMARK	string(2000)	,
	IF_LINK_MOC_RECORD	string(2000)	,
	IF_MOC_EXPIRY_DATE	timestamp		,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	WBE_IF_ID	string(40)	NOT NULL,
	LEVEL1_ID	string(40),
	LEVEL1_NAME	string(255),
	LEVEL1_TYPE	string(100),
	LEVEL2_ID	string(40),
	LEVEL2_NAME	string(255),
	LEVEL2_TYPE	string(100),
	LEVEL3_ID	string(40),
	LEVEL3_NAME	string(255),
	LEVEL3_TYPE	string(100),
	LEVEL4_ID	string(40),
	LEVEL4_NAME	string(255),
	LEVEL4_TYPE	string(100),
	LEVEL5_ID	string(40),
	LEVEL5_NAME	string(255),
	LEVEL5_TYPE	string(100),
	LEVEL6_ID	string(40),
	LEVEL6_NAME	string(255) NOT NULL,
	LEVEL6_TYPE string(100),
CONSTRAINT PK_WBE_IMPAIR_FAILURE_DIM PRIMARY KEY (WBE_IF_ID))
OPTIONS (UPDATABLE 'FALSE', WBE_IMPAIR_FAILURE.IMPLEMENTED 'TRUE')
AS
SELECT  IF_TYPE
      ,IF_TYPE_ID
      ,IF_DESC
      ,IF_CAUSE
      ,IF_CONSEQUENCE
      ,IF_CONSEQUENCE_ID
      ,IF_REMARK
      ,IF_EQUIP_SUMB_TYPE
      ,IF_EQUIP_SUB_TYPE_ID
      ,IF_EQUIP_TYPE
      ,IF_EQUIP_ID
      ,IF_EQUIP_DESC
      ,IF_EQUIP_INSTALL_DATE
      ,IF_START_DATE
      ,IF_END_DATE
      ,IF_CLOSE_IND
      ,IF_RCFA_REQ_IND
      ,IF_RCFA_REPORT_DATE
      ,IF_MOC_IND
      ,IF_FCFA_LOCATION
      ,IF_MOC_DATE
      ,IF_MOC_REMARK
      ,IF_LINK_MOC_RECORD
      ,IF_MOC_EXPIRY_DATE
      ,ENTITY_ID
      ,WELL_NAME
      ,WB.ROW_CREATED_DATE
      ,WB.ROW_CREATED_BY
      ,WB.ROW_CHANGED_DATE
      ,WB.ROW_CHANGED_BY
      ,WB.ACTIVE_IND
      ,WB.SOURCE_NAME
      ,WB.WBE_IF_ID
      ,DAH.LEVEL1_ID
      ,DAH.LEVEL1_NAME
      ,DAH.LEVEL1_TYPE
      ,DAH.LEVEL2_ID
      ,DAH.LEVEL2_NAME
      ,DAH.LEVEL2_TYPE
      ,DAH.LEVEL3_ID
      ,DAH.LEVEL3_NAME
      ,DAH.LEVEL3_TYPE
      ,DAH.LEVEL4_ID
      ,DAH.LEVEL4_NAME
      ,DAH.LEVEL4_TYPE
      ,DAH.LEVEL5_ID
      ,DAH.LEVEL5_NAME
      ,DAH.LEVEL5_TYPE
      ,DAH.LEVEL6_ID
      ,DAH.LEVEL6_NAME
      ,DAH.LEVEL6_TYPE
  FROM  DSWIMDATASRC.VW_WBE_IMPAIR_FAILURE WB
  INNER JOIN DSWIMDATASRC.DIMASSETHIERARCHY DAH ON WB.LEVEL6_ID = DAH.LEVEL6_ID;
  
    
 CREATE VIRTUAL PROCEDURE SP_GETKPIVALUE(AGREEGATETYPE string,OBJECT_ID STRING) RETURNS(STATUS STRING)
  AS
  BEGIN
    DECLARE STRING RETJSON='';
	 DECLARE INTEGER FLAG=0;
	 DECLARE INTEGER KPIFLAG=0;
	  IF(AGREEGATETYPE='LEVEL5_ID')
	   begin
	       IF(EXISTS(SELECT 1   FROM DSWIMDATASRC.VW_ASSET_WI_KPI_STATISTICS WHERE LEVEL5_ID=OBJECT_ID AND KPI_DATE BETWEEN CAST( Timestampadd(SQL_TSI_MONTH ,-6,NOW())AS DATE) AND NOW()) )
		   BEGIN
		     RETJSON =CONCAT2(RETJSON,'[');
			LOOP ON (SELECT  KPI FROM DSWIMDATASRC.VW_ASSET_WI_KPI_STATISTICS WHERE LEVEL5_ID=OBJECT_ID AND KPI_DATE BETWEEN CAST( Timestampadd(SQL_TSI_MONTH ,-6,NOW())AS DATE) AND NOW() GROUP BY KPI) AS KPIDATA
			BEGIN
			  IF(FLAG <>0)
				 begin
				   RETJSON=CONCAT2(RETJSON,',');
				 end
				RETJSON= CONCAT2(CONCAT2(CONCAT2( CONCAT2(RETJSON,'{'),'"KPINAME":"'),KPIDATA.KPI),'"');
			    FLAG=FLAG+1;
			LOOP ON(SELECT  concat2(substr(monthname(KPI_DATE),1,3),cast( MOD(year(KPI_DATE),100) as string ))  KPI_DATE,KPI_VALUE FROM DSWIMDATASRC.VW_ASSET_WI_KPI_STATISTICS 
			        WHERE LEVEL5_ID=OBJECT_ID AND KPI=KPIDATA.KPI AND KPI_DATE BETWEEN CAST( Timestampadd(SQL_TSI_MONTH ,-6,NOW())AS DATE) AND NOW() ) AS JDATA
			begin 
                 RETJSON=CONCAT2(RETJSON,',');
 				RETJSON= CONCAT2(CONCAT2( CONCAT2(CONCAT2(RETJSON,'"'),JDATA.KPI_DATE),'":'),JDATA.KPI_VALUE);
			end 
			RETJSON=CONCAT2(RETJSON,'}');
			END
			 RETJSON =CONCAT2(RETJSON,']');
		  END
	   end 
	   IF(AGREEGATETYPE='LEVEL6_ID')
	   begin
	       IF(EXISTS(SELECT 1   FROM DSWIMDATASRC.VW_ASSET_WI_KPI_STATISTICS WHERE LEVEL6_ID=OBJECT_ID AND KPI_DATE BETWEEN CAST( Timestampadd(SQL_TSI_MONTH ,-6,NOW())AS DATE) AND NOW()))
		   BEGIN
		     RETJSON =CONCAT2(RETJSON,'[');
			LOOP ON (SELECT  KPI FROM DSWIMDATASRC.VW_ASSET_WI_KPI_STATISTICS WHERE LEVEL6_ID=OBJECT_ID AND KPI_DATE BETWEEN CAST( Timestampadd(SQL_TSI_MONTH ,-6,NOW())AS DATE) AND NOW() GROUP BY KPI) AS KPIDATA
			BEGIN
			  IF(FLAG <>0)
				 begin
				   RETJSON=CONCAT2(RETJSON,',');
				 end
				RETJSON= CONCAT2(CONCAT2(CONCAT2( CONCAT2(RETJSON,'{'),'"KPINAME":"'),KPIDATA.KPI),'"');
			    FLAG=FLAG+1;
			LOOP ON(SELECT  concat2(substr(monthname(KPI_DATE),1,3),cast( MOD(year(KPI_DATE),100) as string ))  KPI_DATE,KPI_VALUE 
			       FROM DSWIMDATASRC.VW_ASSET_WI_KPI_STATISTICS WHERE LEVEL6_ID=OBJECT_ID AND KPI=KPIDATA.KPI AND KPI_DATE
				    BETWEEN CAST( Timestampadd(SQL_TSI_MONTH ,-6,NOW())AS DATE) AND NOW()) AS JDATA
			begin 
                  RETJSON=CONCAT2(RETJSON,',');
 				RETJSON= CONCAT2(CONCAT2( CONCAT2(CONCAT2(RETJSON,'"'),JDATA.KPI_DATE),'":'),JDATA.KPI_VALUE);
			end 
			RETJSON=CONCAT2(RETJSON,'}');
			END
			 RETJSON =CONCAT2(RETJSON,']');
		  END
	   end  
	    IF(AGREEGATETYPE='ENTITY_ID')
	   begin
	       IF(EXISTS(SELECT 1 FROM  DSWIMDATASRC.VW_WI_KPI_STATISTICS WHERE ENTITY_ID=OBJECT_ID AND KPI_DATE BETWEEN CAST( Timestampadd(SQL_TSI_MONTH ,-6,NOW())AS DATE) AND NOW()))
		   BEGIN
		     RETJSON =CONCAT2(RETJSON,'[');
			LOOP ON (SELECT  KPI FROM DSWIMDATASRC.VW_WI_KPI_STATISTICS WHERE ENTITY_ID=OBJECT_ID AND KPI_DATE BETWEEN CAST( Timestampadd(SQL_TSI_MONTH ,-6,NOW())AS DATE) AND NOW() GROUP BY KPI) AS KPIDATA
			BEGIN
			  IF(FLAG <>0)
				 begin
				   RETJSON=CONCAT2(RETJSON,',');
				 end
				RETJSON= CONCAT2(CONCAT2(CONCAT2( CONCAT2(RETJSON,'{'),'"KPINAME":"'),KPIDATA.KPI),'"');
			    FLAG=FLAG+1;
				
			LOOP ON(SELECT  concat2(substr(monthname(KPI_DATE),1,3),cast( MOD(year(KPI_DATE),100) as string ))  KPI_DATE,KPI_VALUE
			       FROM DSWIMDATASRC.VW_WI_KPI_STATISTICS WHERE ENTITY_ID=OBJECT_ID AND KPI=KPIDATA.KPI AND KPI_DATE BETWEEN CAST( Timestampadd(SQL_TSI_MONTH ,-6,NOW())AS DATE) AND NOW()) AS JDATA
			begin 
			    
				   RETJSON=CONCAT2(RETJSON,',');
				 
				
 				RETJSON= CONCAT2(CONCAT2( CONCAT2(CONCAT2(RETJSON,'"'),JDATA.KPI_DATE),'":'),JDATA.KPI_VALUE);
			end 
			RETJSON=CONCAT2(RETJSON,'}');
			END
			 RETJSON =CONCAT2(RETJSON,']');
		  END
	   end
	   IF(RETJSON='')
	   begin
		 SELECT '[{"KPINAME":'',"SEP20":0}]';
	   end
	   ELSE
	     SELECT RETJSON;
		 /*select  '[{"KPINAME":"Deviation","Mar20":20},{"KPINAME":"Open Anomalies","Jan20":20,"Mar20":20,"Apr20":20},{"KPINAME":"Overdue","Dec19":20,"Jan20":20}]';*/
 END;
CREATE VIRTUAL PROCEDURE SP_GETREGULATORY_DEPARTURE(AGREEGATETYPE STRING,OBJECT_ID STRING) RETURNS TABLE(LEAD_TIME INTEGER,APPROVAL_DATE timestamp,EXPIRY_DATE timestamp)
AS
begin
  IF(AGREEGATETYPE='LEVEL5_ID')
  begin
	SELECT LEAD_TIME,APPROVAL_DATE,EXPIRY_DATE FROM DSWIMDATA.REGULATORY_DEPARTURE WHERE LEVEL5_ID=OBJECT_ID;
  end
  ELSE IF (AGREEGATETYPE='LEVEL6_ID')
  begin
	SELECT LEAD_TIME,APPROVAL_DATE,EXPIRY_DATE FROM DSWIMDATA.REGULATORY_DEPARTURE WHERE LEVEL6_ID=OBJECT_ID;
  end
   ELSE IF (AGREEGATETYPE='ENTITY_ID')
  begin
	SELECT LEAD_TIME,APPROVAL_DATE,EXPIRY_DATE FROM DSWIMDATA.REGULATORY_DEPARTURE WHERE ENTITY_ID=OBJECT_ID;
  end
   --SELECT 5 AS LEAD_TIME
end;
CREATE VIRTUAL PROCEDURE SP_GETWBE_IMPAIR_FAILURE(AGREEGATETYPE STRING,OBJECT_ID STRING) RETURNS TABLE(IF_TYPE STRING,IF_EQUIP_TYPE STRING)
AS
begin
  IF(AGREEGATETYPE='LEVEL5_ID')
  begin
	SELECT IF_TYPE,IF_EQUIP_TYPE FROM DSWIMDATA.WBE_IMPAIR_FAILURE WHERE LEVEL5_ID=OBJECT_ID;
  end
  ELSE IF (AGREEGATETYPE='LEVEL6_ID')
  begin
	SELECT IF_TYPE,IF_EQUIP_TYPE FROM DSWIMDATA.WBE_IMPAIR_FAILURE WHERE LEVEL6_ID=OBJECT_ID;
  end
   ELSE IF (AGREEGATETYPE='ENTITY_ID')
  begin
	SELECT IF_TYPE,IF_EQUIP_TYPE FROM DSWIMDATA.WBE_IMPAIR_FAILURE WHERE ENTITY_ID=OBJECT_ID;
  end
   --SELECT 5 AS LEAD_TIME
end;
CREATE VIEW BARRIE_HISTORY_MAXTYPE
(
	ID STRING(50)
	,LEVEL5_ID STRING(50)
	,LEVEL5_NAME STRING(50)
	,LEVEL6_ID STRING(50)
	,LEVEL6_NAME STRING(50)
    ,ENTITY_ID STRING(50)
	,ENTITY_NAME STRING(50)
	,BE_TEST_TYPE STRING(50)
	,BE_RESET_FREQ_STATUS STRING(50)
	,DAYS LONG
	,NEXTDAYS LONG
	,CONSTRAINT PK_BARRIE_HISTORY_MAXTYPE PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE', BARRIE_HISTORY_MAXTYPE.IMPLEMENTED 'TRUE')
AS
 (
SELECT
ID
,T.LEVEL5_ID
,T.LEVEL5_NAME
,T.LEVEL6_ID
,T.LEVEL6_NAME
,T.ENTITY_ID
,T.ENTITY_NAME
,T.BE_TEST_TYPE
,T.BE_RESET_FREQ_STATUS
,Timestampdiff(SQL_TSI_DAY,NOW(),T2.BE_TEST_DATE)  DAYS
,Timestampdiff(SQL_TSI_DAY,NOW(),T.MAXDATE) NEXTDAYS
FROM
(
SELECT 
 UUID() ID
,LEVEL5_ID
,LEVEL5_NAME
,LEVEL6_ID
,LEVEL6_NAME
,ENTITY_ID
,ENTITY_NAME
,BE_TEST_TYPE
,BE_RESET_FREQ_STATUS
,  MAX(BE_NEXT_TEST_DATE) MAXDATE  FROM DSWIMDATA.BARRIER_ENV_TEST_HISTORY
GROUP BY LEVEL5_ID,LEVEL5_NAME,LEVEL6_ID,LEVEL6_NAME,ENTITY_ID,ENTITY_NAME, BE_TEST_TYPE,BE_RESET_FREQ_STATUS
) T
INNER JOIN DSWIMDATA.BARRIER_ENV_TEST_HISTORY T2
ON T2.LEVEL5_ID=T.LEVEL5_ID AND T2.LEVEL6_ID=T.LEVEL6_ID
AND T2.ENTITY_ID=T.ENTITY_ID
AND T2.BE_TEST_TYPE=T.BE_TEST_TYPE
AND T2.BE_NEXT_TEST_DATE=T.MAXDATE);
CREATE VIEW BARRIER_EQUIP_INVENTORY(
BARRIER_EQUIP_ID string(50)
,BARRIER_ENVELOPE string(100)
,ROW_CREATED_BY string(100)
,ACTIVE_IND string(100)
,ENTITY_ID string(50)
 ,CONSTRAINT BARRIER_EQUIP_INVENTORY_pkey PRIMARY KEY (BARRIER_EQUIP_ID)) OPTIONS (UPDATABLE 'TRUE',BARRIER_EQUIP_INVENTORY.IMPLEMENTED 'TRUE') 
AS(
SELECT 
BARRIER_EQUIP_ID  
,BARRIER_ENVELOPE
,ROW_CREATED_BY 
,ACTIVE_IND 
,ENTITY_ID  
FROM DSWIMDATASRC.BARRIER_EQUIP_INVENTORY
);

CREATE VIRTUAL PROCEDURE SP_DELETEBARRIER_EQUIP_INVENTORY(BARRIER_EQUIP_ID string(50)) RETURNS (STATUS STRING)
  AS
  BEGIN
    DELETE FROM   DSWIMDATASRC.BARRIER_EQUIP_INVENTORY WHERE BARRIER_EQUIP_ID=SP_DELETEBARRIER_EQUIP_INVENTORY.BARRIER_EQUIP_ID;
    SELECT 'SUCCESS';
 END;
 CREATE VIRTUAL PROCEDURE SP_APENDUPDATBARRIER_EQUIP_INVENTORY (
BARRIER_EQUIP_ID string(50)
,BARRIER_ENVELOPE string(100)
,USERNAME string(100)
,ACTIVE_IND string(100)
,ENTITY_ID string(50)) RETURNS (STATUS STRING) 
AS
BEGIN
DECLARE TIMESTAMP NOWTIME = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
IF( EXISTS(SELECT 1 FROM DSWIMDATASRC.BARRIER_EQUIP_INVENTORY WHERE BARRIER_EQUIP_ID=SP_APENDUPDATBARRIER_EQUIP_INVENTORY.BARRIER_EQUIP_ID ))
    BEGIN
    UPDATE DSWIMDATASRC.BARRIER_EQUIP_INVENTORY
    SET 
    BARRIER_ENVELOPE=SP_APENDUPDATBARRIER_EQUIP_INVENTORY.BARRIER_ENVELOPE
    ,ROW_CHANGED_BY=SP_APENDUPDATBARRIER_EQUIP_INVENTORY.USERNAME
    ,ACTIVE_IND=SP_APENDUPDATBARRIER_EQUIP_INVENTORY.ACTIVE_IND
    ,ENTITY_ID=SP_APENDUPDATBARRIER_EQUIP_INVENTORY.ENTITY_ID
    ,ROW_CHANGED_DATE=NOWTIME
     WHERE BARRIER_EQUIP_ID= SP_APENDUPDATBARRIER_EQUIP_INVENTORY.BARRIER_EQUIP_ID;
    END
    ELSE
    BEGIN
    INSERT INTO DSWIMDATASRC.BARRIER_EQUIP_INVENTORY(BARRIER_EQUIP_ID,BARRIER_ENVELOPE,ROW_CREATED_BY,ACTIVE_IND,ENTITY_ID,ROW_CREATED_DATE)
    SELECT
      SP_APENDUPDATBARRIER_EQUIP_INVENTORY.BARRIER_EQUIP_ID
     ,SP_APENDUPDATBARRIER_EQUIP_INVENTORY.BARRIER_ENVELOPE
    ,SP_APENDUPDATBARRIER_EQUIP_INVENTORY.USERNAME
    ,SP_APENDUPDATBARRIER_EQUIP_INVENTORY.ACTIVE_IND
    ,SP_APENDUPDATBARRIER_EQUIP_INVENTORY.ENTITY_ID
    ,NOWTIME
	;
    END
    SELECT 'sucess';
END;
CREATE VIEW RISK_RANK_DETAILS(
SEVERITY string(40) NOT NULL,
LIKELIHOOD	string(40) NOT NULL,
RISK_RANK	bigdecimal(15,4) NOT NULL,
RISK_RANK_COLOR	string(100),
SEVERITY_TYPE_ID string(40),
SEVERITY_TYPE string(100),
ENTITY_ID	string(40),
ENTITY_NAME	string(255),
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string(100),
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY	string(100),
ACTIVE_IND	string(1),
SOURCE_NAME	string(100),
REMARK	string(2000),
RISK_RANK_ID	string(40)NOT NULL,
CONSTRAINT PK_RISK_DETAILS PRIMARY KEY (RISK_RANK_ID)
) OPTIONS(UPDATABLE 'FALSE',RISK_RANK_DETAILS.IMPLEMENTED 'TRUE') 
AS
	SELECT
	PM.Y_VALUE SEVERITY,PM.X_VALUE AS LIKELIHOOD,PM.WEIGHTAGE_FACTOR AS RISK_RANK,null AS RISK_RANK_COLOR,
	PM.SEVERITY_TYPE, P.R_PRIORITY,	W.WELL_ID AS ENTITY_ID,
	W.WELL_NAME AS ENTITY_NAME,PM.ROW_CREATED_DATE AS ROW_CREATED_DATE,PM.ROW_CREATED_BY AS ROW_CREATED_BY,
	PM.ROW_CHANGED_DATE AS ROW_CHANGED_DATE,PM.ROW_CHANGED_BY AS ROW_CHANGED_BY,PM.ACTIVE_IND AS ACTIVE_IND,RS.SOURCE_NAME AS SOURCE_NAME,
	PM.REMARK REMARK,UUID() AS RISK_RANK_ID
	FROM DSWIMDATASRC.PROCESS_MATRIX PM
	LEFT OUTER JOIN DSWIMDATASRC.R_PRIORITY P ON PM.SEVERITY_TYPE = P.R_PRIORITY_ID
	LEFT OUTER JOIN DSWIMDATASRC.R_SOURCE RS ON PM.SOURCE_ID = RS.SOURCE_ID 
	INNER JOIN  DSWIMDATASRC.WELL W ON W.WELL_ID=PM.ENTITY_ID
;
CREATE VIEW RISK_RANK_AUDIT(
	SEVERITY string(40)NOT NULL,
	LIKELIHOOD	string(40)NOT NULL,
	RISK_RANK	bigdecimal(15,4)	NOT NULL,
	RISK_RANK_COLOR	string(100),
	SEVERITY_TYPE_ID string(40),
	SEVERITY_TYPE string(100),
	ENTITY_ID	string(40),
	ENTITY_NAME	string(255),
	ROW_CREATED_DATE	timestamp,
	ROW_CREATED_BY	string(100),
	ROW_CHANGED_DATE	timestamp,
	ROW_CHANGED_BY	string(100),
	ACTIVE_IND	string(1),
	SOURCE_NAME	string(100),
	REMARK	string(2000),
	RISK_RANK_AUDIT_ID	string(40)NOT NULL,
CONSTRAINT PK_RISK_AUDIT PRIMARY KEY (RISK_RANK_AUDIT_ID)
) OPTIONS(UPDATABLE 'FALSE',RISK_RANK_DETAILS.IMPLEMENTED 'TRUE') 
AS
	SELECT
	PMA.Y_VALUE,PMA.X_VALUE,PMA.WEIGHTAGE_FACTOR,null,
	PMA.SEVERITY_TYPE, PMA.SEVERITY_TYPE,
	PMA.ENTITY_ID,W.WELL_NAME,PMA.ROW_CREATED_DATE,PMA.ROW_CREATED_BY,PMA.ROW_CHANGED_DATE,
	PMA.ROW_CHANGED_BY,PMA.ACTIVE_IND,RS.SOURCE_NAME,PMA.REMARK,UUID() AS RISK_RANK_AUDIT_ID
	FROM DSWIMDATASRC.PROCESS_MATRIX_AUDIT PMA
	LEFT OUTER JOIN DSWIMDATASRC.R_SOURCE RS ON PMA.SOURCE_ID = RS.SOURCE_ID 
	INNER JOIN  DSWIMDATASRC.WELL W ON W.WELL_ID = PMA.ENTITY_ID;
CREATE VIEW RISK_MATRIX(
SEVERITY string(40) NOT NULL,
LIKELIHOOD	string(40) NOT NULL,
RISK_RANK	bigdecimal(15,4) NOT NULL,
RISK_RANK_COLOR	string(100),
FREQUENCY	bigdecimal(15,4),
PROBABILITY	bigdecimal(15,4),
SEVERITY_TYPE_ID string(40),
SEVERITY_TYPE string(100),
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY	string(100),
ROW_CHANGED_DATE timestamp,
ROW_CHANGED_BY	string(100),
ACTIVE_IND	string(1),
SOURCE_NAME	string(100),
REMARK	string(2000),
RISK_MATRIX_ID	string(40) NOT NULL,
CONSTRAINT PK_RISK_MATRIX PRIMARY KEY (RISK_MATRIX_ID))
OPTIONS(UPDATABLE 'FALSE',RISK_MATRIX.IMPLEMENTED 'TRUE') 
AS
	SELECT
	PM.Y_VALUE AS SEVERITY ,PM.X_VALUE AS LIKELIHOOD,PM.WEIGHTAGE_FACTOR AS RISK_RANK,null AS RISK_RANK_COLOR,
	PM.PROCESS_DIMENSION_Y AS FREQUENCY,  PM.PROCESS_DIMENSION_X AS PROBABILITY, PM.SEVERITY_TYPE AS SEVERITY_TYPE_ID, P.R_PRIORITY AS SEVERITY_TYPE,
	PM.ROW_CREATED_DATE AS ROW_CREATED_DATE,PM.ROW_CREATED_BY ROW_CREATED_BY,PM.ROW_CHANGED_DATE ROW_CHANGED_DATE,
	PM.ROW_CHANGED_BY ROW_CHANGED_BY,PM.ACTIVE_IND ACTIVE_IND,RS.SOURCE_NAME SOURCE_NAME,PM.REMARK REMARK,PM.PROCESS_MATRIX_ID AS RISK_MATRIX_ID
	FROM DSWIMDATASRC.PROCESS_MATRIX PM
	LEFT OUTER JOIN DSWIMDATASRC.R_PRIORITY P ON PM.SEVERITY_TYPE = P.R_PRIORITY_ID
	LEFT OUTER JOIN DSWIMDATASRC.R_SOURCE RS ON PM.SOURCE_ID = RS.SOURCE_ID 
	WHERE PM.ENTITY_ID IS NULL;
CREATE VIEW DEVIATION(
DEVIATION_TYPE   string(100)    NOT NULL,
DEVIATION_TYPE_ID   string(40)    ,
DEV_COMMN_TYPE   string(100)    NOT NULL,
DEV_COMMN_TYPE_ID   string(40)    ,
DEV_START_DATE   timestamp    ,
DEV_END_DATE   timestamp    ,
DEV_NUM_DAYS   integer    ,
DEV_REMARK   string(2000)    NOT NULL,
EXCL_MISS_ANN_REP_IND   string(10)    ,
DEV_EQUIP_ID string(40),
DEV_EQUIP_NAME string(100),
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(10)    ,
SOURCE_NAME   string(100)    ,
DEVIATION_ID   string(40)    NOT NULL,
	LEVEL1_ID	string(40)	,
	LEVEL1_NAME	string(255)	,
	LEVEL1_TYPE	string(100)	,
	LEVEL2_ID	string(40)	,
	LEVEL2_NAME	string(255)	,
	LEVEL2_TYPE	string(100)	,
	LEVEL3_ID	string(40)	,
	LEVEL3_NAME	string(255)	,
	LEVEL3_TYPE	string(100)	,
	LEVEL4_ID	string(40)	,
	LEVEL4_NAME	string(255)	,
	LEVEL4_TYPE	string(100)	,
	LEVEL5_ID	string(40)	,
	LEVEL5_NAME	string(255)	,
	LEVEL5_TYPE	string(100)	,
	LEVEL6_ID	string(40)	,
	LEVEL6_NAME	string(255)	NOT NULL,
	LEVEL6_TYPE	string(100)	,
CONSTRAINT pk_DEVIATION   PRIMARY KEY(DEVIATION_ID))   
OPTIONS(UPDATABLE 'FALSE',DEVIATION.IMPLEMENTED 'TRUE') 
AS
SELECT
DEVIATION_TYPE ,
DEVIATION_TYPE_ID,
DEV_COMMN_TYPE,
DEV_COMMN_TYPE_ID,
DEV_START_DAT,
DEV_END_DATE,
DEV_NUM_DAYS,
DEV_REMARK,
EXCL_MISS_ANN_REP_IND,
DEV_EQUIP_ID,
DEV_EQUIP_NAME,
ENTITY_ID ,
ENTITY_NAME,
ROW_CREATED_DATE,
ROW_CREATED_BY ,
ROW_CHANGED_DATE,
ROW_CHANGED_BY ,
ACTIVE_IND  ,
SOURCE_NAME   ,
DEVIATION_ID,
LEVEL1_ID,
LEVEL1_NAME,
LEVEL1_TYPE,
LEVEL2_ID,
LEVEL2_NAME,
LEVEL2_TYPE,
LEVEL3_ID,
LEVEL3_NAME,
LEVEL3_TYPE,
LEVEL4_ID,
LEVEL4_NAME,
LEVEL4_TYPE,
LEVEL5_ID,
LEVEL5_NAME,
LEVEL5_TYPE,
LEVEL6_ID,
LEVEL6_NAME	,
LEVEL6_TYPE
FROM VW_DEVIATION;
CREATE VIEW DEV_COMMUNICATION_TYPE(
DEV_COMMN_TYPE_ID string(40) NOT NULL,
DEV_COMMN_TYPE string(100) NOT NULL,
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
ACTIVE_IND string(10),
REMARK string(2000),
SOURCE_NAME  string(100),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CREATED_DATE timestamp,
CONSTRAINT pk_DEV_COMMN_TYPE   PRIMARY KEY(DEV_COMMN_TYPE_ID)
)   OPTIONS(UPDATABLE 'FALSE',DEV_COMMUNICATION_TYPE.IMPLEMENTED 'TRUE') 
AS
SELECT REST_CLASS_ID
, REST_CLASS_NAME
, RRT.EFFECTIVE_DATE
,RRT.EXPIRY_DATE
,RRT.ACTIVE_IND
, RRT.REMARK
,RRT.SOURCE_NAME
, RRT.ROW_CHANGED_BY
, RRT.ROW_CHANGED_DATE
, RRT.ROW_CREATED_BY
, RRT.ROW_CREATED_DATE
FROM DSWIMDATASRC.REST_CLASS RRT;
CREATE VIEW R_DEVIATION_TYPE(
R_DEV_TYPE_ID string(40) NOT NULL,
DEVIATION_TYPE string(100) NOT NULL,
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
ACTIVE_IND string(10),
REMARK string(2000),
SOURCE_NAME  string(40),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CREATED_DATE timestamp,
CONSTRAINT pk_DEV_TYPE   PRIMARY KEY(R_DEV_TYPE_ID)
)   OPTIONS(UPDATABLE 'FALSE',DEVIATION_TYPE.IMPLEMENTED 'TRUE') 
AS
SELECT 
R_REST_TYPE_ID
, RESTRICTION_TYPE
,RT.EFFECTIVE_DATE
,RT.EXPIRY_DATE
,RT.ACTIVE_IND 
,RT.REMARK
,RT.SOURCE_NAME
,RT.ROW_CHANGED_BY
,RT.ROW_CHANGED_DATE
,RT.ROW_CREATED_BY
,RT.ROW_CREATED_DATE
FROM DSWIMDATASRC.R_REST_TYPE RT;
CREATE VIEW EVALUATION
(
EVAL_START_DATE   timestamp    NOT NULL,
EVAL_END_DATE   timestamp,
EVAL_REMARK   string(2000),
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp ,
ROW_CREATED_BY   string(100) ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
SOURCE_NAME   string(100)    ,
EVAL_ID   string(40)    NOT NULL,
CONSTRAINT pk_EVAL   PRIMARY KEY(EVAL_ID)
)   OPTIONS(UPDATABLE 'FALSE',EVALUATION.IMPLEMENTED 'TRUE') 
AS
SELECT 
EVAL_START_DATE
,EVAL_END_DATE,EVAL_REMARK
,ENTITY_ID
,W.WELL_NAME
,E.ROW_CREATED_DATE
, E.ROW_CREATED_BY
, E.ROW_CHANGED_DATE
, E.ROW_CHANGED_BY
, E.ACTIVE_IND
, E.SOURCE_NAME
,EVAL_ID
FROM DSWIMDATASRC.EVALUATION E
INNER JOIN DSWIMDATASRC.WELL W ON E.ENTITY_ID = W.WELL_ID;
CREATE VIEW R_ANOMALY_TYPE
(
 ANOMALY_TYPE string(100) NOT NULL,
 REMARK	string(2000),
 SOURCE_NAME string(100),
 ANOMALY_TYPE_ID string(40) NOT NULL,
 ACTIVE_IND string(1),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp	,
 CONSTRAINT PK_ANOMALY_TYPE PRIMARY KEY (ANOMALY_TYPE_ID))
OPTIONS (UPDATABLE 'FALSE', R_ANOMALY_TYPE.IMPLEMENTED 'TRUE')
AS
(
	SELECT R_ANOMALY_TYPE, REMARK, SOURCE_NAME, R_ANOMALY_TYPE_ID, ACTIVE_IND, ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_BY,
	ROW_CREATED_DATE FROM DSWIMDATASRC.R_ANOMALY_TYPE
);

CREATE VIEW R_ANOMALY_CONCLUSION
(
 ANOMALY_CONCLUSION string(100) NOT NULL,
 REMARK	string(2000),
 SOURCE_NAME string(100),
 ANOMALY_CONCLUSION_ID string(40) NOT NULL,
 ACTIVE_IND string(1),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp	,
 CONSTRAINT PK_ANOMALY_CONCLUSION PRIMARY KEY (ANOMALY_CONCLUSION_ID))
OPTIONS (UPDATABLE 'FALSE', R_ANOMALY_CONCLUSION.IMPLEMENTED 'TRUE')
AS
(
	SELECT R_ANOMALY_CONCLUSION, REMARK, SOURCE_NAME, R_ANOMALY_CONC_ID, ACTIVE_IND, ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_BY,
	ROW_CREATED_DATE FROM DSWIMDATASRC.R_ANOMALY_CONCLUSION
);
CREATE VIEW R_SEVERITY_OR_PRIORITY
(
 SEVERITY_OR_PRIORITY string(100) NOT NULL,
 SEV_OR_PRIOR_NUM_VALUE INTEGER,
 SEV_OR_PRIOR_TYPE string (100),
 REMARK	string(2000),
 SOURCE_NAME string(100),
 SEV_OR_PRIOR_ID string(40) NOT NULL,
 ACTIVE_IND string(1),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp	,
 CONSTRAINT PK_SEV_OR_PRIOR PRIMARY KEY (SEV_OR_PRIOR_ID))
OPTIONS (UPDATABLE 'FALSE', R_SEVERITY_OR_PRIORITY.IMPLEMENTED 'TRUE')
AS
(
	SELECT R_PRIORITY, cast(R_PRIORITY_NUM_VALUE AS INTEGER), NULL, REMARK, SOURCE_NAME, R_PRIORITY_ID, ACTIVE_IND, ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_BY,
	ROW_CREATED_DATE FROM DSWIMDATASRC.R_PRIORITY
);

