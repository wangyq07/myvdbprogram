
CREATE VIEW DS_CONFIG(
ID string(50) NOT NULL
,TYPE string(50)
,PACKAGE string(50)
,CONFIG_NAME string(50)
,CONFIG_VALUE string(50)
,REMARK string(200)
,CREATED_BY string(50)
,CREATED_DATE timestamp
,CHANGED_BY string(50)
,CHANGED_DATE timestamp
,CONSTRAINT DS_CONFIG_pkey PRIMARY KEY (ID)) OPTIONS (UPDATABLE 'TRUE',DS_CONFIG.IMPLEMENTED 'TRUE') 
AS(select ID,TYPE,PACKAGE,CONFIG_NAME,CONFIG_VALUE,REMARK,CREATED_BY,CREATED_DATE,CHANGED_BY,CHANGED_DATE
  from DSPDM_CAIRN_PHYSICAL.DS_CONFIGURATION );

CREATE VIEW WELL_MASTER(
WELL_ID integer NOT NULL
,WELL_NAME string(50)
,Field string(100) NOT NULL
,FieldShortName string(20)
,FieldId integer NOT NULL
,PRODUCTION_METHOD_ABB string(20) NOT NULL
,R_PRODUCTION_METHOD_ID integer NOT NULL
,WELL_TYPE string(50)
,CONSTRAINT WELL_MASTER_pkey PRIMARY KEY (WELL_ID)) OPTIONS (UPDATABLE 'FALSE',WELL_MASTER.IMPLEMENTED 'TRUE') 
AS(select WELL_ID,WELL_NAME,Field,FieldShortName,FieldId,PRODUCTION_METHOD_ABB,R_PRODUCTION_METHOD_ID,WELL_TYPE
  from DSPDM_CAIRN_PHYSICAL.VW_WELL_INFO );
  

  CREATE VIEW EVENT_TYPE(
R_EVENT_TYPE_ID integer NOT NULL
,EVENT_TYPE string(50)NOT NULL
,CONSTRAINT EVENT_TYPE_pkey PRIMARY KEY (R_EVENT_TYPE_ID)) OPTIONS (UPDATABLE 'FALSE',EVENT_TYPE.IMPLEMENTED 'TRUE') 
AS(select R_EVENT_TYPE_ID,EVENT_TYPE
  from DSPDM_CAIRN_PHYSICAL.R_EVENT_TYPE );
  
  
  CREATE VIEW EVENT_REASON(
R_EVENT_REASON_ID integer NOT NULL
,EVENT_REASON string(50) NOT NULL
,CONSTRAINT EVENT_REASON_pkey PRIMARY KEY (R_EVENT_REASON_ID)) OPTIONS (UPDATABLE 'FALSE',EVENT_REASON.IMPLEMENTED 'TRUE') 
AS(select R_EVENT_REASON_ID,EVENT_REASON
  from DSPDM_CAIRN_PHYSICAL.R_EVENT_REASON );
  
    CREATE VIEW EVENT_COMPONENT(
R_EVENT_COMPONENT_ID integer NOT NULL
,EVENT_COMPONENT string(50) NOT NULL
,CONSTRAINT EVENT_COMPONENT_pkey PRIMARY KEY (R_EVENT_COMPONENT_ID)) OPTIONS (UPDATABLE 'FALSE',EVENT_COMPONENT.IMPLEMENTED 'TRUE') 
AS(select R_EVENT_COMPONENT_ID,EVENT_COMPONENT
  from DSPDM_CAIRN_PHYSICAL.R_EVENT_COMPONENT );
  
  
  CREATE VIEW PUMP_TYPE(
EQUIPMENT_ID integer NOT NULL
,EQUIPMENT_NAME string(50) NOT NULL
,CONSTRAINT PUMP_TYPE_pkey PRIMARY KEY (EQUIPMENT_ID)) OPTIONS (UPDATABLE 'FALSE',PUMP_TYPE.IMPLEMENTED 'TRUE') 
AS(select EQUIPMENT_ID,EQUIPMENT_NAME
  from DSPDM_CAIRN_PHYSICAL.EQUIPMENT );
  
  
  
CREATE VIEW PUMP_NAME(
EQUIPMENT_ID integer NOT NULL
,EQUIPMENT_NAME string(50) 
,MANUFACTURER string(50) 
,EQUIPMENT_TYPE_ID integer
,EQUIPMENT_TYPE string(50) 
,CONSTRAINT PUMP_NAME_pkey PRIMARY KEY (EQUIPMENT_ID)) OPTIONS (UPDATABLE 'FALSE',PUMP_NAME.IMPLEMENTED 'TRUE') 
AS(SELECT EQUIPMENT_ID
      ,EQUIPMENT_NAME
      ,MAN.MANUFACTURER
	  ,Re.R_EQUIPMENT_TYPE_ID
	  ,RE.EQUIPMENT_TYPE
  FROM DSPDM_CAIRN_PHYSICAL.EQUIPMENT E
  left join DSPDM_CAIRN_PHYSICAL.R_MANUFACTURER MAN on E.R_MANUFACTURER_ID=MAN.R_MANUFACTURER_ID
  left join DSPDM_CAIRN_PHYSICAL.R_EQUIPMENT_TYPE RE on E.R_EQUIPMENT_TYPE_ID = RE.R_EQUIPMENT_TYPE_ID );
  
  
  CREATE VIEW WELL_EQUIPMENT(
WELL_EQUIPMENT_ID integer NOT NULL,
WELL_ID integer,
EQUIPMENT_ID integer 
,EQUIPMENT_NAME string(100)
,MANUFACTURER string(100)
,CONSTRAINT WELL_EQUIPMENT_pkey PRIMARY KEY (WELL_EQUIPMENT_ID)) OPTIONS (UPDATABLE 'FALSE',WELL_EQUIPMENT.IMPLEMENTED 'TRUE') 
AS(SELECT A.WELL_EQUIPMENT_ID
      ,A.WELL_ID
      ,A.EQUIPMENT_ID
	  ,EE.EQUIPMENT_NAME,EE.MANUFACTURER
  FROM DSPDM_CAIRN_PHYSICAL.WELL_EQUIPMENT A
  left join (SELECT EQUIPMENT_ID
      ,EQUIPMENT_NAME
      ,MAN.MANUFACTURER
  FROM DSPDM_CAIRN_PHYSICAL.EQUIPMENT E
  left join DSPDM_CAIRN_PHYSICAL.R_MANUFACTURER MAN on E.R_MANUFACTURER_ID=MAN.R_MANUFACTURER_ID) EE on A.EQUIPMENT_ID =EE.EQUIPMENT_ID );
  
   CREATE VIEW PRODUCTION_METHOD(
PRODUCTION_METHOD_ID integer NOT NULL
,PRODUCTION_METHOD string(50)
,PRODUCTION_METHOD_ABB string(50)
,CONSTRAINT PRODUCTION_METHOD_pkey PRIMARY KEY (PRODUCTION_METHOD_ID)) OPTIONS (UPDATABLE 'FALSE',PRODUCTION_METHOD.IMPLEMENTED 'TRUE') 
AS(select R_PRODUCTION_METHOD_ID,PRODUCTION_METHOD,ABBREVIATION
  from DSPDM_CAIRN_PHYSICAL.R_PRODUCTION_METHOD );

    CREATE VIEW EQUIPMENT_TYPE(
R_EQUIPMENT_TYPE_ID integer NOT NULL
,ABBREVIATION string(50) NOT NULL
,EQUIPMENT_TYPE string(50)
,CONSTRAINT EVENT_COMPONENT_pkey PRIMARY KEY (R_EQUIPMENT_TYPE_ID)) OPTIONS (UPDATABLE 'FALSE',EQUIPMENT_TYPE.IMPLEMENTED 'TRUE') 
AS(select R_EQUIPMENT_TYPE_ID,ABBREVIATION,EQUIPMENT_TYPE
  from DSPDM_CAIRN_PHYSICAL.R_EQUIPMENT_TYPE );

CREATE VIEW ARTIFICIAL_LIFT_WELL_EVENT(
ARTIFICIAL_LIFT_EVENT_ID long NOT NULL,
WELL_ID integer ,
EVENT_DATE timestamp,
R_EVENT_TYPE_ID integer,
EQUIPMENT_ID integer,
R_EVENT_REASON_ID integer,
R_EVENT_COMPONENT_ID string(150),
REMARK string(1000),
ACTION  string(150),
ROW_CHANGED_BY string(50),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(50),
ROW_CREATED_DATE timestamp
,CONSTRAINT ARTIFICIAL_LIFT_WELL_EVENT_pkey PRIMARY KEY (ARTIFICIAL_LIFT_EVENT_ID)) OPTIONS (UPDATABLE 'TRUE',ARTIFICIAL_LIFT_WELL_EVENT.IMPLEMENTED 'TRUE') 
AS(select ARTIFICIAL_LIFT_EVENT_ID,WELL_ID  ,EVENT_DATE,R_EVENT_TYPE_ID ,EQUIPMENT_ID ,R_EVENT_REASON_ID ,R_EVENT_COMPONENT_ID ,REMARK ,ACTION ,ROW_CHANGED_BY,ROW_CHANGED_DATE,
ROW_CREATED_BY,
ROW_CREATED_DATE
  from DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT );    

CREATE VIEW ARTIFICIAL_LIFT_WELL_EVENT_ALL(
ARTIFICIAL_LIFT_EVENT_ID long NOT NULL,
WELL_ID integer ,
WELL_NAME string(50),
Field string(100),
FieldShortName string(20),
AITYPE string(20),
EVENT_DATE timestamp,
R_EVENT_TYPE_ID integer,
EVENT_TYPE string(50),
EQUIPMENT_ID integer,
EQUIPMENT_NAME string(50),
MANUFACTURER string(50),
R_EVENT_REASON_ID integer,
EVENT_REASON string(50),
R_EVENT_COMPONENT_ID string(150),
EVENT_COMPONENT string(50),
REMARK string(1000),
ACTION  string(150),
ROW_CHANGED_BY string(50),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(50),
ROW_CREATED_DATE timestamp
,CONSTRAINT ARTIFICIAL_LIFT_WELL_EVENT_pkey PRIMARY KEY (ARTIFICIAL_LIFT_EVENT_ID)) OPTIONS (UPDATABLE 'TRUE',ARTIFICIAL_LIFT_WELL_EVENT.IMPLEMENTED 'TRUE') 
AS(select 
A.ARTIFICIAL_LIFT_EVENT_ID,
A.WELL_ID,
W.WELL_NAME,
W.Field,
W.FieldShortName,
W.PRODUCTION_METHOD_ABB,
A.EVENT_DATE,
A.R_EVENT_TYPE_ID ,
E.EVENT_TYPE,
A.EQUIPMENT_ID ,
EE.EQUIPMENT_NAME,
EE.MANUFACTURER,
A.R_EVENT_REASON_ID ,
R.EVENT_REASON,
A.R_EVENT_COMPONENT_ID ,
C.EVENT_COMPONENT,
A.REMARK ,
A.ACTION ,
A.ROW_CHANGED_BY,
A.ROW_CHANGED_DATE,
A.ROW_CREATED_BY,
A.ROW_CREATED_DATE
  from DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT A
  left join DSPDM_CAIRN_PHYSICAL.VW_WELL_INFO W on A.WELL_ID=W.WELL_ID
  left join DSPDM_CAIRN_PHYSICAL.R_EVENT_TYPE E on A.R_EVENT_TYPE_ID = E.R_EVENT_TYPE_ID
  left join (SELECT EQUIPMENT_ID
      ,EQUIPMENT_NAME
      ,EQ.R_MANUFACTURER_ID
      ,R_EQUIPMENT_TYPE_ID,
	  MA.MANUFACTURER
  FROM DSPDM_CAIRN_PHYSICAL.EQUIPMENT EQ
  left join DSPDM_CAIRN_PHYSICAL.R_MANUFACTURER MA on EQ.R_MANUFACTURER_ID =MA.R_MANUFACTURER_ID) EE on A.EQUIPMENT_ID =EE.EQUIPMENT_ID
  left join DSPDM_CAIRN_PHYSICAL.R_EVENT_REASON R on A.R_EVENT_REASON_ID =R.R_EVENT_REASON_ID
  left join DSPDM_CAIRN_PHYSICAL.R_EVENT_COMPONENT C on A.R_EVENT_COMPONENT_ID =C.R_EVENT_COMPONENT_ID);   
  


 

CREATE VIRTUAL PROCEDURE SP_ADD_WELL_EVENT ( WELL_ID integer,EVENT_DATE string(50),R_EVENT_TYPE_ID integer,EQUIPMENT_ID integer,R_EVENT_REASON_ID integer,
R_EVENT_COMPONENT_ID string(150),REMARK string(1000),ACTION  string(150),ROW_CREATED_BY string(50)) 
RETURNS (STATUS STRING) 
AS
BEGIN
    DECLARE TIMESTAMP EVENT_DATE_ = PARSETIMESTAMP(EVENT_DATE,'MM/dd/yyyy HH:mm:ss');
	DECLARE TIMESTAMP NOWTIME = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	INSERT INTO DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT 
	(DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT.WELL_ID,DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT.EVENT_DATE,
	DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT.R_EVENT_TYPE_ID,DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT.EQUIPMENT_ID,
	DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT.R_EVENT_REASON_ID,DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT.R_EVENT_COMPONENT_ID,
	DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT.REMARK,DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT.ACTION,DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT.ROW_CREATED_BY,DSPDM_CAIRN_PHYSICAL.ARTIFICIAL_LIFT_WELL_EVENT.ROW_CREATED_DATE) 
	VALUES (WELL_ID,EVENT_DATE_,R_EVENT_TYPE_ID,EQUIPMENT_ID,R_EVENT_REASON_ID,R_EVENT_COMPONENT_ID,REMARK,ACTION,ROW_CREATED_BY,NOWTIME);
	select 'success';
END;
  
  
CREATE VIEW JOB_CONFIGURATION(
OilPrice string(200),
JobCost string(200),
JobPotentialTime string(200),
START_DATE timestamp not null,
END_DATE timestamp,
 ROW_CHANGED_BY string(200),
  ROW_CHANGED_DATE timestamp,
  ROW_CREATED_BY string(200),
  ROW_CREATED_DATE timestamp,
  REMARKS string(500),
  CONSTRAINT JOB_CONFIGURATION_pkey PRIMARY KEY (START_DATE)) OPTIONS (UPDATABLE 'TRUE',JOB_CONFIGURATION.IMPLEMENTED 'TRUE') 
  AS(
 select
 t2.JOB_CONFIGURATION_VALUE OilPrice
 ,t3.JOB_CONFIGURATION_VALUE JobCost
 ,t4.JOB_CONFIGURATION_VALUE JobPotentialTime
 ,t1.START_DATE
 ,t1.END_DATE
 ,t1.ROW_CHANGED_BY
 ,t1.ROW_CHANGED_DATE
 ,t1.ROW_CREATED_BY
 ,t1.ROW_CREATED_DATE
 ,t1.remark
 from
 (
 select
  START_DATE,END_DATE,ROW_CHANGED_BY,ROW_CHANGED_DATE,ROW_CREATED_BY,ROW_CREATED_DATE,remark
from DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION  where JOB_CONFIGURATION in('OilPrice','JobCost','JobPotentialTime')
group by START_DATE,END_DATE,ROW_CHANGED_BY,ROW_CHANGED_DATE,ROW_CREATED_BY,ROW_CREATED_DATE,remark
 ) t1
inner join DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION t2
on t2.START_DATE=t1.START_DATE and t2.JOB_CONFIGURATION='OilPrice'
inner join DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION t3
on t3.START_DATE=t1.START_DATE and t3.JOB_CONFIGURATION='JobCost'
inner join DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION t4
on t4.START_DATE=t1.START_DATE and t4.JOB_CONFIGURATION='JobPotentialTime');
 
CREATE VIRTUAL PROCEDURE SP_APPENDUPDATE_JOB_CONFIGURATION (
STARTDATE string(50),
ENDDATE string(50),
OILPRICE string(200),
JOBCOST string(200),
JOBPOTENTIALTIME string(200),
ROWCHANGEDBY string(200),
ROWCREATEDBY string(200),
REMARKS string(500)
) 
RETURNS (STATUS STRING) 
AS
BEGIN
DECLARE TIMESTAMP STARTDATE=PARSETIMESTAMP(STARTDATE,'MM/dd/yyyy HH:mm:ss');
DECLARE TIMESTAMP ROWCHANGEDDATE= PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
DECLARE TIMESTAMP ROWCREATEDDATE= PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
 

 IF( EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION where START_DATE=STARTDATE))
     BEGIN
        IF(ENDDATE<>'')
                BEGIN
                  DECLARE TIMESTAMP ENDDATE=PARSETIMESTAMP(ENDDATE,'MM/dd/yyyy HH:mm:ss');                   
                    UPDATE DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION
                    SET END_DATE=ENDDATE,
                    JOB_CONFIGURATION_VALUE=OILPRICE,
                    ROW_CHANGED_BY=ROWCHANGEDBY,
                    ROW_CHANGED_DATE=ROWCHANGEDDATE,
                    ROW_CREATED_BY=ROWCREATEDBY,
                    REMARK=REMARKS
                  WHERE DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION.START_DATE=STARTDATE AND DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION.JOB_CONFIGURATION='OilPrice';
                  UPDATE DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION  
                    SET END_DATE=ENDDATE,
                    JOB_CONFIGURATION_VALUE=JOBCOST,
                    ROW_CHANGED_BY=ROWCHANGEDBY,
                    ROW_CHANGED_DATE=ROWCHANGEDDATE,
                    ROW_CREATED_BY=ROWCREATEDBY,
                    REMARK=REMARKS
                  WHERE DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION.START_DATE=STARTDATE AND DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION.JOB_CONFIGURATION='JobCost';
                  UPDATE DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION
                    SET END_DATE=ENDDATE,
                    JOB_CONFIGURATION_VALUE=JOBPOTENTIALTIME,
                    ROW_CHANGED_BY=ROWCHANGEDBY,
                    ROW_CHANGED_DATE=ROWCHANGEDDATE,
                    ROW_CREATED_BY=ROWCREATEDBY,
                    REMARK=REMARKS
                  WHERE DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION.START_DATE=STARTDATE AND DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION.JOB_CONFIGURATION='JobPotentialTime';
              END
                ELSE
                    BEGIN
                    UPDATE DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION
                      SET  
                      JOB_CONFIGURATION_VALUE=OILPRICE,
                      ROW_CHANGED_BY=ROWCHANGEDBY,
                      ROW_CHANGED_DATE=ROWCHANGEDDATE,
                      ROW_CREATED_BY=ROWCREATEDBY,
                      REMARK=REMARKS
                    WHERE DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION.START_DATE=STARTDATE AND DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION.JOB_CONFIGURATION='OilPrice';
                    UPDATE DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION  
                      SET  
                      JOB_CONFIGURATION_VALUE=JOBCOST,
                      ROW_CHANGED_BY=ROWCHANGEDBY,
                      ROW_CHANGED_DATE=ROWCHANGEDDATE,
                      ROW_CREATED_BY=ROWCREATEDBY,
                      REMARK=REMARKS
                    WHERE DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION.START_DATE=STARTDATE AND DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION.JOB_CONFIGURATION='JobCost';
                    UPDATE DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION
                      SET  
                      JOB_CONFIGURATION_VALUE=JOBPOTENTIALTIME,
                      ROW_CHANGED_BY=ROWCHANGEDBY,
                      ROW_CHANGED_DATE=ROWCHANGEDDATE,
                      ROW_CREATED_BY=ROWCREATEDBY,
                      REMARK=REMARKS
                    WHERE DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION.START_DATE=STARTDATE AND DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION.JOB_CONFIGURATION='JobPotentialTime';
                    END
     END
        ELSE
            BEGIN
             IF(ENDDATE<>'')
                BEGIN
                DECLARE TIMESTAMP ENDDATE=PARSETIMESTAMP(ENDDATE,'MM/dd/yyyy HH:mm:ss');                
                insert INTO DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION(START_DATE,JOB_CONFIGURATION,END_DATE,JOB_CONFIGURATION_VALUE,ROW_CHANGED_BY,ROW_CREATED_BY,ROW_CREATED_DATE,REMARK,ABBREVIATION)
                  SELECT 
                    START_DATE,JOB_CONFIGURATION,END_DATE,JOB_CONFIGURATION_VALUE,ROW_CHANGED_BY,ROW_CREATED_BY,ROW_CREATED_DATE,REMARKS,ABBREVIATION
                    FROM
                    (
                    SELECT STARTDATE START_DATE,'OilPrice' JOB_CONFIGURATION, ENDDATE END_DATE,OILPRICE JOB_CONFIGURATION_VALUE,
                            ROWCHANGEDBY ROW_CHANGED_BY, ROWCHANGEDDATE ROW_CHANGED_DATE, ROWCREATEDBY ROW_CREATED_BY, ROWCREATEDDATE ROW_CREATED_DATE, REMARKS ,'OilPrice' ABBREVIATION
                            UNION
                            SELECT STARTDATE,'JobCost',ENDDATE,JOBCOST,ROWCHANGEDBY, ROWCHANGEDDATE , ROWCREATEDBY , ROWCREATEDDATE , REMARKS,'JobCost' ABBREVIATION
                            UNION
                            SELECT STARTDATE,'JobPotentialTime', ENDDATE , JOBPOTENTIALTIME,ROWCHANGEDBY, ROWCHANGEDDATE , ROWCREATEDBY , ROWCREATEDDATE , REMARKS,'JobPotentialTime' ABBREVIATION
                      ) T2;
                      END
                  ELSE
                     BEGIN
                       insert INTO DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION(START_DATE,JOB_CONFIGURATION,JOB_CONFIGURATION_VALUE,ROW_CHANGED_BY,ROW_CREATED_BY,ROW_CREATED_DATE,REMARK,ABBREVIATION)
                        SELECT 
                          START_DATE,JOB_CONFIGURATION,JOB_CONFIGURATION_VALUE,ROW_CHANGED_BY,ROW_CREATED_BY,ROW_CREATED_DATE,REMARKS,ABBREVIATION
                          FROM
                          (
                          SELECT STARTDATE START_DATE,'OilPrice' JOB_CONFIGURATION, ENDDATE END_DATE,OILPRICE JOB_CONFIGURATION_VALUE,
                                  ROWCHANGEDBY ROW_CHANGED_BY, ROWCHANGEDDATE ROW_CHANGED_DATE, ROWCREATEDBY ROW_CREATED_BY, ROWCREATEDDATE ROW_CREATED_DATE, REMARKS ,'OilPrice' ABBREVIATION
                                  UNION
                                  SELECT STARTDATE,'JobCost',ENDDATE,JOBCOST,ROWCHANGEDBY, ROWCHANGEDDATE , ROWCREATEDBY , ROWCREATEDDATE , REMARKS,'JobCost' ABBREVIATION
                                  UNION
                                  SELECT STARTDATE,'JobPotentialTime', ENDDATE , JOBPOTENTIALTIME,ROWCHANGEDBY, ROWCHANGEDDATE , ROWCREATEDBY , ROWCREATEDDATE , REMARKS,'JobPotentialTime' ABBREVIATION
                            ) T2;
                     END
  END
 SELECT 'success';
END;
CREATE VIRTUAL PROCEDURE SP_DELETE_JOB_CONFIGURATION( STARTDATE string(50))
RETURNS (STATUS STRING) 
AS
BEGIN
DECLARE TIMESTAMP STARTDATE=PARSETIMESTAMP(STARTDATE,'MM/dd/yyyy HH:mm:ss');
DELETE FROM DSPDM_CAIRN_PHYSICAL.JOB_CONFIGURATION WHERE START_DATE=STARTDATE;
SELECT 'success';
END;
CREATE VIRTUAL PROCEDURE SP_DELETE_WELL_REAL_TIME_TAG( WELLID string(50))
RETURNS (STATUS STRING) 
AS
BEGIN
DELETE FROM DSPDM_CAIRN_PHYSICAL.WELL WHERE WELL_ID=WELLID;
DELETE FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID;
SELECT 'success';
END;
 CREATE VIEW WELL_REAL_TIME_TAG
(
  FIELDID integer
 ,FIELD string(80)
 ,WELLID integer
 ,WELLNAME string(80)
 ,PADID integer
 ,PAD string(80)
 ,WELLTYPEID integer
 ,WELLTYPE string(80)
 ,ALTYPE string(50)
 ,ALTYPEID integer
 ,IS_ENABLE boolean
, WHP string(80) 
, WHT string(80) 
, FLP string(80) 
, CHP string(80) 
, WC string(80) 
, LIQUID_RATE string(80) 
, OIL_RATE string(80) 
, WATER_RATE string(80) 
, GAS_RATE string(80) 
, GOR string(80) 
, FREQUENCY string(80) 
, PIP string(80) 
, PDP string(80) 
, MT string(80) 
, CURRENT string(80) 
, PHP string(80) 
, ROD_TORQUE string(80) 
, FLT string(80) 
, MFPM_WELL_ID string(80) 
, TEST_WELL_ID string(80) 
, CHOKE string(80) 
, POWER_FLUID_HP string(80) 
, POWER_FLUID_RATE string(80) 
, CHT string(80) 
, POLYMER_RATE string(80) 
, INJECTION_WATER_RATE string(80) 
, SPEED string(80) 
, SUCTION_PRESSURE string(80) 
, SLUG_CATCHER_PRESSURE string(80) 
, HEADER_PRESSURE string(80)
,CONSTRAINT  WELL_REAL_TIME_TAG_pkey PRIMARY KEY (WELLID) OPTIONS (UPDATABLE 'TRUE',WELL_REAL_TIME_TAG.IMPLEMENTED 'TRUE') 
)
AS(
SELECT
VWM.FIELDID
,VWM.FIELD
,VWM.WELL_ID
,VWM.WELL_NAME
,VWM.PADID
,VWM.PAD
,W.R_WELL_TYPE_ID
,VWM.WELL_TYPE
,VWM.PRODUCTION_METHOD_ABB
,VWM.R_PRODUCTION_METHOD_ID
,CASE WHEN IS_ENABLE IS NULL THEN FALSE ELSE IS_ENABLE END IS_ENABLE
, WHP
, WHT
, FLP
, CHP
, WC
, LIQUID_RATE
, OIL_RATE
, WATER_RATE
, GAS_RATE
, GOR
, FREQUENCY
, PIP
, PDP
, MT
, CURRENT
, PHP
, ROD_TORQUE
, FLT
, MFPM_WELL_ID
, TEST_WELL_ID
, CHOKE
, POWER_FLUID_HP
, POWER_FLUID_RATE
, CHT
, POLYMER_RATE
, INJECTION_WATER_RATE
, SPEED
, SUCTION_PRESSURE
, SLUG_CATCHER_PRESSURE
, HEADER_PRESSURE
FROM DSPDM_CAIRN_PHYSICAL.VW_WELL_INFO VWM
LEFT JOIN
(
  SELECT 
  WELL_ID
  ,IS_ENABLE
  ,LTRIM(convert(string_agg(	WHP	,' '  ORDER BY WHP ASC),string)) WHP
,LTRIM(convert(string_agg(	WHT	,' '  ORDER BY WHT ASC),string)) WHT
,LTRIM(convert(string_agg(	FLP	,' '  ORDER BY FLP ASC),string)) FLP
,LTRIM(convert(string_agg(	CHP	,' '  ORDER BY CHP ASC),string)) CHP
,LTRIM(convert(string_agg(	WC	,' '  ORDER BY WC ASC),string)) WC
,LTRIM(convert(string_agg(	LIQUID_RATE	,' '  ORDER BY LIQUID_RATE ASC),string)) LIQUID_RATE
,LTRIM(convert(string_agg(	OIL_RATE	,' '  ORDER BY OIL_RATE ASC),string)) OIL_RATE
,LTRIM(convert(string_agg(	WATER_RATE	,' '  ORDER BY WATER_RATE ASC),string)) WATER_RATE
,LTRIM(convert(string_agg(	GAS_RATE	,' '  ORDER BY GAS_RATE ASC),string)) GAS_RATE
,LTRIM(convert(string_agg(	GOR	,' '  ORDER BY GOR ASC),string)) GOR
,LTRIM(convert(string_agg(	FREQUENCY	,' '  ORDER BY FREQUENCY ASC),string)) FREQUENCY
,LTRIM(convert(string_agg(	PIP	,' '  ORDER BY PIP ASC),string)) PIP
,LTRIM(convert(string_agg(	PDP	,' '  ORDER BY PDP ASC),string)) PDP
,LTRIM(convert(string_agg(	MT	,' '  ORDER BY MT ASC),string)) MT
,LTRIM(convert(string_agg(	CURRENT	,' '  ORDER BY CURRENT ASC),string)) CURRENT
,LTRIM(convert(string_agg(	PHP	,' '  ORDER BY PHP ASC),string)) PHP
,LTRIM(convert(string_agg(	ROD_TORQUE	,' '  ORDER BY ROD_TORQUE ASC),string)) ROD_TORQUE
,LTRIM(convert(string_agg(	FLT	,' '  ORDER BY FLT ASC),string)) FLT
,LTRIM(convert(string_agg(	MFPM_WELL_ID	,' '  ORDER BY MFPM_WELL_ID ASC),string)) MFPM_WELL_ID
,LTRIM(convert(string_agg(	TEST_WELL_ID	,' '  ORDER BY TEST_WELL_ID ASC),string)) TEST_WELL_ID
,LTRIM(convert(string_agg(	CHOKE	,' '  ORDER BY CHOKE ASC),string)) CHOKE
,LTRIM(convert(string_agg(	POWER_FLUID_HP	,' '  ORDER BY POWER_FLUID_HP ASC),string)) POWER_FLUID_HP
,LTRIM(convert(string_agg(	POWER_FLUID_RATE	,' '  ORDER BY POWER_FLUID_RATE ASC),string)) POWER_FLUID_RATE
,LTRIM(convert(string_agg(	CHT	,' '  ORDER BY CHT ASC),string)) CHT
,LTRIM(convert(string_agg(	POLYMER_RATE	,' '  ORDER BY POLYMER_RATE ASC),string)) POLYMER_RATE
,LTRIM(convert(string_agg(	INJECTION_WATER_RATE	,' '  ORDER BY INJECTION_WATER_RATE ASC),string)) INJECTION_WATER_RATE
,LTRIM(convert(string_agg(	SPEED	,' '  ORDER BY SPEED ASC),string)) SPEED
,LTRIM(convert(string_agg(	SUCTION_PRESSURE	,' '  ORDER BY SUCTION_PRESSURE ASC),string)) SUCTION_PRESSURE
,LTRIM(convert(string_agg(	SLUG_CATCHER_PRESSURE	,' '  ORDER BY SLUG_CATCHER_PRESSURE ASC),string)) SLUG_CATCHER_PRESSURE
,LTRIM(convert(string_agg(	HEADER_PRESSURE	,' '  ORDER BY HEADER_PRESSURE ASC),string)) HEADER_PRESSURE
  FROM
  (
  SELECT 
   WELL_ID
   ,IS_ENABLE
  , CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  1    THEN  TAG_NAME ELSE '' END  WHP
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  2    THEN  TAG_NAME ELSE '' END  WHT
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  3    THEN  TAG_NAME ELSE '' END  FLP
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  4    THEN  TAG_NAME ELSE '' END  CHP
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  5    THEN  TAG_NAME ELSE '' END  WC
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  6    THEN  TAG_NAME ELSE '' END  LIQUID_RATE
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  7    THEN  TAG_NAME ELSE '' END  OIL_RATE
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  8    THEN  TAG_NAME ELSE '' END  WATER_RATE
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  9    THEN  TAG_NAME ELSE '' END  GAS_RATE
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  10    THEN  TAG_NAME ELSE '' END  GOR
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  11    THEN  TAG_NAME ELSE '' END  FREQUENCY
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  12    THEN  TAG_NAME ELSE '' END  PIP
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  13    THEN  TAG_NAME ELSE '' END  PDP
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  14    THEN  TAG_NAME ELSE '' END  MT
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  15    THEN  TAG_NAME ELSE '' END  CURRENT
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  16    THEN  TAG_NAME ELSE '' END  PHP
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  17    THEN  TAG_NAME ELSE '' END  ROD_TORQUE
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  18    THEN  TAG_NAME ELSE '' END  FLT
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  19    THEN  TAG_NAME ELSE '' END  MFPM_WELL_ID
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  20    THEN  TAG_NAME ELSE '' END  TEST_WELL_ID
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  21    THEN  TAG_NAME ELSE '' END  CHOKE
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  22    THEN  TAG_NAME ELSE '' END  POWER_FLUID_HP
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  23    THEN  TAG_NAME ELSE '' END  POWER_FLUID_RATE
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  24    THEN  TAG_NAME ELSE '' END  CHT
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  25    THEN  TAG_NAME ELSE '' END  POLYMER_RATE
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  26    THEN  TAG_NAME ELSE '' END  INJECTION_WATER_RATE
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  27    THEN  TAG_NAME ELSE '' END  SPEED
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  28    THEN  TAG_NAME ELSE '' END  SUCTION_PRESSURE
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  29    THEN  TAG_NAME ELSE '' END  SLUG_CATCHER_PRESSURE
,   CASE WHEN WMP.REAL_TIME_PARAMETER_ID =  30    THEN  TAG_NAME ELSE '' END  HEADER_PRESSURE
FROM   DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WMP
  ) T
GROUP BY WELL_ID,IS_ENABLE
) T2
ON T2.WELL_ID=VWM.WELL_ID
LEFT JOIN DSPDM_CAIRN_PHYSICAL.WELL W
ON W.WELL_ID=VWM.WELL_ID
);
CREATE VIRTUAL PROCEDURE SP_APENDUPDATEWELLREALTIMEDATA (xmlstring string(500)) RETURNS (STATUS STRING) 
AS
BEGIN
DECLARE string retstrt='';
SELECT  
* into #TEMPTABLE   
FROM XMLTABLE('well' passing  
xmlparse(document xmlstring) 
COLUMNS FIELDID integer path '@FIELDID', WELLID integer path '@WELLID',WELLNAME string path '@WELLNAME',PADID integer path '@PADID',WELLTYPEID integer path '@WELLTYPEID',ALTYPEID integer path '@ALTYPEID') as x;
 DECLARE string WELLNAME = (SELECT CASE WHEN #TEMPTABLE.WELLNAME IS NOT NULL THEN #TEMPTABLE.WELLNAME ELSE null END FROM #TEMPTABLE);
 DECLARE integer FIELDID = (SELECT CASE WHEN #TEMPTABLE.FIELDID IS NOT NULL THEN #TEMPTABLE.FIELDID ELSE -1 END FROM #TEMPTABLE );
 DECLARE integer WELLID = (SELECT CASE WHEN #TEMPTABLE.WELLID IS NOT NULL THEN #TEMPTABLE.WELLID ELSE -1 END FROM #TEMPTABLE  );
 DECLARE integer PADID = (SELECT CASE WHEN #TEMPTABLE.PADID IS NOT NULL THEN #TEMPTABLE.PADID ELSE -1 END FROM #TEMPTABLE);
 DECLARE integer WELLTYPEID = (SELECT CASE WHEN #TEMPTABLE.WELLTYPEID IS NOT NULL THEN #TEMPTABLE.WELLTYPEID ELSE -1 END FROM #TEMPTABLE);
 DECLARE integer ALTYPEID = (SELECT CASE WHEN #TEMPTABLE.ALTYPEID IS NOT NULL THEN #TEMPTABLE.ALTYPEID ELSE -1 END FROM #TEMPTABLE);
IF( EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL WHERE WELL_ID=WELLID ))
    BEGIN
        UPDATE DSPDM_CAIRN_PHYSICAL.WELL
        SET 
          ORGANIZATION_ID=FIELDID,
          WELL_NAME=WELLNAME,
          NETWORK_NODE_ID=PADID,
          R_WELL_TYPE_ID=WELLTYPEID,
          R_PRODUCTION_METHOD_ID=ALTYPEID
          WHERE WELL_ID=WELLID ;
    END
  ELSE
     BEGIN
     INSERT INTO DSPDM_CAIRN_PHYSICAL.WELL( ORGANIZATION_ID,WELL_NAME,NETWORK_NODE_ID,R_WELL_TYPE_ID,R_PRODUCTION_METHOD_ID)
     SELECT  FIELDID,WELLNAME,PADID,WELLTYPEID,ALTYPEID; 
     WELLID=(SELECT MAX(WELL_ID) WELL_ID FROM  DSPDM_CAIRN_PHYSICAL.WELL WHERE WELL_NAME=WELLNAME);
     END
  IF(WELLID IS NOT NULL)
  BEGIN
   DECLARE string TEMPSQL='';
DECLARE integer WHP_ID=1;
DECLARE integer	WHT_ID=2;
DECLARE integer	FLP_ID=3;
DECLARE integer	CHP_ID=4;
DECLARE integer	WC_ID=5;
DECLARE integer	LIQUID_RATE_ID=6;
DECLARE integer	OIL_RATE_ID=7;
DECLARE integer	WATER_RATE_ID=8;
DECLARE integer	GAS_RATE_ID=9;
DECLARE integer	GOR_ID=10;
DECLARE integer	FREQUENCY_ID=11;
DECLARE integer	PIP_ID=12;
DECLARE integer	PDP_ID=13;
DECLARE integer	MT_ID=14;
DECLARE integer	CURRENT_ID=15;
DECLARE integer	PHP_ID=16;
DECLARE integer	ROD_TORQUE_ID=17;
DECLARE integer	FLT_ID=18;
DECLARE integer	MFPM_WELL_ID_ID=19;
DECLARE integer	TEST_WELL_ID_ID=20;
DECLARE integer	CHOKE_ID=21;
DECLARE integer	POWER_FLUID_HP_ID=22;
DECLARE integer	POWER_FLUID_RATE_ID=23;
DECLARE integer	CHT_ID=24;
DECLARE integer	POLYMER_RATE_ID=25;
DECLARE integer	INJECTION_WATER_RATE_ID=26;
DECLARE integer	SPEED_ID=27;
DECLARE integer	SUCTION_PRESSURE_ID=28;
DECLARE integer	SLUG_CATCHER_PRESSURE_ID=29;
DECLARE integer	HEADER_PRESSURE_ID=30;
SELECT  
* into #TEMPTABLE2   
FROM XMLTABLE('wellparams' passing  
xmlparse(document xmlstring) 
COLUMNS
WHP string path '@WHP',
WHT string path '@WHT',
FLP string path '@FLP',
CHP string path '@CHP',
WC string path '@WC',
LIQUID_RATE string path '@LIQUID_RATE',
OIL_RATE string path '@OIL_RATE',
WATER_RATE string path '@WATER_RATE',
GAS_RATE string path '@GAS_RATE',
GOR string path '@GOR',
FREQUENCY string path '@FREQUENCY',
PIP string path '@PIP',
PDP string path '@PDP',
MT string path '@MT',
CURRENT string path '@CURRENT',
PHP string path '@PHP',
ROD_TORQUE string path '@ROD_TORQUE',
FLT string path '@FLT',
MFPM_WELL_ID string path '@MFPM_WELL_ID',
TEST_WELL_ID string path '@TEST_WELL_ID',
CHOKE string path '@CHOKE',
POWER_FLUID_HP string path '@POWER_FLUID_HP',
POWER_FLUID_RATE string path '@POWER_FLUID_RATE',
CHT string path '@CHT',
POLYMER_RATE string path '@POLYMER_RATE',
INJECTION_WATER_RATE string path '@INJECTION_WATER_RATE',
SPEED string path '@SPEED',
SUCTION_PRESSURE string path '@SUCTION_PRESSURE',
SLUG_CATCHER_PRESSURE string path '@SLUG_CATCHER_PRESSURE',
HEADER_PRESSURE string path '@HEADER_PRESSURE',
IS_ENABLE integer path'@IS_ENABLE'
 ) as x;
DECLARE string WHP=(SELECT CASE WHEN #TEMPTABLE2.WHP IS NULL OR WHP='' THEN NULL   ELSE  #TEMPTABLE2.WHP  END FROM #TEMPTABLE2);
DECLARE string WHT=(SELECT CASE WHEN #TEMPTABLE2.WHT IS NULL OR WHT='' THEN NULL   ELSE  #TEMPTABLE2.WHT  END FROM #TEMPTABLE2);
DECLARE string FLP=(SELECT CASE WHEN #TEMPTABLE2.FLP IS NULL OR FLP='' THEN NULL   ELSE  #TEMPTABLE2.FLP  END FROM #TEMPTABLE2);
DECLARE string CHP=(SELECT CASE WHEN #TEMPTABLE2.CHP IS NULL OR CHP='' THEN NULL   ELSE  #TEMPTABLE2.CHP  END FROM #TEMPTABLE2);
DECLARE string WC=(SELECT CASE WHEN #TEMPTABLE2.WC IS NULL OR WC='' THEN NULL   ELSE  #TEMPTABLE2.WC  END FROM #TEMPTABLE2);
DECLARE string LIQUID_RATE=(SELECT CASE WHEN #TEMPTABLE2.LIQUID_RATE IS NULL OR LIQUID_RATE='' THEN NULL   ELSE  #TEMPTABLE2.LIQUID_RATE  END FROM #TEMPTABLE2);
DECLARE string OIL_RATE=(SELECT CASE WHEN #TEMPTABLE2.OIL_RATE IS NULL OR OIL_RATE='' THEN NULL   ELSE  #TEMPTABLE2.OIL_RATE  END FROM #TEMPTABLE2);
DECLARE string WATER_RATE=(SELECT CASE WHEN #TEMPTABLE2.WATER_RATE IS NULL OR WATER_RATE='' THEN NULL   ELSE  #TEMPTABLE2.WATER_RATE  END FROM #TEMPTABLE2);
DECLARE string GAS_RATE=(SELECT CASE WHEN #TEMPTABLE2.GAS_RATE IS NULL OR GAS_RATE='' THEN NULL   ELSE  #TEMPTABLE2.GAS_RATE  END FROM #TEMPTABLE2);
DECLARE string GOR=(SELECT CASE WHEN #TEMPTABLE2.GOR IS NULL OR GOR='' THEN NULL   ELSE  #TEMPTABLE2.GOR  END FROM #TEMPTABLE2);
DECLARE string FREQUENCY=(SELECT CASE WHEN #TEMPTABLE2.FREQUENCY IS NULL OR FREQUENCY='' THEN NULL   ELSE  #TEMPTABLE2.FREQUENCY  END FROM #TEMPTABLE2);
DECLARE string PIP=(SELECT CASE WHEN #TEMPTABLE2.PIP IS NULL OR PIP='' THEN NULL   ELSE  #TEMPTABLE2.PIP  END FROM #TEMPTABLE2);
DECLARE string PDP=(SELECT CASE WHEN #TEMPTABLE2.PDP IS NULL OR PDP='' THEN NULL   ELSE  #TEMPTABLE2.PDP  END FROM #TEMPTABLE2);
DECLARE string MT=(SELECT CASE WHEN #TEMPTABLE2.MT IS NULL OR MT='' THEN NULL   ELSE  #TEMPTABLE2.MT  END FROM #TEMPTABLE2);
DECLARE string CURRENT=(SELECT CASE WHEN #TEMPTABLE2.CURRENT IS NULL OR CURRENT='' THEN NULL   ELSE  #TEMPTABLE2.CURRENT  END FROM #TEMPTABLE2);
DECLARE string PHP=(SELECT CASE WHEN #TEMPTABLE2.PHP IS NULL OR PHP='' THEN NULL   ELSE  #TEMPTABLE2.PHP  END FROM #TEMPTABLE2);
DECLARE string ROD_TORQUE=(SELECT CASE WHEN #TEMPTABLE2.ROD_TORQUE IS NULL OR ROD_TORQUE='' THEN NULL   ELSE  #TEMPTABLE2.ROD_TORQUE  END FROM #TEMPTABLE2);
DECLARE string FLT=(SELECT CASE WHEN #TEMPTABLE2.FLT IS NULL OR FLT='' THEN NULL   ELSE  #TEMPTABLE2.FLT  END FROM #TEMPTABLE2);
DECLARE string MFPM_WELL_ID=(SELECT CASE WHEN #TEMPTABLE2.MFPM_WELL_ID IS NULL OR MFPM_WELL_ID='' THEN NULL   ELSE  #TEMPTABLE2.MFPM_WELL_ID  END FROM #TEMPTABLE2);
DECLARE string TEST_WELL_ID=(SELECT CASE WHEN #TEMPTABLE2.TEST_WELL_ID IS NULL OR TEST_WELL_ID='' THEN NULL   ELSE  #TEMPTABLE2.TEST_WELL_ID  END FROM #TEMPTABLE2);
DECLARE string CHOKE=(SELECT CASE WHEN #TEMPTABLE2.CHOKE IS NULL OR CHOKE='' THEN NULL   ELSE  #TEMPTABLE2.CHOKE  END FROM #TEMPTABLE2);
DECLARE string POWER_FLUID_HP=(SELECT CASE WHEN #TEMPTABLE2.POWER_FLUID_HP IS NULL OR POWER_FLUID_HP='' THEN NULL   ELSE  #TEMPTABLE2.POWER_FLUID_HP  END FROM #TEMPTABLE2);
DECLARE string POWER_FLUID_RATE=(SELECT CASE WHEN #TEMPTABLE2.POWER_FLUID_RATE IS NULL OR POWER_FLUID_RATE='' THEN NULL   ELSE  #TEMPTABLE2.POWER_FLUID_RATE  END FROM #TEMPTABLE2);
DECLARE string CHT=(SELECT CASE WHEN #TEMPTABLE2.CHT IS NULL OR CHT='' THEN NULL   ELSE  #TEMPTABLE2.CHT  END FROM #TEMPTABLE2);
DECLARE string POLYMER_RATE=(SELECT CASE WHEN #TEMPTABLE2.POLYMER_RATE IS NULL OR POLYMER_RATE='' THEN NULL   ELSE  #TEMPTABLE2.POLYMER_RATE  END FROM #TEMPTABLE2);
DECLARE string INJECTION_WATER_RATE=(SELECT CASE WHEN #TEMPTABLE2.INJECTION_WATER_RATE IS NULL OR INJECTION_WATER_RATE='' THEN NULL   ELSE  #TEMPTABLE2.INJECTION_WATER_RATE  END FROM #TEMPTABLE2);
DECLARE string SPEED=(SELECT CASE WHEN #TEMPTABLE2.SPEED IS NULL OR SPEED='' THEN NULL   ELSE  #TEMPTABLE2.SPEED  END FROM #TEMPTABLE2);
DECLARE string SUCTION_PRESSURE=(SELECT CASE WHEN #TEMPTABLE2.SUCTION_PRESSURE IS NULL OR SUCTION_PRESSURE='' THEN NULL   ELSE  #TEMPTABLE2.SUCTION_PRESSURE  END FROM #TEMPTABLE2);
DECLARE string SLUG_CATCHER_PRESSURE=(SELECT CASE WHEN #TEMPTABLE2.SLUG_CATCHER_PRESSURE IS NULL OR SLUG_CATCHER_PRESSURE='' THEN NULL   ELSE  #TEMPTABLE2.SLUG_CATCHER_PRESSURE  END FROM #TEMPTABLE2);
DECLARE string HEADER_PRESSURE=(SELECT CASE WHEN #TEMPTABLE2.HEADER_PRESSURE IS NULL OR HEADER_PRESSURE='' THEN NULL   ELSE  #TEMPTABLE2.HEADER_PRESSURE  END FROM #TEMPTABLE2);
DECLARE integer ISENABLE=(SELECT CASE WHEN #TEMPTABLE2.IS_ENABLE IS NULL OR IS_ENABLE='' THEN 0  ELSE  #TEMPTABLE2.IS_ENABLE END FROM #TEMPTABLE2);

IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=1))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME= WHP
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=1; 
  END
  ELSE IF(WHP IS NOT NULL)
   BEGIN
    INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,1,WHP;
   END
 IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=2))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=WHT
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=2;
  END
  ELSE IF(WHT IS NOT NULL)
   BEGIN
    INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,2,WHT;
   END
   IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=3))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=FLP
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=3; 
  END
  ELSE IF(FLP IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,3,FLP;
   END
   IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=4))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=CHP
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=4; 
  END
  ELSE IF(CHP IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,4,CHP;
   END
   IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=5))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=WC
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=5; 
  END
  ELSE IF(WC IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,5,WC;
   END
  IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=6))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=LIQUID_RATE
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=6; 
  END
  ELSE IF(LIQUID_RATE IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,6,LIQUID_RATE;
   END
  IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=7))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=OIL_RATE
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=7; 
  END
  ELSE IF(OIL_RATE IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,7,OIL_RATE;
   END 
  IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=8))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=WATER_RATE
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=8;
  END
  ELSE IF(WATER_RATE IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,8,WATER_RATE;
   END      
  IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=9))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=GAS_RATE
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=9;
  END
  ELSE IF(GAS_RATE IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,9,GAS_RATE;
   END 
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=10))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=GOR
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=10;
  END
  ELSE IF(GOR IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,10,GOR;
   END 
   IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=11))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=FREQUENCY
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=11;
  END
  ELSE IF(FREQUENCY IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,11,FREQUENCY;
   END   
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=12))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=PIP
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=12;
  END
  ELSE IF(PIP IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,12,PIP;
   END  
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=13))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=PDP
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=13;
  END
  ELSE IF(PDP IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,13,PDP;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=14))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=MT
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=14;
  END
  ELSE IF(MT IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,14,MT;
   END 
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=15))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=CURRENT
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=15;
  END
  ELSE IF(CURRENT IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,15,CURRENT;
   END 
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=16))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=PHP
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=16;
  END
  ELSE IF(PHP IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,16,PHP;
   END 
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=17))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=ROD_TORQUE
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=17;
  END
  ELSE IF(ROD_TORQUE IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,17,ROD_TORQUE;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=18))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=FLT
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=18;
  END
  ELSE IF(FLT IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,18,FLT;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=19))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=MFPM_WELL_ID
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=19;
  END
  ELSE IF(MFPM_WELL_ID IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
    SELECT WELLID,19,MFPM_WELL_ID;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=20))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=TEST_WELL_ID
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=20;
  END
  ELSE IF(TEST_WELL_ID IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
     SELECT WELLID,20,TEST_WELL_ID;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=21))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=CHOKE
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=21;
  END
  ELSE IF(CHOKE IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
     SELECT WELLID,21,CHOKE;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=22))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=POWER_FLUID_HP
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=22;
  END
  ELSE IF(POWER_FLUID_HP IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
     SELECT WELLID,22,POWER_FLUID_HP;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=23))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=POWER_FLUID_RATE
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=23;
  END
  ELSE IF(POWER_FLUID_RATE IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
     SELECT WELLID,23,POWER_FLUID_RATE;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=24))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=CHT
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=24;
  END
  ELSE IF(CHT IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
     SELECT WELLID,24,CHT;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=25))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=POLYMER_RATE
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=25;
  END
  ELSE IF(POLYMER_RATE IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
     SELECT WELLID,25,POLYMER_RATE;
   END
  IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=26))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=INJECTION_WATER_RATE
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=26;
  END
  ELSE IF(INJECTION_WATER_RATE IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
     SELECT WELLID,26,INJECTION_WATER_RATE;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=27))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=SPEED
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=27;
  END
  ELSE IF(SPEED IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
     SELECT WELLID,27,SPEED;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=28))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=SUCTION_PRESSURE
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=28;
  END
  ELSE IF(SUCTION_PRESSURE IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
     SELECT WELLID,28,SUCTION_PRESSURE;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=29))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=SLUG_CATCHER_PRESSURE
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=29;
  END
  ELSE IF(SLUG_CATCHER_PRESSURE IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
     SELECT WELLID,29,SLUG_CATCHER_PRESSURE;
   END
IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=30))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
        SET TAG_NAME=HEADER_PRESSURE
    WHERE WELL_ID=WELLID AND REAL_TIME_PARAMETER_ID=30;
  END
  ELSE IF(HEADER_PRESSURE IS NOT NULL)
   BEGIN
     INSERT INTO  DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING(WELL_ID,REAL_TIME_PARAMETER_ID,TAG_NAME)
     SELECT WELLID,30,HEADER_PRESSURE;
   END
   IF(EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING WHERE WELL_ID=WELLID ))
  BEGIN
    UPDATE DSPDM_CAIRN_PHYSICAL.WELL_TAG_REAL_TIME_PARAMETER_MAPPING
    SET IS_ENABLE= CASE WHEN ISENABLE=0 THEN FALSE ELSE TRUE END
    WHERE WELL_ID=WELLID;
  END
    SELECT 'success';
  END
END;  
CREATE VIEW WELLTYPE(
  R_WELL_TYPE_ID integer,
  WELL_TYPE string(50),
  ABBREVIATION string(50)
  ,CONSTRAINT WELLTYPE_pkey PRIMARY KEY (R_WELL_TYPE_ID)) OPTIONS (UPDATABLE 'TRUE',WELLTYPE.IMPLEMENTED 'TRUE') 
AS(
  SELECT 
  R_WELL_TYPE_ID,WELL_TYPE,ABBREVIATION
  from DSPDM_CAIRN_PHYSICAL.R_WELL_TYPE 
);
CREATE VIEW ORGANIZATION(
 ORGANIZATION_ID integer
 ,ORGANIZATION_NAME string(50)
 ,ABBREVIATION string(50)
,ORGANIZATION_PARENT_ID integer
,ORGANIZATION_TYPE_ID integer
  ,CONSTRAINT ORGANIZATION_pkey PRIMARY KEY (ORGANIZATION_ID)) OPTIONS (UPDATABLE 'TRUE',ORGANIZATION.IMPLEMENTED 'TRUE') 
AS(
SELECT
 ORGANIZATION_ID
,ORGANIZATION_NAME
,ABBREVIATION
,ORGANIZATION_PARENT_ID
,ORGANIZATION_TYPE_ID
  from DSPDM_CAIRN_PHYSICAL.ORGANIZATION 
);
CREATE VIEW PAD(
 ORGANIZATION_ID integer
 ,ORGANIZATION_Name string(50)
 ,NETWORK_NODE_ID integer
 ,NETWORK_NODE_NAME string(50)
  ,CONSTRAINT PAD_pkey PRIMARY KEY (ORGANIZATION_ID)) OPTIONS (UPDATABLE 'TRUE',PAD.IMPLEMENTED 'TRUE') 
AS(
 SELECT
  ONN.ORGANIZATION_ID 
 ,O.ORGANIZATION_Name
 ,ONN.NETWORK_NODE_ID
 ,NN.NETWORK_NODE_NAME
  from DSPDM_CAIRN_PHYSICAL.ORGANIZATION_NETWORK_NODE ONN
  LEFT JOIN DSPDM_CAIRN_PHYSICAL.ORGANIZATION  O
  ON ONN.ORGANIZATION_ID=O.ORGANIZATION_ID
  LEFT JOIN DSPDM_CAIRN_PHYSICAL.NETWORK_NODE NN
  ON NN.NETWORK_NODE_ID=ONN.NETWORK_NODE_ID
);
CREATE VIEW FIELD_WELL_EQUIPMENT(
WELL_EQUIPMENT_ID integer,
FIELD string(50),
FIELD_ID integer,
WELL_NAME string(50),
WELL_ID integer,
ALTYPE string(50), 
START_DATE timestamp,
END_DATE timestamp,
PUMP_TYPE string(50),
PUMP_TYPE_ID integer,
PUMP_NAME string(50),
PUMP_NAME_ID integer,
MANUFACTURER string(100),
REMARK string(100),
 CONSTRAINT FIELD_WELL_EQUIPMENT_pkey PRIMARY KEY (WELL_EQUIPMENT_ID)) OPTIONS (UPDATABLE 'TRUE',FIELD_WELL_EQUIPMENT.IMPLEMENTED 'TRUE') 
AS(
SELECT  
    WELL_EQUIPMENT_ID
   ,VWell.Field
   ,VWell.FIELDID
   ,VWell.WELL_NAME
   ,WE.WELL_ID 
   ,Vwell.PRODUCTION_METHOD_ABB  
      ,START_DATE
      ,END_DATE 
      ,EQ.EQUIPMENT_TYPE
      ,EQ.R_EQUIPMENT_TYPE_ID
   ,EQ.EQUIPMENT_NAME
     ,WE.EQUIPMENT_ID
   ,EQ.MANUFACTURER
     ,WE.REMARK
  FROM DSPDM_CAIRN_PHYSICAL.WELL_EQUIPMENT WE
  left join DSPDM_CAIRN_PHYSICAL.VW_WELL_INFO VWell on VWell.WELL_ID = WE.WELL_ID
  left join (SELECT  EQUIPMENT_ID
      ,EQUIPMENT_NAME
   ,RM.MANUFACTURER
      ,EQ.ABBREVIATION as ab
 ,RE.EQUIPMENT_TYPE
 , RE.ABBREVIATION
 ,EQ.R_EQUIPMENT_TYPE_ID
  FROM DSPDM_CAIRN_PHYSICAL.EQUIPMENT EQ
  left join DSPDM_CAIRN_PHYSICAL.R_MANUFACTURER RM on EQ.R_MANUFACTURER_ID = RM.R_MANUFACTURER_ID
  left join DSPDM_CAIRN_PHYSICAL.R_EQUIPMENT_TYPE RE on Re.R_EQUIPMENT_TYPE_ID = EQ.R_EQUIPMENT_TYPE_ID) EQ on EQ.EQUIPMENT_ID = WE.EQUIPMENT_ID
);
 CREATE VIRTUAL PROCEDURE SP_APENDUPDATEWELLEQUIPMENT ( WELL_EQUIPMENT_ID integer, WELL_ID integer,EQUIPMENT_ID integer
   ,START_DATE string(50),END_DATE string(50),REMARK string(100)) RETURNS (STATUS STRING) 
AS
BEGIN
DECLARE string retstrt='';
 DECLARE TIMESTAMP STARTDATE=PARSETIMESTAMP(SP_APENDUPDATEWELLEQUIPMENT.START_DATE,'MM/dd/yyyy HH:mm:ss');
 DECLARE TIMESTAMP ENDDATE=PARSETIMESTAMP(SP_APENDUPDATEWELLEQUIPMENT.END_DATE,'MM/dd/yyyy HH:mm:ss');
IF( EXISTS(SELECT 1 FROM DSPDM_CAIRN_PHYSICAL.WELL_EQUIPMENT WHERE WELL_EQUIPMENT_ID=SP_APENDUPDATEWELLEQUIPMENT.WELL_EQUIPMENT_ID ))
    BEGIN
        UPDATE DSPDM_CAIRN_PHYSICAL.WELL_EQUIPMENT
        SET 
          WELL_ID =SP_APENDUPDATEWELLEQUIPMENT.WELL_ID,
          EQUIPMENT_ID=SP_APENDUPDATEWELLEQUIPMENT.EQUIPMENT_ID,
          START_DATE=STARTDATE,
          END_DATE=ENDDATE,
          REMARK=SP_APENDUPDATEWELLEQUIPMENT.REMARK
          WHERE WELL_EQUIPMENT_ID=SP_APENDUPDATEWELLEQUIPMENT.WELL_EQUIPMENT_ID  ;
    END
  ELSE
     BEGIN
     INSERT INTO DSPDM_CAIRN_PHYSICAL.WELL_EQUIPMENT( WELL_ID,EQUIPMENT_ID,START_DATE,END_DATE,REMARK)
     SELECT  SP_APENDUPDATEWELLEQUIPMENT.WELL_ID,SP_APENDUPDATEWELLEQUIPMENT.EQUIPMENT_ID,STARTDATE,ENDDATE,SP_APENDUPDATEWELLEQUIPMENT.REMARK; 
     END
     SELECT 'SUCCESS';
  END;
  CREATE VIRTUAL PROCEDURE SP_DELETEWELLEQUIPMENT(WELL_EQUIPMENT_ID integer) RETURNS (STATUS STRING)
  AS
  BEGIN
 

    DELETE FROM  DSPDM_CAIRN_PHYSICAL.WELL_EQUIPMENT WHERE WELL_EQUIPMENT_ID=SP_DELETEWELLEQUIPMENT.WELL_EQUIPMENT_ID;
    SELECT 'SUCCESS';
 END;
 CREATE VIEW WELLTEST_COMPLETION(
        ID string(50)
        ,WELL_ID  INTEGER
        ,WELL_NAME STRING(50)
      , COMPLETION_ZONE_ID INTEGER
      ,COMPLETION_ZONE_NAME STRING(50)
      , EFFECTIVE_DATE  TIMESTAMP
      , OIL_GAS DOUBLE
      , WATER DOUBLE
      , MODIFIED_BY  STRING(50)
      , MODIFIED_DATE TIMESTAMP
      ,FIELD_NAME STRING(50)
      ,PADNAME DOUBLE
 ,CONSTRAINT WELLTEST_COMPLETION_PKEY PRIMARY KEY (ID)) OPTIONS (UPDATABLE 'TRUE',WELLTEST_COMPLETION.IMPLEMENTED 'TRUE') 
AS(
 SELECT
         uuid()  
        ,T1.WELL_ID 
      ,T2.WELL_NAME
      , T1.COMPLETION_ZONE_ID 
      ,T3.COMPLETION_ZONE_NAME
      , EFFECTIVE_DATE 
      , OIL_GAS 
      , WATER 
      , MODIFIED_BY 
      , MODIFIED_DATE 
      ,T2.FIELD_NAME
      ,T2.PAD_NAME
  FROM  DOF.WELLTEST_COMPLETION T1
  LEFT JOIN DOF.WELL_COMPLETIONZONE_MAPPING T2
  ON T2.WELL_ID=T1.WELL_ID AND T2.COMPLETION_ZONE_ID=T1.COMPLETION_ZONE_ID
  LEFT JOIN DOF.COMPLETION_ZONE T3
  ON T3.COMPLETION_ZONE_ID=T1.COMPLETION_ZONE_ID
   
);

CREATE VIEW WELL_COMPLETIONZONE_MAPPING(
       FIELD_NAME STRING(50)
      ,PAD_NAME double
      ,WELL_ID INTEGER
      ,WELL_NAME STRING(50)
      ,COMPLETION_ZONE_ID INTEGER
      ,COMPLETION_ZONE_NAME STRING(50)
     ,CONSTRAINT WELL_COMPLETIONZONE_MAPPING_PKEY PRIMARY KEY (WELL_ID,COMPLETION_ZONE_ID)) OPTIONS (UPDATABLE 'TRUE',WELL_COMPLETIONZONE_MAPPING.IMPLEMENTED 'TRUE') 
AS(
SELECT  FIELD_NAME
      ,PAD_NAME
      ,WELL_ID
      ,WELL_NAME
      ,T1.COMPLETION_ZONE_ID
      ,T3.COMPLETION_ZONE_NAME
  FROM  DOF.WELL_COMPLETIONZONE_MAPPING T1
   LEFT JOIN DOF.COMPLETION_ZONE T3
  ON T3.COMPLETION_ZONE_ID=T1.COMPLETION_ZONE_ID
);
CREATE VIRTUAL PROCEDURE SP_APPENDUPDATEWELLCOMPLETETEST(data string) RETURNS (STATUS STRING)
  AS
  BEGIN
 
  declare string data=replace(replace(data,'^!','{'),'!^','}');
   declare string ss='';
    select  data;
   declare INTEGER flag=0;
 LOOP ON (  SELECT   
 *  
FROM XMLTABLE('/RESPONSE/RESPONSE' PASSING  
JSONTOXML('RESPONSE',JSONPARSE(DATA, TRUE))   
COLUMNS 
       WELL_ID integer PATH 'WELL_ID'
      ,COMPLETION_ZONE_ID integer PATH 'COMPLETION_ZONE_ID'
      ,EFFECTIVE_DATE STRING PATH 'EFFECTIVE_DATE'
      ,OIL_GAS DOUBLE PATH 'OIL_GAS'
      ,WATER DOUBLE PATH 'WATER'
      ,MODIFIED_BY STRING PATH 'MODIFIED_BY'
      
) AS X) AS JDATA
BEGIN
  DECLARE INTEGER WELLID=JDATA.WELL_ID;
  DECLARE INTEGER ZONEID=JDATA.COMPLETION_ZONE_ID;
  DECLARE DATE EFDATE = PARSEDATE(JDATA.EFFECTIVE_DATE,'MM/dd/yyyy');
  DECLARE DOUBLE OILGAS=JDATA.OIL_GAS;
  DECLARE DOUBLE PWATER=JDATA.WATER;
  DECLARE STRING MODIF=JDATA.MODIFIED_BY;
  DECLARE DATE MODDATE=PARSEDATE(NOW(),'yyyy-MM-dd HH:mm:ss');
  IF(flag=0 AND EXISTS(SELECT 1 FROM DOF.WELLTEST_COMPLETION WHERE WELL_ID=WELLID  AND EFFECTIVE_DATE=EFDATE))
    BEGIN
      DELETE FROM DOF.WELLTEST_COMPLETION
      WHERE WELL_ID=WELLID  AND EFFECTIVE_DATE=EFDATE;
    END
    flag=1;
     INSERT INTO DOF.WELLTEST_COMPLETION(WELL_ID,COMPLETION_ZONE_ID,EFFECTIVE_DATE,OIL_GAS,WATER)
     SELECT WELLID,ZONEID,EFDATE,OILGAS,PWATER;
    
END
   select 'SUCESS';  
 END;
 CREATE VIRTUAL PROCEDURE SP_DELETEWELLCOMPLETETEST(WELL_ID DOUBLE,COMPLETION_ZONE_ID DOUBLE,EFFECTIVE_DATE STRING(15)) RETURNS (STATUS STRING)
  AS
  BEGIN
   DECLARE DATE EFDATE = PARSEDATE(SP_DELETEWELLCOMPLETETEST.EFFECTIVE_DATE,'MM/dd/yyyy');
   DELETE FROM DOF.WELLTEST_COMPLETION WHERE WELL_ID=SP_DELETEWELLCOMPLETETEST.WELL_ID AND COMPLETION_ZONE_ID=SP_DELETEWELLCOMPLETETEST.COMPLETION_ZONE_ID AND EFFECTIVE_DATE=EFDATE;
  END;
  CREATE VIEW Completion_Zone(
       ID INTEGER
      ,NAME STRING
     ,CONSTRAINT Completion_Zone_PKEY PRIMARY KEY (ID)) OPTIONS (UPDATABLE 'TRUE',Completion_Zone.IMPLEMENTED 'TRUE') 
AS(
SELECT  
      T3.COMPLETION_ZONE_ID
      ,T3.COMPLETION_ZONE_NAME
  FROM  DOF.COMPLETION_ZONE T3
  
);
CREATE VIRTUAL PROCEDURE SP_WELL_COMPLETIONZONE_MAPPING() RETURNS TABLE(
   FIELD_NAME STRING(50)
      ,PAD_NAME double
      ,WELL_ID INTEGER
      ,WELL_NAME STRING(50)
      ,COMPLETION_ZONE_ID INTEGER
      ,COMPLETION_ZONE_NAME STRING(50)
)
AS
BEGIN
 SELECT  FIELD_NAME
      ,PAD_NAME
      ,WELL_ID
      ,WELL_NAME
      ,T1.COMPLETION_ZONE_ID
      ,T3.COMPLETION_ZONE_NAME
  FROM  DOF.WELL_COMPLETIONZONE_MAPPING T1
   LEFT JOIN DOF.COMPLETION_ZONE T3
  ON T3.COMPLETION_ZONE_ID=T1.COMPLETION_ZONE_ID;
END;