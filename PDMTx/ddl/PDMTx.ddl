CREATE VIEW O_ASSET_HIERARCHY
(
PARENT_ASSET_ID  string (40),
PARENT_ASSET_NAME  string (255),
PARENT_ASSET_TYPE  string (100),
CHILD_ASSET_ID  string (40),
CHILD_ASSET_NAME  string (255),   
CHILD_ASSET_TYPE  string (100),   
SOURCE  string (100),
ROW_QUALITY  string (100),
ROW_CHANGED_BY  string (100),   
ROW_CHANGED_DATE timestamp,   
ROW_CREATED_DATE timestamp,   
ROW_CREATED_BY  string (100),
ACTIVE_IND  string (1),
HIERARCHY_ID   string (40) NOT NULL,
LATITUDE bigdecimal (10,4),
LONGITUDE bigdecimal (10,4),
CONSTRAINT PK_ASSET_HIERARCHY PRIMARY KEY (HIERARCHY_ID))
OPTIONS (UPDATABLE 'FALSE',O_ASSET_HIERARCHY.IMPLEMENTED 'TRUE')
AS
(SELECT
AC.CONTAINING_AREA AS  PARENT_ASSET_ID,
cast(PA.PREFERRED_NAME AS   string) AS  PARENT_ASSET_NAME,
cast(PAT.AREA_TYPE AS   string) AS  PARENT_ASSET_TYPE,
cast(AC.CONTAINED_AREA AS   string) AS  CHILD_ASSET_ID,
cast(CA.PREFERRED_NAME AS   string) AS  CHILD_ASSET_NAME,
cast(CAT.AREA_TYPE AS   string) AS  CHILD_ASSET_TYPE,
cast(RS.SOURCE_NAME AS   string) AS  SOURCE,
cast(PRQ.ROW_QUALITY_NAME AS   string) AS  ROW_QUALITY,
cast(AC.ROW_CHANGED_BY AS   string),
CASE WHEN AC.ROW_CHANGED_DATE > PA.ROW_CHANGED_DATE THEN AC.ROW_CHANGED_DATE ELSE PA.ROW_CHANGED_DATE END AS ROW_CHANGED_DATE ,
CASE WHEN AC.ROW_CREATED_DATE> PA.ROW_CREATED_DATE THEN AC.ROW_CREATED_DATE ELSE PA.ROW_CREATED_DATE END AS ROW_CREATED_DATE,
cast(AC.ROW_CREATED_BY AS   string),
cast(AC.ACTIVE_IND AS   string),
AC.AREA_CONTAIN_ID AS  HIERARCHY_ID,
CA.AREA_MAX_LATITUDE,
CA.AREA_MAX_LONGITUDE
FROM PPDMSrc.AREA_CONTAIN AS  AC
LEFT OUTER JOIN PPDMSrc.AREA AS  PA ON AC.CONTAINING_AREA = PA.AREA_ID 
LEFT OUTER JOIN PPDMSrc.R_AREA_TYPE AS  PAT ON AC.CONTAINING_AREA_TYPE = PAT.R_AREA_TYPE_ID
LEFT OUTER JOIN PPDMSrc.AREA AS  CA ON AC.CONTAINED_AREA = CA.AREA_ID 
LEFT OUTER JOIN PPDMSrc.R_AREA_TYPE AS  CAT ON AC.CONTAINED_AREA_TYPE = CAT.R_AREA_TYPE_ID
LEFT OUTER JOIN PPDMSrc.R_SOURCE AS  RS ON AC.SOURCE = RS.SOURCE_ID
LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY AS  PRQ ON AC.ROW_QUALITY= PRQ.ROW_QUALITY_ID
);

CREATE VIEW WELL
(
WELL_NAME  string (255) NOT NULL,
WELL_NUMBER  string (100),
WELL_UWI  string (100) NOT NULL,
LATITUDE  bigdecimal (15,4),
LONGITUDE  bigdecimal (15,4),
FIELD  string (255),
FIELD_TYPE string(100),
POOL  string (255),
LAND_LEASE string(100),
STATE string (100), 
COUNTY_NAME string (100), 
COUNTRY_NAME string (100), 
CURRENT_OPERATOR string (100), 
WELL_CLASS string (100), 
TD bigdecimal (15,4), 
DEPTH_UOM string (20), 
TVD bigdecimal (15,4), 
MD bigdecimal (15,4), 
WATER_DEPTH bigdecimal (15,4),
SPUD_DATE timestamp,
PROD_START_DATE timestamp,
PROD_DATE timestamp,
PRODUCTION_STATUS  string (100),
OP_DATE timestamp,
OPERATING_STATUS  string (100),
PRIMARY_PRODUCT  string (100),
PRODUCTION_METHOD  string (100),
CURRENT_STATUS string(100),
CURRENT_STATUS_DATE timestamp,
OIL  bigdecimal (15,4),
OIL_UOM  string (20),
GAS  bigdecimal (15,4),
GAS_UOM  string (20),
WATER  bigdecimal (15,4),
WATER_UOM  string (20),
LIQUID  bigdecimal (15,4),
LIQUID_UOM  string (20  ),
GAS_BOE  bigdecimal  (15,4),
GAS_BOE_UOM  string (20),
INJ_WATER  bigdecimal (15,4),
INJ_WATER_UOM  string (20),
INJ_STEAM  bigdecimal (15,4),
INJ_STEAM_UOM   string (20),
INJ_CO2  bigdecimal (15,4),
INJ_CO2_UOM  string (20  ),
GOR  bigdecimal  (15,4  ),
GOR_UOM  string (20  ),
WC  bigdecimal  (15,4  ),
WC_UOM  string (20  ),
WOR  bigdecimal  (15,4  ),
WOR_UOM   string (20  ),
OC  bigdecimal  (15,4  ),
OC_UOM string (20  ),
OGR  bigdecimal  (15,4  ),
OGR_UOM string (20  ),
OIL_POT      bigdecimal  (15,4  ),
OIL_POT_UOM string (20  ),
GAS_POT    bigdecimal  (15,4  ),
GAS_POT_UOM  string (20  ),
WATER_POT      bigdecimal  (15,4  ),
WATER_POT_UOM string (20  ),
LIQUID_POT  bigdecimal  (15,4  ),
LIQUID_POT_UOM string (20  ),
GAS_BOE_POT    bigdecimal  (15,4  ),
GAS_BOE_POT_UOM string (20  ),
INJ_WATER_POT     bigdecimal  (15,4  ),
INJ_WATER_POT_UOM   string (20  ),
INJ_STEAM_POT      bigdecimal  (15,4  ),
INJ_STEAM_POT_UOM   string (20  ),
INJ_CO2_POT    bigdecimal  (15,4  ),
INJ_CO2_POT_UOM   string (20  ),
GOR_POT    bigdecimal  (15,4  ),
GOR_POT_UOM   string (20  ),
WC_POT      bigdecimal  (15,4  ),
WC_POT_UOM   string (20  ),
WOR_POT   bigdecimal  (15,4  ),
WOR_POT_UOM  string (20  ),
OC_POT  bigdecimal  (15,4  ),
OC_POT_UOM string (20  ),
OGR_POT    bigdecimal  (15,4  ),
OGR_POT_UOM   string (20  ),
OIL_DIFF      bigdecimal  (15,4  ),
GAS_DIFF    bigdecimal  (15,4  ),
WATER_DIFF      bigdecimal  (15,4  ),
LIQUID_DIFF      bigdecimal  (15,4  ),
GOR_DIFF   bigdecimal  (15,4  ),
WC_DIFF    bigdecimal  (15,4  ),
WOR_DIFF  bigdecimal  (15,4  ),
CD_OIL    bigdecimal  (15,4  ),
CD_OIL_POT      bigdecimal  (15,4  ),
CD_GAS  bigdecimal  (15,4  ),
CD_GAS_POT    bigdecimal  (15,4  ),
CD_WATER    bigdecimal  (15,4  ),
CD_WATER_POT      bigdecimal  (15,4  ),
CD_LIQUID    bigdecimal  (15,4  ),
CD_LIQUID_POT      bigdecimal  (15,4  ),
CD_GAS_BOE    bigdecimal  (15,4  ),
CD_GAS_BOE_POT    bigdecimal  (15,4  ),
CD_INJ_WATER   bigdecimal  (15,4  ),
CD_INJ_WATER_POT     bigdecimal  (15,4  ),
CD_INJ_STEAM   bigdecimal  (15,4  ),
CD_INJ_STEAM_POT     bigdecimal  (15,4  ),
CD_INJ_CO2      bigdecimal  (15,4  ),
CD_INJ_CO2_POT   bigdecimal  (15,4  ),
CUM_OIL    bigdecimal  (15,4  ),
CUM_OIL_POT    bigdecimal  (15,4  ),
CUM_GAS  bigdecimal  (15,4  ),
CUM_GAS_POT  bigdecimal  (15,4  ),
CUM_WATER    bigdecimal  (15,4  ),
CUM_WATER_POT    bigdecimal  (15,4  ),
CUM_LIQUID     bigdecimal  (15,4  ),
CUM_LIQUID_POT  bigdecimal  (15,4  ),
CUM_GAS_BOE  bigdecimal  (15,4  ),
CUM_GAS_BOE_POT    bigdecimal  (15,4  ),
CUM_INJ_WATER   bigdecimal  (15,4  ),
CUM_INJ_WATER_POT   bigdecimal  (15,4  ),
CUM_INJ_STEAM    bigdecimal  (15,4  ),
CUM_INJ_STEAM_POT    bigdecimal  (15,4  ),
CUM_INJ_CO2  bigdecimal  (15,4  ),
CUM_INJ_CO2_POT  bigdecimal  (15,4  ),
CD_GOR  bigdecimal  (15,4  ),
CD_GOR_POT  bigdecimal  (15,4  ),
CD_WC  bigdecimal  (15,4  ),
CD_WC_POT  bigdecimal  (15,4  ),
CD_WOR  bigdecimal (   15,4  ),
CD_WOR_POT  bigdecimal (   15,4  ),
CD_OC  bigdecimal (   15,4  ),
CD_OC_POT  bigdecimal (   15,4  ),
CD_OGR  bigdecimal (   15,4  ),
CD_OGR_POT   bigdecimal (   15,4  ),
CUM_GOR  bigdecimal (   15,4  ),
CUM_GOR_POT  bigdecimal (   15,4  ),
CUM_WC  bigdecimal (   15,4  ),
CUM_WC_POT  bigdecimal (   15,4  ),
CUM_WOR  bigdecimal (   15,4  ),
CUM_WOR_POT  bigdecimal (   15,4  ),
CUM_OC  bigdecimal (   15,4  ),
CUM_OC_POT  bigdecimal (   15,4  ),
CUM_OGR  bigdecimal (   15,4  ),
CUM_OGR_POT  bigdecimal (   15,4  ),
MON_OIL  bigdecimal (   15,4  ),
MON_OIL_POT  bigdecimal (   15,4  ),
MON_GAS  bigdecimal (   15,4  ),
MON_GAS_POT  bigdecimal (   15,4  ),
MON_WATER  bigdecimal (   15,4  ),
MON_WATER_POT  bigdecimal (   15,4  ),
MON_LIQUID  bigdecimal (   15,4  ),
MON_LIQUID_POT  bigdecimal (   15,4  ),
MON_GAS_BOE  bigdecimal (   15,4  ),
MON_GAS_BOE_POT  bigdecimal (   15,4  ),
MON_INJ_WATER  bigdecimal (   15,4  ),
MON_INJ_WATER_POT  bigdecimal (   15,4  ),
MON_INJ_STEAM  bigdecimal (   15,4  ),
MON_INJ_STEAM_POT  bigdecimal (   15,4  ),
MON_INJ_CO2  bigdecimal (   15,4  ),
MON_INJ_CO2_POT  bigdecimal (   15,4  ),
MON_GOR  bigdecimal (   15,4  ),
MON_GOR_POT  bigdecimal (   15,4  ),
MON_WC  bigdecimal (   15,4  ),
MON_WC_POT  bigdecimal (   15,4  ),
MON_WOR  bigdecimal (   15,4  ),
MON_WOR_POT  bigdecimal (   15,4  ),
MON_OC  bigdecimal (   15,4  ),
MON_OC_POT  bigdecimal (   15,4  ),
MON_OGR  bigdecimal (   15,4  ),
MON_OGR_POT  bigdecimal (   15,4  ),
BHP  bigdecimal (   15,4  ),
BHP_UOM  string (   20),
BHT  bigdecimal (   15,4  ),
BHT_UOM  string (   20),
WHP  bigdecimal (   15,4  ),
WHP_UOM  string (   20),
WHT  bigdecimal (   15,4  ),
WHT_UOM  string (   20),
CASING_PRESSURE  bigdecimal (   15,4  ),
CASING_PRESS_UOM  string (   20),
CASING_TEMPERATURE  bigdecimal (   15,4  ),
CASING_TEMP_UOM  string (   20),
TUBING_PRESSURE  bigdecimal (   15,4  ),
TUBING_PRESS_UOM  string (   20),
TUBING_TEMPERATURE  bigdecimal (   15,4  ),
TUBING_TEMP_UOM  string (   20),
MON_AVG_BHP  bigdecimal (   15,4  ),
MON_AVG_BHT  bigdecimal (   15,4  ),
MON_AVG_WHP  bigdecimal (   15,4  ),
MON_AVG_WHT  bigdecimal (   15,4  ),
MON_AVG_CASING_PRESSURE  bigdecimal (   15,4  ),
MON_AVG_CASING_TEMPERATURE  bigdecimal (   15,4  ),
MON_AVG_TUBING_PRESSURE  bigdecimal (   15,4  ),
MON_AVG_TUBING_TEMPERATURE  bigdecimal (   15,4  ),
ENTITY_ID  string (   40)    NOT NULL,
REMARK  string (   2000 ),
SOURCE  string (   100),
ROW_QUALITY  string (   100),
ROW_CHANGED_BY  string (   100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (   100),
ACTIVE_IND  string (   1),
LEVEL1_ID  string (   40),
LEVEL1_NAME  string (   255),
LEVEL1_TYPE  string (   100),
LEVEL2_ID  string (   40),
LEVEL2_NAME  string (   255),
LEVEL2_TYPE  string (   100),
LEVEL3_ID  string (   40  ),
LEVEL3_NAME  string (   255),
LEVEL3_TYPE  string (   100),
LEVEL4_ID  string (   40  ),
LEVEL4_NAME  string (   255),
LEVEL4_TYPE  string (   100),
LEVEL5_ID  string (   40  ),
LEVEL5_NAME  string (   255),
LEVEL5_TYPE  string (   100),
LEVEL6_ID  string (   40  ),
LEVEL6_NAME  string (   255),
LEVEL6_TYPE  string (100),
AREA_PATH  string (2000),
PARENT_WELL_ID string(40),
LEVEL_TYPE string(100),
TOTAL_TEST_HOURS bigdecimal(15,4),
RISK_RANK integer,
EVAL_START_DATE timestamp,
DEVIATION string(200),
WI_STATUS   string(100),
WI_STATUS_ID string(40) NOT NULL,
INJECTION_TYPE_ID   string(40) ,
INJECTION_TYPE   string(100) ,
WELL_HISTORY   string(2000) ,
DHSV   string(2000) ,
WIE_NOTE   string(2000) ,
IF_TYPE string(2000),
RISK_SEVERITY string(100),
RISK_SEV_COLOR string(100),
CONSTRAINT PK_WELL PRIMARY KEY (ENTITY_ID))
OPTIONS (UPDATABLE 'FALSE',WELL.IMPLEMENTED 'TRUE')
AS
(
SELECT CAST(W.WELL_NAME AS   string),CAST(W.WELL_NUM AS   string),CAST(W.UWI AS   string) AS  WELL_UWI,
SD.LATITUDE,SD.LONGITUDE,CAST(F.FIELD AS   string) AS  FIELD, CAST(F.FIELD_TYPE AS string) AS FIELD_TYPE, CAST(P.POOL_NAME AS   string) AS  POOL,
CAST(LL.LAND_RIGHT AS string), CAST(W.PROVINCE_STATE AS string), CAST(W.COUNTY AS string), CAST(W.COUNTRY AS string), CAST(W.OPERATOR AS string),
CAST(WC.WELL_CLASS AS string),W.FINAL_TD,CAST(TD.UOM AS string),W.MAX_TVD,W.LOG_TD,W.WATER_DEPTH,
W.SPUD_DATE, W.PRODUCTION_START_DATE AS  PROD_START_DATE, WS.PROD_STATUS_DATE AS PROD_DATE,  CAST(WS.PRODUCTION_STATUS AS  string),WS.OP_STATUS_DATE AS  OP_DATE, 
CAST(WS.OPERATING_STATUS AS   string),CAST(WS.PRIMARY_PRODUCT AS   string),CAST(PM.PRODUCTION_METHOD AS   string),
CAST(CS.STATUS AS string), W.CURRENT_STATUS_DATE,
NULL AS  OIL,NULL AS  OIL_UOM,NULL AS  GAS,NULL AS  GAS_UOM,NULL AS  WATER,NULL AS  WATER_UOM,NULL AS  LIQUID,
NULL AS  LIQUID_UOM,NULL AS  GAS_BOE,NULL AS  GAS_BOE_UOM,NULL AS  INJ_WATER,NULL AS  INJ_WATER_UOM,
NULL AS  INJ_STEAM,NULL AS  INJ_STEAM_UOM,NULL AS  INJ_CO2,NULL AS  INJ_CO2_UOM,NULL AS  GOR,NULL AS  GOR_UOM,
NULL AS  WC,NULL AS  WC_UOM,NULL AS  WOR,NULL AS  WOR_UOM,NULL AS  OC,NULL AS  OC_UOM,NULL AS  OGR,NULL AS  OGR_UOM,
NULL AS  OIL_POT,NULL AS  OIL_POT_UOM,NULL AS  GAS_POT,NULL AS  GAS_POT_UOM,NULL AS  WATER_POT,NULL AS  WATER_POT_UOM,
NULL AS  LIQUID_POT,NULL AS  LIQUID_POT_UOM,NULL AS  GAS_BOE_POT,NULL AS  GAS_BOE_POT_UOM,NULL AS  INJ_WATER_POT,
NULL AS  INJ_WATER_POT_UOM,NULL AS  INJ_STEAM_POT,NULL AS  INJ_STEAM_POT_UOM,NULL AS  INJ_CO2_POT,NULL AS  INJ_CO2_POT_UOM,
NULL AS  GOR_POT,NULL AS  GOR_POT_UOM,NULL AS  WC_POT,NULL AS  WC_POT_UOM,NULL AS  WOR_POT,NULL AS  WOR_POT_UOM,
NULL AS  OC_POT,NULL AS  OC_POT_UOM,NULL AS  OGR_POT,NULL AS  OGR_POT_UOM,NULL AS  OIL_DIFF,NULL AS  GAS_DIFF,
NULL AS  WATER_DIFF,NULL AS  LIQUID_DIFF,NULL AS  GOR_DIFF,NULL AS  WC_DIFF,NULL AS  WOR_DIFF,NULL AS  CD_OIL,
NULL AS  CD_OIL_POT,NULL AS  CD_GAS,NULL AS  CD_GAS_POT,NULL AS  CD_WATER,NULL AS  CD_WATER_POT,NULL AS  CD_LIQUID,
NULL AS  CD_LIQUID_POT,NULL AS  CD_GAS_BOE,NULL AS  CD_GAS_BOE_POT,NULL AS  CD_INJ_WATER,NULL AS  CD_INJ_WATER_POT,
NULL AS  CD_INJ_STEAM,NULL AS  CD_INJ_STEAM_POT,NULL AS  CD_INJ_CO2,NULL AS  CD_INJ_CO2_POT,NULL AS  CUM_OIL,
NULL AS  CUM_OIL_POT,NULL AS  CUM_GAS,NULL AS  CUM_GAS_POT,NULL AS  CUM_WATER,NULL AS  CUM_WATER_POT,NULL AS  CUM_LIQUID,
NULL AS  CUM_LIQUID_POT,NULL AS  CUM_GAS_BOE,NULL AS  CUM_GAS_BOE_POT,NULL AS  CUM_INJ_WATER,NULL AS  CUM_INJ_WATER_POT,
NULL AS  CUM_INJ_STEAM,NULL AS  CUM_INJ_STEAM_POT,NULL AS  CUM_INJ_CO2,NULL AS  CUM_INJ_CO2_POT,NULL AS  CD_GOR,
NULL AS  CD_GOR_POT,NULL AS  CD_WC,NULL AS  CD_WC_POT,NULL AS  CD_WOR,NULL AS  CD_WOR_POT,NULL AS  CD_OC,NULL AS  CD_OC_POT,
NULL AS  CD_OGR,NULL AS  CD_OGR_POT,NULL AS  CD_GOR,NULL AS  CD_GOR_POT,NULL AS  CUM_WC,NULL AS  CUM_WC_POT,
NULL AS  CUM_WOR,NULL AS  CUM_WOR_POT,NULL AS  CUM_OC,NULL AS  CUM_OC_POT,NULL AS  CUM_OGR,NULL AS  CUM_OGR_POT,
NULL AS  MON_OIL,NULL AS  MON_OIL_POT,NULL AS  MON_GAS,NULL AS  MON_GAS_POT,NULL AS  MON_WATER,NULL AS  MON_WATER_POT,
NULL AS  MON_LIQUID,NULL AS  MON_LIQUID_POT,NULL AS  MON_GAS_BOE,NULL AS  MON_GAS_BOE_POT,NULL AS  MON_INJ_WATER,
NULL AS  MON_INJ_WATER_POT,NULL AS  MON_INJ_STEAM,NULL AS  MON_INJ_STEAM_POT,NULL AS  MON_INJ_CO2,NULL AS  MON_INJ_CO2_POT,
NULL AS  MON_GOR,NULL AS  MON_GOR_POT,NULL AS  MON_WC,NULL AS  MON_WC_POT,NULL AS  MON_WOR,NULL AS  MON_WOR_POT,
NULL AS  MON_OC,NULL AS  MON_OC_POT,NULL AS  MON_OGR,NULL AS  MON_OGR_POT,NULL AS  BHP,NULL AS  BHP_UOM,NULL AS  BHT,
NULL AS  BHT_UOM,NULL AS  WHP,NULL AS  WHP_UOM,NULL AS  WHT,NULL AS  WHT_UOM,NULL AS  CASING_PRESSURE,NULL AS  CASING_PRESSURE_UOM,
NULL AS  CASING_TEMPERATURE,NULL AS  CASING_TEMPERATURE_UOM,NULL AS  TUBING_PRESSURE,NULL AS  TUBING_PRESSURE_UOM,
NULL AS  TUBING_TEMPERATURE,NULL AS  TUBING_TEMPERATURE_UOM,NULL AS  MON_AVG_BHP,NULL AS  MON_AVG_BHT,NULL AS  MON_AVG_WHP,
NULL AS  MON_AVG_WHT,NULL AS  MON_AVG_CASING_PRESSURE,NULL AS  MON_AVG_CASING_TEMPERATURE,NULL AS  MON_AVG_TUBING_PRESSURE,
NULL AS  MON_AVG_TUBING_TEMPERATURE, CAST(W.WELL_ID AS   string)AS ENTITY_ID,CAST(W.REMARK AS   string),
CAST(S.SOURCE_NAME AS string),CAST(RQ.ROW_QUALITY_NAME AS string),CAST(W.ROW_CHANGED_BY AS   string),W.ROW_CHANGED_DATE,
W.ROW_CREATED_DATE,CAST(W.ROW_CREATED_BY AS   string),CAST(W.ACTIVE_IND AS   string),NULL AS  LEVEL1_ID,
NULL AS  LEVEL1_NAME,NULL AS  LEVEL1_TYPE,NULL AS  LEVEL2_ID,NULL AS  LEVEL2_NAME,NULL AS  LEVEL2_TYPE,NULL AS  LEVEL3_ID,
NULL AS  LEVEL3_NAME,NULL AS  LEVEL3_TYPE,NULL AS  LEVEL4_ID,NULL AS  LEVEL4_NAME,NULL AS  LEVEL4_TYPE,
NULL AS  LEVEL5_ID,NULL AS  LEVEL5_NAME,NULL AS  LEVEL5_TYPE,CAST(WA.AREA_ID AS   string) AS  LEVEL6_ID,NULL AS  LEVEL6_NAME,
NULL AS  LEVEL6_TYPE,NULL AS  AREA_PATH,cast(WX.WELL_ID2 AS string),cast(WLT.R_WELL_LEVEL_TYPE AS string),
NULL AS TOTAL_TEST_HOURS,cast(RR.WEIGHTAGE_FACTOR as integer) AS RISK_RANK, EV.EVAL_START_DATE, cast(D.RESTRICTION_TYPE as string) AS DEVIATION,
ExtW.WI_STATUS,ExtW.R_WI_STATUS_ID,ExtW.INJECTION_TYPE_ID, ExtW.INJECTION_TYPE,ExtW.WELL_HISTORY, ExtW.DHSV,ExtW.WIE_NOTE,
WBE.IF_TYPE, RP.R_PRIORITY AS RISK_SEVERITY, RP.COLOR_CODE AS RISK_COLOR
FROM PPDMSrc.WELL W
LEFT OUTER JOIN (SELECT WC.WELL_ID, SP.LATITUDE, SP.LONGITUDE
FROM PPDMSrc.WELL_COMPONENT WC
INNER JOIN PPDMSrc.R_WELL_COMPONENT_TYPE RCT ON WC.WELL_COMPONENT_TYPE = RCT.R_WELL_COMPONENT_TYPE_ID
LEFT OUTER JOIN PPDMSrc.SPATIAL_DESCRIPTION SD ON WC.SPATIAL_DESCRIPTION_ID = SD.SPATIAL_DESCRIPTION_ID
INNER JOIN PPDMSrc.SP_POINT SP ON SD.SPATIAL_DESCRIPTION_ID = SP.SPATIAL_DESCRIPTION_ID
WHERE cast(RCT.WELL_COMPONENT_TYPE AS   string)= 'SpatialDescription') SD ON W.WELL_ID = SD.WELL_ID
LEFT OUTER JOIN (SELECT F.FIELD_NAME,F.FIELD,F.FIELD_ID,FT.FIELD_TYPE 
FROM PPDMSrc.FIELD F 
LEFT OUTER JOIN PPDMSrc.R_FIELD_TYPE FT ON F.FIELD_TYPE = FT.FIELD_TYPE_ID)F ON W.ASSIGNED_FIELD = F.FIELD_ID
LEFT OUTER JOIN (SELECT WC.WELL_ID,CASE WHEN P.POOL_NAME IS NULL THEN P.POOL ELSE P.POOL_NAME END AS POOL_NAME,
ROW_NUMBER() OVER (PARTITION BY WC.WELL_ID ORDER BY P.ROW_CREATED_DATE DESC, WC.ROW_CREATED_DATE DESC) ROW_NUM
FROM PPDMSrc.WELL_COMPONENT WC
INNER JOIN PPDMSrc.R_WELL_COMPONENT_TYPE RCT ON WC.WELL_COMPONENT_TYPE = RCT.R_WELL_COMPONENT_TYPE_ID
INNER JOIN PPDMSrc.POOL P ON WC.POOL_ID = P.POOL_ID
WHERE cast(RCT.WELL_COMPONENT_TYPE AS   string) = 'POOL') P ON (W.WELL_ID = P.WELL_ID AND P.ROW_NUM = 1)
LEFT OUTER JOIN PPDMSrc.R_WELL_CLASS WC ON W.CURRENT_CLASS = WC.R_WELL_CLASS_ID
LEFT OUTER JOIN (SELECT LRW.WELL_ID, LR.LAND_RIGHT, LRS.LAND_RIGHT_STATUS AS LAND_STATUS,
		ROW_NUMBER() OVER (PARTITION BY LRW.WELL_ID ORDER BY LS.ROW_CREATED_DATE DESC) ROW_NUM
		FROM PPDMSrc.LAND_STATUS AS LS 
			INNER JOIN PPDMSrc.LAND_RIGHT AS LR ON LS.LAND_RIGHT_ID = LR.LAND_RIGHT_ID
			INNER JOIN PPDMSrc.LAND_RIGHT_WELL AS LRW ON LR.LAND_RIGHT_ID = LRW.LAND_RIGHT_ID 
			INNER JOIN PPDMSrc.R_LAND_RIGHT_STATUS AS LRS ON LS.LAND_RIGHT_STATUS = LRS.LAND_RIGHT_STATUS_ID 
			WHERE cast(LRW.ACTIVE_IND AS string) = 'Y')LL ON W.WELL_ID = LL.WELL_ID
LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE TD ON (cast(W.FINAL_TD_OUOM AS string)= cast(TD.UOM_ID AS string))
LEFT OUTER JOIN (SELECT WS.WELL_ID, 
MAX(CASE cast(WS.STATUS_TYPE AS   string) WHEN 'Production' THEN cast(WS.STATUS AS   string) END) AS  PRODUCTION_STATUS,
MAX(CASE cast(WS.STATUS_TYPE AS   string) WHEN 'Production' THEN WS.STATUS_DATE END) AS  PROD_STATUS_DATE,
MAX(CASE cast(WS.STATUS_TYPE AS   string) WHEN 'Operating' THEN cast(WS.STATUS AS   string) END) AS  OPERATING_STATUS,
MAX(CASE cast(WS.STATUS_TYPE AS   string) WHEN 'Operating' THEN WS.STATUS_DATE END) AS  OP_STATUS_DATE,
MAX(CASE cast(WS.STATUS_TYPE AS   string) WHEN 'Product' THEN cast(WS.STATUS AS   string) END) AS  PRIMARY_PRODUCT
FROM (
SELECT WS.WELL_ID, RWST.STATUS_TYPE, RWS.STATUS, WS.STATUS_DATE,
ROW_NUMBER() OVER (PARTITION BY WS.WELL_ID, RWST.STATUS_TYPE ORDER BY WS.STATUS_DATE DESC, WS.ROW_CREATED_DATE DESC) ROW_NUM
FROM PPDMSrc.WELL_STATUS WS
INNER JOIN PPDMSrc.R_WELL_STATUS RWS ON WS.R_WELL_STATUS_ID = RWS.R_WELL_STATUS_ID
INNER JOIN PPDMSrc.R_WELL_STATUS_TYPE RWST ON RWS.R_WELL_STATUS_TYPE_ID = RWST.R_WELL_STATUS_TYPE_ID
WHERE cast(RWST.STATUS_TYPE AS   string) IN ('Production','Operating','Product')) WS 
WHERE WS.ROW_NUM = 1
GROUP BY WS.WELL_ID) WS ON W.WELL_ID = WS.WELL_ID
LEFT OUTER JOIN (SELECT PW.WELL_ID,PM.PRODUCTION_METHOD FROM PPDMSrc.PDEN P
INNER JOIN PPDMSrc.PDEN_WELL PW ON P.PDEN_ID = PW.PDEN_ID
INNER JOIN PPDMSrc.R_PRODUCTION_METHOD PM ON P.PRODUCTION_METHOD = PM.R_PRODUCTION_METHOD_ID) PM ON W.WELL_ID = PM.WELL_ID
LEFT OUTER JOIN PPDMSrc.WELL_AREA WA ON W.WELL_ID = WA.WELL_ID
LEFT OUTER JOIN PPDMSrc.R_WELL_LEVEL_TYPE WLT ON (cast(W.WELL_LEVEL_TYPE AS string)) = (cast(WLT.R_WELL_LEVEL_TYPE_ID AS string))
LEFT OUTER JOIN PPDMSrc.R_SOURCE AS  S ON S.SOURCE_ID = WC.SOURCE
LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY AS  RQ ON WC.ROW_QUALITY = RQ.ROW_QUALITY_ID
LEFT OUTER JOIN (SELECT WX.WELL_ID,WX.WELL_ID2 FROM PPDMSrc.WELL_XREF WX 
				INNER JOIN PPDMSrc.R_WELL_XREF_TYPE WXT ON WX.R_WELL_XREF_TYPE_ID = WXT.R_WELL_XREF_TYPE_ID
				WHERE cast(WXT.XREF_TYPE AS string) = 'WellboreToWell')WX ON W.WELL_ID = WX.WELL_ID
LEFT OUTER JOIN PPDMSrc.R_WELL_STATUS CS ON cast(W.CURRENT_STATUS AS string) = cast(CS.R_WELL_STATUS_ID AS string)
LEFT OUTER JOIN PDMExtSrc.PROCESS_MATRIX RR ON W.WELL_ID = RR.ENTITY_ID
LEFT OUTER JOIN PDMExtSrc.R_PRIORITY RP ON RR.SEVERITY_TYPE = RP.R_PRIORITY_ID
LEFT OUTER JOIN PDMExtSrc.WELL ExtW ON W.WELL_ID = ExtW.WELL_ID
LEFT OUTER JOIN PDMExtSrc.R_WI_STATUS WI ON ExtW.R_WI_STATUS_ID = WI.WI_STATUS_ID
LEFT OUTER JOIN (SELECT ENTITY_ID, EVAL_START_DATE, ROW_NUMBER() OVER (PARTITION BY ENTITY_ID ORDER BY EVAL_START_DATE DESC, ROW_CREATED_DATE DESC, ROW_CHANGED_DATE DESC) ROW_NUM
	FROM PDMExtSrc.EVALUATION E)EV ON (W.WELL_ID = EV.ENTITY_ID AND EV.ROW_NUM = 1)
LEFT OUTER JOIN (SELECT ENTITY_ID, string_agg(RESTRICTION_TYPE,',') AS RESTRICTION_TYPE
	FROM
	(
	SELECT ENTITY_ID, RT.RESTRICTION_TYPE, 
	ROW_NUMBER() OVER (PARTITION BY ENTITY_ID, RT.RESTRICTION_TYPE ORDER BY START_DATE DESC, D.ROW_CREATED_DATE DESC, D.ROW_CHANGED_DATE DESC) ROW_NUM
	FROM PDMExtSrc.DEVIATION D
	INNER JOIN PDMExtSrc.R_REST_TYPE RT ON D.R_DEVIATION_TYPE_ID = RT.R_REST_TYPE_ID
	)D 
	WHERE D.ROW_NUM = 1
	GROUP BY ENTITY_ID)D ON (W.WELL_ID = D.ENTITY_ID)
LEFT OUTER JOIN (SELECT WE.ENTITY_ID, 
	(FT.R_IF_TYPE || (CASE WHEN EST.CAT_EQUIP_SUB_TYPE IS NOT NULL THEN (',' || EST.CAT_EQUIP_SUB_TYPE) ELSE '' END)) AS IF_TYPE,
		ROW_NUMBER() OVER (PARTITION BY ENTITY_ID ORDER BY (CASE WHEN (IF_END_DATE IS NULL) THEN 1 ELSE 0 END) DESC, IF_END_DATE DESC) ROW_NUM
		 FROM PDMExtSrc.WI_FAILURE_IMPAIRMENT WE
		INNER JOIN PDMExtSrc.R_IF_TYPE FT ON WE.FAILURE_IMPAIR_TYPE_ID = FT.R_IF_TYPE_ID
		LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE EST ON WE.EQUIP_SUB_TYPE_ID = EST.CAT_EQUIP_SUB_TYPE_ID
		WHERE (WE.FAILURE_IMPAIR_TYPE_ID IS NOT NULL AND WE.FAILURE_IMPAIR_TYPE_ID <> '')
	)WBE ON (W.WELL_ID = WBE.ENTITY_ID AND WBE.ROW_NUM = 1)
WHERE (cast(WA.ACTIVE_IND AS string)) = 'Y' AND (cast(W.ACTIVE_IND AS string)) = 'Y' 
);

CREATE VIEW WELL_COMPLETION
(
COMPLETION_NAME  string (100) NOT NULL,
BASE_DEPTH  bigdecimal (15,4),  
BASE_DEPTH_UOM  string (20),
BASE_STRAT_UNIT_ID  string (40),
COMPLETION_OBS_NO  string (40),  
COMPLETION_DATE timestamp,  
COMPLETION_METHOD  string (100),
COMPLETION_STRAT_UNIT_ID  string (40),
COMPLETION_TYPE  string (100),
EFFECTIVE_DATE timestamp,  
EXPIRY_DATE timestamp,  
REMARK  string (2000),  
STRAT_NAME_SET_ID  string (40),
STRAT_UNIT  string (100),
TOP_DEPTH  bigdecimal (15,4),  
TOP_DEPTH_OUOM  string (20),
TOP_STRAT_UNIT_ID  string (40),  
ROW_CHANGED_BY  string (100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY  string (100),
ROW_CREATED_DATE timestamp,
ENTITY_ID  string (40) NOT NULL,
ENTITY_NAME  string (255),  
AREA_ID string (40),
AREA_NAME string (255),
ACTIVE_IND  string (1),  
SOURCE  string (100),
ROW_QUALITY  string (100),
WELL_COMPLETION_ID  string (40) NOT NULL,
CONSTRAINT PK_WELL_COMPLETION PRIMARY KEY (WELL_COMPLETION_ID))
OPTIONS (UPDATABLE 'FALSE',WELL_COMPLETION.IMPLEMENTED 'TRUE')
AS
(SELECT 
 cast(WC.WELL_COMPLETION AS   string) AS  COMPLETION_NAME,
WC.BASE_DEPTH,
cast(U1.UOM AS   string) AS  BASE_DEPTH_UOM,
cast(WC.BASE_STRAT_UNIT_ID AS   string) AS  BASE_STRAT_UNIT_ID,
NULL AS  COMPLETION_OBS_NO,
WC.COMPLETION_DATE,
cast(CM.R_COMPLETION_METHOD AS   string) AS  COMPLETION_METHOD,
cast(WC.COMPLETION_STRAT_UNIT_ID AS   string) AS  COMPLETION_STRAT_UNIT_ID,
cast(CT.R_COMPLETION_TYPE AS   string) AS  COMPLETION_TYPE, 
 WC.EFFECTIVE_DATE, 
 WC.EXPIRY_DATE,
cast(WC.REMARK AS   string) AS  REMARK, 
 cast(WC.STRAT_NAME_SET_ID AS   string) AS  STRAT_NAME_SET_ID, 
 NULL AS  STRAT_UNIT, 
 WC.TOP_DEPTH,
cast(U.UOM AS   string) AS  TOP_DEPTH_OUOM,
cast(WC.TOP_STRAT_UNIT_ID AS   string) TOP_STRAT_UNIT_ID,
cast(WC.ROW_CHANGED_BY AS   string) AS  ROW_CHANGED_BY, 
 WC.ROW_CHANGED_DATE, 
 cast(WC.ROW_CREATED_BY AS   string) AS  ROW_CREATED_BY, 
 WC.ROW_CREATED_DATE,
cast(WX.WELL_ID2 AS   string) AS  ENTITY_ID, 
 cast(WX.WELL_NAME AS   string) AS  ENTITY_NAME, 
 cast(A.AREA_ID AS string) AS AREA_ID,
 cast(A.PREFERRED_NAME AS string) AS AREA_NAME,
 cast(WC.ACTIVE_IND AS   string) AS  ACTIVE_IND,
cast(S.SOURCE_NAME AS   string) AS  SOURCE, 
 cast(RQ.ROW_QUALITY_NAME AS   string) AS  ROW_QUALITY, 
 cast(WC.WELL_COMPLETION_ID AS   string) AS  WELL_COMPLETION_ID
FROM
    PPDMSrc.WELL_COMPLETION AS  WC 
    LEFT OUTER JOIN PPDMSrc.R_SOURCE AS  S ON S.SOURCE_ID = WC.SOURCE
    LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY AS  RQ ON WC.ROW_QUALITY = RQ.ROW_QUALITY_ID
    LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE AS  U ON WC.TOP_DEPTH_OUOM = U.UOM_ID 
    LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE AS  U1 ON WC.BASE_DEPTH_OUOM = U1.UOM_ID 
    LEFT OUTER JOIN PPDMSrc.R_COMPLETION_TYPE AS  CT ON WC.COMPLETION_TYPE = CT.R_COMPLETION_TYPE_ID 
    LEFT OUTER JOIN PPDMSrc.R_COMPLETION_METHOD AS  CM ON WC.COMPLETION_METHOD = CM.R_COMPLETION_METHOD_ID 
    LEFT OUTER JOIN (SELECT WX.WELL_ID,WX.ACTIVE_IND,WX.WELL_ID2,W.WELL_NAME
    FROM PPDMSrc.WELL_XREF AS  WX  
    INNER JOIN PPDMSrc.WELL AS  W ON WX.WELL_ID2 = W.WELL_ID AND cast(W.ACTIVE_IND AS   string)= 'Y' 
    INNER JOIN PPDMSrc.R_WELL_XREF_TYPE AS  WXT ON WX.R_WELL_XREF_TYPE_ID = WXT.R_WELL_XREF_TYPE_ID
    WHERE cast(WXT.XREF_TYPE as string)= 'WellboreToWell') WX ON WC.WELL_ID = WX.WELL_ID AND cast(WX.ACTIVE_IND AS  string) = 'Y'
    LEFT OUTER JOIN PPDMSrc.WELL_AREA WA ON WX.WELL_ID2 = WA.WELL_ID
    LEFT OUTER JOIN PPDMSrc.AREA A ON WA.AREA_ID = A.AREA_ID
    WHERE cast(WC.ACTIVE_IND AS  string) = 'Y'    
);

CREATE VIEW FACILITY
(
FACILITY_NAME string (255),
FACILITY_TYPE  string (100),
LATITUDE     bigdecimal   (15,4),
LONGITUDE bigdecimal   (15,4),
OIL  bigdecimal   (15,4),
OIL_UOM  string (20),
GAS       bigdecimal   (15,4),
GAS_UOM   string (20),
WATER   bigdecimal   (15,4),
WATER_UOM string (20),
LIQUID  bigdecimal   (15,4),
LIQUID_UOM string (20),
GAS_BOE     bigdecimal   (15,4),
GAS_BOE_UOM string (20),
INJ_WATER bigdecimal   (15,4),
INJ_WATER_UOM string (20),
INJ_STEAM  bigdecimal   (15,4),
INJ_STEAM_UOM string (20),
INJ_CO2 bigdecimal   (15,4),
INJ_CO2_UOM   string (20),
GOR       bigdecimal   (15,4),
GOR_UOM  string (20),
WC  bigdecimal   (15,4),
WC_UOM string (20),
WOR      bigdecimal   (15,4),
WOR_UOM string (20),
OC   bigdecimal   (15,4),
OC_UOM  string (20),
OGR       bigdecimal   (15,4),
OGR_UOM  string (20),
OIL_POT       bigdecimal   (15,4),
OIL_POT_UOM   string (20),
GAS_POT     bigdecimal   (15,4),
GAS_POT_UOM string (20),
WATER_POT      bigdecimal   (15,4),
WATER_POT_UOM  string (20),
LIQUID_POT       bigdecimal   (15,4),
LIQUID_POT_UOM  string (20),
GAS_BOE_POT   bigdecimal   (15,4),
GAS_BOE_POT_UOM string (20),
INJ_WATER_POT      bigdecimal   (15,4),
INJ_WATER_POT_UOM  string (20),
INJ_STEAM_POT       bigdecimal   (15,4),
INJ_STEAM_POT_UOM  string (20),
INJ_CO2_POT    bigdecimal   (15,4),
INJ_CO2_POT_UOM   string (20),
GOR_POT     bigdecimal   (15,4),
GOR_POT_UOM    string (20),
WC_POT       bigdecimal   (15,4),
WC_POT_UOM  string (20),
WOR_POT    bigdecimal   (15,4),
WOR_POT_UOM   string (20),
OC_POT bigdecimal   (15,4),
OC_POT_UOM   string (20),
OGR_POT     bigdecimal   (15,4),
OGR_POT_UOM    string (20),
OIL_DIFF       bigdecimal   (15,4),
GAS_DIFF     bigdecimal   (15,4),
WATER_DIFF      bigdecimal   (15,4),
LIQUID_DIFF      bigdecimal   (15,4),
GOR_DIFF    bigdecimal   (15,4),
WC_DIFF      bigdecimal   (15,4),
WOR_DIFF   bigdecimal   (15,4),
CD_OIL   bigdecimal   (15,4),
CD_OIL_POT      bigdecimal   (15,4),
CD_GAS bigdecimal   (15,4),
CD_GAS_POT    bigdecimal   (15,4),
CD_WATER  bigdecimal   (15,4),
CD_WATER_POT       bigdecimal   (15,4),
CD_LIQUID  bigdecimal   (15,4),
CD_LIQUID_POT       bigdecimal   (15,4),
CD_GAS_BOE    bigdecimal   (15,4),
CD_GAS_BOE_POT  bigdecimal   (15,4),
CD_INJ_WATER  bigdecimal   (15,4),
CD_INJ_WATER_POT     bigdecimal   (15,4),
CD_INJ_STEAM  bigdecimal   (15,4),
CD_INJ_STEAM_POT     bigdecimal   (15,4),
CD_INJ_CO2      bigdecimal   (15,4),
CD_INJ_CO2_POT    bigdecimal   (15,4),
CUM_OIL     bigdecimal   (15,4),
CUM_OIL_POT   bigdecimal   (15,4),
CUM_GAS   bigdecimal   (15,4),
CUM_GAS_POT bigdecimal   (15,4),
CUM_WATER    bigdecimal   (15,4),
CUM_WATER_POT  bigdecimal   (15,4),
CUM_LIQUID     bigdecimal   (15,4),
CUM_LIQUID_POT   bigdecimal   (15,4),
CUM_GAS_BOE bigdecimal   (15,4),
CUM_GAS_BOE_POT    bigdecimal   (15,4),
CUM_INJ_WATER    bigdecimal   (15,4),
CUM_INJ_WATER_POT  bigdecimal   (15,4),
CUM_INJ_STEAM     bigdecimal   (15,4),
CUM_INJ_STEAM_POT   bigdecimal   (15,4),
CUM_INJ_CO2  bigdecimal   (15,4),
CUM_INJ_CO2_POT       bigdecimal   (15,4),
CD_GOR       bigdecimal   (15,4),
CD_GOR_POT   bigdecimal   (15,4),
CD_WC   bigdecimal   (15,4),
CD_WC_POT      bigdecimal   (15,4),
CD_WOR      bigdecimal   (15,4),
CD_WOR_POT  bigdecimal   (15,4),
CD_OC  bigdecimal   (15,4),
CD_OC_POT       bigdecimal   (15,4),
CD_OGR       bigdecimal   (15,4),
CD_OGR_POT   bigdecimal   (15,4),
CUM_GOR   bigdecimal   (15,4),
CUM_GOR_POT bigdecimal   (15,4),
CUM_WC     bigdecimal   (15,4),
CUM_WC_POT   bigdecimal   (15,4),
CUM_WOR  bigdecimal   (15,4),
CUM_WOR_POT       bigdecimal   (15,4),
CUM_OC      bigdecimal   (15,4),
CUM_OC_POT  bigdecimal   (15,4),
CUM_OGR   bigdecimal   (15,4),
CUM_OGR_POT bigdecimal   (15,4),
ENTITY_ID string (100 )NOT NULL,
REMARK    string (2000),
SOURCE string (100),
ROW_QUALITY   string (100 )NOT NULL,
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND    string (1),
LEVEL1_ID string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE   string (100),
LEVEL2_ID string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE   string (100),
LEVEL3_ID string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE   string (100),
LEVEL4_ID string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE   string (100),
LEVEL5_ID string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE   string (100),
LEVEL6_ID string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE   string (100),
CONSTRAINT PK_FACILITY PRIMARY KEY (ENTITY_ID))
OPTIONS (UPDATABLE 'FALSE',FACILITY.IMPLEMENTED 'TRUE')
AS
(
SELECT
CAST(F.FACILITY_NAME AS   string),CAST(FT.FACILITY_TYPE AS   string),
SP.LATITUDE,SP.LONGITUDE,NULL AS  OIL,NULL AS  OIL_UOM,NULL AS  GAS,NULL AS  GAS_UOM,NULL AS  WATER,
NULL AS  WATER_UOM,NULL AS  LIQUID,NULL AS  LIQUID_UOM,NULL AS  GAS_BOE,NULL AS  GAS_BOE_UOM,
NULL AS  INJ_WATER,NULL AS  INJ_WATER_UOM,NULL AS  INJ_STEAM,NULL AS  INJ_STEAM_UOM,
NULL AS  INJ_CO2,NULL AS  INJ_CO2_UOM,NULL AS  GOR,NULL AS  GOR_UOM,NULL AS  WC,NULL AS  WC_UOM,
NULL AS  WOR,NULL AS  WOR_UOM,NULL AS  OC,NULL AS  OC_UOM,NULL AS  OGR,NULL AS  OGR_UOM,NULL AS  OIL_POT,
NULL AS  OIL_POT_UOM,NULL AS  GAS_POT,NULL AS  GAS_POT_UOM,NULL AS  WATER_POT,NULL AS  WATER_POT_UOM,
NULL AS  LIQUID_POT,NULL AS  LIQUID_POT_UOM,NULL AS  GAS_BOE_POT,NULL AS  GAS_BOE_POT_UOM,
NULL AS  INJ_WATER_POT,NULL AS  INJ_WATER_POT_UOM,NULL AS  INJ_STEAM_POT,NULL AS  INJ_STEAM_POT_UOM,NULL AS  INJ_CO2_POT,
NULL AS  INJ_CO2_POT_UOM,NULL AS  GOR_POT,NULL AS  GOR_POT_UOM,NULL AS  WC_POT,NULL AS  WC_POT_UOM,
NULL AS  WOR_POT,NULL AS  WOR_POT_UOM,NULL AS  OC_POT,NULL AS  OC_POT_UOM,NULL AS  OGR_POT,NULL AS  OGR_POT_UOM,
NULL AS  OIL_DIFF,NULL AS  GAS_DIFF,NULL AS  WATER_DIFF,NULL AS  LIQUID_DIFF,NULL AS  GOR_DIFF,NULL AS  WC_DIFF,
NULL AS  WOR_DIFF,NULL AS  CD_OIL,NULL AS  CD_OIL_POT,NULL AS  CD_GAS,NULL AS  CD_GAS_POT,NULL AS  CD_WATER,
NULL AS  CD_WATER_POT,NULL AS  CD_LIQUID,NULL AS  CD_LIQUID_POT,NULL AS  CD_GAS_BOE,NULL AS  CD_GAS_BOE_POT,
NULL AS  CD_INJ_WATER,NULL AS  CD_INJ_WATER_POT,NULL AS  CD_INJ_STEAM,NULL AS  CD_INJ_STEAM_POT,
NULL AS  CD_INJ_CO2,NULL AS  CD_INJ_CO2_POT,NULL AS  CUM_OIL,NULL AS  CUM_OIL_POT,NULL AS  CUM_GAS,
NULL AS  CUM_GAS_POT,NULL AS  CUM_WATER,NULL AS  CUM_WATER_POT,NULL AS  CUM_LIQUID,NULL AS  CUM_LIQUID_POT,
NULL AS  CUM_GAS_BOE,NULL AS  CUM_GAS_BOE_POT,NULL AS  CUM_INJ_WATER,NULL AS  CUM_INJ_WATER_POT,NULL AS  CUM_INJ_STEAM,
NULL AS  CUM_INJ_STEAM_POT,NULL AS  CUM_INJ_CO2,NULL AS  CUM_INJ_CO2_POT,NULL AS  CD_GOR,NULL AS  CD_GOR_POT,
NULL AS  CD_WC,NULL AS  CD_WC_POT,NULL AS  CD_WOR,NULL AS  CD_WOR_POT,NULL AS  CD_OC,NULL AS  CD_OC_POT,
NULL AS  CD_OGR,NULL AS  CD_OGR_POT,NULL AS  CUM_GOR,NULL AS  CUM_GOR_POT,NULL AS  CUM_WC,NULL AS  CUM_WC_POT,
NULL AS  CUM_WOR,NULL AS  CUM_WOR_POT,NULL AS  CUM_OC,NULL AS  CUM_OC_POT,NULL AS  CUM_OGR,NULL AS  CUM_OGR_POT,
CAST(F.FACILITY_ID AS   string)AS ENTITY_ID,CAST(F.REMARK AS   string),CAST(RS.SOURCE_NAME AS   string)AS SOURCE,
CAST(PRQ.ROW_QUALITY_NAME AS   string) AS  ROW_QUALITY,CAST(F.ROW_CHANGED_BY AS   string),
F.ROW_CHANGED_DATE,F.ROW_CREATED_DATE,CAST(F.ROW_CREATED_BY AS   string),CAST(F.ACTIVE_IND AS   string),
NULL AS  LEVEL1_ID,NULL AS  LEVEL1_NAME,NULL AS  LEVEL1_TYPE,NULL AS  LEVEL2_ID,NULL AS  LEVEL2_NAME,
NULL AS  LEVEL2_TYPE,NULL AS  LEVEL3_ID,NULL AS  LEVEL3_NAME,NULL AS  LEVEL3_TYPE,NULL AS  LEVEL4_ID,
NULL AS  LEVEL4_NAME,NULL AS  LEVEL4_TYPE,NULL AS  LEVEL5_ID,NULL AS  LEVEL5_NAME,NULL AS  LEVEL5_TYPE,
CAST(FA.AREA_ID AS  string) AS  LEVEL6_ID,NULL AS  LEVEL6_NAME,NULL AS  LEVEL6_TYPE
 FROM PPDMSrc.FACILITY AS  F
LEFT OUTER JOIN PPDMSrc.R_FACILITY_TYPE AS  FT ON F.FACILITY_TYPE_ID = FT.FACILITY_TYPE_ID
LEFT OUTER JOIN (SELECT FC.FACILITY_ID,SP.LATITUDE,SP.LONGITUDE
		FROM PPDMSrc.FACILITY_COMPONENT FC 
		INNER JOIN PPDMSrc.R_FACILITY_COMP_TYPE AS FCT ON FC.R_FACILITY_COMP_TYPE_ID = FCT.R_FACILITY_COMP_TYPE_ID
		LEFT OUTER JOIN PPDMSrc.SP_POINT AS SP ON FC.SPATIAL_DESCRIPTION_ID = SP.SPATIAL_DESCRIPTION_ID
		WHERE (cast(FCT.R_FACILITY_COMP_TYPE AS string) = 'SPATIAL_DESCRIPTION'))SP ON (F.FACILITY_ID = SP.FACILITY_ID)
LEFT OUTER JOIN PPDMSrc.R_SOURCE AS  RS ON F.SOURCE = RS.SOURCE_ID
LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY AS  PRQ ON F.ROW_QUALITY= PRQ.ROW_QUALITY_ID
LEFT OUTER JOIN PPDMSrc.FACILITY_AREA FA ON F.FACILITY_ID = FA.FACILITY_ID AND CAST(FA.ACTIVE_IND AS string) = 'Y'
WHERE CAST(F.ACTIVE_IND AS string) = 'Y' 
);

CREATE VIEW PRODUCTION_VOLUME
(
VOLUME_DATE timestamp NOT NULL,
PERIOD_TYPE string(100) NOT NULL,
OIL  bigdecimal(15,4),
OIL_POT  bigdecimal(15,4),
OIL_EST  bigdecimal(15,4),
OIL_UOM  string(20),
GAS       bigdecimal   (15,4),
GAS_POT     bigdecimal   (15,4),
GAS_EST     bigdecimal   (15,4),
GAS_UOM   string (20),
WATER   bigdecimal   (15,4),
WATER_POT      bigdecimal   (15,4),
WATER_EST      bigdecimal   (15,4),
WATER_UOM string (20),
LIQUID  bigdecimal   (15,4),
LIQUID_UOM string (20),
LIQUID_POT       bigdecimal   (15,4),
CONDENSATE    bigdecimal   (15,4),
CONDENSATE_POT  bigdecimal   (15,4),
CONDENSATE_UOM   string (20),
GAS_BOE     bigdecimal   (15,4),
GAS_BOE_UOM string (20),
GAS_BOE_POT   bigdecimal   (15,4),
GAS_BOE_POT_UOM string (20),
INJ_WATER bigdecimal   (15,4),
INJ_WATER_UOM string (20),
INJ_WATER_POT      bigdecimal   (15,4),
INJ_WATER_POT_UOM  string (20),
INJ_STEAM  bigdecimal   (15,4),
INJ_STEAM_UOM string (20),
INJ_STEAM_POT       bigdecimal   (15,4),
INJ_STEAM_POT_UOM  string (20),
INJ_GAS bigdecimal   (15,4),
INJ_GAS_UOM   string (20),
INJ_GAS_POT    bigdecimal   (15,4),
INJ_GAS_POT_UOM   string (20),
OIL_MEAS bigdecimal(15,4),
GAS_MEAS bigdecimal(15,4),
WATER_MEAS bigdecimal(15,4),
LIQUID_MEAS bigdecimal(15,4),
GOR       bigdecimal   (15,4),
GOR_UOM  string (20),
WC  bigdecimal   (15,4),
WC_UOM string (20),
WOR      bigdecimal   (15,4),
WOR_UOM string (20),
GOR_POT     bigdecimal   (15,4),
GOR_POT_UOM    string (20),
WC_POT       bigdecimal   (15,4),
WC_POT_UOM  string (20),
WOR_POT    bigdecimal   (15,4),
WOR_POT_UOM   string (20),
OC   bigdecimal   (15,4),
OC_UOM  string (20),
OC_POT bigdecimal   (15,4),
OC_POT_UOM   string (20),
OGR       bigdecimal   (15,4),
OGR_UOM  string (20),
OGR_POT     bigdecimal   (15,4),
OGR_POT_UOM    string (20),
CUM_OIL	bigdecimal	(15,4),
CUM_GAS	bigdecimal	(15,4),
CUM_WATER	bigdecimal	(15,4),
CUM_LIQUID	bigdecimal	(15,4),
CUM_CONDENSATE bigdecimal(15,4),
CUM_GAS_BOE	bigdecimal	(15,4),
CUM_INJ_WATER	bigdecimal	(15,4),
CUM_INJ_STEAM	bigdecimal	(15,4),
CUM_INJ_CO2	bigdecimal	(15,4),
CUM_GOR	bigdecimal	(15,4),
CUM_WC	bigdecimal	(15,4),
CUM_WOR	bigdecimal	(15,4),
CUM_OC	bigdecimal	(15,4),
CUM_OGR	bigdecimal	(15,4),
ENTITY_ID string (100) NOT NULL,
ENTITY_NAME  string (255),
NETWORK_ID string (40),
NETWORK_NAME string (255),
SOURCE string (100),
ROW_QUALITY   string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND    string (1),
VOL_ID   string (40) NOT NULL,
LEVEL1_ID string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE   string (100),
LEVEL2_ID string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE   string (100),
LEVEL3_ID string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE   string (100),
LEVEL4_ID string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE   string (100),
LEVEL5_ID string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE   string (100),
LEVEL6_ID string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE   string (100),
CONSTRAINT PK_PRODUCTION_VOLUME PRIMARY KEY (VOL_ID))
OPTIONS (UPDATABLE 'FALSE',PRODUCTION_VOLUME.IMPLEMENTED 'TRUE')
AS
(SELECT 
 PVSA.VOLUME_DATE, cast(RPT.R_PERIOD_TYPE AS   string) AS  PERIOD_TYPE,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME  AS string)= 'Oil' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.VOLUME  END) AS  OIL, 
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string)= 'Oil' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.POTENTIAL_VOLUME  END) AS  OIL_POT, 
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME  AS string)= 'Oil' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVE.VOLUME  END) AS OIL_EST,
 MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string)= 'Oil' THEN cast(U.UOM AS   string) END) AS  OIL_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string)='Gas' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.VOLUME END) AS  GAS,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string)='Gas' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.POTENTIAL_VOLUME END) AS  GAS_POT, 
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string)='Gas' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVE.VOLUME END) AS  GAS_EST,
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string)='Gas' THEN cast(U.UOM AS   string) END) AS  GAS_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) ='Water' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.VOLUME END) AS  WATER,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) ='Water' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.POTENTIAL_VOLUME END) AS  WATER_POT, 
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) ='Water' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVE.VOLUME END) AS  WATER_EST,
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string)='Water' THEN cast(U.UOM AS   string) END)  AS  WATER_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) IN ('Oil','Water') and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.VOLUME END)  AS  LIQUID,
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string) IN ('Oil','Water') THEN cast(U.UOM AS   string) END) AS  LIQUID_UOM, 
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) IN ('Oil','Water') and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.POTENTIAL_VOLUME END) AS  LIQUID_POT,
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) ='Condensate' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.VOLUME END) AS  CONDENSATE,
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) ='Condensate' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.POTENTIAL_VOLUME END) AS  CONDENSATE_POT, 
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string)='Condensate' THEN cast(U.UOM AS   string) END)  AS  CONDENSATE_UOM,
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) IN ('Gas') and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.VOLUME*0.5659 END) AS  GAS_BOE,
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string) IN ('Gas') THEN cast(U.UOM AS   string) END) AS  GAS_BOE_UOM, 
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) IN ('Gas') and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.POTENTIAL_VOLUME*0.5659 END) AS  GAS_BOE_POT, 
 NULL AS  GAS_BOE_POT_UOM, 
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Water' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.VOLUME END) AS  INJ_WATER,
 MAX(CASE WHEN cast(PT.PRODUCT_NAME AS string)='Water' THEN cast(U.UOM AS   string) END)  AS  INJ_WATER_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Water' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.POTENTIAL_VOLUME END) AS  INJ_WATER_POT, 
  NULL AS  INJ_WATER_POT_UOM, 
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Steam' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.VOLUME END) AS  INJ_STEAM,
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS string)='Steam' THEN cast(U.UOM AS   string) END)  AS  INJ_STEAM_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Steam' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.POTENTIAL_VOLUME END) AS  INJ_STEAM_POT,  NULL AS  INJ_STEAM_POT_UOM, 
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Gas' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.VOLUME END) AS  INJ_GAS,
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS string)='Gas' THEN cast(U.UOM AS   string) END)  AS  INJ_GAS_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Gas' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.POTENTIAL_VOLUME END) AS  INJ_GAS_POT, 
NULL AS  INJ_GAS_POT_UOM, NULL AS OIL_MEAS, NULL AS GAS_MEAS, NULL AS WATER_MEAS, NULL AS LIQUID_MEAS,
NULL AS  GOR,  NULL AS  GOR_UOM, NULL AS  WC, NULL AS  WC_UOM, NULL AS  WOR,NULL AS  WOR_UOM, NULL AS  GOR_POT, NULL AS  GOR_POT_UOM, 
NULL AS  WC_POT,NULL AS  WC_POT_UOM, NULL AS  WOR_POT,  NULL AS  WOR_POT_UOM,NULL AS  OC,NULL AS  OC_UOM,NULL AS  OC_POT,
NULL AS  OC_POT_UOM,NULL AS  OGR, NULL AS  OGR_UOM,NULL AS  OGR_POT,NULL AS  OGR_POT_UOM, 
SUM(CASE WHEN (cast(PT.PRODUCT_NAME  AS string)= 'Oil' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.CUM_VOLUME  END) AS  CUM_OIL, 
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string)='Gas' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.CUM_VOLUME END) AS  CUM_GAS,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) ='Water' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.CUM_VOLUME END) AS  CUM_WATER,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) IN ('Oil','Water') and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.CUM_VOLUME END)  AS  CUM_LIQUID,
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) ='Condensate' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.CUM_VOLUME END) AS  CUM_CONDENSATE,
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) IN ('Gas') and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN 
 (CASE WHEN PVSA.CUM_VOLUME IS NOT NULL THEN PVSA.CUM_VOLUME * 0.65 ELSE NULL END) END) AS  CUM_GAS_BOE,
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Water' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.CUM_VOLUME END) AS  CUM_INJ_WATER,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Steam' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.CUM_VOLUME END) AS  CUM_INJ_STEAM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Gas' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.CUM_VOLUME END) AS  CUM_INJ_GAS,
NULL AS  CUM_GOR, NULL AS  CUM_WC, NULL AS  CUM_WOR,NULL AS  CUM_OC,NULL AS  CUM_OGR,
PD.ENTITY_ID,cast(PD.ENTITY_NAME as string),cast(PVSA.DELIVERY_NETWORK_ID AS   string) AS  NETWORK_ID,CAST(DN.LONG_NAME AS string) AS  NETWORK_NAME,
MAX(cast(RS.SOURCE_NAME AS   string)) AS  SOURCE,MAX(cast(PRQ.ROW_QUALITY_NAME AS   string)),MAX(CAST(PVSA.ROW_CHANGED_BY AS string)),
MAX(PVSA.ROW_CHANGED_DATE),MAX(PVSA.ROW_CREATED_DATE),MAX(CAST(PVSA.ROW_CREATED_BY AS   string)),
CAST(PVSA.ACTIVE_IND AS   string),UUID() AS  VOL_ID,NULL AS  LEVEL1_ID,NULL AS  LEVEL1_NAME,
NULL AS  LEVEL1_TYPE,NULL AS  LEVEL2_ID,NULL AS  LEVEL2_NAME,NULL AS  LEVEL2_TYPE,NULL AS  LEVEL3_ID,
NULL AS  LEVEL3_NAME,NULL AS  LEVEL3_TYPE,NULL AS  LEVEL4_ID,NULL AS  LEVEL4_NAME,NULL AS  LEVEL4_TYPE,
NULL AS  LEVEL5_ID,NULL AS  LEVEL5_NAME,NULL AS  LEVEL5_TYPE,CAST(PD.AREA_ID AS STRING) AS  LEVEL6_ID,
NULL AS  LEVEL6_NAME,NULL AS  LEVEL6_TYPE
FROM 
PPDMSrc.PDEN_VOL_SUMMARY_ALLOCATED AS  PVSA
 INNER JOIN PPDMSrc.PDEN_PERIOD AS  PP ON PP.PDEN_PERIOD_ID = PVSA.PDEN_PERIOD_ID
 INNER JOIN PPDMSrc.R_PERIOD_TYPE AS  RPT ON RPT.R_PERIOD_TYPE_ID = PP.PERIOD_TYPE
 INNER JOIN PPDMSrc.PRODUCT AS  PT ON PT.PRODUCT_ID = PVSA.PRODUCT_ID
 INNER JOIN PPDMSrc.R_ACTIVITY_TYPE AS  RAT ON RAT.R_ACTIVITY_TYPE_ID = PVSA.ACTIVITY_TYPE
 INNER JOIN (SELECT PD.PDEN_ID,PD.WELL_ID AS  ENTITY_ID,W.WELL_NAME AS  ENTITY_NAME,WA.AREA_ID 
 FROM PPDMSrc.PDEN_WELL PD 
 INNER JOIN PPDMSrc.WELL W ON W.WELL_ID = PD.WELL_ID
 INNER JOIN PPDMSrc.WELL_AREA WA ON W.WELL_ID = WA.WELL_ID
 WHERE cast(W.ACTIVE_IND AS string) = 'Y' AND cast(WA.ACTIVE_IND AS string) = 'Y'
 UNION ALL 
 SELECT PF.PDEN_ID,PF.FACILITY_ID AS  ENTITY_ID,F.FACILITY_NAME AS  ENTITY_NAME,FA.AREA_ID 
 FROM PPDMSrc.PDEN_FACILITY PF 
 INNER JOIN PPDMSrc.FACILITY F ON F.FACILITY_ID = PF.FACILITY_ID
 INNER JOIN PPDMSrc.FACILITY_AREA FA ON F.FACILITY_ID = FA.FACILITY_ID
 WHERE cast(F.ACTIVE_IND AS string) = 'Y' AND cast(FA.ACTIVE_IND AS string) = 'Y'
 UNION ALL 
 SELECT PWC.PDEN_ID,PWC.WELL_COMPLETION_ID AS ENTITY_ID, WC.WELL_COMPLETION AS ENTITY_NAME, WA.AREA_ID
 FROM PPDMSrc.PDEN_WELL_COMPLETION PWC
 INNER JOIN PPDMSrc.WELL_COMPLETION WC ON PWC.WELL_COMPLETION_ID = WC.WELL_COMPLETION_ID
 LEFT OUTER JOIN (SELECT WX.WELL_ID,WX.ACTIVE_IND,WX.WELL_ID2,W.WELL_NAME
    FROM PPDMSrc.WELL_XREF AS  WX  
    INNER JOIN PPDMSrc.WELL AS  W ON WX.WELL_ID2 = W.WELL_ID AND cast(W.ACTIVE_IND AS   string)= 'Y' 
    INNER JOIN PPDMSrc.R_WELL_XREF_TYPE AS  WXT ON WX.R_WELL_XREF_TYPE_ID = WXT.R_WELL_XREF_TYPE_ID
    WHERE cast(WXT.XREF_TYPE as string)= 'WellboreToWell') WX ON WC.WELL_ID = WX.WELL_ID AND cast(WX.ACTIVE_IND AS  string) = 'Y'
 INNER JOIN PPDMSrc.WELL_AREA WA ON WX.WELL_ID2 = WA.WELL_ID) PD ON PD.PDEN_ID = PVSA.PDEN_ID
 LEFT OUTER JOIN PPDMSrc.DELIVERY_NETWORK AS  DN ON DN.DELIVERY_NETWORK_ID = PVSA.DELIVERY_NETWORK_ID
 LEFT OUTER JOIN PPDMSrc.PDEN_VOL_SUMMARY_ESTIMATED PVE ON (PVSA.VOLUME_DATE = PVE.VOLUME_DATE AND PVSA.PDEN_ID = PVE.PDEN_ID AND 
 PVSA.DELIVERY_NETWORK_ID = PVE.DELIVERY_NETWORK_ID AND PVSA.PRODUCT_ID = PVE.PRODUCT_ID AND PVSA.ACTIVITY_TYPE = PVE.ACTIVITY_TYPE AND PVSA.PDEN_PERIOD_ID = PVE.PDEN_PERIOD_ID)
  LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON PVSA.SOURCE = RS.SOURCE_ID
 LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY AS  PRQ ON PVSA.ROW_QUALITY= PRQ.ROW_QUALITY_ID
 LEFT OUTER JOIN (SELECT U.UOM_ID,U.UOM,ROW_NUMBER() OVER (PARTITION BY cast(U.UOM AS string) ORDER BY U.ROW_CREATED_DATE DESC) ROWNUM
 FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U
 LEFT OUTER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
 WHERE cast(S.UOM_SYSTEM AS   string)= 'English') U ON (PVSA.VOLUME_UOM = U.UOM_ID AND U.ROWNUM = 1)
 WHERE DN.ACTIVE_IND <> 'N' AND PD.ENTITY_ID IS NOT NULL
 GROUP BY PVSA.VOLUME_DATE,cast(RPT.R_PERIOD_TYPE as string),PD.ENTITY_ID,cast(PD.ENTITY_NAME as string),PVSA.DELIVERY_NETWORK_ID,
 cast(DN.LONG_NAME as string),CAST(PD.AREA_ID AS STRING), cast(PVSA.ACTIVE_IND as string)
);

CREATE VIEW MEASUREMENTS
(
MEASUREMENT_DATE timestamp NOT NULL,
TUBING_TEMPERATURE bigdecimal(15,4),
TUBING_PRESSURE bigdecimal(15,4),
TUBING_PRESSURE_UOM string(20),
TUBING_TEMPERATURE_UOM  string(20),
CASING_PRESSURE  bigdecimal(15,4),
CASING_PRESSURE_UOM string(20),
CASING_TEMPERATURE bigdecimal(15,4),
CASING_TEMPERATURE_UOM   string(20),
BHP bigdecimal(15,4),
BHP_UOM   string(20),
BHT bigdecimal(15,4),
BHT_UOM   string(20),
WHP      bigdecimal(15,4),
WHP_UOM string(20),
WHT      bigdecimal(15,4),
WHT_UOM  string(20),
ENTITY_ID string (40) NOT NULL,
ENTITY_NAME  string (255),
ENTITY_TYPE   string (100),
NETWORK_ID string(40),
NETWORK_NAME string(100),
SOURCE string (100),
ROW_QUALITY   string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND    string (1),
MEASUREMENT_ID string (40) NOT NULL,
CONSTRAINT PK_MEASUREMENTS PRIMARY KEY (MEASUREMENT_ID))
OPTIONS (UPDATABLE 'FALSE',MEASUREMENTS.IMPLEMENTED 'TRUE')
AS
SELECT 	PM.MEASUREMENT_DATE,
		AVG(CASE WHEN rtrim(upper(cast(RMP.R_MEASUREMENT_POINT AS string)))= ('TUBING TEMPERATURE') THEN PM."VALUE" END) AS  TUBING_TEMPERATURE,
		AVG(CASE WHEN rtrim(upper(cast(RMP.R_MEASUREMENT_POINT AS   string) )) = ('TUBING PRESSURE') THEN PM."VALUE" END) AS  TUBING_PRESSURE,
		MAX(cast(PE.UOM AS string)) AS TUBING_PRES_UOM, MAX(cast(TE.UOM AS string)) AS TUBING_TEMP_UOM,
		AVG(CASE WHEN rtrim(upper(cast(RMP.R_MEASUREMENT_POINT AS   string) ))= ('CASING PRESSURE') THEN PM."VALUE" END)  AS  CASING_PRESSURE,
		MAX(cast(PE.UOM AS string)) AS CASING_PRES_UOM,
		AVG(CASE WHEN rtrim(upper(cast(RMP.R_MEASUREMENT_POINT AS   string) ))= ('CASING TEMPERATURE') THEN PM."VALUE" END) AS  CASING_TEMPERATURE,
		MAX(cast(TE.UOM AS string)) AS CASING_TEMP_UOM,
		AVG(CASE WHEN rtrim(upper(cast(RMP.R_MEASUREMENT_POINT AS   string)))= ('BOTTOM HOLE PRESSURE') THEN PM."VALUE" END) AS  BHP,
		MAX(cast(PE.UOM AS string)) AS BHP_UOM,
		AVG(CASE WHEN rtrim(upper(cast(RMP.R_MEASUREMENT_POINT AS   string)))= ('BOTTOM HOLE TEMPERATURE') THEN PM."VALUE" END) AS  BHT,
		MAX(cast(TE.UOM AS string)) AS BHT_UOM,
		AVG(CASE WHEN rtrim(upper(cast(RMP.R_MEASUREMENT_POINT AS   string) ))= ('WELLHEAD PRESSURE') THEN PM."VALUE" END) AS  WHP,
		MAX(cast(PE.UOM AS string)) AS WHP_UOM,
		AVG(CASE WHEN rtrim(upper(cast(RMP.R_MEASUREMENT_POINT AS   string) ))= ('WELLHEAD TEMPERATURE') THEN PM."VALUE" END) AS  WHT,
		MAX(cast(TE.UOM AS string)) AS BHT_UOM,
		CAST(PW.ENTITY_ID AS  string) AS ENTITY_ID, CAST(PW.ENTITY_NAME AS  string) AS ENTITY_NAME, cast(PW.ENTITY_TYPE AS string) AS  ENTITY_TYPE,
		cast(DN.DELIVERY_NETWORK_ID AS string) AS NETWORK_ID,cast(DN.LONG_NAME AS string) AS NETWORK_NAME,
		MAX(cast(RS.SOURCE_NAME AS   string)) AS  SOURCE_NAME, MAX(cast(PRQ.ROW_QUALITY_NAME AS   string)) AS  ROW_QUALITY,
		MAX(cast(PM.ROW_CHANGED_BY AS   string)) ROW_CHANGED_BY, MAX(PM.ROW_CHANGED_DATE) ROW_CHANGED_DATE, MAX(PM.ROW_CREATED_DATE) ROW_CREATED_DATE,
		MAX(cast(PM.ROW_CREATED_BY AS   string)) ROW_CREATED_BY, cast(PM.ACTIVE_IND AS   string) ACTIVE_IND, UUID() AS MEASUREMENT_ID
		FROM PPDMSrc.PDEN_MEASUREMENT AS  PM
		INNER JOIN PPDMSrc.R_MEASUREMENT_POINT AS  RMP ON PM.R_MEASUREMENT_POINT_ID = RMP.R_MEASUREMENT_POINT_ID
		INNER JOIN PPDMSrc.PDEN_EQUIPMENT AS  PEQ ON PEQ.PDEN_EQUIPMENT_ID = PM.PDEN_EQUIPMENT_ID
		INNER JOIN PPDMSrc.DELIVERY_NETWORK_VERSION DNV ON PEQ.DELIVERY_NETWORK_VERSION_ID = DNV.DELIVERY_NETWORK_VERSION_ID
		INNER JOIN PPDMSrc.DELIVERY_NETWORK DN ON DNV.DELIVERY_NETWORK_ID = DN.DELIVERY_NETWORK_ID
		INNER JOIN (SELECT PW.PDEN_ID,PW.WELL_ID AS ENTITY_ID,W.WELL_NAME AS ENTITY_NAME, 'Well' AS ENTITY_TYPE
						FROM PPDMSrc.PDEN_WELL AS  PW
						INNER JOIN PPDMSrc.WELL AS  W ON W.WELL_ID = PW.WELL_ID WHERE W.ACTIVE_IND = 'Y' AND PW.ACTIVE_IND = 'Y'
						UNION ALL
						SELECT PF.PDEN_ID,PF.FACILITY_ID AS ENTITY_ID,F.FACILITY_NAME AS ENTITY_NAME, 'Facility' AS ENTITY_TYPE
						FROM PPDMSrc.PDEN_FACILITY AS  PF
		INNER JOIN PPDMSrc.FACILITY AS  F ON PF.FACILITY_ID = F.FACILITY_ID WHERE F.ACTIVE_IND = 'Y' AND PF.ACTIVE_IND = 'Y') PW ON PW.PDEN_ID = PEQ.PDEN_ID
		LEFT OUTER JOIN PPDMSrc.R_SOURCE AS  RS ON PM.SOURCE = RS.SOURCE_ID
		LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY AS  PRQ ON PM.ROW_QUALITY= PRQ.ROW_QUALITY_ID
		LEFT OUTER JOIN (SELECT 1 AS DUMMY, UOM FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
		INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
		INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
		WHERE cast(S.UOM_SYSTEM as string) = 'English' AND cast(Q.QUANTITY_TYPE as string) = 'Temperature' 
		)TE ON TE.DUMMY = 1	
		LEFT OUTER JOIN (SELECT 1 AS DUMMY, UOM FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
		INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
		INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
		WHERE cast(S.UOM_SYSTEM as string) = 'English' AND cast(Q.QUANTITY_TYPE as string) = 'Pressure' 
		)PE ON PE.DUMMY = 1		
		WHERE UPPER(cast(RMP.R_MEASUREMENT_POINT AS string)) IN ('TUBING TEMPERATURE','CASING TEMPERATURE',
		'TUBING PRESSURE','CASING PRESSURE','BOTTOM HOLE PRESSURE','BOTTOM HOLE TEMPERATURE','WELLHEAD PRESSURE','WELLHEAD TEMPERATURE') AND cast(PM.ACTIVE_IND AS string) = 'Y'
		GROUP BY PM.MEASUREMENT_DATE,PW.ENTITY_ID,cast(PW.ENTITY_NAME as string),PW.ENTITY_TYPE,
		cast(DN.DELIVERY_NETWORK_ID AS string),	cast(DN.LONG_NAME AS string), cast(PM.ACTIVE_IND as string)
		;

CREATE VIEW WELL_TEST
(
TEST_DATE timestamp NOT NULL,
TEST_DURATION  bigdecimal (15,4),
TEST_TYPE  string (100),
TEST_STATUS  string (100) NOT NULL,
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
SEPARATOR_PRESSURE bigdecimal(15,4),
LOW_TUB_PRESSURE bigdecimal(15,4),
ENV_TEMPERATURE bigdecimal(15,4),
TUBING_PRESSURE  bigdecimal (15,4),
TUBING_PRESS_UOM  string (20),
CASING_PRESSURE  bigdecimal (15,4),
CASING_PRESS_UOM  string (20),
TUBING_TEMPERATURE  bigdecimal (15,4),
TUBING_TEMP_UOM  string (20),
CASING_TEMPERATURE  bigdecimal (15,4),
CASING_TEMP_UOM  string (20),
INLET_PRESSURE  bigdecimal (15,4),
INLET_PRESS_UOM  string (20),
INLET_TEMPERATURE  bigdecimal (15,4),
INLET_TEMP_UOM  string (20),
CHOKE_SIZE  bigdecimal (15,4),
CHOKE_SIZE_UOM  string (20),
CHOKE  bigdecimal (15,4),
CHOKE_UOM  string (20),
OUTLET_PRESSURE  bigdecimal (15,4),
OUTLET_PRESS_UOM  string (20),
OUTLET_TEMPERATURE  bigdecimal (15,4),
OUTLET_TEMP_UOM  string (20),
CHOKE_INLET_PRESS  bigdecimal (15,4),
CHOKE_INLET_PRESS_UOM  string (20),
CHOKE_INLET_TEMP  bigdecimal (15,4),
CHOKE_INLET_TEMP_UOM  string (20),
CHOKE_OUTLET_PRESS  bigdecimal (15,4),
CHOKE_OUTLET_PRESS_UOM  string (20),
CHOKE_OUTLET_TEMP  bigdecimal (15,4),
CHOKE_OUTLET_TEMP_UOM  string (20),
BHP  bigdecimal (15,4),
BHP_UOM  string (20),
BHT  bigdecimal (15,4),
BHT_UOM  string (20),
WHP  bigdecimal (15,4),
WHP_UOM  string (20),
WHT  bigdecimal (15,4),
WHT_UOM  string (20),
FLOW_PRESS  bigdecimal (15,4),
FLOW_PRESS_UOM  string (20),
FLOW_TEMP  bigdecimal (15,4),
FLOW_TEMP_UOM  string (20),
SHUT_IN_PRESS  bigdecimal (15,4),
SHUT_IN_PRESS_UOM  string (20),
GAUGE_PRESS  bigdecimal (15,4),
GAUGE_PRESS_UOM  string (20),
GAUGE_DEPTH  bigdecimal (15,4),
GAUGE_DEPTH_UOM  string (20),
OIL_GRAVITY  bigdecimal (15,4),
GAS_GRAVITY  bigdecimal (15,4),
WATER_GRAVITY  bigdecimal (15,4),
OIL  bigdecimal (15,4),
OIL_DAY bigdecimal (15,4),
OIL_UOM  string (20),
GAS  bigdecimal (15,4),
GAS_DAY bigdecimal (15,4),
GAS_UOM  string (20),
WATER  bigdecimal (15,4),
WATER_DAY bigdecimal (15,4),
WATER_UOM  string (20),
LIQUID  bigdecimal (15,4),
LIQUID_DAY bigdecimal (15,4),
LIQUID_UOM  string (20),
QLIQUID  bigdecimal (15,4),
QLIQUID_UOM  string (20),
GOR  bigdecimal (15,4),
GOR_UOM  string (20),
WC  bigdecimal (15,4),
WC_UOM  string (20),
WOR  bigdecimal (15,4),
WOR_UOM  string (20),
WGR  bigdecimal (15,4),
WGR_UOM  string (20),
GLR  bigdecimal (15,4),
GLR_UOM  string (20),
IPR  string (1),
IPR_DIFF  bigdecimal (15,4),
VLP  string (1),
VLP_DIFF  bigdecimal (15,4),
IPR_VLP  string (1),
IPR_VLP_DIFF  bigdecimal (15,4),
CHP  string (1),
CHP_DIFF  bigdecimal (15,4),
CHOKE_IND  string (1),
VALID_IND string(1),
FLUID_TYPE string(100),
ENTITY_ID  string (100) NOT NULL,
WELL_NAME  string (255),
WELL_TYPE  string (100),
PRIMARY_PRODUCT  string (100),
PRODUCTION_METHOD  string (100),
SOURCE  string (100),
ROW_QUALITY  string (100),
ROW_CHANGED_BY  string (100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND  string (1),
REMARK  string (2000),
LEVEL1_ID  string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE  string (100),
LEVEL2_ID  string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE  string (100),
LEVEL3_ID  string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE  string (100),
LEVEL4_ID  string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE  string (100),
LEVEL5_ID  string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE  string (100),
LEVEL6_ID  string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE  string (100), 
TEST_ID  string (40) NOT NULL,
CONSTRAINT PK_WELL_TEST PRIMARY KEY (TEST_ID))
OPTIONS (UPDATABLE 'FALSE',WELL_TEST.IMPLEMENTED 'TRUE')
AS
(
SELECT 
 cast(PWT.TEST_DATE AS TIMESTAMP),  PWT.TEST_HOURS AS  TEST_DURATION, NULL AS  TEST_TYPE, 
 cast((CASE WHEN PWM.VALID_IND IS NOT NULL THEN 
	(CASE PWM.VALID_IND WHEN 'Y' THEN 'Approved' WHEN 'N' THEN 'Rejected' ELSE 'Pending' END)
	ELSE 
	(CASE PWT.VALID_IND WHEN 'Y' THEN 'Approved' WHEN 'N' THEN 'Rejected' ELSE 'Pending' END) END) AS string) AS  TEST_STATUS,
cast(PWT.EFFECTIVE_DATE AS timestamp),cast(PWT.EXPIRY_DATE AS timestamp), PWT.SEPARATOR_PRESSURE,NULL,NULL,
 PWT.TUBING_PRESSURE, cast(PWTF.PRESSURE_UOM AS string) AS TUBING_PRESS_UOM, 
 PWT.CASING_PRESSURE,  cast(PWTF.PRESSURE_UOM AS string) AS CASING_PRESS_UOM,
 cast(PWM.TT AS bigdecimal) AS  TUBING_TEMPERATURE, cast(PWTF.TEMPERATURE_UOM AS string) AS  TUBING_TEMP_UOM, 
 cast(PWM.CT AS bigdecimal) AS  CASING_TEMPERATURE, cast(PWTF.TEMPERATURE_UOM AS string) AS  CASING_TEMP_UOM,  
 cast(PWM.INTAKE_PRESSURE AS bigdecimal) AS INLET_PRESSURE,  cast(PWTF.PRESSURE_UOM AS string) AS INLET_PRESS_UOM, 
 NULL AS INLET_TEMPERATURE,  NULL AS  INLET_TEMP_UOM, 
 cast(CASE WHEN PWM.CHOKE_SIZE IS NOT NULL THEN PWM.CHOKE_SIZE ELSE PWT.CHOKE_SIZE END AS BIGDECIMAL), cast(PWTF.SHORT_LEN_UOM AS string) AS  CHOKE_SIZE_UOM, 
 CAST(PWM.CHOKE AS BIGDECIMAL),  cast(PWTF.SHORT_LEN_UOM AS string) AS  CHOKE_UOM, 
 NULL AS OUTLET_PRESSURE, NULL AS  OUTLET_PRESS_UOM,NULL AS OUTLET_TEMPERATURE, NULL AS  OUTLET_TEMP_UOM, 
 CAST(PWM.CHOKE_INLET_PRESSURE AS BIGDECIMAL) AS  CHOKE_INLET_PRESS, cast(PWTF.PRESSURE_UOM AS   string) AS  CHOKE_INLET_PRESS_UOM, 
 CAST(PWM.CHOKE_INLET_TEMPERATURE AS BIGDECIMAL) AS  CHOKE_INLET_TEMP, cast(PWTF.TEMPERATURE_UOM AS string) AS CHOKE_INLET_TEMP_UOM, 
 CAST(PWM.CHOKE_OUTLET_PRESSURE AS BIGDECIMAL)  AS  CHOKE_OUTLET_PRESS,cast(PWTF.PRESSURE_UOM AS string) AS  CHOKE_OUTLET_PRESS_UOM, 
 NULL AS  CHOKE_OUTLET_TEMP, NULL AS  CHOKE_OUTLET_TEMP_UOM, 
 CASE WHEN PWM.BHP IS NOT NULL THEN PWM.BHP ELSE PWT.BOTTOM_HOLE_PRESSURE END AS  BHP, cast(PWTF.PRESSURE_UOM AS string) AS  BHP_UOM, 
 CAST(PWM.BHT AS BIGDECIMAL),cast(PWTF.TEMPERATURE_UOM AS string) AS  BHT_UOM,
 CAST(PWM.WHP AS BIGDECIMAL),cast(PWTF.PRESSURE_UOM AS string) AS  WHP_UOM, 
 CAST(PWM.WHT AS BIGDECIMAL), cast(PWTF.TEMPERATURE_UOM AS string) AS WHT_UOM, 
 PWT.FLOWING_PRESSURE AS  FLOW_PRESS, cast(PWTF.PRESSURE_UOM AS string) AS FLOW_PRESS_UOM, 
 NULL AS  FLOW_TEMP, NULL AS  FLOW_TEMP_UOM, 
 PWT.SHUT_IN_WELL_HEAD_PRESSURE AS  SHUT_IN_PRESS,cast(PWTF.PRESSURE_UOM as string) AS SHUT_IN_PRESS_UOM, 
 CAST(PWM.MEAS_GAUGE_PRESSURE AS BIGDECIMAL) AS GAUGE_PRESS, cast(PWTF.PRESSURE_UOM as string) AS GAUGE_PRESS_UOM, 
 CAST(PWM.MEAS_GAUGE_DEPTH AS BIGDECIMAL) AS  GAUGE_DEPTH, cast(PWTF.LENGTH_UOM as string) AS GAUGE_DEPTH_UOM, 
 CAST(PWT.OIL_GRAVITY AS BIGDECIMAL) AS OIL_GRAVITY,CAST(PWT.GAS_GRAVITY AS BIGDECIMAL) AS GAS_GRAVITY,
 CAST(PWT.WATER_GRAVITY AS BIGDECIMAL) AS WATER_GRAVITY,
 CASE WHEN PWFM.OIL IS NOT NULL THEN PWFM.OIL ELSE PWTF.OIL END, 
 NULL AS OIL_DAY,
 cast(PWTF.LIQUID_UOM AS string), 
 CASE WHEN PWFM.GAS IS NOT NULL THEN PWFM.GAS ELSE PWTF.GAS END, NULL AS GAS_DAY,
 cast(PWTF.GAS_UOM AS string), 
 CASE WHEN PWFM.WATER IS NOT NULL THEN PWFM.WATER ELSE PWTF.WATER END, NULL AS WATER_DAY,
 cast(PWTF.LIQUID_UOM AS string),
 CASE WHEN (PWFM.OIL IS NOT NULL OR PWFM.WATER IS NOT NULL) THEN
 (PWFM.OIL + PWFM.WATER) ELSE
 (PWTF.OIL + PWTF.WATER) END AS  LIQUID, NULL AS LIQUID_DAY,
 cast(PWTF.LIQUID_UOM AS string) AS  LIQUID_UOM, 
 CAST(PWM.QLIQUID AS BIGDECIMAL), cast(PWTF.LIQUID_UOM AS string) AS QLIQUID_UOM, 
 CAST((CASE WHEN (PWFM.OIL IS NOT NULL AND PWFM.OIL > 0) THEN PWFM.GAS/PWFM.OIL ELSE
 (CASE WHEN (PWTF.OIL IS NOT NULL AND PWTF.OIL > 0) THEN PWTF.GAS/PWTF.OIL ELSE NULL END) END) AS BIGDECIMAL), 
 cast(PWTF.GAS_UOM AS string) || '/' || cast(PWTF.LIQUID_UOM AS string) AS  GOR_UOM, 
 cast(CASE WHEN PWM.WATERCUT IS NOT NULL THEN PWM.WATERCUT ELSE (CASE WHEN ((PWFM.OIL + PWFM.WATER) IS NOT NULL AND (PWFM.OIL + PWFM.WATER) > 0)
	THEN (PWFM.WATER/(PWFM.OIL + PWFM.WATER)) ELSE
 (CASE WHEN ((PWTF.OIL + PWTF.WATER) IS NOT NULL AND (PWTF.OIL+PWTF.WATER) > 0) 
 THEN (PWTF.WATER/(PWTF.OIL + PWTF.WATER)) ELSE NULL END) END) END AS bigdecimal) AS  WC, 
 cast(PWTF.LIQUID_UOM AS string) || '/' || cast(PWTF.LIQUID_UOM AS string) AS  WC_UOM, 
 CAST((CASE WHEN (PWFM.OIL IS NOT NULL AND PWFM.OIL > 0) THEN
	PWFM.WATER/PWFM.OIL ELSE
 (CASE WHEN (PWTF.OIL IS NOT NULL AND PWTF.OIL > 0) 
 THEN PWTF.WATER/PWTF.OIL ELSE NULL END) END) AS BIGDECIMAL), 
 cast(PWTF.LIQUID_UOM AS string) || '/' || cast(PWTF.LIQUID_UOM AS string) AS  WOR_UOM,
 CAST((CASE WHEN (PWFM.GAS IS NOT NULL AND PWFM.GAS > 0) THEN 
 PWFM.WATER/PWFM.GAS ELSE
 (CASE WHEN (PWTF.GAS IS NOT NULL AND PWTF.GAS > 0) 
 THEN PWTF.WATER/PWTF.GAS ELSE NULL END) END) AS BIGDECIMAL), 
 cast(PWTF.LIQUID_UOM AS string) || '/' || cast(PWTF.GAS_UOM AS string) AS  WGR_UOM, 
 CAST((CASE WHEN ((PWFM.OIL + PWFM.WATER) IS NOT NULL AND (PWFM.OIL+PWFM.WATER) > 0)
 THEN PWFM.GAS/(PWFM.OIL + PWFM.WATER) ELSE
 (CASE WHEN ((PWTF.OIL + PWTF.WATER) IS NOT NULL AND (PWTF.OIL+PWTF.WATER) > 0) 
 THEN PWTF.GAS/(PWTF.OIL + PWTF.WATER) ELSE NULL END) END) AS BIGDECIMAL), 
 cast(PWTF.GAS_UOM AS string) || '/' || cast(PWTF.LIQUID_UOM AS string) AS  GLR_UOM, 
 cast(PWM.IPR as string), NULL AS IPR_DIFF, cast(PWM.VLP as string),  NULL AS VLP_DIFF, 
 cast(PWM.IPR_VLP as string), NULL AS  IPR_VLP_DIFF,cast(PWM.CHP as string), NULL AS  CHP_DIFF, 
 cast(PWM.CHOKE_IND as string), 
 cast((CASE WHEN PWM.VALID_IND IS NOT NULL THEN PWM.VALID_IND ELSE PWT.VALID_IND END) AS string) AS VALID_IND,
 cast(PWM.FLUID_TYPE AS string), cast(PW.WELL_ID AS string) AS ENTITY_ID,
 NULL AS WELL_NAME,NULL AS WELL_TYPE,NULL AS PRIMARY_PRODUCT,NULL AS PRODUCTION_METHOD,
 cast(S.SOURCE_NAME AS   string) AS  SOURCE, cast(RPRQ.ROW_QUALITY_NAME AS string),
 cast(PWT.ROW_CHANGED_BY AS   string),  PWT.ROW_CHANGED_DATE, PWT.ROW_CREATED_DATE, 
 cast(PWT.ROW_CREATED_BY AS   string),  cast(PWT.ACTIVE_IND AS   string),  cast(PWT.REMARK AS string), 
 NULL AS LEVEL1_ID,NULL AS LEVEL1_NAME,NULL AS LEVEL1_TYPE,NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE,NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE
,NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE,NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,NULL AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE,
cast(PWT.PDEN_WELL_TEST_ID AS string) AS TEST_ID 
  FROM 
  PPDMSrc.PDEN_WELL_TEST PWT 
  INNER JOIN PPDMSrc.PDEN_WELL PW ON PWT.PDEN_ID = PW.PDEN_ID  
  LEFT OUTER JOIN PPDMSrc.R_SOURCE S ON S.SOURCE_ID = PWT.SOURCE
  LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY RPRQ ON RPRQ.ROW_QUALITY_ID=PWT.ROW_QUALITY_ID  
  LEFT OUTER JOIN (SELECT PWTF.PDEN_WELL_TEST_ID, SUM(CASE P.PRODUCT_NAME WHEN 'Oil' THEN PWTF.MEASUREMENT_VOLUME END) AS  OIL,
			SUM(CASE P.PRODUCT_NAME WHEN 'Gas' THEN PWTF.MEASUREMENT_VOLUME END) AS  GAS,
			SUM(CASE P.PRODUCT_NAME WHEN 'Water' THEN PWTF.MEASUREMENT_VOLUME END) AS  WATER,
			(SELECT UOM FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
	INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
	INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
	WHERE cast(S.UOM_SYSTEM as string) = 'English' AND cast(Q.QUANTITY_TYPE as string) = 'Length') AS LENGTH_UOM,
	(SELECT UOM FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
	INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
	INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
	WHERE cast(S.UOM_SYSTEM as string) = 'English' AND cast(Q.QUANTITY_TYPE as string) = 'ShortLength') AS SHORT_LEN_UOM,
(SELECT UOM FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
	INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
	INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
	WHERE cast(S.UOM_SYSTEM as string) = 'English' AND cast(Q.QUANTITY_TYPE as string) = 'GasVolume') AS GAS_UOM,
	(SELECT UOM FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
	INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
	INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
	WHERE cast(S.UOM_SYSTEM as string) = 'English' AND cast(Q.QUANTITY_TYPE as string) = 'LiquidVolume') AS LIQUID_UOM,
	(SELECT UOM FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
	INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
	INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
	WHERE cast(S.UOM_SYSTEM as string) = 'English' AND cast(Q.QUANTITY_TYPE as string) = 'Pressure') AS PRESSURE_UOM,
	(SELECT UOM FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
	INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
	INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
	WHERE cast(S.UOM_SYSTEM as string) = 'English' AND cast(Q.QUANTITY_TYPE as string) = 'Temperature') AS TEMPERATURE_UOM	
			FROM PPDMSrc.PDEN_WELL_TEST_FLOW_MEAS PWTF
			INNER JOIN PPDMSrc.PRODUCT P ON PWTF.PRODUCT_ID = P.PRODUCT_ID
			LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE U ON PWTF.MEASUREMENT_VOLUME_OUOM = U.UOM_ID 
			WHERE cast(P.PRODUCT_NAME as string) IN ('Oil','Water','Gas') AND PWTF.ACTIVE_IND = 'Y'
			GROUP BY PWTF.PDEN_WELL_TEST_ID
		) PWTF ON PWT.PDEN_WELL_TEST_ID = PWTF.PDEN_WELL_TEST_ID
   LEFT OUTER JOIN (SELECT cast(WTFM.WELL_TEST_ID AS string) WELL_TEST_ID, 
	SUM(CASE WHEN cast(WTFM.PRODUCT_ID AS string) = 'Gas' THEN WTFM.MEASUREMENT_VOLUME END) AS GAS,
   SUM(CASE WHEN cast(WTFM.PRODUCT_ID AS string) = 'Water' THEN WTFM.MEASUREMENT_VOLUME END) AS WATER,
   SUM(CASE WHEN cast(WTFM.PRODUCT_ID AS string) = 'Oil' THEN WTFM.MEASUREMENT_VOLUME END) AS OIL
		FROM PDMExtSrc.WELL_TEST_FLOW_MEAS WTFM GROUP BY cast(WTFM.WELL_TEST_ID AS string)
					)PWFM ON PWT.PDEN_WELL_TEST_ID = PWFM.WELL_TEST_ID
LEFT OUTER JOIN PDMExtSrc.WELL_TEST_PARAMETERS PWM ON PWT.PDEN_WELL_TEST_ID = PWM.OBJECT_ID					
 WHERE PWT.ACTIVE_IND = 'Y' AND PW.ACTIVE_IND = 'Y'
);
 
CREATE VIEW COMPRESSOR_DETAILS
(
MEASUREMENT_DATE timestamp NOT NULL,
DESG_UTILIZATION  bigdecimal(15,4),
DESG_UTILIZATION_UOM  string(20),
UTILIZATION  bigdecimal(15,4),
UTILIZATION_UOM  string(20),
DESG_EFFICIENCY  bigdecimal(15,4),
DESG_EFFICIENCY_UOM  string(20),
EFFICIENCY  bigdecimal(15,4),
EFFICIENCY_UOM  string(20),
DESG_POWER  bigdecimal(15,4),
DESG_POWER_UOM  string(20),
"POWER"  bigdecimal(15,4),
POWER_UOM  string(20),
DESG_SPEED  bigdecimal(15,4),
DESG_SPEED_UOM  string(20),
SPEED  bigdecimal(15,4),
SPEED_UOM  string(20),
DESG_INLET_PRESSURE  bigdecimal(15,4),
DESG_INLET_PRESS_UOM  string(20),
INLET_PRESSURE  bigdecimal(15,4),
INLET_PRESS_UOM  string(20),
DESG_INLET_TEMPERATURE  bigdecimal(15,4),
DESG_INLET_TEMP_UOM  string(20),
INLET_TEMPERATURE  bigdecimal(15,4),
INLET_TEMP_UOM  string(20),
DESG_OUTLET_PRESSURE  bigdecimal(15,4),
DESG_OUTLET_PRESS_UOM  string(20),
OUTLET_PRESSURE  bigdecimal(15,4),
OUTLET_PRESS_UOM  string(20),
DESG_OUTLET_TEMPERATURE  bigdecimal(15,4),
DESG_OUTLET_TEMP_UOM  string(20),
OUTLET_TEMPERATURE  bigdecimal(15,4),
OUTLET_TEMP_UOM  string(20),
OIL  bigdecimal (15,4),
OIL_UOM  string(20),
GAS  bigdecimal (15,4),
GAS_UOM  string(20),
WATER  bigdecimal (15,4),
WATER_UOM  string(20),
RATED_VOLUME bigdecimal(15,4),
COMPRESSOR_UNIT_NAME  string (100),
COMPRESSOR_ID  string(40) NOT NULL,
COMPRESSOR_NAME  string(100),
ENTITY_ID  string(100) NOT NULL,
NETWORK_ID  string(40) ,
NETWORK_NAME  string(100),
SOURCE  string(100),
ROW_QUALITY  string(100),
ROW_CHANGED_BY  string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY  string(100),
ACTIVE_IND  string(1),
COMPRESSOR_DETAILS_ID  string(40) NOT NULL,
CONSTRAINT PK_COMPRESSOR_DETAILS PRIMARY KEY (COMPRESSOR_DETAILS_ID))
OPTIONS (UPDATABLE 'FALSE',COMPRESSOR_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT 
CAST(PM.MEASUREMENT_DATE AS timestamp), 
NULL AS  DESG_UTILIZATION, 
NULL AS  DESG_UTILIZATION_UOM,
MAX(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Utilization' THEN PM."VALUE" END) AS  UTILIZATION,
MAX(CASE MP.R_MEASUREMENT_POINT WHEN 'Utilization' THEN cast(U.UOM AS   string) END) AS  UTILIZATION_UOM,
NULL AS  DESG_EFFICIENCY,
NULL AS  DESG_EFFICIENCY_UOM,
MAX(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Efficiency'  THEN PM."VALUE" END) AS  EFFICIENCY,
MAX(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Efficiency' THEN cast(U.UOM AS   string) END) AS  EFFICIENCY_UOM,
NULL AS  DESG_POWER,
NULL AS  DESG_POWER_UOM,
AVG(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Power' THEN PM."VALUE" END) AS  "POWER",
MAX((CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Power' THEN cast(U.UOM AS   string) END)) AS  POWER_UOM,
NULL AS  DESG_SPEED,
NULL AS  DESG_SPEED_UOM,
AVG(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Speed' THEN PM."VALUE" END) AS  SPEED,
MAX(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Speed' THEN cast(U.UOM AS   string) END) AS  SPEED_UOM,
NULL AS  DESG_INLET_PRESSURE,
NULL AS  DESG_INLET_PRESS_UOM,
AVG(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Inlet Pressure' THEN PM."VALUE" END) AS  INLET_PRESSURE,
MAX(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Inlet Pressure' THEN cast(U.UOM AS   string) END) AS  INLET_PRESS_UOM,
NULL AS  DESG_INLET_TEMPERATURE,
NULL AS  DESG_INLET_TEMP_UOM,
AVG(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Inlet Temperature' THEN PM."VALUE" END) AS  INLET_TEMPERATURE,
MAX(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Inlet Temperature' THEN cast(U.UOM AS   string) END) AS  INLET_TEMP_UOM,
NULL AS  DESG_OUTLET_PRESSURE,
NULL AS  DESG_OUTLET_PRESS_UOM,
AVG(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Outlet Pressure' THEN PM."VALUE" END) AS  OUTLET_PRESSURE,
MAX(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Outlet Pressure' THEN cast(U.UOM AS   string) END) AS  OUTLET_PRESS_UOM,
NULL AS  DESG_OUTLET_TEMPERATURE,
NULL AS  DESG_OUTLET_TEMP_UOM,
AVG(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Outlet Temperature' THEN PM."VALUE" END) AS  OUTLET_TEMPERATURE,
MAX(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Outlet Temperature' THEN cast(U.UOM AS   string) END) AS  OUTLET_TEMP_UOM,
NULL AS  OIL,
NULL AS  OIL_UOM,
AVG(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Gas Volume' THEN PM."VALUE" END) AS  GAS,
MAX(CASE cast(MP.R_MEASUREMENT_POINT AS   string) WHEN 'Gas Volume' THEN cast(U.UOM AS   string) END) AS  GAS_UOM,
NULL AS  WATER,
NULL AS  WATER_UOM,
NULL AS RATED_VOLUME,
CAST(F.FACILITY_NAME AS string) AS  COMPRESSOR_UNIT_NAME, 
 cast(PE.EQUIPMENT_ID AS string) AS  COMPRESSOR_ID, 
 NULL AS  COMPRESSOR_NAME,
cast(F.FACILITY_ID AS string) AS  ENTITY_ID,
cast(DN.DELIVERY_NETWORK_ID AS string) AS NETWORK_ID,cast(DN.LONG_NAME AS string) AS NETWORK_NAME, 
MAX(cast(S.SOURCE_NAME AS string)) AS  SOURCE,
MAX(cast(RQ.ROW_QUALITY_NAME AS string)) AS  ROW_QUALITY,
MAX(cast(PM.ROW_CHANGED_BY AS string)) AS  ROW_CHANGED_BY,
MAX(cast(PM.ROW_CHANGED_DATE AS timestamp)),
MAX(cast(PM.ROW_CREATED_DATE AS timestamp)),
MAX(cast(PM.ROW_CREATED_BY AS string)) AS  ROW_CREATED_BY,
MAX(cast(PM.ACTIVE_IND AS string)) AS  ACTIVE_IND,
UUID() AS  COMPRESSOR_DETAILS_ID
FROM PPDMSrc.PDEN_MEASUREMENT PM 
LEFT OUTER JOIN PPDMSrc.R_SOURCE S ON S.SOURCE_ID = PM.SOURCE
LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY RQ ON RQ.ROW_QUALITY_ID = PM.ROW_QUALITY
INNER JOIN PPDMSrc.PDEN_EQUIPMENT PE ON PM.PDEN_EQUIPMENT_ID = PE.PDEN_EQUIPMENT_ID
INNER JOIN PPDMSrc.DELIVERY_NETWORK_VERSION DNV ON PE.DELIVERY_NETWORK_VERSION_ID = DNV.DELIVERY_NETWORK_VERSION_ID
INNER JOIN PPDMSrc.DELIVERY_NETWORK DN ON DNV.DELIVERY_NETWORK_ID = DN.DELIVERY_NETWORK_ID
INNER JOIN PPDMSrc.PDEN_FACILITY PF ON PE.PDEN_ID = PF.PDEN_ID
LEFT OUTER JOIN PPDMSrc.FACILITY F ON PF.FACILITY_ID = F.FACILITY_ID
LEFT OUTER JOIN PPDMSrc.R_FACILITY_TYPE FT ON F.FACILITY_TYPE_ID = FT.FACILITY_TYPE_ID
INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON PM.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
LEFT OUTER JOIN (SELECT U.UOM,U.UOM_QUANTITY_TYPE_ID FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
 INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM M ON U.UOM_SYSTEM_ID = M.UOM_SYSTEM_ID AND cast(M.UOM_SYSTEM AS   string)='English') U ON MP.QUANTITY_TYPE_ID = U.UOM_QUANTITY_TYPE_ID
WHERE cast(MP.R_MEASUREMENT_POINT AS   string) IN ('Utilization','Efficiency','Power','Speed','Outlet Pressure','Inlet Pressure','Outlet Temperature','Inlet Temperature','Gas Volume') AND cast(FT.FACILITY_TYPE AS   string) IN ('Compressor Station','CompressorStation')
GROUP BY F.FACILITY_ID,F.FACILITY_NAME,PE.EQUIPMENT_ID,cast(DN.DELIVERY_NETWORK_ID AS string),	cast(DN.LONG_NAME AS string),PM.MEASUREMENT_DATE
);

CREATE VIEW PIPELINE_DETAILS
(
MEASUREMENT_DATE timestamp NOT NULL,
PRESSURE  bigdecimal (15,4),
PRESSURE_UOM  string (20),
TEMPERATURE  bigdecimal (15,4),
TEMPERATURE_UOM  string (20),
OIL  bigdecimal (15,4),
OIL_UOM  string (20),
GAS  bigdecimal (15,4),
GAS_UOM  string (20),
WATER  bigdecimal (15,4),
WATER_UOM  string (20),
PIPELINE_ID  string (40),
PIPELINE_NAME  string (255),
PIPELINE_UNIT_NAME  string (255),
ENTITY_ID  string (100) NOT NULL,
NETWORK_ID  string (40),
NETWORK_NAME  string (100),
SOURCE  string (100),
ROW_QUALITY  string (100),
ROW_CHANGED_BY  string (100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND  string (1),
PIPELINE_DETAILS_ID  string (40) NOT NULL,
CONSTRAINT PK_PIPELINE_DETAILS PRIMARY KEY (ENTITY_ID,PIPELINE_ID,MEASUREMENT_DATE))
OPTIONS (UPDATABLE 'FALSE',PIPELINE_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT 
cast(PM.MEASUREMENT_DATE AS timestamp), 
AVG(CASE WHEN cast(MP.R_MEASUREMENT_POINT AS   string)='Pressure' THEN PM."VALUE" END) AS  PRESSURE,
MAX(CASE WHEN cast(MP.R_MEASUREMENT_POINT AS   string) ='Pressure' THEN cast(U.UOM AS   string) END) AS  PRESSURE_UOM,
AVG(CASE WHEN cast(MP.R_MEASUREMENT_POINT AS   string)='Temperature' THEN PM."VALUE" END) AS  TEMPERATURE,
MAX(CASE WHEN cast(MP.R_MEASUREMENT_POINT AS   string)='Temperature' THEN cast(U.UOM AS   string) END) AS  TEMPERATURE_UOM,
NULL AS  OIL,
NULL AS  OIL_UOM,
NULL AS  GAS,
NULL AS  GAS_UOM,
NULL AS  WATER,
NULL AS  WATER_UOM,
cast(PE.EQUIPMENT_ID AS string) AS  PIPELINE_ID,
NULL AS  PIPELINE_NAME,
cast(F.FACILITY_NAME AS string) AS  PIPELINE_UNIT_NAME,
cast(F.FACILITY_ID AS string)AS ENTITY_ID,
cast(DN.DELIVERY_NETWORK_ID AS string) AS NETWORK_ID,cast(DN.LONG_NAME AS string) AS NETWORK_NAME,
MAX(cast(S.SOURCE_NAME AS string)) AS  SOURCE,
MAX(cast(RQ.ROW_QUALITY_NAME AS string)) AS  ROW_QUALITY,
MAX(cast(PM.ROW_CHANGED_BY AS string)),
MAX(cast(PM.ROW_CHANGED_DATE AS timestamp)),
MAX(cast(PM.ROW_CREATED_DATE AS timestamp)),
MAX(cast(PM.ROW_CREATED_BY AS string)),
MAX(cast(PM.ACTIVE_IND AS string)),
UUID() AS PIPELINE_DETAILS_ID
FROM PPDMSrc.PDEN_MEASUREMENT PM 
    LEFT OUTER JOIN PPDMSrc.R_SOURCE S ON S.SOURCE_ID = PM.SOURCE
    LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY RQ ON RQ.ROW_QUALITY_ID = PM.ROW_QUALITY
    INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON PM.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
    INNER JOIN PPDMSrc.PDEN_EQUIPMENT PE ON PM.PDEN_EQUIPMENT_ID = PE.PDEN_EQUIPMENT_ID
INNER JOIN PPDMSrc.DELIVERY_NETWORK_VERSION DNV ON PE.DELIVERY_NETWORK_VERSION_ID = DNV.DELIVERY_NETWORK_VERSION_ID
		INNER JOIN PPDMSrc.DELIVERY_NETWORK DN ON DNV.DELIVERY_NETWORK_ID = DN.DELIVERY_NETWORK_ID    
    INNER JOIN PPDMSrc.PDEN_FACILITY PF ON PE.PDEN_ID = PF.PDEN_ID
    LEFT OUTER JOIN PPDMSrc.FACILITY F ON PF.FACILITY_ID = F.FACILITY_ID
    LEFT OUTER JOIN PPDMSrc.R_FACILITY_TYPE FT ON F.FACILITY_TYPE_ID = FT.FACILITY_TYPE_ID
    LEFT OUTER JOIN (SELECT U.UOM,U.UOM_QUANTITY_TYPE_ID FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
    INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM M ON U.UOM_SYSTEM_ID = M.UOM_SYSTEM_ID AND cast(M.UOM_SYSTEM AS   string) = 'English') U ON MP.QUANTITY_TYPE_ID = U.UOM_QUANTITY_TYPE_ID
    WHERE cast(MP.R_MEASUREMENT_POINT AS   string) IN ('Pressure','Temperature') AND cast(FT.FACILITY_TYPE AS   string)= 'Pipeline'
GROUP BY cast(F.FACILITY_ID AS string),cast(F.FACILITY_NAME AS string),cast(PE.EQUIPMENT_ID AS string),cast(DN.DELIVERY_NETWORK_ID AS string),	cast(DN.LONG_NAME AS string),cast(PM.MEASUREMENT_DATE AS timestamp)
);

CREATE VIEW VOLUME_COMPLETION      	
(
 VOLUME_DATE	timestamp NOT NULL,	
 PERIOD_TYPE	 string	(100),	
 OIL	 bigdecimal	(15,4), 
 OIL_POT	 bigdecimal	(15,4),
 OIL_UOM	 string	(20),
 GAS	 bigdecimal	(15,4),
 GAS_POT	 bigdecimal	(15,4),
 GAS_UOM	 string	(20),
 WATER	 bigdecimal	(15,4),
 WATER_POT	 bigdecimal	(15,4),
 WATER_UOM	 string	(20),
 LIQUID	 bigdecimal	(15,4),
 LIQUID_UOM	 string	(20),
 LIQUID_POT	 bigdecimal	(15,4),
 CONDENSATE	 bigdecimal	(15,4),
 CONDENSATE_POT	 bigdecimal	(15,4),
 CONDENSATE_UOM	 string	(20),
 GAS_BOE	 bigdecimal	(15,4),
 GAS_BOE_UOM	 string	(20),
 GAS_BOE_POT	 bigdecimal	(15,4),
 GAS_BOE_POT_UOM	 string	(20),
 INJ_WATER	 bigdecimal	(15,4),
 INJ_WATER_UOM	 string	(20),
 INJ_WATER_POT	 bigdecimal	(15,4),
 INJ_WATER_POT_UOM	 string	(20),
 INJ_STEAM	 bigdecimal	(15,4),
 INJ_STEAM_UOM	 string	(20),
 INJ_STEAM_POT	 bigdecimal	(15,4),
 INJ_STEAM_POT_UOM	 string	(20),
 INJ_CO2	 bigdecimal	(15,4),
 INJ_CO2_UOM	 string	(20),
 INJ_CO2_POT	 bigdecimal	(15,4),
 INJ_CO2_POT_UOM	 string	(20),
 GOR	 bigdecimal	(15,4),
 GOR_UOM	 string	(20),
 WC	 bigdecimal	(15,4),
 WC_UOM	 string	(20),
 WOR	 bigdecimal	(15,4),
 WOR_UOM	 string	(20),
 GOR_POT	 bigdecimal	(15,4),
 GOR_POT_UOM	 string	(20),
 WC_POT	 bigdecimal	(15,4),
 WC_POT_UOM	 string	(20),
 WOR_POT	 bigdecimal	(15,4),
 WOR_POT_UOM	 string	(20),
 OC	 bigdecimal	(15,4),
 OC_UOM	 string	(20),
 OC_POT	 bigdecimal	(15,4),
 OC_POT_UOM	 string	(20),
 OGR	 bigdecimal	(15,4),
 OGR_UOM	 string	(20),
 OGR_POT	 bigdecimal	(15,4),
 OGR_POT_UOM	 string	(20),
 CUM_OIL	 bigdecimal	(15,4),
 CUM_OIL_POT	 bigdecimal	(15,4),
 CUM_OIL_UOM	 string	(20),
 CUM_GAS	 bigdecimal	(15,4),
 CUM_GAS_POT	 bigdecimal	(15,4),
 CUM_GAS_UOM	 string	(20),
 CUM_WATER	 bigdecimal	(15,4),
 CUM_WATER_POT	 bigdecimal	(15,4),
 CUM_WATER_UOM	 string	(20),
 CUM_LIQUID	 bigdecimal	(15,4),
 CUM_LIQUID_UOM	 string	(20),
 CUM_LIQUID_POT	 bigdecimal	(15,4),
 CUM_CONDENSATE	 bigdecimal	(15,4),
 CUM_CONDENSATE_POT	 bigdecimal	(15,4),
 CUM_CONDENSATE_UOM	 string	(20),
 CUM_GAS_BOE	 bigdecimal	(15,4),
 CUM_GAS_BOE_UOM	 string	(20),
 CUM_GAS_BOE_POT	 bigdecimal	(15,4),
 CUM_GAS_BOE_POT_UOM	 string	(20),
 CUM_INJ_WATER	 bigdecimal	(15,4),
 CUM_INJ_WATER_UOM	 string	(20),
 CUM_INJ_WATER_POT	 bigdecimal	(15,4),
 CUM_INJ_WATER_POT_UOM	 string	(20),
 CUM_INJ_STEAM	 bigdecimal	(15,4),
 CUM_INJ_STEAM_UOM	 string	(20),
 CUM_INJ_STEAM_POT	 bigdecimal	(15,4),
 CUM_INJ_STEAM_POT_UOM	 string	(20),
 CUM_INJ_CO2	 bigdecimal	(15,4),
 CUM_INJ_CO2_UOM	 string	(20),
 CUM_INJ_CO2_POT	 bigdecimal	(15,4),
 CUM_INJ_CO2_POT_UOM	 string	(20),
 CUM_GOR	 bigdecimal	(15,4),
 CUM_GOR_UOM	 string	(20),
 CUM_WC	 bigdecimal	(15,4),
 CUM_WC_UOM	 string	(20),
 CUM_WOR	 bigdecimal	(15,4),
 CUM_WOR_UOM	 string	(20),
 CUM_GOR_POT	 bigdecimal	(15,4),
 CUM_GOR_POT_UOM	 string	(20),
 CUM_WC_POT	 bigdecimal	(15,4),
 CUM_WC_POT_UOM	 string	(20),
 CUM_WOR_POT	 bigdecimal	(15,4),
 CUM_WOR_POT_UOM	 string	(20),
 CUM_OC	 bigdecimal	(15,4),
 CUM_OC_UOM	 string	(20),
 CUM_OC_POT	 bigdecimal	(15,4),
 CUM_OC_POT_UOM	 string	(20),
 CUM_OGR	 bigdecimal	(15,4),
 CUM_OGR_UOM	 string	(20),
 CUM_OGR_POT	 bigdecimal	(15,4),
 CUM_OGR_POT_UOM	 string	(20),
 WELL_COMPLETION_ID	 string	(40),
 COMPLETION_NAME	 string	(100),
 ENTITY_ID	 string	(40)NOT NULL,
 ENTITY_NAME	 string	(255),
 NETWORK_ID	 string	(40),
 NETWORK_NAME	 string	(255),
 AREA_ID string(40),
 AREA_NAME string (255),
 SOURCE	 string	(100),
 ROW_QUALITY	 string	(100),
 ROW_CHANGED_BY	 string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	 string	(100),
 ACTIVE_IND	 string	(1)	,
 VOL_ID	 string	(40)	NOT NULL,
CONSTRAINT PK_VOLUME_COMPLETION PRIMARY KEY (VOL_ID))
OPTIONS (UPDATABLE 'FALSE',VOLUME_COMPLETION.IMPLEMENTED 'TRUE')
AS
(
SELECT 
PVSA.VOLUME_DATE,
cast(RPT.R_PERIOD_TYPE AS   string),
SUM(CASE WHEN (cast(PT.PRODUCT_NAME  AS string)= 'Oil' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.VOLUME  END) AS  OIL,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string)= 'Oil' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.POTENTIAL_VOLUME  END) AS  OIL_POT,
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string)= 'Oil' THEN cast(U.UOM AS   string) END) AS  OIL_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string)='Gas' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.VOLUME END) AS  GAS,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string)='Gas' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.POTENTIAL_VOLUME END) AS  GAS_POT, 
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string)='Gas' THEN cast(U.UOM AS   string) END) AS  GAS_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) ='Water' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.VOLUME END) AS  WATER,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) ='Water' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.POTENTIAL_VOLUME END) AS  WATER_POT, 
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string)='Water' THEN cast(U.UOM AS   string) END)  AS  WATER_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) IN ('Oil','Water') and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.VOLUME END)  AS  LIQUID,
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string) IN ('Oil','Water') THEN cast(U.UOM AS   string) END) AS  LIQUID_UOM, 
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) IN ('Oil','Water') and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.POTENTIAL_VOLUME END) AS  LIQUID_POT,
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) ='Condensate' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.VOLUME END) AS  CONDENSATE,
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) ='Condensate' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.POTENTIAL_VOLUME END) AS  CONDENSATE_POT, 
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string)='Condensate' THEN cast(U.UOM AS   string) END)  AS  CONDENSATE_UOM,
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) IN ('Gas') and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.VOLUME*0.65 END) AS  GAS_BOE,
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string) IN ('Gas') THEN cast(U.UOM AS   string) END) AS  GAS_BOE_UOM, 
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) IN ('Gas') and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.POTENTIAL_VOLUME*0.65 END) AS  GAS_BOE_POT, 
 NULL AS  GAS_BOE_POT_UOM, 
 SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Water Injectant' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.VOLUME END) AS  INJ_WATER,
 MAX(CASE WHEN cast(PT.PRODUCT_NAME AS string)='Water Injectant' THEN cast(U.UOM AS   string) END)  AS  INJ_WATER_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Water Injectant' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.POTENTIAL_VOLUME END) AS  INJ_WATER_POT, 
  NULL AS  INJ_WATER_POT_UOM, 
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Steam Injectant' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.VOLUME END) AS  INJ_STEAM,
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS string)='Steam Injectant' THEN cast(U.UOM AS   string) END)  AS  INJ_STEAM_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='Steam Injectant' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.POTENTIAL_VOLUME END) AS  INJ_STEAM_POT,  NULL AS  INJ_STEAM_POT_UOM, 
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='CO2' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.VOLUME END) AS  INJ_CO2,
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS string)='CO2' THEN cast(U.UOM AS   string) END)  AS  INJ_CO2_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS string) ='CO2' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.POTENTIAL_VOLUME END) AS  INJ_CO2_POT, 
NULL AS  INJ_CO2_POT_UOM, NULL AS  GOR,  NULL AS  GOR_UOM, NULL AS  WC, NULL AS  WC_UOM, NULL AS  WOR,NULL AS  WOR_UOM, NULL AS  GOR_POT, NULL AS  GOR_POT_UOM, 
NULL AS  WC_POT,NULL AS  WC_POT_UOM, NULL AS  WOR_POT,  NULL AS  WOR_POT_UOM,NULL AS  OC,NULL AS  OC_UOM,NULL AS  OC_POT,
NULL AS  OC_POT_UOM,NULL AS  OGR, NULL AS  OGR_UOM,NULL AS  OGR_POT,NULL AS  OGR_POT_UOM, 
SUM(CASE WHEN (cast(PT.PRODUCT_NAME  AS string) = 'Oil' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.CUM_VOLUME  END) AS  CUM_OIL,
NULL AS  CUM_OIL_POT,
NULL AS  CUM_OIL_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME  AS string) = 'Gas' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.CUM_VOLUME  END) AS  CUM_GAS,
NULL AS  CUM_GAS_POT,
NULL AS  CUM_GAS_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME  AS string) = 'Water' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.CUM_VOLUME  END) AS  CUM_WATER,
NULL AS  CUM_WATER_POT,
NULL AS  CUM_WATER_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) IN ('Oil','Water') and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.CUM_VOLUME END) AS  CUM_LIQUID,
NULL AS  CUM_LIQUID_UOM,
NULL AS  CUM_LIQUID_POT,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME  AS string) = 'Condensate' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN PVSA.CUM_VOLUME  END) AS  CUM_CONDENSATE,
NULL AS  CUM_CONDENSATE_POT,
NULL AS  CUM_CONDENSATE_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME  AS string)= 'Gas' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Produced') THEN (PVSA.CUM_VOLUME * 0.65)  END) AS  CUM_GAS_BOE,
NULL AS  CUM_GAS_BOE_UOM,
NULL AS  CUM_GAS_BOE_POT,
NULL AS  CUM_GAS_BOE_POT_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME  AS string)= 'Water' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.CUM_VOLUME  END) AS  CUM_INJ_WATER,
NULL AS  CUM_INJ_WATER_UOM,
NULL AS  CUM_INJ_WATER_POT,
NULL AS  CUM_INJ_WATER_POT_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME  AS string)= 'Steam' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.CUM_VOLUME  END) AS  CUM_INJ_STEAM,
NULL AS  CUM_INJ_STEAM_UOM,
NULL AS  CUM_INJ_STEAM_POT,
NULL AS  CUM_INJ_STEAM_POT_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME  AS string)= 'CO2' and cast(RAT.R_ACTIVITY_TYPE  AS string)= 'Injected') THEN PVSA.CUM_VOLUME  END) AS  CUM_INJ_CO2,
NULL AS  CUM_INJ_CO2_UOM,
NULL AS  CUM_INJ_CO2_POT,
NULL AS  CUM_INJ_CO2_POT_UOM,
NULL AS  CUM_GOR,
NULL AS  CUM_GOR_UOM,
NULL AS  CUM_WC,
NULL AS  CUM_WC_UOM,
NULL AS  CUM_WOR,
NULL AS  CUM_WOR_UOM,
NULL AS  CUM_GOR_POT,
NULL AS  CUM_GOR_POT_UOM,
NULL AS  CUM_WC_POT,
NULL AS  CUM_WC_POT_UOM,
NULL AS  CUM_WOR_POT,
NULL AS  CUM_WOR_POT_UOM,
NULL AS  CUM_OC,
NULL AS  CUM_OC_UOM,
NULL AS  CUM_OC_POT,
NULL AS  CUM_OC_POT_UOM,
NULL AS  CUM_OGR,
NULL AS  CUM_OGR_UOM,
NULL AS  CUM_OGR_POT,
NULL AS  CUM_OGR_POT_UOM,
cast(WC.WELL_COMPLETION_ID AS   string),
cast(WC.WELL_COMPLETION AS   string) AS  COMPLETION_NAME,
cast(WX.WELL_ID2 AS   string) AS  ENTITY_ID,
cast(WX.WELL_NAME AS   string) AS  ENTITY_NAME,
cast(DN.DELIVERY_NETWORK_ID AS   string) AS  NETWORK_ID,
cast(DN.DELIVERY_NETWORK AS   string) AS  NETWORK_NAME,
cast(A.AREA_ID AS string),
cast(A.PREFERRED_NAME AS string),
MAX(cast(S.SOURCE_NAME AS string)) AS  SOURCE,MAX(cast(RQ.ROW_QUALITY_NAME AS string)),MAX(cast(PVSA.ROW_CHANGED_BY AS string)),
MAX(PVSA.ROW_CHANGED_DATE),MAX(PVSA.ROW_CREATED_DATE),MAX(cast(PVSA.ROW_CREATED_BY AS   string)),
MAX(cast(PVSA.ACTIVE_IND AS   string)), 
UUID() AS  VOL_ID
	FROM  
	PPDMSrc.PDEN_VOL_SUMMARY_ALLOCATED AS  PVSA
	LEFT OUTER JOIN PPDMSrc.PDEN_PERIOD AS  PP ON PP.PDEN_PERIOD_ID = PVSA.PDEN_PERIOD_ID
	 LEFT JOIN PPDMSrc.R_PERIOD_TYPE AS  RPT ON RPT.R_PERIOD_TYPE_ID = PP.PERIOD_TYPE
 INNER JOIN PPDMSrc.PRODUCT AS  PT ON PT.PRODUCT_ID = PVSA.PRODUCT_ID
 LEFT JOIN PPDMSrc.R_ACTIVITY_TYPE AS  RAT ON RAT.R_ACTIVITY_TYPE_ID = PVSA.ACTIVITY_TYPE
	INNER JOIN PPDMSrc.PDEN_WELL_COMPLETION AS  PWC ON PWC.PDEN_ID = PVSA.PDEN_ID
	INNER JOIN PPDMSrc.WELL_COMPLETION AS  WC ON WC.WELL_COMPLETION_ID = PWC.WELL_COMPLETION_ID	
	LEFT OUTER JOIN PPDMSrc.R_SOURCE AS  S ON S.SOURCE_ID=PVSA.SOURCE
    LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY AS  RQ ON RQ.ROW_QUALITY_ID=PVSA.ROW_QUALITY
	LEFT OUTER JOIN PPDMSrc.DELIVERY_NETWORK AS  DN ON DN.DELIVERY_NETWORK_ID = PVSA.DELIVERY_NETWORK_ID	
	 LEFT OUTER JOIN (SELECT WX.WELL_ID,WX.ACTIVE_IND,WX.WELL_ID2,W.WELL_NAME
		FROM PPDMSrc.WELL_XREF AS  WX  
		INNER JOIN PPDMSrc.WELL AS  W ON WX.WELL_ID2 = W.WELL_ID AND cast(W.ACTIVE_IND AS   string)= 'Y' 
		INNER JOIN PPDMSrc.R_WELL_XREF_TYPE AS  WXT ON WX.R_WELL_XREF_TYPE_ID = WXT.R_WELL_XREF_TYPE_ID
		WHERE cast(WXT.XREF_TYPE AS string) = 'WellboreToWell')WX ON WC.WELL_ID = WX.WELL_ID AND cast(WX.ACTIVE_IND AS  string) = 'Y'
		LEFT OUTER JOIN PPDMSrc.WELL_AREA WA ON WX.WELL_ID2 = WA.WELL_ID
		LEFT OUTER JOIN PPDMSrc.AREA A ON WA.AREA_ID = A.AREA_ID
LEFT OUTER JOIN (SELECT U.UOM_ID,U.UOM,ROW_NUMBER() OVER (PARTITION BY cast(U.UOM AS string) ORDER BY U.ROW_CREATED_DATE DESC) ROWNUM
 FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U
 LEFT OUTER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
 WHERE cast(S.UOM_SYSTEM AS   string)= 'English') U ON (PVSA.VOLUME_UOM = U.UOM_ID AND U.ROWNUM = 1)		
    WHERE cast(PVSA.ACTIVE_IND AS  string) = 'Y'
    GROUP BY PVSA.VOLUME_DATE,cast(RPT.R_PERIOD_TYPE as string),cast(WX.WELL_NAME as string)
 ,cast(A.AREA_ID AS string),cast(A.PREFERRED_NAME AS string), cast(WC.WELL_COMPLETION_ID AS   string),
cast(WC.WELL_COMPLETION AS   string), cast(WX.WELL_ID2 AS   string),cast(WX.WELL_NAME AS   string),cast(DN.DELIVERY_NETWORK_ID AS   string),
cast(DN.DELIVERY_NETWORK AS   string)
);

CREATE VIEW EQUIPMENT
(
EQUIPMENT_ID string (40) NOT NULL,
ACTIVE_IND string (1),
COST BIGDECIMAL (15,4),
COMMISSION_DATE timestamp,
DECOMMISSION_DATE timestamp,
DESCRIPTION string(2000),
EFFECTIVE_DATE timestamp,
EQUIPMENT_GROUP string (100),
EQUIPMENT_NAME string (255),
CAT_EQUIP_SUB_TYPE_ID string (40),
EQUIPMENT_SUB_TYPE string (100),
CAT_EQUIP_TYPE_ID string (40),
EQUIPMENT_TYPE string (100),
EXPIRY_DATE timestamp,
PURCHASE_DATE timestamp,
REFERENCE_NUM string (100),
SERIAL_NUM string (100),
IS_VIRTUAL string(3),
OWNER_BA_ID string(40),
CAT_EQUIPMENT_ID string(40),
REMARK string (2000),
SOURCE_NAME string (100),
ROW_CHANGED_BY string (100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string (100),
ROW_CREATED_DATE timestamp,
ROW_QUALITY_NAME string (100),
INSTALL_DATE timestamp,
LEFT_IN_HOLE_LENGTH bigdecimal(15,4),
LEFT_IN_HOLE_LENGTH_OUOM string(20),
INSIDE_DIAMETER bigdecimal(15,4),
INSIDE_DIAMETER_OUOM string(20),
OUTSIDE_DIAMETER bigdecimal(15,4),
OUTSIDE_DIAMETER_DESC string(2000),
OUTSIDE_DIAMETER_OUOM string(20),
BASE_DEPTH bigdecimal(15,4),
BASE_DEPTH_OUOM string(20),
MANUFACTURER string (100),
CAT_MODEL_NUM string (100),
PRODUCT_ID string(40),
PRODUCT_NAME string(100),
BUSINESS_ASSOCIATE string (100),
CAT_EQUIPMENT string (100),
CAT_INSTALL_LOC_TYPE string (100),
CAT_MANUFACTURER string(100),
CAT_PURCHASE_DATE timestamp,
OPERATING_PRESSURE bigdecimal(15,4),
PRESSURE_UOM string(20),
TEST_RESULT string(100),
TEST_DATE timestamp,
PREV_TEST_DATE timestamp,
SEVERITY_STATUS string(100),
SEVERITY_COLOR string(100),
BARRIER_ENVELOPE string(100),
CONSTRAINT PK_EQUIPMENT PRIMARY KEY (EQUIPMENT_ID))
OPTIONS (UPDATABLE 'FALSE',EQUIPMENT.IMPLEMENTED 'TRUE')
 AS
(SELECT
		CAST(E.EQUIPMENT_ID AS string), CAST(E.ACTIVE_IND AS string), E.COST, CAST(E.COMMISSION_DATE AS TIMESTAMP), 
		CAST(E.DECOMMISSION_DATE AS TIMESTAMP), 
		CAST(E.DESCRIPTION AS string), CAST(E.EFFECTIVE_DATE AS TIMESTAMP), 
		CAST(EG.CAT_EQUIP_GROUP AS string) AS EQUIPMENT_GROUP, CAST(E.EQUIPMENT_NAME AS string), 
		CAST(EST.CAT_EQUIP_SUB_TYPE_ID AS string), 
		CAST(EST.CAT_EQUIP_SUB_TYPE AS string) AS EQUIPMENT_SUB_TYPE, CAST(ET.CAT_EQUIP_TYPE_ID AS string), 
		CAST(ET.CAT_EQUIP_TYPE AS string) AS EQUIPMENT_TYPE, 
		CAST(E.EXPIRY_DATE AS TIMESTAMP), CAST(E.PURCHASE_DATE AS TIMESTAMP), CAST(E.REFERENCE_NUM AS string), 
		CAST(E.SERIAL_NUM AS string), CAST(E.IS_VIRTUAL AS string), 
		CAST(E.OWNER_BA_ID AS string), CAST(E.CAT_EQUIPMENT_ID AS string), 
		CAST(E.REMARK AS string), CAST(S.SOURCE_NAME AS string), CAST(E.ROW_CHANGED_BY AS string), 
		CAST(E.ROW_CHANGED_DATE AS TIMESTAMP), CAST(E.ROW_CREATED_BY AS string), 
		CAST(E.ROW_CREATED_DATE AS TIMESTAMP), 
		CAST(RQ.ROW_QUALITY_NAME AS string), CAST(E.EFFECTIVE_DATE AS TIMESTAMP), WT.LEFT_IN_HOLE_LENGTH, 
		CAST(WT.LEFT_IN_HOLE_LENGTH_OUOM AS string), 
		WT.INSIDE_DIAMETER, CAST(WT.INSIDE_DIAMETER_OUOM AS string), WT.OUTSIDE_DIAMETER, CAST(WT.OUTSIDE_DIAMETER_DESC AS string), 
		CAST(WT.OUTSIDE_DIAMETER_OUOM AS string), WT.BASE_DEPTH, CAST(WT.BASE_DEPTH_OUOM AS string), 
		CAST(CEBA.BUSINESS_ASSOCIATE AS string) AS MANUFACTURER, CAST(CE.MODEL_NUM AS string), CAST(EI.PRODUCT_ID AS string), 
		CAST(EI.PRODUCT_NAME AS string),
		CAST(B.BUSINESS_ASSOCIATE AS string)AS OWNER_BA, CAST(CE.CAT_EQUIPMENT AS string),
		CAST(CE.INSTALL_LOC_TYPE AS string),CAST(CEBA.BUSINESS_ASSOCIATE AS string) AS CAT_MANUFACTURER,
		CAST(E.PURCHASE_DATE AS TIMESTAMP), BE.BE_OPERATING_PRESSURE, BE.PRESSURE_UOM, KET.TEST_RESULT,
		KET.CURRENT_TEST_DATE, KET.PREVIOUS_TEST_DATE, PT.R_PRIORITY, PT.COLOR_CODE, BE.BARRIER_ENVELOPE
	FROM
		PPDMSrc.EQUIPMENT AS E 
		LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY AS RQ ON UPPER(RQ.ROW_QUALITY_ID) = UPPER(E.ROW_QUALITY)
		LEFT OUTER JOIN PPDMSrc.R_SOURCE AS S ON UPPER(S.SOURCE_ID) = UPPER(E.SOURCE)
		LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_GROUP AS EG ON UPPER(E.EQUIPMENT_GROUP) = UPPER(EG.CAT_EQUIP_GROUP_ID)
		LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE AS EST ON UPPER(E.EQUIPMENT_SUB_TYPE) = UPPER(EST.CAT_EQUIP_SUB_TYPE_ID)
		LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_TYPE AS ET ON UPPER(ET.CAT_EQUIP_TYPE_ID) = UPPER(EST.CAT_EQUIP_TYPE)		
		LEFT OUTER JOIN PPDMSrc.CAT_EQUIPMENT AS CE ON UPPER(CE.CAT_EQUIPMENT_ID) = UPPER(E.CAT_EQUIPMENT_ID)
		LEFT OUTER JOIN PPDMSrc.BUSINESS_ASSOCIATE AS CEBA ON UPPER(CE.MANUFACTURER) = UPPER(CEBA.BUSINESS_ASSOCIATE_ID)
		LEFT OUTER JOIN PPDMSrc.BUSINESS_ASSOCIATE B ON E.OWNER_BA_ID = B.BUSINESS_ASSOCIATE_ID
		LEFT OUTER JOIN (SELECT WT.EQUIPMENT_ID, WT.LEFT_IN_HOLE_LENGTH, IHLUOM.UOM AS LEFT_IN_HOLE_LENGTH_OUOM, 
		WT.INSIDE_DIAMETER, IDUOM.UOM AS INSIDE_DIAMETER_OUOM, WT.OUTSIDE_DIAMETER, WT.OUTSIDE_DIAMETER_DESC, 
		ODUOM.UOM AS OUTSIDE_DIAMETER_OUOM, WT.BASE_DEPTH, BDUOM.UOM AS BASE_DEPTH_OUOM FROM PDMExtSrc.WELL_TUBULAR AS WT 
		LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE AS IHLUOM ON UPPER(WT.LEFT_IN_HOLE_LENGTH_OUOM) = UPPER(IHLUOM.UOM_ID)
		LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE AS IDUOM ON UPPER(WT.INSIDE_DIAMETER_OUOM) = UPPER(IDUOM.UOM_ID) 
		LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE AS ODUOM ON UPPER(WT.OUTSIDE_DIAMETER_OUOM) = UPPER(ODUOM.UOM_ID) 
		LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE AS BDUOM ON UPPER(WT.BASE_DEPTH_OUOM) = UPPER(BDUOM.UOM_ID)) WT ON UPPER(E.EQUIPMENT_ID) = UPPER(WT.EQUIPMENT_ID)
		LEFT OUTER JOIN (SELECT EI.EQUIPMENT_ID, P.PRODUCT_ID, P.PRODUCT_NAME 
		FROM PPDMSrc.EQUIP_INIT_CTX_SPEC AS EI 
		INNER JOIN PPDMSrc.PRODUCT AS P ON UPPER(EI.PRODUCT_ID) = UPPER(P.PRODUCT_ID)) AS EI ON UPPER(E.EQUIPMENT_ID) = UPPER(EI.EQUIPMENT_ID)
		LEFT OUTER JOIN PDMExtSrc.EQUIPMENT EQ ON E.EQUIPMENT_ID = EQ.EQUIPMENT_ID
		LEFT OUTER JOIN PDMExtSrc.R_PRIORITY PT  ON EQ.SEVERITY_ID = PT.R_PRIORITY_ID
		LEFT OUTER JOIN PDMExtSrc.BARRIER_EQUIP_INVENTORY BE ON E.EQUIPMENT_ID = BE.BARRIER_EQUIP_ID
		LEFT OUTER JOIN 
		(SELECT EQUIPMENT_ID, 
		MAX(CASE ROW_NUM WHEN 1 THEN TEST_DATE END) AS CURRENT_TEST_DATE, MAX(CASE ROW_NUM WHEN 2 THEN TEST_DATE END) AS PREVIOUS_TEST_DATE,
		MAX(TEST_RESULT) AS TEST_RESULT
		FROM 
		(SELECT EQUIPMENT_ID, TEST_DATE, TEST_RESULT, ROW_NUMBER() OVER (PARTITION BY EQUIPMENT_ID ORDER BY TEST_DATE DESC) AS ROW_NUM 
		FROM PDMExtSrc.BARRIER_EQUIP_TEST B) AS TR
		GROUP BY EQUIPMENT_ID) KET ON (E.EQUIPMENT_ID = KET.EQUIPMENT_ID)		
	WHERE
		E.ACTIVE_IND = 'Y');

CREATE VIEW PATTERN_ASSET_DETAILS
(
PATTERN_DETAILS_ID string(40 ) NOT NULL,
PATTERN_ASSET_NAME string (255),
PATTERN_ID string(40) NOT NULL,
PATTERN_NAME string (255) NOT NULL,
PATTERN_DESC string(2000),
PRIVATE_IND string(1),
UWI string (255) NOT NULL,
FIELD string (255) ,
POOL string (255) ,
PROD_START_DATE timestamp,
PROD_STATUS  string (100) ,
ALLOC_FACTOR bigdecimal (15,4),
ALLOC_FACTOR_OVERRIDE bigdecimal (15,4),
ALLOC_FACTOR_SUMMARY bigdecimal(15,4),
GROUP_ID string(40),
GROUP_NAME string (255) ,
ENTITY_ID string (40) NOT NULL,
SOURCE string (100) ,
ROW_QUALITY string (100) ,
ROW_CHANGED_BY string (100) ,
ROW_CHANGED_DATE timestamp ,
ROW_CREATED_DATE timestamp ,
ROW_CREATED_BY string (100) ,
ACTIVE_IND string (1) ,
LEVEL1_ID string (40) ,
LEVEL1_NAME string (255) ,
LEVEL1_TYPE string (100) ,
LEVEL2_ID string (40) ,
LEVEL2_NAME string (255) ,
LEVEL2_TYPE string (100) ,
LEVEL3_ID string     (40) ,
LEVEL3_NAME string (255) ,
LEVEL3_TYPE string (100) ,
LEVEL4_ID string (40) ,
LEVEL4_NAME string (255) ,
LEVEL4_TYPE string (100) ,
LEVEL5_ID string (40) ,
LEVEL5_NAME string (255) ,
LEVEL5_TYPE string (100) ,
LEVEL6_ID string (40) ,
LEVEL6_NAME string (255) ,
LEVEL6_TYPE string (100) ,
CONSTRAINT PK_PATTERN_ASSET_DETAILS PRIMARY KEY (PATTERN_DETAILS_ID))
OPTIONS (UPDATABLE 'FALSE',PATTERN_ASSET_DETAILS.IMPLEMENTED 'TRUE')
AS
(SELECT 
cast(WA.ASSET_PATTERN_ID AS  string) AS  PATTERN_DETAILS_ID,
NULL AS PATTERN_ASSET_NAME,
cast(A.PATTERN_ID AS string) AS PATTERN_ID,
cast(A.PREFERRED_NAME AS  string) AS  PATTERN_NAME, 
cast(A.REMARKS AS string),
cast(A.IS_PRIVATE AS string),
NULL AS UWI,NULL AS FIELD,NULL AS POOL,NULL AS PROD_START_DATE,NULL AS PROD_STATUS,
WA.ALLOC_FACTOR AS  ALLOC_FACTOR,
WA.ALLOC_FACTOR_CALC AS  ALLOC_FACTOR_OVERRIDE,
CASE WHEN WA.ALLOC_FACTOR_CALC IS NULL THEN WA.ALLOC_FACTOR ELSE WA.ALLOC_FACTOR_CALC END AS ALLOC_FACTOR_SUMMARY,
cast(G.PATTERN_ID AS string) AS GROUP_ID,
cast(G.PREFERRED_NAME AS  string) AS  GROUP_NAME,
cast(WA.ASSET_ID AS  string) AS  ENTITY_ID,
cast(WA.SOURCE_NAME AS  string) AS  SOURCE,
cast(WA.ROW_QUALITY AS  string),
cast(A.ROW_CHANGED_BY AS  string), 
cast(A.ROW_CHANGED_DATE AS timestamp),
cast(A.ROW_CREATED_DATE AS timestamp), 
cast(A.ROW_CREATED_BY AS  string), 
cast(WA.ACTIVE_IND AS  string) 
,NULL AS LEVEL1_ID,NULL AS LEVEL1_NAME,NULL AS LEVEL1_TYPE,NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE,NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE
,NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE,NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,NULL AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE
FROM
PDMExtSrc.ASSET_PATTERN AS WA 
INNER JOIN PDMExtSrc.PATTERN AS A ON cast(WA.PATTERN_ID AS string) = cast(A.PATTERN_ID AS string)  
INNER JOIN PDMExtSrc.R_PATTERN_TYPE AS  RAT ON cast(A.PATTERN_TYPE AS string) = cast(RAT.R_PATTERN_TYPE_ID AS string) 
	AND UPPER(cast(RAT.PATTERN_TYPE AS  string)) = 'PATTERN' 
LEFT OUTER JOIN PDMExtSrc.PATTERN_CONTAIN AS  AC ON cast(AC.CONTAINED_PATTERN AS string) = cast(A.PATTERN_ID AS string)
INNER JOIN PDMExtSrc.PATTERN AS G ON cast(AC.CONTAINING_PATTERN AS string) = cast(G.PATTERN_ID AS string) AND cast(G.ACTIVE_IND AS string) = 'Y'
LEFT OUTER JOIN PPDMSrc.WELL_AREA WA1 ON cast(WA.ASSET_ID AS string) = cast(WA1.WELL_ID AS string)
WHERE cast(A.ACTIVE_IND AS  string) = 'Y' AND cast(WA.ACTIVE_IND AS  string) = 'Y'
);

CREATE VIEW PATTERN_STATUS
(
PATTERN_ID string(40) NOT NULL,
PATTERN_NAME string(255) NOT NULL,
PATTERN_TYPE string(100),
GROUP_ID string(40),
GROUP_NAME string (255),
WELL_COUNT INTEGER,
CONSTRAINT PK_PTRN_STS PRIMARY KEY (PATTERN_NAME))
OPTIONS (UPDATABLE 'FALSE', PATTERN_STATUS.IMPLEMENTED 'TRUE')
AS
(
	SELECT cast(A.PATTERN_ID AS string), cast(A.PREFERRED_NAME AS string),
	'Pattern', cast(P.GROUP_ID AS string),cast(P.GROUP_NAME AS string),
	COUNT(D.ASSET_ID)
	FROM PDMExtSrc.ASSET_PATTERN D
	INNER JOIN PDMExtSrc.PATTERN AS A ON cast(D.PATTERN_ID AS string) = cast(A.PATTERN_ID AS string)
	LEFT OUTER JOIN (SELECT AC.CONTAINED_PATTERN AS PATTERN_ID,G.PREFERRED_NAME AS GROUP_NAME,
	AC.CONTAINING_PATTERN AS GROUP_ID
						FROM PDMExtSrc.PATTERN_CONTAIN AS  AC 
					INNER JOIN PDMExtSrc.PATTERN AS G ON cast(AC.CONTAINING_PATTERN AS string) = cast(G.PATTERN_ID AS string) 
					WHERE cast(G.ACTIVE_IND AS string) = 'Y') P ON cast(A.PATTERN_ID AS string) = cast(P.PATTERN_ID AS string)
	WHERE cast(A.ACTIVE_IND AS string) = 'Y' AND cast(D.ACTIVE_IND AS string) = 'Y'
	GROUP BY cast(A.PATTERN_ID AS string),cast(A.PREFERRED_NAME AS string),
	cast(P.GROUP_ID AS string),cast(P.GROUP_NAME AS string)
);

CREATE VIEW FLOW_DETAILS
(
RECORDED_DATE timestamp NOT NULL,
OIL  bigdecimal (15,4),
OIL_UOM  string(20),
GAS  bigdecimal (15,4),
GAS_UOM  string(20),
WATER  bigdecimal (15,4),
WATER_UOM  string(20),
INJ_GAS  bigdecimal (15,4),
INJ_GAS_UOM  string(20),
TUBING_PRESSURE bigdecimal(15,4),
TUBING_PRESSURE_UOM string(20),
CASING_PRESSURE bigdecimal(15,4),
CASING_PRESSURE_UOM string(20),
STATIC_PRESSURE bigdecimal(15,4),
STATIC_PRESSURE_UOM string(20),
LINE_PRESSURE bigdecimal(15,4),
LINE_PRESSURE_UOM string(20),
ENTITY_ID  string(100) NOT NULL,
ENTITY_NAME  string(255),
NETWORK_ID  string(40),
NETWORK_NAME  string(100),
FLOW_ID  string(40) NOT NULL,
CONSTRAINT PK_FLOW_DETAILS PRIMARY KEY (FLOW_ID))
OPTIONS (UPDATABLE 'FALSE',FLOW_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT cast(T.MEASUREMENT_DATE AS timestamp) AS MEASUREMENT_DATE, 
SUM(CASE cast(T.R_MEASUREMENT_POINT AS string) WHEN 'Oil' THEN T.MEASUREMENT END) AS OIL,
MAX(cast(L.UOM AS string)) AS OIL_UOM,
SUM(CASE cast(T.R_MEASUREMENT_POINT AS string) WHEN 'Gas' THEN T.MEASUREMENT END) AS GAS,
MAX(cast(G.UOM AS string)) AS GAS_UOM,
SUM(CASE cast(T.R_MEASUREMENT_POINT AS string) WHEN 'Water' THEN T.MEASUREMENT END) AS WATER,
MAX(cast(L.UOM AS string)) AS WATER_UOM,
SUM(CASE cast(T.R_MEASUREMENT_POINT AS string) WHEN 'Condensate' THEN T.MEASUREMENT END) AS INJ_GAS,
MAX(cast(G.UOM AS string)) AS INJ_GAS_UOM,
NULL, MAX(cast(PE.UOM AS string)) AS  TUBING_PRESSURE_UOM,
NULL AS  CASING_PRESSURE, MAX(cast(PE.UOM AS string)) AS  CASING_PRESSURE_UOM,
AVG(CASE cast(T.R_MEASUREMENT_POINT AS   string) WHEN 'Static Pressure' THEN T.MEASUREMENT END) AS  STATIC_PRESSURE,
MAX(cast(PE.UOM AS string)) AS ST_PRES_UOM,
AVG(CASE cast(T.R_MEASUREMENT_POINT AS   string) WHEN 'Line Pressure'  THEN T.MEASUREMENT END) AS  LINE_PRESSURE,
MAX(cast(PE.UOM AS string)) AS LINE_PRES_UOM,
cast(PW.ENTITY_ID AS   string) AS  ENTITY_ID, 
cast(PW.ENTITY_NAME AS string) AS ENTITY_NAME,
cast(DN.DELIVERY_NETWORK_ID AS string) AS NETWORK_ID,cast(DN.LONG_NAME AS string) AS NETWORK_NAME,
UUID() AS  FLOW_DETAILS_ID
FROM 
(
	SELECT F.MEASUREMENT_DATE,F.PDEN_EQUIPMENT_ID,P.PRODUCT_NAME AS R_MEASUREMENT_POINT,
	F.PRODUCTION_VOLUME AS MEASUREMENT,F.PDEN_FLOW_MEASUREMENT_ID AS MEASUREMENT_ID
	FROM PPDMSrc.PDEN_FLOW_MEASUREMENT F
	INNER JOIN PPDMSrc.PRODUCT P ON F.PRODUCT_ID = P.PRODUCT_ID
	UNION ALL 
	SELECT F.MEASUREMENT_DATE,F.PDEN_EQUIPMENT_ID,MP.R_MEASUREMENT_POINT,
	F."VALUE" AS MEASUREMENT,F.PDEN_MEASUREMENT_ID AS MEASUREMENT_ID
	FROM PPDMSrc.PDEN_MEASUREMENT F
	INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON F.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
	WHERE cast(MP.R_MEASUREMENT_POINT AS   string) IN ('Static Pressure','Line Pressure')
)T
INNER JOIN PPDMSrc.PDEN_EQUIPMENT PDE ON T.PDEN_EQUIPMENT_ID = PDE.PDEN_EQUIPMENT_ID
		INNER JOIN PPDMSrc.DELIVERY_NETWORK_VERSION DNV ON PDE.DELIVERY_NETWORK_VERSION_ID = DNV.DELIVERY_NETWORK_VERSION_ID
		INNER JOIN PPDMSrc.DELIVERY_NETWORK DN ON DNV.DELIVERY_NETWORK_ID = DN.DELIVERY_NETWORK_ID
INNER JOIN (SELECT PW.PDEN_ID,PW.WELL_ID AS ENTITY_ID,W.WELL_NAME AS ENTITY_NAME, 'Well' AS ENTITY_TYPE
						FROM PPDMSrc.PDEN_WELL AS  PW
						INNER JOIN PPDMSrc.WELL AS  W ON W.WELL_ID = PW.WELL_ID WHERE W.ACTIVE_IND = 'Y' AND PW.ACTIVE_IND = 'Y'
						UNION ALL
						SELECT PF.PDEN_ID,PF.FACILITY_ID AS ENTITY_ID,F.FACILITY_NAME AS ENTITY_NAME, 'Facility' AS ENTITY_TYPE
						FROM PPDMSrc.PDEN_FACILITY AS  PF
		INNER JOIN PPDMSrc.FACILITY AS  F ON PF.FACILITY_ID = F.FACILITY_ID WHERE F.ACTIVE_IND = 'Y' AND PF.ACTIVE_IND = 'Y') PW ON PDE.PDEN_ID = PW.PDEN_ID
LEFT OUTER JOIN (SELECT 1 AS DUMMY, UOM FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
WHERE cast(S.UOM_SYSTEM as string) = 'English' AND cast(Q.QUANTITY_TYPE as string) = 'Pressure' 
LIMIT 1)PE ON PE.DUMMY = 1
LEFT OUTER JOIN (SELECT 1 AS DUMMY,UOM FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
WHERE cast(S.UOM_SYSTEM as string) = 'English' AND cast(Q.QUANTITY_TYPE as string) = 'GasVolume' 
LIMIT 1)G ON G.DUMMY = 1
LEFT OUTER JOIN (SELECT 1 AS DUMMY,UOM FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U 
INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
WHERE cast(S.UOM_SYSTEM as string) = 'English' AND cast(Q.QUANTITY_TYPE as string) = 'LiquidVolume' 
LIMIT 1)L ON L.DUMMY = 1
GROUP BY PW.ENTITY_ID,PW.ENTITY_NAME,cast(DN.DELIVERY_NETWORK_ID AS string),	cast(DN.LONG_NAME AS string),T.MEASUREMENT_DATE
);

CREATE VIEW GAS_LIFT_DETAILS
(
MEASUREMENT_DATE  timestamp NOT NULL,
CYCLE_NUM  integer NOT NULL,
INJ_TIME  timestamp,
INJ_RATE_SET_POINT   bigdecimal(15,4),
INJ_RATE_SET_POINT_UOM  string(20),
INJ_STATUS string (100),
VALVE_OPEN bigdecimal (15,4),
VALVE_OPEN_UOM string (20),
ENTITY_ID string (40) NOT NULL,
ENTITY_NAME  string (255),
SOURCE string (100),
ROW_QUALITY string  (100),
ROW_CHANGED_BY string (100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_DATE   timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND string (1),
GAS_LIFT_ID  string (40) NOT NULL,
CONSTRAINT PK_GAS_LIFT_DETAILS PRIMARY KEY (ENTITY_ID,MEASUREMENT_DATE,CYCLE_NUM))
OPTIONS (UPDATABLE 'FALSE',GAS_LIFT_DETAILS.IMPLEMENTED 'TRUE')
AS
(
select
cast(EQ.EFFECTIVE_DATE AS timestamp),
cast(EQ.EQ_RUN_NUM AS integer) AS  CYCLE_NUM,
MAX(cast(EQ.EFFECTIVE_DATE AS timestamp)),
MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS  string) ='Rate Set Point' THEN EQ.OPR_DETAIL_VALUE END) AS  INJ_RATE_SET_POINT,
MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS  string) ='Rate Set Point' THEN cast(EQ.OPR_DETAIL_VALUE_UOM AS  string) END) AS  INJ_RATE_SET_POINT_UOM,
MAX(cast(ES.EQUIP_STATUS AS string)) AS  INJ_STATUS,
AVG(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS  string) ='Valve Open' THEN EQ.OPR_DETAIL_VALUE END) AS  INJ_RATE_SET_POINT,
MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS  string) ='Valve Open' THEN cast(EQ.OPR_DETAIL_VALUE_UOM AS  string) END) AS  INJ_RATE_SET_POINT_UOM,
cast(EQ.ENTITY_ID AS  string) AS  ENTITY_ID,
CAST(EQ.ENTITY_NAME AS string),
MAX(cast(EQ.SOURCE_NAME AS  string)) AS  SOURCE,
MAX(cast(EQ.ROW_QUALITY AS  string)) AS  ROW_QUALITY,
MAX(cast(EQ.ROW_CHANGED_BY AS  string)),
MAX(cast(EQ.ROW_CHANGED_DATE AS timestamp)),
MAX(cast(EQ.ROW_CREATED_DATE AS timestamp)),
MAX(cast(EQ.ROW_CREATED_BY AS  string)),
MAX(cast(EQ.ACTIVE_IND AS  string)),
UUID() AS  GAS_LIFT_ID
  FROM
  PDMExtSrc.EQ_METER_OPERATION_DETAIL EQ
  LEFT OUTER JOIN PDMExtSrc.R_OPR_DETAIL_TYPE ODT ON cast(EQ.OPR_DETAIL_TYPE_ID AS string) = cast(ODT.OPR_DETAIL_TYPE_ID AS string)
  INNER JOIN PPDMSrc.PDEN_WELL PW ON cast(EQ.ENTITY_ID AS string) = cast(PW.WELL_ID AS string)
  INNER JOIN PPDMSrc.PDEN PD ON cast(PW.PDEN_ID AS string) = cast(PD.PDEN_ID AS string)
  INNER JOIN PPDMSrc.R_PRODUCTION_METHOD RPM ON RPM.R_PRODUCTION_METHOD_ID = PD.PRODUCTION_METHOD
  LEFT OUTER JOIN (SELECT ES.ENTITY_ID, ES.EQUIPMENT_ID, ES.EFFECTIVE_DATE, ES.EQ_RUN_NUM, ES.EQUIP_STATUS
	FROM PDMExtSrc.EQUIPMENT_STATUS ES WHERE cast(ES.EQUIP_STATUS_TYPE AS string) IN ('Injection')) ES ON (cast(EQ.EQUIPMENT_ID AS string) = cast(ES.EQUIPMENT_ID AS string) AND EQ.EFFECTIVE_DATE = ES.EFFECTIVE_DATE AND EQ.EQ_RUN_NUM = ES.EQ_RUN_NUM)
WHERE
 cast(RPM.PRODUCTION_METHOD AS  string)='Gas Lift'
 GROUP BY cast(EQ.ENTITY_ID AS  string),cast(EQ.EFFECTIVE_DATE AS timestamp),cast(EQ.EQ_RUN_NUM AS integer),cast (EQ.ENTITY_NAME AS string)
);

CREATE VIEW GAS_LIFT_SETTINGS
(
MEASUREMENT_DATE timestamp NOT NULL,
VALVE_NUMBER string(100),
VALVE_DEPTH	bigdecimal	(15,4),
VALVE_DEPTH_UOM	string	(20),
DESG_SURF_OPEN_PRESSURE	bigdecimal	(15,4),
DESG_SURF_OPEN_PRESS_UOM	string	(20),
DESG_SURF_CLOSE_PRESSURE	bigdecimal	(15,4),
DESG_SURF_CLOSE_PRESS_UOM	string	(20),
ENTITY_ID	string	(40) NOT NULL,
ENTITY_NAME	string	(255),
SOURCE	string	(100),
ROW_QUALITY	string	(100),
ROW_CHANGED_BY	string	(100),
ROW_CHANGED_DATE	timestamp,
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string	(100),
ACTIVE_IND	string	(1),
GAS_LIFT_ID	string	(40) NOT NULL,
CONSTRAINT PK_GAS_LIFT_SETTINGS PRIMARY KEY (ENTITY_ID,MEASUREMENT_DATE))
OPTIONS (UPDATABLE 'FALSE',GAS_LIFT_SETTINGS.IMPLEMENTED 'TRUE')
AS
(
select
cast(EQ.EFFECTIVE_DATE AS timestamp),
cast(E.SERIAL_NUM AS string),
MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS  string) ='Valve Depth' THEN EQ.OPR_DETAIL_VALUE END) AS  VALVE_DEPTH,
MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS  string) ='Valve Depth' THEN cast(EQ.OPR_DETAIL_VALUE_UOM AS  string) END) AS  VALVE_DEPTH_UOM,
AVG(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS  string) ='Surface Open Pressure' THEN EQ.OPR_DETAIL_VALUE END) AS  SURF_OPEN_PRESSURE,
MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS  string) ='Surface Open Pressure' THEN cast(EQ.OPR_DETAIL_VALUE_UOM AS  string) END) AS  SURF_OPEN_PRESS_UOM,
AVG(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS  string) ='Surface Close Pressure' THEN EQ.OPR_DETAIL_VALUE END) AS  SURF_CLOSE_PRESSURE,
MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS  string) ='Surface Close Pressure' THEN cast(EQ.OPR_DETAIL_VALUE_UOM AS  string) END) AS  SURF_CLOSE_PRESS_UOM,
cast(W.WELL_ID AS  string) AS  ENTITY_ID,
cast(W.WELL_NAME AS  string) AS  ENTITY_NAME,
MAX(cast(EQ.SOURCE_NAME AS  string)) AS  SOURCE,
MAX(cast(EQ.ROW_QUALITY AS  string)) AS  ROW_QUALITY,
MAX(cast(EQ.ROW_CHANGED_BY AS  string)),
MAX(cast(EQ.ROW_CHANGED_DATE AS timestamp)),
MAX(cast(EQ.ROW_CREATED_DATE AS timestamp)),
MAX(cast(EQ.ROW_CREATED_BY AS  string)),
MAX(cast(EQ.ACTIVE_IND AS  string)),
UUID() AS  GAS_LIFT_ID
  FROM
  PDMExtSrc.EQ_METER_OPERATION_DETAIL EQ
  LEFT OUTER JOIN PDMExtSrc.R_OPR_DETAIL_TYPE ODT ON cast(EQ.OPR_DETAIL_TYPE_ID AS string) = cast(ODT.OPR_DETAIL_TYPE_ID AS string)
  INNER JOIN PPDMSrc.WELL W ON cast(EQ.ENTITY_ID AS string) = cast(W.WELL_ID AS string)  
  INNER JOIN PPDMSrc.PDEN_WELL PW ON cast(W.WELL_ID AS string) = cast(PW.WELL_ID AS string)
  INNER JOIN PPDMSrc.PDEN P ON cast(PW.PDEN_ID AS string) = cast(P.PDEN_ID AS string)
  INNER JOIN PPDMSrc.R_PRODUCTION_METHOD RPM ON cast(RPM.R_PRODUCTION_METHOD_ID AS string) = cast(P.PRODUCTION_METHOD AS string)
  LEFT OUTER JOIN PPDMSrc.EQUIPMENT E ON cast(EQ.EQUIPMENT_ID AS string) = cast(E.EQUIPMENT_ID as string)
WHERE
 cast(RPM.PRODUCTION_METHOD AS  string)='Gas Lift'
 GROUP BY cast(W.WELL_ID AS  string),cast(E.SERIAL_NUM AS string),cast(W.WELL_NAME AS string),
 cast(EQ.EFFECTIVE_DATE AS timestamp));
 
   CREATE VIEW PLUNGER_CYCLE_DETAILS
(
MEASUREMENT_DATE timestamp NOT NULL,
CYCLE_NUM integer NOT NULL,
CASING_PRESSURE bigdecimal (15,4),
CASING_PRESS_UOM string (20),
TUBING_PRESSURE bigdecimal (15,4),
TUBING_PRESS_UOM string (20),
O_CASING_PRESSURE bigdecimal (15,4),
O_CASING_PRESS_UOM string (20),
LINE_PRESSURE bigdecimal (15,4),
LINE_PRESS_UOM string (20),
O_TUBING_PRESSURE bigdecimal (15,4),
O_TUBING_PRESS_UOM string (20),
O_LINE_PRESSURE bigdecimal (15,4),
O_LINE_PRESS_UOM string (20),
OPEN_TIME timestamp ,
CLOSE_TIME timestamp ,
ARRIVAL_TIME timestamp ,
HOLD_REASON string (2000),
OPEN_REASON string (2000),
CLOSE_REASON string (2000),
ARRIVAL_STATUS string(100),
ENTITY_ID string (40) NOT NULL,
ENTITY_NAME string (255),
SOURCE string (100),
ROW_QUALITY string (100),
ROW_CHANGED_BY string (100),
ROW_CHANGED_DATE timestamp ,
ROW_CREATED_DATE timestamp ,
ROW_CREATED_BY string (100),
ACTIVE_IND string (1),
PLUNGER_LIFT_ID string (40) NOT NULL,
CONSTRAINT PK_PLUNGER_CYCLE_DETAILS PRIMARY KEY (ENTITY_ID,MEASUREMENT_DATE,CYCLE_NUM))
OPTIONS (UPDATABLE 'FALSE',PLUNGER_CYCLE_DETAILS.IMPLEMENTED 'TRUE')
AS
 (
 SELECT 
	cast(PM.MEASUREMENT_DATE AS timestamp),
	cast(PM.EQ_RUN_NUM AS integer) AS  CYCLE_NUM,
	NULL AS  CASING_PRESSURE,
	NULL AS  CASING_PRESS_UOM,
	NULL AS  TUBING_PRESSURE,
	NULL AS  TUBING_PRESS_UOM,
	AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'O Casing Pressure' THEN PM."MEASUREMENT_VALUE" END) AS  O_CASING_PRESSURE,
	MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'O Casing Pressure' THEN cast(PM.VALUE_UOM AS  string) END) AS  O_CASING_PRESS_UOM,
	AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Line Pressure' THEN PM."MEASUREMENT_VALUE" END) AS  LINE_PRESSURE,
	MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Line Pressure' THEN cast(PM.VALUE_UOM AS  string) END) AS  LINE_PRESS_UOM,
	AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'O Tubing Pressure' THEN PM."MEASUREMENT_VALUE" END) AS  O_TUBING_PRESSURE,
	MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'O Tubing Pressure' THEN cast(PM.VALUE_UOM AS  string) END) AS  O_TUBING_PRESS_UOM,
	AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'O Line Pressure' THEN PM."MEASUREMENT_VALUE" END) AS  O_LINE_PRESSURE,
	MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'O Line Pressure' THEN cast(PM.VALUE_UOM AS  string) END) AS  O_LINE_PRESS_UOM,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Plunger Lift' THEN cast(EQ.EFFECTIVE_DATE AS timestamp) END) AS  OPEN_TIME ,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Plunger Lift' THEN cast(EQ.EXPIRY_DATE AS timestamp) END) AS  CLOSE_TIME ,
	cast(PM.MEASUREMENT_DATE AS timestamp) AS  ARRIVAL_TIME ,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Plunger Lift' THEN cast(EQ.REMARKS AS string) END) AS  HOLD_REASON ,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Plunger Lift' THEN cast(EQ.EFFECTIVE_DATE_REMARKS AS string) END) AS  OPEN_REASON,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Plunger Lift' THEN cast(EQ.EXPIRY_DATE_REMARKS AS string) END) AS  CLOSE_REASON ,
MAX(CASE WHEN cast(ESS.EQUIP_STATUS_TYPE AS string) = 'Arrival' THEN cast(ESS.EQUIP_STATUS AS string) END) AS ARRIVAL_STATUS,	
	cast(PM.ENTITY_ID AS  string) AS  ENTITY_ID,
	CAST(PM.ENTITY_NAME AS string),
	MAX(cast(PM.SOURCE_NAME AS  string)) AS SOURCE,
	MAX(cast(PM.ROW_QUALITY AS  string)) AS ROW_QUALITY,
	MAX(cast(PM.ROW_CHANGED_BY AS  string)),
	MAX(cast(PM.ROW_CHANGED_DATE AS timestamp)),
	MAX(cast(PM.ROW_CREATED_DATE AS timestamp)),
	MAX(cast(PM.ROW_CREATED_BY AS  string)),
	MAX(cast(PM.ACTIVE_IND AS  string)),
	UUID() AS  PLUNGER_LIFT_ID
 FROM 
	PDMExtSrc.EQ_MEASUREMENT PM
	LEFT OUTER JOIN PDMExtSrc.EQ_METER_OPERATION_DETAIL EQ ON cast(PM.EQ_OPERATION_DETAIL_ID AS string) = cast(EQ.EQ_METER_OPERATION_DETAIL_ID AS string)
	LEFT OUTER JOIN PDMExtSrc.R_OPR_DETAIL_TYPE ODT ON cast(EQ.OPR_DETAIL_TYPE_ID AS string) = cast(ODT.OPR_DETAIL_TYPE_ID AS string)	
	INNER JOIN PPDMSrc.PDEN_WELL PW ON cast(PM.ENTITY_ID AS string) = cast(PW.WELL_ID AS string)	
	INNER JOIN PPDMSrc.PDEN PD ON PW.PDEN_ID = PD.PDEN_ID
	INNER JOIN PPDMSrc.R_PRODUCTION_METHOD RPM ON PD.PRODUCTION_METHOD = RPM.R_PRODUCTION_METHOD_ID
	LEFT OUTER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON cast(MP.R_MEASUREMENT_POINT_ID AS string) = cast(PM.R_MEASUREMENT_POINT_ID AS string)
	LEFT OUTER JOIN (SELECT cast(ENTITY_ID AS string) AS ENTITY_ID,cast(EQUIP_STATUS AS string) AS EQUIP_STATUS,cast(EQUIP_STATUS_TYPE AS string) AS EQUIP_STATUS_TYPE,
			ROW_NUMBER() OVER (PARTITION BY cast(ENTITY_ID AS string), cast(EQUIP_STATUS_TYPE AS string) ORDER BY ROW_CREATED_DATE DESC) ROW_NUM
				FROM PDMExtSrc.EQUIPMENT_STATUS WHERE cast(EQUIP_STATUS_TYPE AS string) IN ('Arrival','Injecting'))ESS ON cast(PM.ENTITY_ID AS string) = cast(ESS.ENTITY_ID AS string) AND ESS.ROW_NUM = 1	
WHERE
	cast(RPM.PRODUCTION_METHOD AS  string) = 'Plunger Lift' 
	GROUP BY cast(PM.ENTITY_ID AS  string),cast(PM.MEASUREMENT_DATE AS timestamp),cast(PM.EQ_RUN_NUM AS integer),cast(PM.ENTITY_NAME AS string)
);

CREATE VIEW PLUNGER_LIFT_SETTINGS
(
 MEASUREMENT_DATE timestamp NOT NULL,
 PLUNGER_TYPE string (100),
 INSTALL_DATE timestamp,
 MIN_ARRIVAL bigdecimal	(15,4),
 MAX_ARRIVAL bigdecimal	(15,4),
 SLOW_ARRIVAL bigdecimal	(15,4),
 FAST_ARRIVAL bigdecimal	(15,4),
 MILEAGE BIGDECIMAL(15,4),
 PLUNGER_NAME string (255),
 ENTITY_ID string (40) NOT NULL,
 ENTITY_NAME string (255),
 SOURCE string (100),
 ROW_QUALITY string (100),
 ROW_CHANGED_BY string (100),
 ROW_CHANGED_DATE timestamp,
 ROW_CREATED_DATE timestamp,
 ROW_CREATED_BY string (100),
 ACTIVE_IND string (1),
 PLUNGER_LIFT_ID string (40) NOT NULL,
CONSTRAINT PK_PLUNGER_LIFT_SETTINGS PRIMARY KEY (ENTITY_ID,MEASUREMENT_DATE))
OPTIONS (UPDATABLE 'FALSE',PLUNGER_LIFT_SETTINGS.IMPLEMENTED 'TRUE')
AS
 (
 SELECT 
	cast(PM.MEASUREMENT_DATE AS timestamp),
	cast(PM.EQUIP_TYPE AS  string) AS  PLUNGER_TYPE,
	cast(PE.EFFECTIVE_DATE AS timestamp) AS  INSTALL_DATE,
	MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Min Arrival' THEN PM."MEASUREMENT_VALUE" END) AS  MIN_ARRIVAL,
	MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Max Arrival' THEN PM."MEASUREMENT_VALUE" END) AS  MAX_ARRIVAL,
	MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Slow Arrival' THEN PM."MEASUREMENT_VALUE" END) AS  SLOW_ARRIVAL,
	MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Fast Arrival' THEN PM."MEASUREMENT_VALUE" END) AS  FAST_ARRIVAL,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Mileage' THEN PM."MEASUREMENT_VALUE" END) AS  MILEAGE,	
	cast(E.EQUIPMENT_NAME AS  string) AS  PLUNGER_NAME,
	cast(PM.ENTITY_ID AS  string) AS ENTITY_ID,
	CAST(PM.ENTITY_NAME AS string),
	MAX(cast(PM.SOURCE_NAME AS  string)) AS SOURCE,
	MAX(cast(PM.ROW_QUALITY AS  string)) AS ROW_QUALITY,
	MAX(cast(PM.ROW_CHANGED_BY AS  string)),
	MAX(cast(PM.ROW_CHANGED_DATE AS timestamp)),
	MAX(cast(PM.ROW_CREATED_DATE AS timestamp)),
	MAX(cast(PM.ROW_CREATED_BY AS  string)),
	MAX(cast(PM.ACTIVE_IND AS  string)),
	UUID() AS  PLUNGER_LIFT_ID
 FROM 
	PDMExtSrc.EQ_MEASUREMENT PM
	LEFT OUTER JOIN PPDMSrc.PDEN_EQUIPMENT PE ON PM.EQUIPMENT_ID = PE.EQUIPMENT_ID
	LEFT OUTER JOIN PPDMSrc.EQUIPMENT AS  E ON PM.EQUIPMENT_ID = E.EQUIPMENT_ID
	INNER JOIN PPDMSrc.PDEN_WELL PW ON cast(PM.ENTITY_ID AS string) = cast(PW.WELL_ID AS string)
	INNER JOIN PPDMSrc.PDEN PD ON PW.PDEN_ID = PD.PDEN_ID
	INNER JOIN PPDMSrc.R_PRODUCTION_METHOD RPM ON RPM.R_PRODUCTION_METHOD_ID = PD.PRODUCTION_METHOD		
	WHERE
	cast(RPM.PRODUCTION_METHOD AS  string)='Plunger Lift'
	GROUP BY  cast(PM.ENTITY_ID AS  string), cast(E.EQUIPMENT_NAME AS  string),cast(PE.EFFECTIVE_DATE AS timestamp),cast(PM.EQUIP_TYPE AS  string),cast(PM.MEASUREMENT_DATE AS timestamp),cast(PM.ENTITY_NAME AS string)
);

  CREATE VIEW ROD_PUMP
(
MEASUREMENT_DATE	timestamp NOT NULL,
RUNTIME	bigdecimal	(15,4),
RUNTIME_UOM	string	(20),
SURFACE_CARD_TYPE	string	(100),
SPM	bigdecimal	(15,4),
SPM_UOM	string	(20),
STROKE_LENGTH	bigdecimal	(15,4),
STROKE_LENGTH_UOM	string	(20),
PUMP_DIAMETER	bigdecimal	(15,4),
PUMP_DIA_UOM	string	(20),
PUMP_DEPTH	bigdecimal	(15,4),
PUMP_DEPTH_UOM	string	(20),
PUMP_UNIT	string	(100),
SURFACE_CAPACITY	bigdecimal	(15,4),
SURF_CAPACITY_UOM	string	(20),
TEST_DATE	timestamp,
TEST_OIL	bigdecimal	(15,4),
TEST_OIL_UOM	string	(20),
TEST_GAS	bigdecimal	(15,4),
TEST_GAS_UOM	string	(20),
TEST_WATER	bigdecimal	(15,4),
TEST_WATER_UOM	string	(20),
TEST_GROSS	bigdecimal	(15,4),
TEST_GROSS_UOM	string	(20),
DH_STROKE	bigdecimal	(15,4),
DH_STROKE_UOM	string	(20),
FILLAGE	bigdecimal	(15,4),
FILLAGE_UOM	string	(20),
DH_CAPACITY	bigdecimal	(15,4),
DH_CAPACITY_UOM	string	(20),
DT_CAPACITY	bigdecimal	(15,4),
DT_CAPACITY_UOM	string	(20),
FLUID_LOAD	bigdecimal	(15,4),
FLUID_LOAD_UOM	string	(20),
BUOYONT_ROD_WEIGHT	bigdecimal	(15,4),
BUOYONT_ROD_WEIGHT_UOM	string	(20),
FRICTION_LOAD	bigdecimal	(15,4),
FRICTION_LOAD_UOM	string	(20),
PO_FLUID_LOAD	bigdecimal	(15,4),
PO_FLUID_LOAD_UOM	string	(20),
CALC_FLUID_LEVEL	bigdecimal	(15,4),
CALC_FLUID_LEVEL_UOM	string	(20),
INTAKE_PRESSURE	bigdecimal	(15,4),
INTAKE_PRESS_UOM	string	(20),
PUMP_CONDITION	string	(2000),
ENTITY_ID	string	(100)	NOT NULL,
ENTITY_NAME	string	(255),
SOURCE	string	(100),
ROW_QUALITY	string	(100),
ROW_CHANGED_BY	string	(100),
ROW_CHANGED_DATE	timestamp,
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string	(100),
ACTIVE_IND	string	(1),
ROD_PUMP_ID	string	(40)	NOT NULL,
CONSTRAINT PK_ROD_PUMP PRIMARY KEY (ENTITY_ID,MEASUREMENT_DATE))
OPTIONS (UPDATABLE 'FALSE',ROD_PUMP.IMPLEMENTED 'TRUE')
AS
(
SELECT
  cast(PM.MEASUREMENT_DATE AS timestamp),
    MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Runtime' THEN PM."MEASUREMENT_VALUE" END) AS  RUNTIME,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Runtime' THEN cast(PM.VALUE_UOM AS  string) END) AS  RUNTIME_UOM,
   cast(PM.EQUIP_SUB_TYPE AS string) AS  SURFACE_CARD_TYPE,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'SPM' THEN PM."MEASUREMENT_VALUE" END) AS  SPM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'SPM' THEN cast(PM.VALUE_UOM AS  string) END) AS  SPM_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Stroke Length' THEN PM."MEASUREMENT_VALUE" END) AS  STROKE_LENGTH,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Stroke Length' THEN cast(PM.VALUE_UOM AS  string) END) AS  STROKE_LENGTH_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Pump Diameter' THEN PM."MEASUREMENT_VALUE" END) AS  PUMP_DIAMETER,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Pump Diameter' THEN cast(PM.VALUE_UOM AS  string) END) AS  PUMP_DIA_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Pump Depth' THEN PM."MEASUREMENT_VALUE" END) AS  PUMP_DEPTH,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Pump Depth' THEN cast(PM.VALUE_UOM AS  string) END) AS  PUMP_DEPTH_UOM,
  cast(PM.EQUIP_TYPE AS string) AS  PUMP_UNIT,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Surface Capacity' THEN PM."MEASUREMENT_VALUE" END) AS  SURFACE_CAPACITY,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Surface Capacity' THEN cast(PM.VALUE_UOM AS  string) END) AS  SURF_CAPACITY_UOM,
  NULL AS TEST_DATE,
  NULL AS  TEST_OIL,
  NULL AS  TEST_OIL_UOM,
  NULL AS  TEST_GAS,
  NULL AS  TEST_GAS_UOM,  
  NULL AS  TEST_WATER,
  NULL AS  TEST_WATER_UOM,
  NULL AS  TEST_GROSS,
  NULL AS  TEST_GROSS_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'DH stroke' THEN PM."MEASUREMENT_VALUE" END) AS  DH_STROKE,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'DH stroke' THEN cast(PM.VALUE_UOM AS  string) END) AS  DH_STROKE_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Pump Filage' THEN PM."MEASUREMENT_VALUE" END) AS  FILLAGE,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Pump Filage' THEN cast(PM.VALUE_UOM AS  string) END) AS  FILLAGE_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'DH Fluid Totalizer Reading' THEN PM."MEASUREMENT_VALUE" END) AS  DH_CAPACITY,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'DH Fluid Totalizer Reading' THEN cast(PM.VALUE_UOM AS  string) END) AS  DH_CAPACITY_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'DT Fluid Totalizer Reading' THEN PM."MEASUREMENT_VALUE" END) AS  DT_CAPACITY,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'DT Fluid Totalizer Reading' THEN cast(PM.VALUE_UOM AS  string) END) AS  DT_CAPACITY_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Fluid Volume' THEN PM."MEASUREMENT_VALUE" END) AS  FLUID_LOAD,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Fluid Volume' THEN cast(PM.VALUE_UOM AS  string) END) AS  FLUID_LOAD_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'BUOYONT ROD WEIGHT' THEN PM."MEASUREMENT_VALUE" END) AS  BUOYONT_ROD_WEIGHT,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'BUOYONT ROD WEIGHT' THEN cast(PM.VALUE_UOM AS  string) END) AS  BUOYONT_ROD_WEIGHT_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Pump Friction Load' THEN PM."MEASUREMENT_VALUE" END) AS  FRICTION_LOAD,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Pump Friction Load' THEN cast(PM.VALUE_UOM AS  string) END) AS  FRICTION_LOAD_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'PO Total Fluid' THEN PM."MEASUREMENT_VALUE" END) AS  PO_FLUID_LOAD,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'PO Total Fluid' THEN cast(PM.VALUE_UOM AS  string) END) AS  PO_FLUID_LOAD_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Calculated Fluid Level' THEN PM."MEASUREMENT_VALUE" END) AS  CALC_FLUID_LEVEL,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Calculated Fluid Level' THEN cast(PM.VALUE_UOM AS  string) END) AS  CALC_FLUID_LEVEL_UOM,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Intake Pressure' THEN PM."MEASUREMENT_VALUE" END) AS  INTAKE_PRESSURE,
  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Intake Pressure' THEN cast(PM.VALUE_UOM AS  string) END) AS  INTAKE_PRESS_UOM,
  MAX(cast(ES.EQUIP_STATUS AS string)) AS  PUMP_CONDITION,
  cast(PM.ENTITY_ID AS  string),
  CAST(PM.ENTITY_NAME AS string),
   MAX(cast(PM.SOURCE_NAME AS  string)),
  MAX(cast(PM.ROW_QUALITY AS  string)),
  MAX(cast(PM.ROW_CHANGED_BY AS  string)),
  MAX(cast(PM.ROW_CHANGED_DATE AS timestamp)),
  MAX(cast(PM.ROW_CREATED_DATE AS timestamp)),
  MAX(cast(PM.ROW_CREATED_BY AS  string)),
  MAX(cast(PM.ACTIVE_IND AS  string)),
  UUID() AS  ROD_PUMP_ID
  FROM 
  PDMExtSrc.EQ_MEASUREMENT AS  PM
   INNER JOIN PPDMSrc.PDEN_WELL PW ON cast(PM.ENTITY_ID AS string) = cast(PW.WELL_ID AS string)
  INNER JOIN PPDMSrc.PDEN PD ON PW.PDEN_ID = PD.PDEN_ID
  INNER JOIN PPDMSrc.R_PRODUCTION_METHOD RPM ON PD.PRODUCTION_METHOD = RPM.R_PRODUCTION_METHOD_ID
    LEFT OUTER JOIN (SELECT ENTITY_ID,EQUIP_STATUS,EFFECTIVE_DATE FROM PDMExtSrc.EQUIPMENT_STATUS WHERE cast(EQUIP_STATUS_TYPE AS string) = 'Rod Pump') ES 
	ON cast(PM.ENTITY_ID AS string) = cast(ES.ENTITY_ID AS string)
	WHERE cast(RPM.PRODUCTION_METHOD AS  string) IN ('Rod Pump','Sucker Rod')
  GROUP BY cast(PM.ENTITY_ID AS  string),cast(PM.EQUIP_SUB_TYPE AS string),cast(PM.EQUIP_TYPE AS string), cast(PM.MEASUREMENT_DATE AS timestamp),cast (PM.ENTITY_NAME AS string)
);

 CREATE VIEW ROD_PUMP_SETTINGS
(
MEASUREMENT_DATE timestamp NOT NULL,
LOAD_SET_POINT	bigdecimal	(15,4),
LOAD_SET_POINT_UOM	string	(20),
POSITION_SET_POINT	bigdecimal	(15,4),
POSITION_SET_POINT_UOM	string	(20),
STROKE_BEFORE_OFF	bigdecimal	(15,4),
STROKE_BEFORE_OFF_UOM	string	(20),
PUMP_DESG_LIQUID	bigdecimal	(15,4),
PUMP_DESG_LIQUID_UOM	string	(20),
PEAK_LOAD	bigdecimal	(15,4),
PEAK_LOAD_UOM	string	(20),
MIN_LOAD	bigdecimal	(15,4),
MIN_LOAD_UOM	string	(20),
ENTITY_ID	string	(40	)	NOT NULL,
ENTITY_NAME	string	(255),
SOURCE	string	(100),
ROW_QUALITY	string	(100),
ROW_CREATED_BY	string	(100),
ROW_CREATED_DATE	timestamp,
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY	string	(100),
ACTIVE_IND	string	(1),
ROD_PUMP_ID	string	(40	)	NOT NULL,
CONSTRAINT PK_ROD_PUMP_SETTINGS PRIMARY KEY (ENTITY_ID,MEASUREMENT_DATE))
OPTIONS (UPDATABLE 'FALSE',ROD_PUMP_SETTINGS.IMPLEMENTED 'TRUE')
AS
 (SELECT
	cast(EQ.EFFECTIVE_DATE AS timestamp),
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Load Set Point' THEN EQ.OPR_DETAIL_VALUE END) AS  LOAD_SET_POINT,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Load Set Point' THEN cast(EQ.OPR_DETAIL_VALUE_UOM AS string) END) AS  LOAD_SET_POINT_UOM,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Position Set Point' THEN EQ.OPR_DETAIL_VALUE END) AS  POSITION_SET_POINT,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Position Set Point' THEN cast(EQ.OPR_DETAIL_VALUE_UOM AS string) END) AS  POSITION_SET_POINT_UOM,	
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Stroke Off' THEN EQ.OPR_DETAIL_VALUE END) AS  STROKE_BEFORE_OFF,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Stroke Off' THEN cast(EQ.OPR_DETAIL_VALUE_UOM AS string) END) AS  STROKE_BEFORE_OFF_UOM,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Pump Liquid' THEN EQ.OPR_DETAIL_VALUE END) AS  PUMP_DESG_LIQUID,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Pump Liquid' THEN cast(EQ.OPR_DETAIL_VALUE_UOM AS string) END) AS  PUMP_DESG_LIQUID_UOM,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Peak Load' THEN EQ.OPR_DETAIL_VALUE END) AS  PEAK_LOAD,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Peak Load' THEN cast(EQ.OPR_DETAIL_VALUE_UOM AS string) END) AS  PEAK_LOAD_UOM,	
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Min Load' THEN EQ.OPR_DETAIL_VALUE END) AS  MIN_LOAD,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Min Load' THEN cast(EQ.OPR_DETAIL_VALUE_UOM AS string) END) AS  MIN_LOAD_UOM,
	cast(PW.WELL_ID AS  string) AS  ENTITY_ID,
	CAST(EQ.ENTITY_NAME AS string),
	MAX(cast(EQ.SOURCE_NAME AS  string)),
	MAX(cast(EQ.ROW_QUALITY AS string)),
	MAX(cast(EQ.ROW_CREATED_BY AS string)),
	MAX(cast(EQ.ROW_CREATED_DATE AS timestamp)),
	MAX(cast(EQ.ROW_CHANGED_DATE AS timestamp)),
	MAX(cast(EQ.ROW_CHANGED_BY AS  string)),
	MAX(cast(EQ.ACTIVE_IND AS  string)),
	UUID() AS  ROD_PUMP_ID
	FROM 
	PDMExtSrc.EQ_METER_OPERATION_DETAIL AS  EQ
	LEFT OUTER JOIN PDMExtSrc.R_OPR_DETAIL_TYPE ODT ON cast(EQ.OPR_DETAIL_TYPE_ID AS string) = cast(ODT.OPR_DETAIL_TYPE_ID AS string)
	INNER JOIN PPDMSrc.PDEN_WELL AS  PW ON cast(EQ.ENTITY_ID AS string) = cast(PW.WELL_ID AS string)
	INNER JOIN PPDMSrc.PDEN PD ON PW.PDEN_ID = PD.PDEN_ID
	INNER JOIN PPDMSrc.R_PRODUCTION_METHOD RPM ON RPM.R_PRODUCTION_METHOD_ID = PD.PRODUCTION_METHOD
	WHERE cast(RPM.PRODUCTION_METHOD AS string) IN ('Rod Pump','Sucker Rod')
	GROUP BY cast(PW.WELL_ID AS  string),cast(EQ.EFFECTIVE_DATE AS timestamp),CAST(EQ.ENTITY_NAME AS string)
);

 CREATE VIEW ROD_PUMP_DYNACARD_DETAILS
(
MEASUREMENT_DATE timestamp NOT NULL,
CYCLE_NUM integer NOT NULL,
SURF_LOAD	bigdecimal	(15,4),
SURF_LOAD_UOM	string	(20),
SURF_POSITION	bigdecimal	(15,4),
SURF_POSITION_UOM	string	(20),
DH_LOAD	bigdecimal	(15,4),
DH_LOAD_UOM	string	(20),
DH_POSITION	bigdecimal	(15,4),
DH_POSITION_UOM	string	(20),
ENTITY_ID	string	(40	)	NOT NULL,
ENTITY_NAME	string	(255),
SOURCE	string	(100),
ROW_QUALITY	string	(100),
ROW_CREATED_BY	string	(100),
ROW_CREATED_DATE	timestamp,
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY	string	(100),
ACTIVE_IND	string	(1),
DYNACARD_ID	string	(40	)	NOT NULL,
CONSTRAINT PK_ROD_PUMP_DYN_DETAILS PRIMARY KEY (ENTITY_ID,MEASUREMENT_DATE,CYCLE_NUM))
OPTIONS (UPDATABLE 'FALSE',ROD_PUMP_DYNACARD_DETAILS.IMPLEMENTED 'TRUE')
AS
 (SELECT
	cast(OE.OP_DATE AS timestamp),
	cast(OE.EQ_RUN_NUM AS integer),
	MAX(CASE WHEN cast(OE.OPERATING_ENVELOPE_TYPE AS string) = 'Surface' THEN OE.Y_VALUE END),
	MAX(CASE WHEN cast(OE.OPERATING_ENVELOPE_TYPE AS string) = 'Surface' THEN cast(OE.Y_VALUE_OUOM AS string) END),
	MAX(CASE WHEN cast(OE.OPERATING_ENVELOPE_TYPE AS string) = 'Surface' THEN OE.X_VALUE END),
	MAX(CASE WHEN cast(OE.OPERATING_ENVELOPE_TYPE AS string) = 'Surface' THEN cast(OE.X_VALUE_OUOM AS string) END),
	MAX(CASE WHEN cast(OE.OPERATING_ENVELOPE_TYPE AS string) = 'Downhole' THEN OE.Y_VALUE END),
	MAX(CASE WHEN cast(OE.OPERATING_ENVELOPE_TYPE AS string) = 'Downhole' THEN cast(OE.Y_VALUE_OUOM AS string) END),
	MAX(CASE WHEN cast(OE.OPERATING_ENVELOPE_TYPE AS string) = 'Downhole' THEN OE.X_VALUE END),
	MAX(CASE WHEN cast(OE.OPERATING_ENVELOPE_TYPE AS string) = 'Downhole' THEN cast(OE.X_VALUE_OUOM AS string) END),	
	cast(OE.ENTITY_ID AS  string) AS  ENTITY_ID,
	cast(W.WELL_NAME AS string) AS ENTITY_NAME,
	MAX(cast(OE.SOURCE_NAME AS  string)),
	MAX(cast(OE.ROW_QUALITY AS string)),
	MAX(cast(OE.ROW_CREATED_BY AS string)),
	MAX(cast(OE.ROW_CREATED_DATE AS timestamp)),
	MAX(cast(OE.ROW_CHANGED_DATE AS timestamp)),
	MAX(cast(OE.ROW_CHANGED_BY AS  string)),
	MAX(cast(OE.ACTIVE_IND AS  string)),
	UUID()
	FROM 
	PDMExtSrc.OPERATING_ENVELOPE AS  OE
	INNER JOIN PPDMSrc.PDEN_WELL AS  PW ON cast(OE.ENTITY_ID AS string) = cast(PW.WELL_ID AS string)
	INNER JOIN PPDMSrc.PDEN PD ON PW.PDEN_ID = PD.PDEN_ID
	INNER JOIN PPDMSrc.WELL W ON PW.WELL_ID = W.WELL_ID
	LEFT OUTER JOIN PPDMSrc.R_PRODUCTION_METHOD RPM ON RPM.R_PRODUCTION_METHOD_ID = PD.PRODUCTION_METHOD
	WHERE cast(RPM.PRODUCTION_METHOD AS string) IN ('Rod Pump','Sucker Rod')
	GROUP BY cast(OE.ENTITY_ID AS  string),cast(W.WELL_NAME AS string),cast(OE.OP_DATE AS timestamp), cast(OE.EQ_RUN_NUM AS integer)
);

CREATE VIEW ESP_DETAILS
(
MEASUREMENT_DATE  timestamp NOT NULL,
DRIVE_START_TIME  timestamp,
DRIVE_STATUS  string(200),
DRIVE_STOP_TIME timestamp,
ROD_SPEED bigdecimal (15,4),
DRIVE_CURRENT bigdecimal (15,4),
DRIVE_REMARK string (2000),
ENTITY_ID string (40) NOT NULL,
ENTITY_NAME  string (255),
SOURCE string (100),
ROW_QUALITY string  (100),
ROW_CHANGED_BY string (100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_DATE   timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND string (1),
ESP_ID  string (40) NOT NULL,
CONSTRAINT PK_ESP_DETAILS PRIMARY KEY (ENTITY_ID,MEASUREMENT_DATE))
OPTIONS (UPDATABLE 'FALSE',ESP_DETAILS.IMPLEMENTED 'TRUE')
AS
(
select
cast(EQ.EFFECTIVE_DATE AS timestamp),
MAX(cast(EQ.EFFECTIVE_DATE AS timestamp)),
MAX(cast(ES.EQUIP_STATUS AS string)) AS  DRIVE_STATUS,
MAX(cast(EQ.EXPIRY_DATE AS timestamp)),
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Rod Speed' THEN PM."MEASUREMENT_VALUE" END) AS  ROD_SPEED,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Drive Current' THEN PM."MEASUREMENT_VALUE" END) AS  DRIVE_CURRENT,
MAX(cast(EQ.REMARKS AS string)),
cast(PW.WELL_ID AS  string) AS  ENTITY_ID,
CAST(EQ.ENTITY_NAME AS string),
MAX(cast(EQ.SOURCE_NAME AS  string)) AS  SOURCE,
MAX(cast(EQ.ROW_QUALITY AS  string)) AS  ROW_QUALITY,
MAX(cast(EQ.ROW_CHANGED_BY AS  string)),
MAX(cast(EQ.ROW_CHANGED_DATE AS timestamp)),
MAX(cast(EQ.ROW_CREATED_DATE AS timestamp)),
MAX(cast(EQ.ROW_CREATED_BY AS  string)),
MAX(cast(EQ.ACTIVE_IND AS  string)),
UUID() AS  ESP_ID
  FROM
  PDMExtSrc.EQ_METER_OPERATION_DETAIL EQ
  INNER JOIN PDMExtSrc.EQ_MEASUREMENT PM ON cast(EQ.EQ_METER_OPERATION_DETAIL_ID AS string) = cast(PM.EQ_OPERATION_DETAIL_ID AS string)
  LEFT OUTER JOIN PPDMSrc.PDEN_WELL PW ON cast(EQ.ENTITY_ID AS string) = cast(PW.WELL_ID AS string) 
  LEFT OUTER JOIN PPDMSrc.PDEN PD ON cast(PW.PDEN_ID AS string) = cast(PD.PDEN_ID AS string)
  LEFT OUTER JOIN PPDMSrc.R_PRODUCTION_METHOD RPM ON RPM.R_PRODUCTION_METHOD_ID = PD.PRODUCTION_METHOD
  LEFT OUTER JOIN (SELECT ES.ENTITY_ID, ES.EQUIPMENT_ID, ES.EFFECTIVE_DATE, ES.EQ_RUN_NUM, ES.EQUIP_STATUS
	FROM PDMExtSrc.EQUIPMENT_STATUS ES WHERE cast(ES.EQUIP_STATUS_TYPE AS string) IN ('ESP Drive')) ES ON (cast(EQ.EQUIPMENT_ID AS string) = cast(ES.EQUIPMENT_ID AS string) 
	AND EQ.EFFECTIVE_DATE = ES.EFFECTIVE_DATE)
WHERE
 cast(RPM.PRODUCTION_METHOD AS  string) IN ('ESP','Submersible')
 GROUP BY cast(PW.WELL_ID AS  string),cast(EQ.EFFECTIVE_DATE AS timestamp),CAST(EQ.ENTITY_NAME AS string)
);

CREATE VIEW ESP_OPERATIONS
(
OPERATION_DATE  timestamp NOT NULL,
OPERATION_TYPE  string(100),
OPERATION_BY  string(100),
REMARK string (2000),
ENTITY_ID string (40) NOT NULL,
ENTITY_NAME  string (255),
SOURCE string (100),
ROW_QUALITY string  (100),
ROW_CHANGED_BY string (100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_DATE   timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND string (1),
OPERATION_ID  string (40) NOT NULL,
CONSTRAINT PK_ESP_OP PRIMARY KEY (ENTITY_ID,OPERATION_DATE))
OPTIONS (UPDATABLE 'FALSE',ESP_OP.IMPLEMENTED 'TRUE')
AS
(
select
cast(EQ.EFFECTIVE_DATE AS timestamp),
cast(OT.OPR_TYPE AS string),
MAX(cast(EQ.ROW_CREATED_BY AS  string)),
MAX(cast(EQ.REMARKS AS string)),
cast(PW.WELL_ID AS  string) AS  ENTITY_ID,
CAST(EQ.ENTITY_NAME AS string),
MAX(cast(EQ.SOURCE_NAME AS  string)) AS  SOURCE,
MAX(cast(EQ.ROW_QUALITY AS  string)) AS  ROW_QUALITY,
MAX(cast(EQ.ROW_CHANGED_BY AS  string)),
MAX(cast(EQ.ROW_CHANGED_DATE AS timestamp)),
MAX(cast(EQ.ROW_CREATED_DATE AS timestamp)),
MAX(cast(EQ.ROW_CREATED_BY AS  string)),
MAX(cast(EQ.ACTIVE_IND AS  string)),
UUID() AS  ESP_ID
  FROM
  PDMExtSrc.EQ_METER_OPERATION_DETAIL EQ
  LEFT OUTER JOIN PDMExtSrc.R_OPR_DETAIL_TYPE ODT ON cast(EQ.OPR_DETAIL_TYPE_ID AS string) = cast(ODT.OPR_DETAIL_TYPE_ID AS string)
  LEFT OUTER JOIN PDMExtSrc.R_OPR_TYPE OT ON cast(ODT.OPR_TYPE_ID AS string) = cast(OT.OPR_TYPE_ID AS string)
  LEFT OUTER JOIN PPDMSrc.PDEN_WELL PW ON cast(EQ.ENTITY_ID AS string) = cast(PW.WELL_ID AS string) 
  LEFT OUTER JOIN PPDMSrc.PDEN PD ON cast(PW.PDEN_ID AS string) = cast(PD.PDEN_ID AS string)
  LEFT OUTER JOIN PPDMSrc.R_PRODUCTION_METHOD RPM ON RPM.R_PRODUCTION_METHOD_ID = PD.PRODUCTION_METHOD
WHERE
 cast(RPM.PRODUCTION_METHOD AS  string) IN ('ESP','Submersible')
 GROUP BY cast(PW.WELL_ID AS  string),cast(EQ.EFFECTIVE_DATE AS timestamp),cast(OT.OPR_TYPE AS string),CAST(EQ.ENTITY_NAME AS string)
);

CREATE VIEW ESP_OPERATIONS_DETAILS
(
OPERATION_DATE  timestamp NOT NULL,
INTAKE_PRESSURE bigdecimal(15,4),
INTAKE_PRESS_UOM string(20),
DISCHARGE_PRESSURE bigdecimal(15,4),
DISCHARGE_PRESS_UOM string(20),
AVG_RATE_PRESSURE bigdecimal(15,4),
AVG_RATE_PRESS_UOM string(20),
PUMP_HEAD_GENERATED bigdecimal(15,4),
PUMP_HEAD_GEN_UOM string(20),
PUMP_POWER_REQ bigdecimal(15,4),
POWER_UOM string(20),
PUMP_EFFICIENCY bigdecimal(15,4),
PUMP_EFF_UOM string(20),
FREE_GAS_FRICTION bigdecimal(15,4),
FREE_GAS_UOM string(20),
MOTOR_AMPS bigdecimal(15,4),
MOTOR_AMPS_UOM string(20),
MOTOR_GENERATED bigdecimal(15,4),
MOTOR_GEN_UOM string(20),
MOTOR_EFFICIENCY bigdecimal(15,4),
MOTOR_EFF_UOM string(20),
MOTOR_SPEED bigdecimal(15,4),
MOTOR_SPEED_UOM string(20),
SURF_VOLTAGE bigdecimal(15,4),
SURF_VOLTAGE_UOM string(20),
TORQUE_SHAFT bigdecimal(15,4),
TORQUE_SHAFT_UOM string(20),
RUNTIME	bigdecimal (15,4),
RUNTIME_UOM	string (20),
ENTITY_ID string (40) NOT NULL,
ENTITY_NAME  string (255),
SOURCE string (100),
ROW_QUALITY string  (100),
ROW_CHANGED_BY string (100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_DATE   timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND string (1),
OPERATION_ID string(40),
OPERATION_DETAILS_ID  string (40) NOT NULL,
CONSTRAINT PK_ESP_OP_DETAILS PRIMARY KEY (ENTITY_ID,OPERATION_DATE))
OPTIONS (UPDATABLE 'FALSE',ESP_OP_DETAILS.IMPLEMENTED 'TRUE')
AS
(
select
cast(PM.MEASUREMENT_DATE AS timestamp),
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Intake Pressure' THEN PM."MEASUREMENT_VALUE" END) AS  INTAKE_PRESSURE,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Intake Pressure' THEN cast(PM.VALUE_UOM AS string) END) AS  INTAKE_PRESSURE_UOM,
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Discharge Pressure' THEN PM."MEASUREMENT_VALUE" END) AS  DISCHARGE_PRESSURE,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Discharge Pressure' THEN cast(PM.VALUE_UOM AS string) END) AS  DISCHARGE_PRESSURE_UOM,
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Rate Pressure' THEN PM."MEASUREMENT_VALUE" END) AS  RATE_PRESSURE,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Rate Pressure' THEN cast(PM.VALUE_UOM AS string) END) AS  RATE_PRESSURE_UOM,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Pump Head Generated' THEN PM."MEASUREMENT_VALUE" END) AS  PUMP_GEN,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Pump Head Generated' THEN cast(PM.VALUE_UOM AS string) END) AS  PUMP_GEN_UOM,
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Power' THEN PM."MEASUREMENT_VALUE" END) AS  POWER,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Power' THEN cast(PM.VALUE_UOM AS string) END) AS  POWER_UOM,
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Pump Efficiency' THEN PM."MEASUREMENT_VALUE" END) AS  PUMP_EFF,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Pump Efficiency' THEN cast(PM.VALUE_UOM AS string) END) AS  PUMP_EFF_UOM,
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Free Gas Friction' THEN PM."MEASUREMENT_VALUE" END) AS  GAS_FRICTION,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Free Gas Friction' THEN cast(PM.VALUE_UOM AS string) END) AS  FRICTION_UOM,
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Motor Amps' THEN PM."MEASUREMENT_VALUE" END) AS  MOTOR_AMPS,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Motor Amps' THEN cast(PM.VALUE_UOM AS string) END) AS  MOTOR_AMPS_UOM,
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Motor Generated' THEN PM."MEASUREMENT_VALUE" END) AS  MOTOR_GEN,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Motor Generated' THEN cast(PM.VALUE_UOM AS string) END) AS  MOTOR_GEN_UOM,
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Motor Efficiency' THEN PM."MEASUREMENT_VALUE" END) AS  MOTOR_EFFICIENCY,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Motor Efficiency' THEN cast(PM.VALUE_UOM AS string) END) AS  MOTOR_EFF_UOM,
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Motor Speed' THEN PM."MEASUREMENT_VALUE" END) AS  MOTOR_SPEED,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Motor Speed' THEN cast(PM.VALUE_UOM AS string) END) AS  MOTOR_SPEED_UOM,
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Surface Voltage' THEN PM."MEASUREMENT_VALUE" END) AS  SURF_VOLT,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Surface Voltage' THEN cast(PM.VALUE_UOM AS string) END) AS  SURF_VOLT_UOM,
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Torque Shaft' THEN PM."MEASUREMENT_VALUE" END) AS  TORQ_SHAFT,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Torque Shaft' THEN cast(PM.VALUE_UOM AS string) END) AS  TORQ_SHAFT_UOM,
AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Runtime' THEN PM."MEASUREMENT_VALUE" END) AS  RUNTIME,
MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) ='Runtime' THEN cast(PM.VALUE_UOM AS string) END) AS  RUNTIME_UOM,
cast(PW.WELL_ID AS  string) AS  ENTITY_ID,
CAST(EQ.ENTITY_NAME AS string),
MAX(cast(EQ.SOURCE_NAME AS  string)) AS  SOURCE,
MAX(cast(EQ.ROW_QUALITY AS  string)) AS  ROW_QUALITY,
MAX(cast(EQ.ROW_CHANGED_BY AS  string)),
MAX(cast(EQ.ROW_CHANGED_DATE AS timestamp)),
MAX(cast(EQ.ROW_CREATED_DATE AS timestamp)),
MAX(cast(EQ.ROW_CREATED_BY AS  string)),
MAX(cast(EQ.ACTIVE_IND AS  string)),
MAX(cast(EQ.EQ_METER_OPERATION_DETAIL_ID AS  string)) AS  OPERATION_ID,
UUID() AS  OPERATION_DETAIL_ID
  FROM
  PDMExtSrc.EQ_METER_OPERATION_DETAIL EQ
  INNER JOIN PDMExtSrc.EQ_MEASUREMENT PM ON cast(EQ.EQ_METER_OPERATION_DETAIL_ID AS string) = cast(PM.EQ_OPERATION_DETAIL_ID AS string)
  LEFT OUTER JOIN PPDMSrc.PDEN_WELL PW ON cast(EQ.ENTITY_ID AS string) = cast(PW.WELL_ID AS string) 
  LEFT OUTER JOIN PPDMSrc.PDEN PD ON cast(PW.PDEN_ID AS string) = cast(PD.PDEN_ID AS string)
  LEFT OUTER JOIN PPDMSrc.R_PRODUCTION_METHOD RPM ON RPM.R_PRODUCTION_METHOD_ID = PD.PRODUCTION_METHOD
WHERE
 cast(RPM.PRODUCTION_METHOD AS  string) IN ('ESP','Submersible')
 GROUP BY cast(PW.WELL_ID AS  string),cast(PM.MEASUREMENT_DATE AS timestamp),CAST(EQ.ENTITY_NAME AS string)
);

 CREATE VIEW GAPL_SETTINGS
 (
	MEASUREMENT_DATE TIMESTAMP NOT NULL,
	INSTALL_DATE TIMESTAMP,
	PLUNGER_TYPE STRING(100),
	FAST_ARRIVAL INTEGER,
	SLOW_ARRIVAL INTEGER,
	MIN_ARRIVAL INTEGER,
	MAX_ARRIVAL INTEGER,
	MILEAGE BIGDECIMAL(15,4),
	ENTITY_ID STRING(40) NOT NULL,
	ENTITY_NAME STRING(255),
	SOURCE STRING(100),
	ROW_QUALITY STRING(100),
	ROW_CREATED_DATE TIMESTAMP,
	ROW_CREATED_BY STRING(100),
	ROW_CHANGED_DATE TIMESTAMP,
	ROW_CHANGED_BY STRING(100),
	ACTIVE_IND STRING(1),
	GAS_ASSISTED_LIFT_ID STRING(40)
	,CONSTRAINT PK_GAPL_SETTINGS PRIMARY KEY (ENTITY_ID, MEASUREMENT_DATE))
	OPTIONS (UPDATABLE 'FALSE',GAPL_SETTINGS.IMPLEMENTED 'TRUE')
	AS
	(
		SELECT 
		  cast(PM.MEASUREMENT_DATE AS timestamp),
		  MAX(cast(PM.EFFECTIVE_DATE AS timestamp)),
		  cast(PM.EQUIP_SUB_TYPE AS string),
		  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Fast Arrival' THEN cast(PM."MEASUREMENT_VALUE" AS integer) END) AS  FAST_ARRIVAL,
		  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Slow Arrival' THEN cast(PM."MEASUREMENT_VALUE" AS integer) END) AS  SLOW_ARRIVAL,
		  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Min Arrival' THEN cast(PM."MEASUREMENT_VALUE" AS integer) END) AS  MIN_ARRIVAL,
		  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Max Arrival' THEN cast(PM."MEASUREMENT_VALUE" AS integer) END) AS  MAX_ARRIVAL,
		  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Mileage' THEN PM."MEASUREMENT_VALUE" END) AS  MILEAGE,
		  cast(PM.ENTITY_ID AS string),
		  cast(W.WELL_NAME AS string) AS ENTITY_NAME,
		  MAX(cast(PM.SOURCE_NAME AS string)),
		  MAX(cast(PM.ROW_QUALITY AS string)),
		  MAX(cast(PM.ROW_CREATED_DATE AS timestamp)),
		  MAX(cast(PM.ROW_CREATED_BY AS string)),
		  MAX(cast(PM.ROW_CHANGED_DATE AS timestamp)),
		  MAX(cast(PM.ROW_CHANGED_BY AS string)),
		  MAX(cast(PM.ACTIVE_IND AS string)),
		  UUID()
		FROM PDMExtSrc.EQ_MEASUREMENT PM
	  LEFT OUTER JOIN PPDMSrc.WELL W ON cast(PM.ENTITY_ID AS string) = cast(W.WELL_ID AS string)
	  LEFT OUTER JOIN PPDMSrc.PDEN_WELL PW ON cast(W.WELL_ID AS string) = cast(PW.WELL_ID AS string)
	  LEFT OUTER JOIN PPDMSrc.PDEN PD ON cast(PW.PDEN_ID AS string) = cast(PD.PDEN_ID AS string)
	  LEFT OUTER JOIN PPDMSrc.R_PRODUCTION_METHOD RPM ON cast(PD.PRODUCTION_METHOD AS string) = cast(RPM.R_PRODUCTION_METHOD_ID AS string)
	  LEFT OUTER JOIN (SELECT ENTITY_ID,EQUIP_STATUS,EFFECTIVE_DATE FROM PDMExtSrc.EQUIPMENT_STATUS WHERE cast(EQUIP_STATUS_TYPE AS string) = 'Gas Assisted Lift') ES 
		ON cast(PM.ENTITY_ID AS string) = cast(ES.ENTITY_ID AS string)
	  WHERE
	  cast(RPM.PRODUCTION_METHOD AS  string) in ('Gas Assisted Lift','GasAssistedPLift')
	  GROUP BY cast(PM.ENTITY_ID AS  string),cast(W.WELL_NAME AS  string), cast(PM.EQUIP_SUB_TYPE AS string), cast(PM.MEASUREMENT_DATE AS timestamp)		
	);
	
 CREATE VIEW GAPL_DETAILS
 (
	MEASUREMENT_DATE TIMESTAMP NOT NULL,
	CYCLE_NUM INTEGER,
	CASING_PRESSURE BIGDECIMAL(15,4),
	CASING_PRESS_UOM STRING(20),
	TUBING_PRESSURE BIGDECIMAL(15,4),
	TUBING_PRESS_UOM STRING(20),
	O_CASING_PRESSURE BIGDECIMAL(15,4),
	O_CASING_PRESS_UOM STRING(20),
	O_TUBING_PRESSURE BIGDECIMAL(15,4),
	O_TUBING_PRESS_UOM STRING(20),	
	LINE_PRESSURE BIGDECIMAL(15,4),
	LINE_PRESS_UOM STRING(20),	
	O_LINE_PRESSURE BIGDECIMAL(15,4),
	O_LINE_PRESS_UOM STRING(20),	
	OIL BIGDECIMAL(15,4),
	OIL_UOM STRING(20),	
	GAS BIGDECIMAL(15,4),
	GAS_UOM STRING(20),
	WATER BIGDECIMAL(15,4),
	WATER_UOM STRING(20),		
	OPEN_DATE TIMESTAMP,
	CLOSE_DATE TIMESTAMP,
	ARRIVAL_DATE TIMESTAMP,
	ARRIVAL_STATUS STRING(100),
	INJECTING_STATUS STRING(100),
	HOLD_REASON STRING(2000),
	OPEN_REASON STRING(2000),
	CLOSE_REASON STRING(2000),
	ENTITY_ID STRING(40) NOT NULL,
	ENTITY_NAME STRING(255),
	SOURCE STRING(100),
	ROW_QUALITY STRING(100),
	ROW_CREATED_DATE TIMESTAMP,
	ROW_CREATED_BY STRING(100),
	ROW_CHANGED_DATE TIMESTAMP,
	ROW_CHANGED_BY STRING(100),
	ACTIVE_IND STRING(1),
	GAS_ASSISTED_LIFT_ID STRING(40)
	,CONSTRAINT PK_GAPL_SETTINGS PRIMARY KEY (ENTITY_ID, MEASUREMENT_DATE))
	OPTIONS (UPDATABLE 'FALSE',GAPL_DETAILS.IMPLEMENTED 'TRUE')
	AS
	(
		SELECT 
		  cast(PM.MEASUREMENT_DATE AS timestamp),
		  cast(PM.EQ_RUN_NUM AS integer),
		  NULL,NULL,NULL,NULL,
		  AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'O Casing Pressure' THEN PM."MEASUREMENT_VALUE" END) AS  O_CASING_PRESSURE,
		  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'O Casing Pressure' THEN cast(PM.VALUE_UOM AS string) END) AS  O_CASING_PRESS_UOM,
		  AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'O Tubing Pressure' THEN PM."MEASUREMENT_VALUE" END) AS  O_TUBING_PRESSURE,
		  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'O Tubing Pressure' THEN cast(PM.VALUE_UOM AS string) END) AS  O_TUBING_PRESS_UOM,
		  AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Line Pressure' THEN PM."MEASUREMENT_VALUE" END) AS  LINE_PRESSURE,
		  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'Line Pressure' THEN cast(PM.VALUE_UOM AS string) END) AS  LINE_PRESS_UOM,
		  AVG(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'O Line Pressure' THEN PM."MEASUREMENT_VALUE" END) AS  O_LINE_PRESSURE,
		  MAX(CASE WHEN cast(PM.R_MEASUREMENT_POINT AS  string) = 'O Line Pressure' THEN cast(PM.VALUE_UOM AS string) END) AS  O_LINE_PRESS_UOM,
			NULL, NULL, NULL, NULL, NULL, NULL,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Gas Assisted Lift' THEN cast(EQ.EFFECTIVE_DATE AS timestamp) END) AS  OPEN_DATE ,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Gas Assisted Lift' THEN cast(EQ.EXPIRY_DATE AS timestamp) END) AS  CLOSE_DATE ,
	cast(PM.MEASUREMENT_DATE AS timestamp) AS  ARRIVAL_DATE ,
	MAX(CASE WHEN cast(ESS.EQUIP_STATUS_TYPE AS string) = 'Arrival' THEN cast(ESS.EQUIP_STATUS AS string) END) AS ARRIVAL_STATUS,
	MAX(CASE WHEN cast(ESS.EQUIP_STATUS_TYPE AS string) = 'Injecting' THEN cast(ESS.EQUIP_STATUS AS string) END) AS INJECTING_STATUS,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Gas Assisted Lift' THEN cast(EQ.REMARKS AS string) END) AS  HOLD_REASON ,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Gas Assisted Lift' THEN cast(EQ.EFFECTIVE_DATE_REMARKS AS string) END) AS  OPEN_REASON,
	MAX(CASE WHEN cast(ODT.OPR_DETAIL_TYPE AS string) = 'Gas Assisted Lift' THEN cast(EQ.EXPIRY_DATE_REMARKS AS string) END) AS  CLOSE_REASON ,			
		  cast(PM.ENTITY_ID AS string),
		  cast(W.WELL_NAME AS string) AS ENTITY_NAME,
		  MAX(cast(PM.SOURCE_NAME AS string)),
		  MAX(cast(PM.ROW_QUALITY AS string)),
		  MAX(cast(PM.ROW_CREATED_DATE AS timestamp)),
		  MAX(cast(PM.ROW_CREATED_BY AS string)),
		  MAX(cast(PM.ROW_CHANGED_DATE AS timestamp)),
		  MAX(cast(PM.ROW_CHANGED_BY AS string)),
		  MAX(cast(PM.ACTIVE_IND AS string)),
		  UUID()
		FROM PDMExtSrc.EQ_MEASUREMENT PM
	LEFT OUTER JOIN PDMExtSrc.EQ_METER_OPERATION_DETAIL EQ ON cast(PM.EQ_OPERATION_DETAIL_ID AS string) = cast(EQ.EQ_METER_OPERATION_DETAIL_ID AS string)
	LEFT OUTER JOIN PDMExtSrc.R_OPR_DETAIL_TYPE ODT ON cast(EQ.OPR_DETAIL_TYPE_ID AS string) = cast(ODT.OPR_DETAIL_TYPE_ID AS string)
		LEFT OUTER JOIN (SELECT cast(ENTITY_ID AS string) AS ENTITY_ID,cast(EQUIP_STATUS AS string) AS EQUIP_STATUS,cast(EQUIP_STATUS_TYPE AS string) AS EQUIP_STATUS_TYPE,
		ROW_NUMBER() OVER (PARTITION BY cast(ENTITY_ID AS string), cast(EQUIP_STATUS_TYPE AS string) ORDER BY ROW_CREATED_DATE DESC) ROW_NUM
			FROM PDMExtSrc.EQUIPMENT_STATUS WHERE cast(EQUIP_STATUS_TYPE AS string) IN ('Arrival','Injecting'))ESS ON cast(PM.ENTITY_ID AS string) = cast(ESS.ENTITY_ID AS string) AND ESS.ROW_NUM = 1
	  LEFT OUTER JOIN PPDMSrc.WELL W ON cast(PM.ENTITY_ID AS string) = cast(W.WELL_ID AS string)
	  LEFT OUTER JOIN PPDMSrc.PDEN_WELL PW ON cast(W.WELL_ID AS string) = cast(PW.WELL_ID AS string)
	  LEFT OUTER JOIN PPDMSrc.PDEN PD ON cast(PW.PDEN_ID AS string) = cast(PD.PDEN_ID AS string)
	  LEFT OUTER JOIN PPDMSrc.R_PRODUCTION_METHOD RPM ON cast(PD.PRODUCTION_METHOD AS string) = cast(RPM.R_PRODUCTION_METHOD_ID AS string)
	  LEFT OUTER JOIN (SELECT cast(ENTITY_ID AS string) AS ENTITY_ID,cast(EQUIP_STATUS AS string) AS EQUIP_STATUS,EFFECTIVE_DATE FROM PDMExtSrc.EQUIPMENT_STATUS WHERE cast(EQUIP_STATUS_TYPE AS string) = 'Gas Assisted Lift') ES 
		ON cast(PM.ENTITY_ID AS string) = cast(ES.ENTITY_ID AS string)
	  WHERE
	  cast(RPM.PRODUCTION_METHOD AS  string) in ('Gas Assisted Lift','GasAssistedPLift')
	  GROUP BY cast(PM.ENTITY_ID AS  string),cast(W.WELL_NAME AS  string), cast(PM.EQUIP_SUB_TYPE AS string), cast(PM.MEASUREMENT_DATE AS timestamp), cast(PM.EQ_RUN_NUM AS integer)	
	);
 
   CREATE VIEW ALARM_REMARK
 (
	REMARK_DATE TIMESTAMP NOT NULL,
	REMARK STRING(2000),
	EFFECTIVE_DATE TIMESTAMP,
	EXPIRY_DATE TIMESTAMP,
	ALARM_ID STRING(40),
	ALARM_NAME STRING(200),
	EVENT_ID STRING(40),
	ENTITY_ID STRING(40) NOT NULL,
	ENTITY_NAME STRING(255),
	ASSET_IND STRING(1),
	ASSET_TYPE STRING(100),
	ASSET_SUB_TYPE STRING(100),	
	SOURCE STRING(100),
	ROW_QUALITY STRING(100),
	ROW_CREATED_DATE TIMESTAMP,
	ROW_CREATED_BY STRING(100),
	ROW_CHANGED_DATE TIMESTAMP,
	ROW_CHANGED_BY STRING(100),
	ACTIVE_IND STRING(1),
	LEVEL1_ID   string (40),
	LEVEL1_NAME string (255),
	LEVEL1_TYPE string (100),
	LEVEL2_ID   string (40),
	LEVEL2_NAME string (255),
	LEVEL2_TYPE string (100),
	LEVEL3_ID   string (40),
	LEVEL3_NAME string (255),
	LEVEL3_TYPE string (100),
	LEVEL4_ID   string (40),
	LEVEL4_NAME string (255),
	LEVEL4_TYPE string (100),
	LEVEL5_ID   string (40),
	LEVEL5_NAME string (255),
	LEVEL5_TYPE string (100),
	LEVEL6_ID   string (40),
	LEVEL6_NAME string (255),
	LEVEL6_TYPE string (100),	
	ALARM_REMARK_ID STRING(40) NOT NULL
	,CONSTRAINT PK_ALARM_REM PRIMARY KEY (ALARM_REMARK_ID))
	OPTIONS (UPDATABLE 'FALSE',ALARM_REMARK.IMPLEMENTED 'TRUE')
	AS
	(
		SELECT cast(AR.REMARK_DATE AS timestamp), cast(AR.REMARKS AS string), cast(AR.EFFECTIVE_DATE AS timestamp), cast(AR.EXPIRY_DATE AS timestamp),
		cast(C.AlarmId AS string), cast(C.AlarmName AS string),
		cast(AR.EVENT_ID AS string),
		EN.ENTITY_ID AS WELL_OR_COMPLETION_ID,EN.ENTITY_NAME AS WELL_COMPLETION_NAME,
		EN.ASSET_IND,EN.ASSET_TYPE,EN.ASSET_SUB_TYPE,
		cast(AR.SOURCE_NAME AS string), cast(AR.ROW_QUALITY AS string),
		cast(AR.ROW_CREATED_DATE AS timestamp), cast(AR.ROW_CREATED_BY AS string), 
		cast(AR.ROW_CHANGED_DATE AS timestamp), cast(AR.ROW_CHANGED_BY AS string),
		cast(AR.ACTIVE_IND AS string),		
		NULL AS LEVEL1_ID,NULL AS LEVEL1_NAME,NULL AS LEVEL1_TYPE,NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE,NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE
,NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE,NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,NULL AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE,
		cast(AR.ALARM_REMARK_ID AS string)
		FROM PDMExtSrc.ALARM_REMARK AR
		INNER JOIN DSRTASrc.rtSolutionEvent E ON UPPER(cast(AR.EVENT_ID AS string)) = UPPER(cast(E.EVENTID AS string))
		LEFT OUTER JOIN DSRTASrc.confSolutionAlarm C ON UPPER(cast(E.ALARMID AS string)) = UPPER(cast(C.ALARMID AS string))
		LEFT OUTER JOIN (SELECT W.WELL_ID AS ENTITY_ID, W.WELL_NAME AS ENTITY_NAME, 'W' AS ASSET_IND, 'Well' AS ASSET_TYPE,
				'Well' AS ASSET_SUB_TYPE
				FROM PPDMSrc.WELL W WHERE W.ACTIVE_IND = 'Y'
				UNION ALL SELECT W.WELL_COMPLETION_ID AS ENTITY_ID, W.WELL_COMPLETION AS ENTITY_NAME, 'C' AS ASSET_IND, 
				'Completion' as ASSET_TYPE, 'Completion' as ASSET_SUB_TYPE FROM PPDMSrc.WELL_COMPLETION W WHERE W.ACTIVE_IND = 'Y'
				UNION ALL 
				SELECT F.FACILITY_ID AS ENTITY_ID, F.FACILITY_NAME AS ENTITY_NAME, 'F' AS ASSET_IND, 
				'Facility' as ASSET_TYPE, FT.FACILITY_TYPE AS ASSET_SUB_TYPE
				FROM PPDMSrc.FACILITY F 
				INNER JOIN PPDMSrc.R_FACILITY_TYPE FT ON F.FACILITY_TYPE_ID = FT.FACILITY_TYPE_ID
				WHERE F.ACTIVE_IND = 'Y') EN ON UPPER(E.SOURCEID) = UPPER(EN.ENTITY_ID)		
	);
	
CREATE VIEW WELL_REMARK
 (
REMARK_TYPE	string	(100),
SEQ_NUM	integer ,
ACTIVE_IND	string	(1),
EFFECTIVE_DATE	timestamp,
EXPIRY_DATE	timestamp,
REMARK	string	(2000),
REMARK_DATE	timestamp,
ENTITY_ID	string	(40)	NOT NULL,
WELL_NAME	string	(255),
SOURCE	string	(100),
ROW_QUALITY	string	(100),
ROW_CHANGED_BY	string	(100),
ROW_CHANGED_DATE	timestamp,
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string	(100),
ATTACHMENT_IND string(1),
REMARK_ID	string	(40)	NOT NULL,
 CONSTRAINT PK_WELL_REMARK PRIMARY KEY (REMARK_ID))
OPTIONS (UPDATABLE 'FALSE',WELL_REMARK.IMPLEMENTED 'TRUE')
AS
 (
SELECT 
	cast(FWC.REMARK_TYPE AS string),
	cast(FWC.SEQ_NUM as integer),
	cast(FWC.ACTIVE_IND AS string),
	cast(FWC.EFFECTIVE_DATE AS timestamp) AS EFFECTIVE_DATE,
	cast(FWC.EXPIRY_DATE AS timestamp) AS EXPIRY_DATE,
	cast(FWC.REMARKS AS string),
	cast(FWC.REMARK_DATE AS timestamp),
	cast(DWC.WELL_ID as string),
	cast(DWC.WELL_NAME as string),
	cast(FWC.SOURCE_NAME AS string) AS SOURCE,
	cast(FWC.ROW_QUALITY AS string) AS ROW_QUALITY,
	cast(FWC.ROW_CHANGED_BY AS string) AS ROW_CHANGED_BY,
	cast(FWC.ROW_CHANGED_DATE AS timestamp) AS ROW_CHANGED_DATE,
	cast(FWC.ROW_CREATED_DATE AS timestamp) AS ROW_CREATED_DATE,
	cast(FWC.ROW_CREATED_BY AS string) AS ROW_CREATED_BY,
	cast(FWC.ATTACHMENT_IND AS string) AS ATTACHMENT_IND,
	cast(FWC.WELL_REMARK_ID as string) AS REMARK_ID	
	FROM PDMExtSrc.WELL_REMARK AS FWC
	INNER JOIN PPDMSrc.WELL AS DWC ON DWC.WELL_ID = FWC.WELL_ID
UNION ALL 	
SELECT 
	cast(RR.R_REMARK_TYPE AS string),
	-1,
	cast(FWC.ACTIVE_IND AS string),
	cast(FWC.EFFECTIVE_DATE AS timestamp) AS EFFECTIVE_DATE,
	cast(FWC.EXPIRY_DATE AS timestamp) AS EXPIRY_DATE,
	cast(FWC.REMARK AS string),
	cast(FWC.REMARK_DATE AS timestamp),
	cast(DWC.WELL_ID as string),
	cast(DWC.WELL_NAME as string),
	cast(FWC.SOURCE AS string) AS SOURCE,
	cast(FWC.ROW_QUALITY AS string) AS ROW_QUALITY,
	cast(FWC.ROW_CHANGED_BY AS string) AS ROW_CHANGED_BY,
	cast(FWC.ROW_CHANGED_DATE AS timestamp) AS ROW_CHANGED_DATE,
	cast(FWC.ROW_CREATED_DATE AS timestamp) AS ROW_CREATED_DATE,
	cast(FWC.ROW_CREATED_BY AS string) AS ROW_CREATED_BY,
	NULL,
	cast(FWC.WELL_REMARK_ID as string) AS REMARK_ID
	FROM PPDMSrc.WELL_REMARK AS FWC
	LEFT OUTER JOIN PPDMSrc.R_REMARK_TYPE RR ON FWC.REMARK_TYPE = RR.R_REMARK_TYPE_ID
	INNER JOIN PPDMSrc.WELL AS DWC ON DWC.WELL_ID = FWC.WELL_ID
 );
 
 CREATE VIEW WELL_COMPLETION_REMARK
 (
 REMARK_ID	string	(40)	NOT NULL,
 ENTITY_ID	string	(40)	NOT NULL,
 WELL_NAME	string	(255),
 WELL_COMPLETION_ID string(40),
 SOURCE_ID string(40),
 SOURCE_NAME string(100),
 REMARK_TYPE_ID string(40),
 REMARK_TYPE	string	(100),
 ACTIVE_IND	string	(1),
 EFFECTIVE_DATE	timestamp,
EXPIRY_DATE	timestamp,
REMARK	string	(2000),
REMARK_DATE	timestamp,
REMARK_STRAT_UNIT_ID string(40),
STRAT_NAME_SET_ID string(40),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CREATED_DATE timestamp,
ROW_QUALITY_NAME string (100),
ROW_QUALITY_ID string(40),
WELL_COMPLETION string(255),
ATTACHMENT_IND string(1),
CONSTRAINT PK_WELL_COMP_REMARK PRIMARY KEY (REMARK_ID))
OPTIONS (UPDATABLE 'FALSE',WELL_COMPLETION_REMARK.IMPLEMENTED 'TRUE')
AS
 (
 SELECT
		cast(WR.WELL_REMARK_ID AS string) AS REMARK_ID, cast(W.WELL_ID AS string) AS ENTITY_ID, cast(W.WELL_NAME AS string) AS WELL_NAME, 
		null AS WELL_COMPLETION_ID, cast(WR.SOURCE_NAME AS string) AS SOURCE_ID, cast(WR.SOURCE_NAME AS string) AS SOURCE_NAME,
		cast(WR.REMARK_TYPE AS string) AS REMARK_TYPE_ID, cast(WR.REMARK_TYPE AS string) AS REMARK_TYPE, cast(WR.ACTIVE_IND AS string) AS ACTIVE_IND,
		cast(WR.EFFECTIVE_DATE AS timestamp) AS EFFECTIVE_DATE, cast(WR.EXPIRY_DATE AS timestamp) AS EXPIRY_DATE, cast(WR.REMARKS AS string) AS REMARK, 
		cast(WR.REMARK_DATE AS timestamp) AS REMARK_DATE, 
		cast(WR.REMARK_STRAT_UNIT_ID AS string) AS REMARK_STRAT_UNIT_ID, cast(WR.STRAT_NAME_SET_ID AS string) AS STRAT_NAME_SET_ID, 
		cast(WR.ROW_CHANGED_BY AS string) AS ROW_CHANGED_BY, cast(WR.ROW_CHANGED_DATE AS timestamp) AS ROW_CHANGED_DATE, 
		cast(WR.ROW_CREATED_BY AS string) AS ROW_CREATED_BY, cast(WR.ROW_CREATED_DATE AS timestamp) AS ROW_CREATED_DATE, 
		cast(WR.ROW_QUALITY AS string) AS ROW_QUALITY, WR.ROW_QUALITY, 
		null AS WELL_COMPLETION, cast(WR.ATTACHMENT_IND AS string) AS ATTACHMENT_IND
	FROM
		PDMExtSrc.WELL_REMARK AS WR 
		LEFT OUTER JOIN PPDMSrc.WELL AS W ON UPPER(cast(WR.WELL_ID AS string)) = UPPER(cast(W.WELL_ID AS string))
UNION ALL
SELECT
		cast(WCR.WELL_COMPLETION_REMARK_ID AS string) AS REMARK_ID, cast(W.WELL_ID AS string) AS ENTITY_ID,
		cast(W.WELL_NAME AS string) AS WELL_NAME, cast(WCR.WELL_COMPLETION_ID AS string) AS WELL_COMPLETION_ID, 
		null AS SOURCE_ID, cast(WCR.SOURCE_NAME AS string) AS SOURCE_NAME, 
		null AS REMARK_TYPE_ID, cast(WCR.REMARK_TYPE AS string) AS REMARK_TYPE, cast(WCR.ACTIVE_IND AS string) AS ACTIVE_IND, 
		cast(WCR.EFFECTIVE_DATE AS timestamp) AS EFFECTIVE_DATE, cast(WCR.EXPIRY_DATE AS timestamp) AS EXPIRY_DATE, 
		cast(WCR.REMARKS AS string) AS REMARK, cast(WCR.REMARK_DATE AS timestamp) AS REMARK_DATE,cast(WCR.REMARK_STRAT_UNIT_ID AS string) AS REMARK_STRAT_UNIT_ID, 
		cast(WCR.STRAT_NAME_SET_ID AS string) AS STRAT_NAME_SET_ID, 
		cast(WCR.ROW_CHANGED_BY AS string) AS ROW_CHANGED_BY, cast(WCR.ROW_CHANGED_DATE AS timestamp) AS ROW_CHANGED_DATE, 
		cast(WCR.ROW_CREATED_BY AS string) AS ROW_CREATED_BY, cast(WCR.ROW_CREATED_DATE AS timestamp) AS ROW_CREATED_DATE, 
		cast(WCR.ROW_QUALITY AS string) AS ROW_QUALITY, null AS ROW_QUALITY_ID, 
		cast(WC.WELL_COMPLETION AS string) AS WELL_COMPLETION,
		 cast(WCR.ATTACHMENT_IND AS string) AS ATTACHMENT_IND
	FROM
		PDMExtSrc.WELL_COMPLETION_REMARK AS WCR 
		INNER JOIN PPDMSrc.WELL_COMPLETION AS WC ON UPPER(cast(WCR.WELL_COMPLETION_ID AS string)) = UPPER(cast(WC.WELL_COMPLETION_ID AS string))
		INNER JOIN PPDMSrc.WELL AS WB ON UPPER(WC.WELL_ID) = UPPER(WB.WELL_ID) AND cast(WB.ACTIVE_IND AS string) = 'Y'
		INNER JOIN PPDMSrc.WELL_XREF AS WX ON UPPER(WB.WELL_ID) = UPPER(WX.WELL_ID) AND cast(WX.ACTIVE_IND AS string) = 'Y' 
		INNER JOIN PPDMSrc.WELL AS W ON UPPER(WX.WELL_ID2) = UPPER(W.WELL_ID) AND cast(W.ACTIVE_IND AS string) = 'Y' 
		INNER JOIN PPDMSrc.R_WELL_XREF_TYPE AS WXT ON UPPER(WX.R_WELL_XREF_TYPE_ID) = UPPER(WXT.R_WELL_XREF_TYPE_ID) 
		AND UPPER(cast(WXT.XREF_TYPE AS string)) = 'WELLBORETOWELL'
 );

CREATE VIEW WELL_COMPONENT_DETAILS
(
COMPONENT_NAME	string	(255)	NOT NULL,
 BASE_DEPTH	bigdecimal	(15,4),
 BASE_DEPTH_UOM	string	(20),
 HOLE_SIZE	bigdecimal	(15,4),
 HOLE_SIZE_UOM	string	(20),
 TOP_DEPTH	bigdecimal	(15,4),
 TOP_DEPTH_UOM	string	(20),
 SHOE_DEPTH	bigdecimal	(15,4),
 SHOE_DEPTH_UOM	string	(20),
 INSIDE_DIAMETER	bigdecimal	(15,4),
 INSIDE_DIA_UOM	string	(20),
 OUTSIDE_DIAMETER	bigdecimal	(15,4),
 OUTSIDE_DIA_UOM	string	(20),
 PUMP_DEPTH	bigdecimal	(15,4),
 PUMP_DEPTH_UOM	string	(20),
 TUBING_TYPE	string	(100),
CAT_EQUIP_ID	string	(40)	NOT NULL,
COLLAR_TYPE	string	(100),
COUPLING_TYPE	string	(100),
LINER_TYPE	string	(100),
MANUFACTURER_BA	string	(100),
HOLE_LENGTH	bigdecimal	(15,4),
HOLE_LENGTH_UOM	string	(20),
MIXED_STRING_IND	string	(1),
OBSERVATION_DATE	timestamp,
PACKER_SET_DEPTH	bigdecimal	(15,4),
PACKER_SET_DEPTH_UOM	string	(20),
JOINT_COUNT	bigdecimal	(15,4),
PULLED_LENGTH	bigdecimal	(15,4),
PULLED_LENGTH_UOM	string	(20),
TORQUE	bigdecimal	(15,4),
TORQUE_UOM	string	(20),
TUBING_DENSITY	bigdecimal	(15,4),
TUBING_DENSITY_UOM	string	(20),
TUBING_WEIGHT	bigdecimal	(15,4),
TUBING_WEIGHT_UOM	string	(20),
TUBING_GRADE	string	(100),
EFFECTIVE_DATE	timestamp,
EXPIRY_DATE	timestamp,
 ENTITY_ID	string	(40)	NOT NULL,
 ENTITY_NAME	string	(255),
SOURCE	string	(100),
ROW_QUALITY	string	(100),
ROW_CHANGED_BY	string	(100),
ROW_CHANGED_DATE	timestamp,
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string	(100),
ACTIVE_IND	string	(1),
COMPONENT_ID	string	(40)	NOT NULL,
CONSTRAINT PK_WELL_COMPONENT_DETAILS PRIMARY KEY (COMPONENT_ID))
OPTIONS (UPDATABLE 'FALSE',WELL_COMPONENT_DETAILS.IMPLEMENTED 'TRUE')
AS
 (
SELECT
	cast(WTB.WELL_TUBULAR AS  string) AS  COMPONENT_NAME,
	WTB.BASE_DEPTH AS  BASE_DEPTH,
	cast(WTB.BASE_DEPTH_OUOM AS  string) AS  BASE_DEPTH_UOM,
	WTB.HOLE_SIZE,
	cast(WTB.HOLE_SIZE_UOM AS  string) AS  HOLE_SIZE_UOM,
	WTB.TOP_DEPTH AS  TOP_DEPTH,
	cast(WTB.TOP_DEPTH_UOM AS  string) AS  TOP_DEPTH_UOM,
	WTB.SHOE_DEPTH,
	cast(WTB.SHOE_DEPTH_OUOM AS  string)AS SHOE_DEPTH_UOM,
	WTB.INSIDE_DIAMETER,
	cast(WTB.INSIDE_DIAMETER_OUOM AS  string) AS  INSIDE_DIA_UOM,
	WTB.OUTSIDE_DIAMETER,
	cast(WTB.OUTSIDE_DIAMETER_OUOM AS  string) AS  OUTSIDE_DIA_UOM,
	NULL AS  PUMP_DEPTH,
	NULL AS  PUMP_DEPTH_UOM,
	cast(TT.R_TUBING_TYPE AS  string),
	cast(WTB.CAT_EQUIP_ID AS  string),
	cast(WTB.COLLAR_TYPE AS  string),
	cast(WTB.COUPLING_TYPE AS  string),
	cast(WTB.LINER_TYPE AS  string),
	cast(WTB.MANUFACTURER_BA_ID AS  string) AS  MANUFACTURER_BA,
	WTB.HOLE_SIZE AS  HOLE_LENGTH,
	cast(WTB.HOLE_SIZE AS  string) AS  HOLE_LENGTH_UOM,
	cast(WTB.MIXED_STRING_IND AS  string),
	cast(WTB.OBSERVATION_DATE AS  timestamp),
	WTB.PACKER_SET_DEPTH,
	cast(WTB.PACKER_SET_DEPTH_OUOM AS  string)AS PACKER_SET_DEPTH_UOM,
	WTB.JOINT_COUNT,
	WTB.PULLED_LENGTH,
	cast(WTB.PULLED_LENGTH_OUOM AS  string) AS  PULLED_LENGTH_UOM,
	WTB.TORQUE,
	cast(WTB.TORQUE_OUOM AS  string)AS TORQUE_UOM,
	WTB.TUBING_DENSITY,
	cast(WTB.TUBING_DENSITY_OUOM AS  string) AS  TUBING_DENSITY_UOM,
	WTB.TUBING_WEIGHT,
	cast(WTB.TUBING_WEIGHT_OUOM AS  string) AS  TUBING_WEIGHT_UOM,
	cast(WTB.TUBING_GRADE AS  string),
	cast(WTB.EFFECTIVE_DATE AS  timestamp),
	cast(WTB.EXPIRY_DATE AS  timestamp),
	cast(WTB.WELL_ID AS  string)AS ENTITY_ID,
	NULL AS  ENITY_NAME,
	cast(WTB.SOURCE_NAME AS  string) AS  SOURCE,
	cast(WTB.ROW_QUALITY AS  string) AS  ROW_QUALITY,
	cast(WTB.ROW_CHANGED_BY AS  string),
	cast(WTB.ROW_CHANGED_DATE AS  timestamp),
	cast(WTB.ROW_CREATED_DATE AS  timestamp),
	cast(WTB.ROW_CREATED_BY AS  string),
	cast(WTB.ACTIVE_IND AS  string),
	cast(WTB.WELL_TUBULAR_ID AS  string) AS  COMPONENT_ID
	FROM PDMExtSrc.WELL_TUBULAR WTB
	LEFT OUTER JOIN PDMExtSrc.R_TUBING_TYPE TT ON cast(WTB.TUBING_TYPE AS string) = cast(TT.R_TUBING_TYPE_ID AS string)
 );
 
CREATE VIEW INCIDENT
(
 INCIDENT_DATE	timestamp NOT NULL,
 INCIDENT_TYPE	string	(100),
 INCIDENT_SUB_TYPE	string	(100),
 INCIDENT_DURATION	bigdecimal	(15,4),
 INC_DURATION_UOM	string	(20),
 REPORTED_BY_BA	string	(100),
 REPORTED_BY_NAME	string	(255),
 REPORTED_IND	string	(1),
 EFFECTIVE_DATE	timestamp ,
 EXPIRY_DATE	timestamp ,
 LOST_TIME_IND	string	(1),
 INCIDENT_CLASS	string	(100),
 RECORDED_TIME	timestamp,
 RECORDED_TIME_ZONE	string	(100),
 WORK_RELATED_IND	string	(1), 
 REMARK string(2000),
 ENTITY_ID	string	(40	)	NOT NULL,
 ENTITY_NAME	string	(255),
LEVEL6_ID STRING (40),
 SOURCE	string	(100),
 ROW_QUALITY	string	(100),
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string	(100),
 ACTIVE_IND	string	(1),
  CALC_DURATION_TYPE_ID string(40),
 CALC_DURATION_TYPE string(100),
 CARRY_FWD_DT_TYPE_ID string(40),
 CARRY_FWD_DT_TYPE string(100),
 START_DATE timestamp,
 END_DATE timestamp,
 CARRY_FWD_DT_IND string(10),
 CARRY_FWD_DURATION bigdecimal(10,4),
 EVENT_COST bigdecimal(15,4),
 INCIDENT_ID string(40)	NOT NULL,
  INCIDENT_DATE_STR string(20),
 START_DATE_STR string(20),
 END_DATE_STR string(20),
CONSTRAINT PK_INCIDENT PRIMARY KEY (INCIDENT_ID))
OPTIONS (UPDATABLE 'FALSE', INCIDENT.IMPLEMENTED 'TRUE')
AS
( 
SELECT
CAST(FI.INCIDENT_DATE AS TIMESTAMP) AS  INCIDENT_DATE,
CAST(RFT.R_FAILURE_TYPE AS   string) AS  INCIDENT_TYPE,
CAST(FIT.FAILURE_INCIDENT_TYPE AS   string) AS  INCIDENT_SUB_TYPE,
FI.INCIDENT_DURATION AS  INCIDENT_DURATION,
CAST(U.UOM AS   string) AS  INC_DURATION_UOM,
CAST(FIB.FAILURE_INCIDENT_BA AS   string) AS  REPORTED_BY_BA,
CAST(FI.REPORTED_BY_NAME AS   string) AS  REPORTED_BY_NAME,
CAST(FI.REPORTED_IND AS   string) AS  REPORTED_IND,
FI.EFFECTIVE_DATE AS  EFFECTIVE_DATE,
FI.EXPIRY_DATE AS  EXPIRY_DATE,
CAST(FI.LOST_TIME_IND AS   string) AS    LOST_TIME_IND,
CAST(FIC.FAILURE_INCIDENT_CLASS AS   string) AS  INCIDENT_CLASS,
FI.RECORDED_TIME AS   RECORDED_TIME,
CAST(FI.RECORDED_TIMEZONE AS   string) AS  RECORDED_TIME_ZONE,
CAST(FI.WORK_RELATED_IND AS   string) AS  WORK_RELATED_IND,
cast(FI.REMARK AS string) AS INCIDENT_REMARK,
cast(PW.ENTITY_ID AS string) AS ENTITY_ID,
cast(PW.ENTITY_NAME AS string)  AS  ENTITY_NAME,
PW.AREA_ID AS LEVEL6_ID,
CAST(RS.SOURCE_NAME AS string) AS  SOURCE,
cast(PRQ.ROW_QUALITY_NAME AS string) AS  ROW_QUALITY,
cast(FI.ROW_CHANGED_BY AS string),
FI.ROW_CHANGED_DATE,
FI.ROW_CREATED_DATE,
cast(FI.ROW_CREATED_BY AS string),
cast(FI.ACTIVE_IND AS string),
FICMP.CALC_DURATION_TYPE_ID,
CDT.CALC_DURATION_TYPE,
FICMP.CARRY_FORWARD_DOWNTIME_TYPE_ID,
CFD.CARRY_FORWARD_DOWNTIME_TYPE,
CAST(FICMP.START_DATE AS TIMESTAMP),
CAST(FICMP.END_DATE AS TIMESTAMP),
FICMP.CARRY_FORWARD_DOWNTIME,
FICMP.CARRY_FORWARD_DURATION,
DE.EVENT_COST,
cast(FI.FAILURE_INCIDENT_ID as string) AS INCIDENT_ID,
CAST(FI.INCIDENT_DATE AS string) AS INCIDENT_DATE_STR,
CAST(FICMP.START_DATE AS string) AS START_DATE_STR,
CAST(FICMP.END_DATE AS string) AS END_DATE_STR
FROM PPDMSrc.FAILURE_INCIDENT AS  FI
INNER JOIN PPDMSrc.FAILURE_INCIDENT_COMPONENT FICMP ON FI.FAILURE_INCIDENT_ID = FICMP.FAILURE_INCIDENT_ID
LEFT OUTER JOIN PPDMSrc.FAILURE_INCIDENT_BA AS  FIB ON FI.FAILURE_INCIDENT_ID = FIB.FAILURE_INCIDENT_ID
LEFT OUTER JOIN PPDMSrc.FAILURE_INCIDENT_CLASS AS  FIC ON FI.FAILURE_INCIDENT_CLASS_ID = FIC.FAILURE_INCIDENT_CLASS_ID
LEFT OUTER JOIN PPDMSrc.R_FAILURE_TYPE AS  RFT ON FI.FAILURE_TYPE_ID = RFT.R_FAILURE_TYPE_ID
LEFT OUTER JOIN PPDMSrc.FAILURE_INCIDENT_TYPE AS  FIT ON FI.FAILURE_INCIDENT_TYPE_ID = FIT.FAILURE_INCIDENT_TYPE_ID
LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE U ON FI.INCIDENT_DURATION_UOM = U.UOM_ID
LEFT OUTER JOIN PPDMSrc.R_SOURCE AS  RS ON FI.SOURCE = RS.SOURCE_ID
LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY AS  PRQ ON FI.ROW_QUALITY= PRQ.ROW_QUALITY_ID
INNER JOIN (SELECT PW.PDEN_ID,PW.WELL_ID AS ENTITY_ID, W.WELL_NAME AS ENTITY_NAME, WA.AREA_ID
				FROM PPDMSrc.PDEN_WELL AS  PW 
				INNER JOIN PPDMSrc.WELL W ON PW.WELL_ID = W.WELL_ID
				INNER JOIN PPDMSrc.WELL_AREA WA ON W.WELL_ID = WA.WELL_ID
				WHERE W.ACTIVE_IND = 'Y' AND PW.ACTIVE_IND = 'Y' AND WA.ACTIVE_IND = 'Y'
				UNION ALL 
				SELECT PF.PDEN_ID,PF.FACILITY_ID AS ENTITY_ID,F.FACILITY_NAME AS ENTITY_NAME, FA.AREA_ID
				FROM PPDMSrc.PDEN_FACILITY AS  PF
				INNER JOIN PPDMSrc.FACILITY F ON PF.FACILITY_ID = F.FACILITY_ID
				INNER JOIN PPDMSrc.FACILITY_AREA FA ON F.FACILITY_ID = FA.FACILITY_ID
				WHERE F.ACTIVE_IND = 'Y' AND PF.ACTIVE_IND = 'Y' AND FA.ACTIVE_IND = 'Y'
				)PW ON FICMP.PDEN_ID = PW.PDEN_ID
LEFT OUTER JOIN PPDMSrc.R_CALC_DURATION_TYPE CDT ON FICMP.CALC_DURATION_TYPE_ID = CDT.CALC_DURATION_TYPE_ID
LEFT OUTER JOIN PPDMSrc.R_CARRY_FORWARD_DOWNTIME_TYPE CFD 
ON FICMP.CARRY_FORWARD_DOWNTIME_TYPE_ID = CFD.CARRY_FORWARD_DOWNTIME_TYPE_ID
LEFT OUTER JOIN PDMExtSrc.EVENTS DE ON (FI.FAILURE_INCIDENT_ID = DE.SRC_INCIDENT_ID AND DE.ACTIVE_IND = 'Y')
WHERE FI.ACTIVE_IND = 'Y' AND FICMP.ACTIVE_IND = 'Y'	
UNION ALL 
SELECT CAST(PEF.JOB_START_DATE AS TIMESTAMP) AS INCIDENT_DATE,
'DOWN_TIME' AS INCIDENT_TYPE, PEF.FAILURE_TYPE AS INCIDENT_SUB_TYPE,
CASE WHEN TIMESTAMPDIFF(SQL_TSI_HOUR, PEF.JOB_START_DATE, PEF.JOB_END_DATE) > 24 THEN 24 ELSE 
cast(TIMESTAMPDIFF(SQL_TSI_HOUR, PEF.JOB_START_DATE, PEF.JOB_END_DATE) as bigdecimal) END  AS INCIDENT_DURATION , 
'h' AS INCIDENT_DURATION_UOM,
NULL,NULL, NULL, NULL, NULL, NULL, PEF.FAILURE_TYPE_CODE AS INCIDENT_CLASS,
NULL, NULL, NULL, cast(PEF.REASON as string),
cast(STM.SRC_ENTITY_ID as string),cast(STM.SRC_ENTITY_NAME as string), NULL,'EDM', NULL, NULL, NULL, NULL, NULL, 'Y', 
NULL, CASE WHEN TIMESTAMPDIFF(SQL_TSI_HOUR,PEF.JOB_START_DATE,PEF.JOB_END_DATE) > 24 THEN 'DATERANGE_DOWNTIME' ELSE 'HOURLY_DOWNTIME' END,
NULL, CASE WHEN PEF.JOB_END_DATE IS NOT NULL THEN 'End Dated' ELSE 'Open Ended' END,
CAST(PEF.JOB_START_DATE AS TIMESTAMP) AS START_DATE, CAST(PEF.JOB_END_DATE AS TIMESTAMP) AS END_DATE,
CASE WHEN TIMESTAMPDIFF(SQL_TSI_HOUR, PEF.JOB_START_DATE,PEF.JOB_END_DATE) > 24 THEN '1' ELSE '0' END,
CASE WHEN TIMESTAMPDIFF(SQL_TSI_HOUR, PEF.JOB_START_DATE,PEF.JOB_END_DATE) > 24 THEN 24 ELSE 
cast(TIMESTAMPDIFF(SQL_TSI_HOUR, PEF.JOB_START_DATE, PEF.JOB_END_DATE) AS bigdecimal) END,
 cast(PEF.TOTAL_COST as bigdecimal), PEF.equip_fail_id ,
 CAST(PEF.JOB_START_DATE AS STRING) AS INCIDENT_DATE_STR,
 CAST(PEF.JOB_START_DATE AS STRING) AS START_DATE_STR, 
 CAST(PEF.JOB_END_DATE AS STRING) AS END_DATE_STR
FROM  
EDMSrc.DM_EVENT DE
INNER JOIN EDMSrc.DM_PROD_EQUIP_FAIL PEF ON DE.EVENT_ID = PEF.EVENT_ID
INNER JOIN PDMExtSrc.SRC_TGT_MAP STM ON DE.WELL_ID = STM.TGT_ENTITY_ID		
WHERE STM.ACTIVE_IND = 'Y' AND PEF.JOB_START_DATE IS NOT NULL
 );
 
 CREATE VIEW ALARM_EVENT
(
ALARM_ID	string (40)	NOT NULL,
 ALARM_NAME	string (255),
 ALARM_DESC	string (2000),
 SEVERITY_ID	integer,
 SEVERITY_NAME	string (100),
 EVENT_ID	string (40),
 EVENT_TYPE	string (100),
 EVENT_STATUS	string (100),
 MAIN_MESSAGE	string (2000),
 SUMMARY_MESSAGE	string	(500),
 EVENT_SOURCE	string (100),
 ALARM_CREATE_DATE	timestamp	,
 ALARM_ACK_BY	string (100),
 EVALUATE_PROPERTY	string (100),
 ELAPSED_TIME	integer	,
 ADDITIONAL_DATA	string (2000),
 WORKFLOW_NAME string (200),
WORKFLOW_DESC string(1000),
 REMARK	string (2000),
 PRODUCTION_METHOD	string (100),
 ENTITY_ID	string (40)	NOT NULL,
 ENTITY_NAME	string (255),
 ASSET_IND string(1),
 ASSET_TYPE string(100),
 ASSET_SUB_TYPE string(100),
  SOURCE	string (100),
 ROW_QUALITY	string (100),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	,
 ROW_CREATED_DATE	timestamp	,
 ROW_CREATED_BY	string (100),
 ACTIVE_IND	string	(1),
 LEVEL1_ID	string (40),
 LEVEL1_NAME	string (255),
 LEVEL1_TYPE	string (100),
 LEVEL2_ID	string (40),
 LEVEL2_NAME	string (255),
 LEVEL2_TYPE	string (100),
 LEVEL3_ID	string (40),
 LEVEL3_NAME	string (255),
 LEVEL3_TYPE	string (100),
 LEVEL4_ID	string (40),
 LEVEL4_NAME	string (255),
 LEVEL4_TYPE	string (100),
 LEVEL5_ID	string (40),
 LEVEL5_NAME	string (255),
 LEVEL5_TYPE	string (100),
 LEVEL6_ID	string (40),
 LEVEL6_NAME	string (255),
 LEVEL6_TYPE 	string (100),
CONSTRAINT PK_ALARM_EVENT PRIMARY KEY (ALARM_ID))
OPTIONS (UPDATABLE 'FALSE',ALARM_EVENT.IMPLEMENTED 'TRUE')
AS
(
SELECT
 cast(R.AlarmId AS  string) AS ALARM_ID,
cast(C.AlarmName AS  string) AS  ALARM_NAME,
cast(C.AlarmDescription AS  string) AS  ALARM_DESC,
cast(C.SeverityId AS  integer) AS  SEVERITY_ID,
cast(S.SeverityName AS  string) AS SEVERITY_NAME,
cast(R.EventId AS  string) AS EVENT_ID,
cast(R.eventType AS  string) AS   EVENT_TYPE,
cast((CASE WHEN R.EventId = CLR.EventId THEN 'Closed' 
		WHEN R.EventId = ACK.EventId THEN 'Acknowledged' 
		ELSE 'Active' END) AS string) AS  EVENT_STATUS, 
cast(R.MainMessage AS  string) AS MAIN_MESSAGE,
cast(R.SummaryMessage AS  string) AS  SUMMARY_MESSAGE,
cast(R.EventSource AS  string) AS  EVENT_SOURCE,
R.CreateDateTime AS  ALARM_CREATE_DATE,
cast(ACK.AcknowledgedBy AS  string) AS  ALARM_ACK_BY,
cast(C.EvaluateProperty AS  string) AS  EVALUATE_PROPERTY,
CAST(TIMESTAMPDIFF(SQL_TSI_DAY, R.CreateDateTime, CURDATE()) AS INTEGER) AS  ELAPSED_TIME,
cast(R.AdditionalData AS  string) AS  ADDITIONAL_DATA,
cast(C.WORKFLOWNAME AS string) AS WORKFLOW_NAME,
cast(C.WORKFLOWDESCRIPTION AS string) AS WORKFLOW_DESC,
AR.REMARKS AS REMARK,
NULL AS PRODUCTION_METHOD,E.ENTITY_ID AS WELL_OR_COMPLETION_ID,E.ENTITY_NAME AS WELL_COMPLETION_NAME,
E.ASSET_IND,E.ASSET_TYPE,E.ASSET_SUB_TYPE,
cast(R.SourceID AS  string) AS SOURCE,
NULL AS ROW_QUALITY,
NULL AS ROW_CHANGED_BY,
NULL AS ROW_CHANGED_DATE,
NULL AS ROW_CREATED_DATE,
NULL AS ROW_CREATED_BY,
NULL AS ACTIVE_IND
,NULL AS LEVEL1_ID,NULL AS LEVEL1_NAME,NULL AS LEVEL1_TYPE,NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE,NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE
,NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE,NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,E.AREA_ID AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE
FROM DSRTASrc.rtSolutionEvent AS  R
LEFT OUTER JOIN DSRTASrc.confSolutionAlarm AS  C ON UPPER(C.ALARMID) = UPPER(R.ALARMID)
LEFT OUTER JOIN DSRTASrc.AlarmSeverity AS  S ON UPPER(C.SEVERITYID) = UPPER(S.SEVERITYID)
LEFT OUTER JOIN DSRTASrc.rtSolutionEventAck ACK ON UPPER(R.EVENTID) = UPPER(ACK.EVENTID)
LEFT OUTER JOIN DSRTASrc.rtSolutionEventClr CLR ON UPPER(R.EventId) = UPPER(CLR.EventId)
LEFT OUTER JOIN (SELECT W.WELL_ID AS ENTITY_ID, W.WELL_NAME AS ENTITY_NAME, 'W' AS ASSET_IND, 'Well' AS ASSET_TYPE,
				WLT.R_WELL_LEVEL_TYPE AS ASSET_SUB_TYPE, WA.AREA_ID
				FROM PPDMSrc.WELL W 
				INNER JOIN PPDMSrc.R_WELL_LEVEL_TYPE WLT ON W.WELL_LEVEL_TYPE = WLT.R_WELL_LEVEL_TYPE_ID
				INNER JOIN PPDMSrc.WELL_AREA WA ON W.WELL_ID = WA.WELL_ID
				WHERE W.ACTIVE_IND = 'Y' AND WA.ACTIVE_IND = 'Y'
				UNION ALL 
SELECT F.FACILITY_ID AS ENTITY_ID, F.FACILITY_NAME AS ENTITY_NAME, 'F' AS ASSET_IND, 
				'Facility' as ASSET_TYPE, FT.FACILITY_TYPE AS ASSET_SUB_TYPE, FA.AREA_ID
				FROM PPDMSrc.FACILITY F 
				INNER JOIN PPDMSrc.R_FACILITY_TYPE FT ON F.FACILITY_TYPE_ID = FT.FACILITY_TYPE_ID
				INNER JOIN PPDMSrc.FACILITY_AREA FA ON F.FACILITY_ID = FA.FACILITY_ID
				WHERE F.ACTIVE_IND = 'Y'	AND FA.ACTIVE_IND = 'Y'			
			) E ON UPPER(R.SOURCEID) = UPPER(E.ENTITY_ID)
LEFT OUTER JOIN (SELECT REMARKS,EVENT_ID, ROW_NUMBER() OVER (PARTITION BY AR.EVENT_ID ORDER BY AR.REMARK_DATE DESC,AR.ROW_CREATED_DATE DESC) ROW_NUM
				FROM PDMExtSrc.ALARM_REMARK AR)AR ON (R.EVENTID = AR.EVENT_ID AND AR.ROW_NUM = 1)			
);

CREATE VIEW TEST_WELL_STATUS
(
TEST_STATUS string(100) NOT NULL,
WELL_COUNT	integer,
 ENTITY_ID string(40),
 ENTITY_NAME string(255),
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40) NOT NULL,
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
 AREA_PATH string(2000),
 CONSTRAINT PK_TEST_STATUS PRIMARY KEY (TEST_STATUS,ENTITY_ID))
OPTIONS (UPDATABLE 'FALSE', TEST_WELL_STATUS.IMPLEMENTED 'TRUE')
AS
(
SELECT 
cast(CASE WHEN WTP.OBJECT_ID IS NOT NULL THEN
CASE WTP.VALID_IND WHEN 'Y' THEN 'Approved' WHEN  'N' THEN 'Rejected' ELSE 'Pending' END 
ELSE
CASE PWT.VALID_IND WHEN 'Y' THEN 'Approved' WHEN  'N' THEN 'Rejected' ELSE 'Pending' END END AS string) VALID_IND,
COUNT(PWT.PDEN_WELL_TEST_ID) STATUS_COUNT,
cast(W.WELL_ID AS string) WELL_ID,cast(W.WELL_NAME AS string) WELL_NAME
,NULL AS LEVEL1_ID,NULL AS LEVEL1_NAME,NULL AS LEVEL1_TYPE,NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE,NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE
,NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE,NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,WA.AREA_ID AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE,
NULL AS AREA_PATH
FROM
PPDMSrc.PDEN_WELL_TEST AS PWT 
  LEFT OUTER JOIN PDMExtSrc.WELL_TEST_PARAMETERS WTP ON PWT.PDEN_WELL_TEST_ID = WTP.OBJECT_ID
  INNER JOIN PPDMSrc.PDEN_WELL AS PW ON PWT.PDEN_ID = PW.PDEN_ID
  INNER JOIN PPDMSrc.WELL AS W ON PW.WELL_ID = W.WELL_ID
  INNER JOIN PPDMSrc.WELL_AREA AS WA ON W.WELL_ID = WA.WELL_ID 
  WHERE cast(PWT.ACTIVE_IND AS string) = 'Y'
  GROUP BY cast(W.WELL_ID AS string),cast(W.WELL_NAME AS string), 
  cast(CASE WHEN WTP.OBJECT_ID IS NOT NULL THEN
CASE WTP.VALID_IND WHEN 'Y' THEN 'Approved' WHEN  'N' THEN 'Rejected' ELSE 'Pending' END 
ELSE
CASE PWT.VALID_IND WHEN 'Y' THEN 'Approved' WHEN  'N' THEN 'Rejected' ELSE 'Pending' END END AS string),WA.AREA_ID
);

CREATE VIEW PETEX_RESULTS
(
WF_RESULT_VAL_ID string(40) NOT NULL,
ETV_VAL_CONFIG_ID string(40),
WF_RESULT_EQUIP_ID string(40) NOT NULL,
EQUIP_TYPE_VAR_ID string(40),
WELL_TEST_PARAM_ID string(40),
WF_RESULT_VAL_DATE timestamp,
WF_RESULT_VAL_NUMBER bigdecimal(10,4),
WF_RESULT_VAL_TEXT clob(1073741823),
WF_RESULT_VAL_XML clob(2147483647),
WF_RESULT_VAR_NAME string(500),
WELL_TEST_ID string(40),
CONSTRAINT PK_PTX_RESULTS PRIMARY KEY (WF_RESULT_VAL_ID))
OPTIONS (UPDATABLE 'FALSE', PETEX_RESULTS.IMPLEMENTED 'TRUE')
AS
(
	SELECT WF_RESULT_VAL_ID,ETV_VAL_CONFIG_ID,WF_RESULT_EQUIP_ID,EQUIP_TYPE_VAR_ID,
	WELL_TEST_PARAM_ID,WF_RESULT_VAL_DATE,WF_RESULT_VAL_NUMBER,cast(WF_RESULT_VAL_TEXT AS clob),
	cast(WF_RESULT_VAL_XML as clob),
	WF_RESULT_VAR_NAME,WELL_TEST_ID
	FROM
		PDMExtSrc.PETEX_RESULTS
);

CREATE VIEW CHOKE
(
CHOKE_ID string(40) NOT NULL,
PARAM_ID string(40),
WELL_TEST_ID string(40),
EQUIPMENT_ID string(40),
VALID_DATE timestamp,
LIQUID_RATE bigdecimal(15,4),
CHOKE_PRESSURE bigdecimal(15,4),
CHOKE_PRESSURE_OUOM string(20),
LIQUID_RATE_OUOM string(20),
CONSTRAINT PK_CHOKE PRIMARY KEY (CHOKE_ID))
OPTIONS (UPDATABLE 'FALSE', CHOKE.IMPLEMENTED 'TRUE')
AS
(
SELECT cast(UUID() AS string) AS CHOKE_ID, cast(f.WELL_TEST_PARAM_ID AS string), cast(f.WELL_TEST_ID AS string), 
	f.WF_RESULT_EQUIP_ID AS EQUIPMENT_ID, 
		A.VALID_DATE, A.LIQUID AS LIQUID_RATE, A.CHOKE AS CHOKE_PRESSURE, null AS CHOKE_PRESSURE_OUOM, 
		null AS LIQUID_RATE_OUOM
	FROM
		(SELECT * FROM PDMTx.PETEX_RESULTS WHERE (cast(PETEX_RESULTS.WF_RESULT_VAR_NAME AS string) = 'Choke') 
		AND (PETEX_RESULTS.WF_RESULT_VAL_XML IS NOT NULL)) AS f, 
		XMLTABLE('/PlotTable//Choke' PASSING XMLPARSE(DOCUMENT f.WF_RESULT_VAL_XML) COLUMNS VALID_DATE timestamp 
		PATH 'valid_date/text()', LIQUID bigdecimal PATH 'Choke_x0020_Liquid_x0020_Rate/text()', 
		CHOKE bigdecimal PATH 'Choke_x0020_Pressure/text()') AS A
);

CREATE VIEW CHP
(
CHP_ID string(40) NOT NULL,
PARAM_ID string(40),
WELL_TEST_ID string(40),
EQUIPMENT_ID string(40),
VALID_DATE timestamp,
LIQUID_RATE bigdecimal(15,4),
CHP_PRESSURE bigdecimal(15,4),
CHP_PRESSURE_OUOM string(20),
LIQUID_RATE_OUOM string(20),
CONSTRAINT PK_CHP PRIMARY KEY (CHP_ID))
OPTIONS (UPDATABLE 'FALSE', CHP.IMPLEMENTED 'TRUE')
AS
(
SELECT cast(UUID() AS string) AS CHP_ID, cast(f.WELL_TEST_PARAM_ID AS string), cast(f.WELL_TEST_ID AS string), 
		f.WF_RESULT_EQUIP_ID AS EQUIPMENT_ID, A.VALID_DATE, A.LIQUID AS LIQUID_RATE, 
		A.CHP AS CHP_PRESSURE, null AS CHP_PRESSURE_OUOM, null AS LIQUID_RATE_OUOM
	FROM
		(SELECT * FROM PDMTx.PETEX_RESULTS WHERE (cast(PETEX_RESULTS.WF_RESULT_VAR_NAME AS string) = 'CHP') 
		AND (PETEX_RESULTS.WF_RESULT_VAL_XML IS NOT NULL)) AS f, 
		XMLTABLE('/PlotTable//CHP' PASSING XMLPARSE(DOCUMENT f.WF_RESULT_VAL_XML) COLUMNS VALID_DATE timestamp 
		PATH 'valid_date/text()', LIQUID bigdecimal PATH 'CHP_x0020_Liquid_x0020_Rate/text()', 
		CHP bigdecimal PATH 'CHP_x0020_Pressure/text()') AS A
);

CREATE VIEW IPR
(
IPR_ID string(40) NOT NULL,
PARAM_ID string(40),
WELL_TEST_ID string(40),
EQUIPMENT_ID string(40),
VALID_DATE timestamp,
LIQUID_RATE bigdecimal(15,4),
IPR_PRESSURE bigdecimal(15,4),
IPR_PRESSURE_OUOM string(20),
LIQUID_RATE_OUOM string(20),
CONSTRAINT PK_IPR PRIMARY KEY (IPR_ID))
OPTIONS (UPDATABLE 'FALSE', IPR.IMPLEMENTED 'TRUE')
AS
(
SELECT cast(UUID() AS string) AS IPR_ID, cast(f.WELL_TEST_PARAM_ID AS string), cast(f.WELL_TEST_ID AS string),
	f.WF_RESULT_EQUIP_ID AS EQUIPMENT_ID, 
		A.VALID_DATE, A.LIQUID AS LIQUID_RATE, A.IPR AS IPR_PRESSURE, null AS IPR_PRESSURE_OUOM, 
		null AS LIQUID_RATE_OUOM
	FROM
		(SELECT * FROM PDMTx.PETEX_RESULTS WHERE (cast(PETEX_RESULTS.WF_RESULT_VAR_NAME AS string) = 'IPR') 
		AND (PETEX_RESULTS.WF_RESULT_VAL_XML IS NOT NULL)) AS f, 
		XMLTABLE('/PlotTable//IPR' PASSING XMLPARSE(DOCUMENT f.WF_RESULT_VAL_XML) COLUMNS VALID_DATE timestamp 
		PATH 'valid_date/text()', LIQUID bigdecimal PATH 'IPR_x0020_Liquid_x0020_Rate/text()', 
		IPR bigdecimal PATH 'IPR_x0020_Pressure/text()') AS A
);

CREATE VIEW VLP
(
VLP_ID string(40) NOT NULL,
PARAM_ID string(40),
WELL_TEST_ID string(40),
EQUIPMENT_ID string(40),
VALID_DATE timestamp,
LIQUID_RATE bigdecimal(15,4),
VLP_PRESSURE bigdecimal(15,4),
VLP_PRESSURE_OUOM string(20),
LIQUID_RATE_OUOM string(20),
CONSTRAINT PK_VLP PRIMARY KEY (VLP_ID))
OPTIONS (UPDATABLE 'FALSE', VLP.IMPLEMENTED 'TRUE')
AS
(
SELECT cast(UUID() AS string) AS VLP_ID, cast(f.WELL_TEST_PARAM_ID AS string), cast(f.WELL_TEST_ID AS string), 
		f.WF_RESULT_EQUIP_ID AS EQUIPMENT_ID, A.VALID_DATE, A.LIQUID AS LIQUID_RATE, 
		A.VLP AS VLP_PRESSURE, null AS VLP_PRESSURE_OUOM, null AS LIQUID_RATE_OUOM
	FROM
		(SELECT * FROM PDMTx.PETEX_RESULTS WHERE (cast(PETEX_RESULTS.WF_RESULT_VAR_NAME AS string) = 'VLP') 
		AND (PETEX_RESULTS.WF_RESULT_VAL_XML IS NOT NULL)) AS f, 
		XMLTABLE('/PlotTable//VLP' PASSING XMLPARSE(DOCUMENT f.WF_RESULT_VAL_XML) COLUMNS VALID_DATE timestamp 
		PATH 'valid_date/text()', LIQUID bigdecimal PATH 'VLP_x0020_Liquid_x0020_Rate/text()', 
		VLP bigdecimal PATH 'VLP_x0020_Pressure/text()') AS A
);

CREATE VIEW VLPIPR
(
VLPIPR_ID string(40) NOT NULL,
PARAM_ID string(40),
WELL_TEST_ID string(40),
EQUIPMENT_ID string(40),
VALID_DATE timestamp,
LIQUID_RATE bigdecimal(15,4),
IPR_PRESSURE bigdecimal(15,4),
VLP_PRESSURE bigdecimal(15,4),
IPR_PRESSURE_OUOM string(20),
VLP_PRESSURE_OUOM string(20),
LIQUID_RATE_OUOM string(20),
PDP_PRESSURE bigdecimal(15,4),
PDP_PRESSURE_OUOM string(20),
CONSTRAINT PK_VLPIPR PRIMARY KEY (VLPIPR_ID))
OPTIONS (UPDATABLE 'FALSE', VLPIPR.IMPLEMENTED 'TRUE')
AS
(
SELECT cast(UUID() AS string) AS VLPIPR_ID, cast(f.WELL_TEST_PARAM_ID AS string), cast(f.WELL_TEST_ID AS string), 
f.WF_RESULT_EQUIP_ID AS EQUIPMENT_ID, 
		A.Valid_Date AS VALID_DATE, A.LIQUID AS LIQUID_RATE, A.IPR AS IPR_PRESSURE, A.VLP AS VLP_PRESSURE, 
		null AS IPR_PRESSURE_OUOM, null AS VLP_PRESSURE_OUOM, null AS LIQUID_RATE_OUOM, A.PDP AS PDP_PRESSURE, 
		null AS PDP_PRESSURE_OUOM
	FROM
		(SELECT * FROM PDMTx.PETEX_RESULTS WHERE (cast(PETEX_RESULTS.WF_RESULT_VAR_NAME AS string) = 'VLPIPR') 
		AND (PETEX_RESULTS.WF_RESULT_VAL_XML IS NOT NULL)) AS f, 
		XMLTABLE('/PlotTable//VLPIPR' PASSING XMLPARSE(DOCUMENT f.WF_RESULT_VAL_XML) COLUMNS Valid_Date timestamp 
		PATH 'valid_date/text()', LIQUID bigdecimal PATH 'VLPIPR_x0020_Liquid_x0020_Rate/text()', 
		IPR bigdecimal PATH 'VLPIPR_x0020_IPR_x0020_Pressure/text()', 
		VLP bigdecimal PATH 'VLPIPR_x0020_VLP_x0020_Pressure/text()', 
		PDP bigdecimal PATH 'VLPIPR_x0020_PDP_x0020_Pressure/text()') AS A
);

CREATE VIEW O_WELL_TEST
(
TEST_DATE timestamp NOT NULL,
TEST_DURATION  bigdecimal (15,4),
TEST_TYPE  string (100),
TEST_STATUS  string (100) NOT NULL,
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
SEPARATOR_PRESSURE bigdecimal(15,4),
LOW_TUB_PRESSURE bigdecimal(15,4),
ENV_TEMPERATURE bigdecimal(15,4),
TUBING_PRESSURE  bigdecimal (15,4),
TUBING_PRESS_UOM  string (20),
CASING_PRESSURE  bigdecimal (15,4),
CASING_PRESS_UOM  string (20),
TUBING_TEMPERATURE  bigdecimal (15,4),
TUBING_TEMP_UOM  string (20),
CASING_TEMPERATURE  bigdecimal (15,4),
CASING_TEMP_UOM  string (20),
INLET_PRESSURE  bigdecimal (15,4),
INLET_PRESS_UOM  string (20),
INLET_TEMPERATURE  bigdecimal (15,4),
INLET_TEMP_UOM  string (20),
CHOKE_SIZE  bigdecimal (15,4),
CHOKE_SIZE_UOM  string (20),
CHOKE  bigdecimal (15,4),
CHOKE_UOM  string (20),
OUTLET_PRESSURE  bigdecimal (15,4),
OUTLET_PRESS_UOM  string (20),
OUTLET_TEMPERATURE  bigdecimal (15,4),
OUTLET_TEMP_UOM  string (20),
CHOKE_INLET_PRESS  bigdecimal (15,4),
CHOKE_INLET_PRESS_UOM  string (20),
CHOKE_INLET_TEMP  bigdecimal (15,4),
CHOKE_INLET_TEMP_UOM  string (20),
CHOKE_OUTLET_PRESS  bigdecimal (15,4),
CHOKE_OUTLET_PRESS_UOM  string (20),
CHOKE_OUTLET_TEMP  bigdecimal (15,4),
CHOKE_OUTLET_TEMP_UOM  string (20),
BHP  bigdecimal (15,4),
BHP_UOM  string (20),
BHT  bigdecimal (15,4),
BHT_UOM  string (20),
WHP  bigdecimal (15,4),
WHP_UOM  string (20),
WHT  bigdecimal (15,4),
WHT_UOM  string (20),
FLOW_PRESS  bigdecimal (15,4),
FLOW_PRESS_UOM  string (20),
FLOW_TEMP  bigdecimal (15,4),
FLOW_TEMP_UOM  string (20),
SHUT_IN_PRESS  bigdecimal (15,4),
SHUT_IN_PRESS_UOM  string (20),
GAUGE_PRESS  bigdecimal (15,4),
GAUGE_PRESS_UOM  string (20),
GAUGE_DEPTH  bigdecimal (15,4),
GAUGE_DEPTH_UOM  string (20),
OIL_GRAVITY  bigdecimal (15,4),
GAS_GRAVITY  bigdecimal (15,4),
WATER_GRAVITY  bigdecimal (15,4),
OIL  bigdecimal (15,4),
OIL_UOM  string (20),
GAS  bigdecimal (15,4),
GAS_UOM  string (20),
WATER  bigdecimal (15,4),
WATER_UOM  string (20),
LIQUID  bigdecimal (15,4),
LIQUID_UOM  string (20),
QLIQUID  bigdecimal (15,4),
QLIQUID_UOM  string (20),
GOR  bigdecimal (15,4),
GOR_UOM  string (20),
WC  bigdecimal (15,4),
WC_UOM  string (20),
WOR  bigdecimal (15,4),
WOR_UOM  string (20),
WGR  bigdecimal (15,4),
WGR_UOM  string (20),
GLR  bigdecimal (15,4),
GLR_UOM  string (20),
IPR  string (1),
IPR_DIFF  bigdecimal (15,4),
VLP  string (1),
VLP_DIFF  bigdecimal (15,4),
IPR_VLP  string (1),
IPR_VLP_DIFF  bigdecimal (15,4),
CHP  string (1),
CHP_DIFF  bigdecimal (15,4),
CHOKE_IND  string (1),
ENTITY_ID  string (100) NOT NULL,
WELL_NAME  string (255),
WELL_TYPE  string (100),
PRIMARY_PRODUCT  string (100),
PRODUCTION_METHOD  string (100),
SOURCE  string (100),
ROW_QUALITY  string (100),
ROW_CHANGED_BY  string (100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND  string (1),
REMARK  string (2000),
LEVEL1_ID  string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE  string (100),
LEVEL2_ID  string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE  string (100),
LEVEL3_ID  string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE  string (100),
LEVEL4_ID  string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE  string (100),
LEVEL5_ID  string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE  string (100),
LEVEL6_ID  string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE  string (100),
TEST_ID  string (40) NOT NULL,
CONSTRAINT PK_O_WELL_TEST PRIMARY KEY (TEST_ID))
OPTIONS (UPDATABLE 'FALSE',O_WELL_TEST.IMPLEMENTED 'TRUE')
AS
(SELECT 
 cast(PWT.TEST_DATE AS TIMESTAMP),  
 PWT.TEST_HOURS AS  TEST_DURATION, 
 NULL AS  TEST_TYPE, 
 cast((CASE PWT.VALID_IND WHEN 'Y' THEN 'Approved' WHEN 'N' THEN 'Cancelled' ELSE 'Pending' END) AS string) AS  TEST_STATUS,
 cast(PWT.EFFECTIVE_DATE AS timestamp),
 cast(PWT.EXPIRY_DATE AS timestamp), 
 PWT.SEPARATOR_PRESSURE,NULL,NULL,
 PWT.TUBING_PRESSURE, 
 cast(TUOM.UOM AS string) AS TUBING_PRESS_UOM, 
 PWT.CASING_PRESSURE,  
 cast(CUOM.UOM AS string) AS CASING_PRESS_UOM,
 NULL AS  TUBING_TEMPERATURE,  
 NULL AS  TUBING_TEMP_UOM, 
 NULL AS  CASING_TEMPERATURE,
 NULL AS  CASING_TEMP_UOM,  
 NULL AS  INLET_PRESSURE,  
 NULL AS INLET_PRESS_UOM, 
 NULL AS INLET_TEMPERATURE,  
 NULL AS  INLET_TEMP_UOM, 
 PWT.CHOKE_SIZE AS  CHOKE_SIZE, 
 NULL AS  CHOKE_SIZE_UOM, 
 NULL AS  CHOKE ,  
 NULL AS  CHOKE_UOM, 
 NULL AS OUTLET_PRESSURE, 
 NULL AS  OUTLET_PRESS_UOM,
 NULL AS OUTLET_TEMPERATURE, 
 NULL AS  OUTLET_TEMP_UOM, 
 NULL AS  CHOKE_INLET_PRESS, 
 NULL AS  CHOKE_INLET_PRESS_UOM, 
 NULL AS  CHOKE_INLET_TEMP, 
 NULL AS  CHOKE_INLET_TEMP_UOM, 
 NULL AS  CHOKE_OUTLET_PRESS,
 NULL AS  CHOKE_OUTLET_PRESS_UOM, 
 NULL AS  CHOKE_OUTLET_TEMP, 
 NULL AS  CHOKE_OUTLET_TEMP_UOM, 
 PWT.BOTTOM_HOLE_PRESSURE AS  BHP,
 cast(PWT.BOTTOM_HOLE_PRESSURE_OUOM AS   string) AS  BHP_UOM, 
 NULL AS  BHT,
 NULL AS  BHT_UOM,
 NULL AS  WHP,
 NULL AS  WHP_UOM, 
 NULL AS  WHT, 
 NULL AS  WHT_UOM, 
 PWT.FLOWING_PRESSURE AS  FLOW_PRESS, 
 cast(PWT.FLOWING_PRESSURE_OUOM AS   string)AS FLOW_PRESS_UOM, 
 NULL AS  FLOW_TEMP, 
 NULL AS  FLOW_TEMP_UOM, 
 PWT.SHUT_IN_WELL_HEAD_PRESSURE AS  SHUT_IN_PRESS,
 cast(SUOM.UOM as string) AS SHUT_IN_PRESS_UOM, 
 NULL AS  GAUGE_PRESS, 
 NULL AS  GAUGE_PRESS_UOM, 
 NULL AS  GAUGE_DEPTH, 
 NULL AS  GAUGE_DEPTH_UOM, 
 PWT.OIL_GRAVITY,
 PWT.GAS_GRAVITY,
 PWT.WATER_GRAVITY,
 PWTF.OIL, 
 PWTF.OIL_UOM, 
 PWTF.GAS, 
 PWTF.GAS_UOM, 
 PWTF.WATER, 
 PWTF.WATER_UOM,
 (PWTF.OIL + PWTF.WATER) AS  LIQUID, 
 PWTF.OIL_UOM AS  LIQUID_UOM, 
 NULL AS  QLIQUID, 
 NULL AS  QLIQUID_UOM, 
 CAST(PWT.GOR AS BIGDECIMAL), 
 NULL AS  GOR_UOM, 
 NULL AS  WC, 
 NULL AS  WC_UOM, 
 CAST(PWT.WOR AS BIGDECIMAL), 
 NULL AS  WOR_UOM,
 NULL AS  WGR, 
 NULL AS  WGR_UOM, 
 CAST(PWT.GLR AS BIGDECIMAL), 
 NULL AS  GLR_UOM, 
 NULL AS  IPR, 
 NULL AS  IPR_DIFF, 
 NULL AS  VLP,  
 NULL AS  VLP_DIFF, 
 NULL AS  IPR_VLP, 
 NULL AS  IPR_VLP_DIFF,
 NULL AS  CHP, 
 NULL AS  CHP_DIFF, 
 NULL AS  CHOKE_IND, 
 cast(PW.WELL_ID AS string) AS ENTITY_ID, 
 cast(W.WELL_NAME AS string),
 NULL AS  WELL_TYPE, 
 NULL AS PRIMARY_PRODUCT,
 NULL AS PRODUCTION_METHOD, 
 cast(S.SOURCE_NAME AS   string) AS  SOURCE, 
 cast(RPRQ.ROW_QUALITY_NAME AS string) AS ROW_QUALITY,
 cast(PWT.ROW_CHANGED_BY AS   string),  
 PWT.ROW_CHANGED_DATE, 
 PWT.ROW_CREATED_DATE, 
 cast(PWT.ROW_CREATED_BY AS   string),  
 cast(PWT.ACTIVE_IND AS   string),  
 cast(PWT.REMARK AS string), 
 NULL AS LEVEL1_ID,
 NULL AS LEVEL1_NAME,
 NULL AS LEVEL1_TYPE,
 NULL AS LEVEL2_ID,
 NULL AS LEVEL2_NAME,
 NULL AS LEVEL2_TYPE,
 NULL AS LEVEL3_ID,
 NULL AS LEVEL3_NAME,
 NULL AS LEVEL3_TYPE,
 NULL AS LEVEL4_ID,
 NULL AS LEVEL4_NAME,
 NULL AS LEVEL4_TYPE,
 NULL AS LEVEL5_ID,
 NULL AS LEVEL5_NAME,
 NULL AS LEVEL5_TYPE,
 NULL AS LEVEL6_ID,
 NULL AS LEVEL6_NAME,
 NULL AS LEVEL6_TYPE,
 cast(PWT.PDEN_WELL_TEST_ID AS string) AS TEST_ID 
  FROM 
  PPDMSrc.PDEN_WELL_TEST PWT 
  INNER JOIN PPDMSrc.PDEN_WELL PW ON PWT.PDEN_ID = PW.PDEN_ID
  INNER JOIN PPDMSrc.WELL W ON PW.WELL_ID = W.WELL_ID
  INNER JOIN PPDMSrc.WELL_AREA WA ON W.WELL_ID = WA.WELL_ID AND cast(WA.ACTIVE_IND AS string) = 'Y'  
  LEFT OUTER JOIN PPDMSrc.R_SOURCE S ON S.SOURCE_ID = PWT.SOURCE
  LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY RPRQ ON RPRQ.ROW_QUALITY_ID=PWT.ROW_QUALITY_ID 
  LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE SUOM ON PWT.SHUT_IN_WELLHEAD_PRESSURE_OUOM = SUOM.UOM_ID
  LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE CUOM ON PWT.CASING_PRESSURE_OUOM = CUOM.UOM_ID
  LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE TUOM ON PWT.TUBING_PRESSURE_OUOM = TUOM.UOM_ID  
  LEFT OUTER JOIN (SELECT PWTF.PDEN_WELL_TEST_ID, SUM(CASE P.PRODUCT_NAME WHEN 'Oil' THEN PWTF.MEASUREMENT_VOLUME END) AS  OIL,
MAX(CASE P.PRODUCT_NAME WHEN 'Oil' THEN cast(U.UOM as String) END) AS  OIL_UOM,
SUM(CASE P.PRODUCT_NAME WHEN 'Gas' THEN PWTF.MEASUREMENT_VOLUME END) AS  GAS,
MAX(CASE P.PRODUCT_NAME WHEN 'Gas' THEN cast(U.UOM as String) END) AS  GAS_UOM,
SUM(CASE P.PRODUCT_NAME WHEN 'Water' THEN PWTF.MEASUREMENT_VOLUME END) AS  WATER,
MAX(CASE P.PRODUCT_NAME WHEN 'Water' THEN cast(U.UOM as String) END) AS  WATER_UOM
FROM PPDMSrc.PDEN_WELL_TEST_FLOW_MEAS PWTF
INNER JOIN PPDMSrc.PRODUCT P ON PWTF.PRODUCT_ID = P.PRODUCT_ID
LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE U ON PWTF.MEASUREMENT_VOLUME_OUOM = U.UOM_ID 
WHERE cast(P.PRODUCT_NAME as string) IN ('Oil','Water','Gas')
GROUP BY PWTF.PDEN_WELL_TEST_ID
) PWTF ON PWT.PDEN_WELL_TEST_ID = PWTF.PDEN_WELL_TEST_ID
 WHERE cast(PWT.ACTIVE_IND AS string) = 'Y' AND W.ACTIVE_IND = 'Y'
);

CREATE VIEW NETWORK
(
NETWORK_TX_ID  string (40) NOT NULL,
NETWORK_ID string(40),
NETWORK_NAME string(255),
ACTIVE_IND  string (1),
LEVEL1_ID  string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE  string (100),
LEVEL2_ID  string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE  string (100),
LEVEL3_ID  string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE  string (100),
LEVEL4_ID  string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE  string (100),
LEVEL5_ID  string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE  string (100),
LEVEL6_ID  string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE  string (100),
CONSTRAINT PK_NETWORK PRIMARY KEY (NETWORK_TX_ID))
OPTIONS (UPDATABLE 'FALSE',NETWORK.IMPLEMENTED 'TRUE')
AS
(
SELECT
		cast(uuid() AS string) AS DSPA_NETWORK_ID, cast(dn.DELIVERY_NETWORK_ID AS string), 
		cast(dn.LONG_NAME AS string), cast(dn.ACTIVE_IND AS string)
,NULL AS LEVEL1_ID,NULL AS LEVEL1_NAME,NULL AS LEVEL1_TYPE,NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE,NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE
,NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE,NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,DN.AREA_ID AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE
	FROM
		PPDMSrc.DELIVERY_NETWORK  AS dn	
	WHERE
		((dn.LONG_NAME IS NOT NULL) OR (dn.DELIVERY_NETWORK_ID IS NOT NULL))
);

CREATE VIEW ESTIMATION_METHOD
(
ESTIMATION_METHOD_ID  string (40) NOT NULL,
ESTIMATION_METHOD string(100),
LONG_NAME string(255),
REMARK string(2000),
CONSTRAINT PK_NETWORK PRIMARY KEY (ESTIMATION_METHOD_ID))
OPTIONS (UPDATABLE 'FALSE',ESTIMATION_METHOD.IMPLEMENTED 'TRUE')
AS
(
SELECT cast(R_ESTIMATION_METHOD_ID AS string), cast(R_ESTIMATION_METHOD AS string),
cast(LONG_NAME AS string), cast(REMARK AS string) FROM PPDMSrc.R_ESTIMATION_METHOD WHERE cast(ACTIVE_IND AS string) = 'Y'
);

CREATE VIEW ANNOTATION
(
ANNOTATION_ID	string (40)	NOT NULL,
 ENTITY_TYPE	string (40),
 R_CONTEXT_TYPE_ID	string (40),
  R_CONTEXT_TYPE	string (100),
 ENTITY_ID	string (40)	NOT NULL,
 ENTITY_NAME	string (255),  
 ENTITY_EQUIPMENT_ID	string (40),
 EQUIPMENT_ID	string (40),
 EQUIPMENT_NAME	string (255),
 CAT_EQUIP_TYPE	string (100),
 CAT_EQUIP_SUB_TYPE	string (100),
 PRODUCT_ID	string (40),
 PRODUCT_NAME	string (100),
R_PARAM_ID	string (40), 
DATE_ANNOTATED_FOR	timestamp	,
ANNOTATED_COLUMN	string (30),
 R_MEASUREMENT_POINT_ID	string (40),
 R_MEASUREMENT_POINT	string (100),
 ANNOTATION_DETAILS string(2000),
 ACTIVE_IND	string	(1),
 EFFECTIVE_DATE	timestamp	,
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp	,
CONSTRAINT PK_ANNOTATION PRIMARY KEY (ANNOTATION_ID))
OPTIONS (UPDATABLE 'FALSE',ANNOTATION.IMPLEMENTED 'TRUE')
AS
(
SELECT
		cast(A.ANNOTATION_ID AS string), cast(AE.ENTITY_TYPE AS string), 
		cast(A.R_CONTEXT_TYPE_ID AS string), cast(ACT.R_CONTEXT_TYPE AS string), 
		cast(AE.ENTITY_ID AS string), 
		cast((CASE WHEN AR.AREA_ID IS NOT NULL THEN AR.PREFERRED_NAME 
		WHEN W.WELL_ID IS NOT NULL THEN W.WELL_NAME 
		WHEN F.FACILITY_ID IS NOT NULL THEN F.FACILITY_NAME 
		WHEN WC.WELL_COMPLETION_ID IS NOT NULL 
		THEN WC.WELL_COMPLETION ELSE null END) AS string) AS ENTITY_NAME, 
		cast(AE.PDEN_EQUIPMENT_ID AS string), cast(AE.EQUIPMENT_ID AS string), 
		cast(PE.EQUIPMENT_NAME AS string), cast(PE.CAT_EQUIP_TYPE AS string), 
		cast(PE.CAT_EQUIP_SUB_TYPE AS string), cast(AE.PRODUCT_ID AS string), 
		cast(P.PRODUCT_NAME AS string), cast(AE.R_PARAM_ID AS string), 
		cast(A.DATE_ANNOTATED_FOR AS timestamp), cast(A.ANNOTATED_COLUMN AS string), 
		cast(AE.R_MEASUREMENT_POINT_ID AS string), cast(MP.R_MEASUREMENT_POINT AS string), 
		cast(A.ANNOTATION_DETAILS AS string), cast(A.ACTIVE_IND AS string), 
		cast(A.EFFECTIVE_DATE AS timestamp), cast(A.ROW_CHANGED_BY AS string), 
		cast(A.ROW_CHANGED_DATE AS timestamp), cast(A.ROW_CREATED_BY AS string), 
		cast(A.ROW_CREATED_DATE AS timestamp)
	FROM
		PDMExtSrc.ANNOTATION A
		INNER JOIN PDMExtSrc.ANNOTATED_ENTITY AE
		ON cast(A.ANNOTATED_ENTITY_ID AS string) = cast(AE.ANNOTATED_ENTITY_ID AS string)
		LEFT OUTER JOIN PDMExtSrc.R_ANNOTATION_CONTEXT_TYPE  ACT
		ON cast(A.R_CONTEXT_TYPE_ID AS string) = cast(ACT.R_CONTEXT_TYPE_ID AS string) 
		LEFT OUTER JOIN PPDMSrc.AREA AR ON cast(AE.ENTITY_ID AS string) = cast(AR.AREA_ID AS string)
		LEFT OUTER JOIN PPDMSrc.WELL W ON cast(AE.ENTITY_ID AS string) = cast(W.WELL_ID AS string) 
		LEFT OUTER JOIN PPDMSrc.FACILITY F ON cast(AE.ENTITY_ID AS string) = cast(F.FACILITY_ID As string)
		LEFT OUTER JOIN PPDMSrc.WELL_COMPLETION WC ON cast(AE.ENTITY_ID AS string) = cast(WC.WELL_COMPLETION_ID AS string)
		LEFT OUTER JOIN (SELECT E.EQUIPMENT_NAME,ET.CAT_EQUIP_TYPE,EST.CAT_EQUIP_SUB_TYPE, PE.PDEN_EQUIPMENT_ID
		FROM PPDMSrc.PDEN_EQUIPMENT PE 
		INNER JOIN PPDMSrc.EQUIPMENT E ON ((cast(E.EQUIPMENT_ID AS string) = cast(PE.EQUIPMENT_ID AS string)))
		INNER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE EST ON E.EQUIPMENT_SUB_TYPE = EST.CAT_EQUIP_SUB_TYPE_ID
		INNER JOIN PPDMSrc.R_CAT_EQUIP_TYPE ET ON EST.CAT_EQUIP_TYPE = ET.CAT_EQUIP_TYPE_ID)PE ON cast(AE.PDEN_EQUIPMENT_ID AS string) = cast(PE.PDEN_EQUIPMENT_ID AS string) 
		LEFT OUTER JOIN PPDMSrc.PRODUCT P ON cast(AE.PRODUCT_ID AS string) = cast(P.PRODUCT_ID AS string)
		LEFT OUTER JOIN PPDMSrc.R_MEASUREMENT_POINT MP 
		ON cast(AE.R_MEASUREMENT_POINT_ID AS string) = cast(MP.R_MEASUREMENT_POINT_ID AS string)
		LEFT OUTER JOIN PPDMSrc.R_PERIOD_TYPE PT
		ON cast(AE.PERIOD_TYPE AS string) = cast(PT.R_PERIOD_TYPE AS string)
	WHERE
		A.ACTIVE_IND = 'Y'
);

CREATE VIEW PRODUCT_PRICE(
PRODUCT_PRICE_ID STRING(40) NOT NULL,
LEVEL6_ID STRING(40),
PRICE_DATE TIMESTAMP,
PRICE_BBL BIGDECIMAL (15,4),
PRICE_MCF BIGDECIMAL (15,4),
ROW_CHANGED_DATE TIMESTAMP,
ROW_CHANGED_BY STRING(40),
ROW_CREATED_DATE TIMESTAMP,
ROW_CREATED_BY STRING(40),
ACTIVE_IND STRING(1),
REMARKS STRING(100),
CONSTRAINT PK_PRODUCT_PRICE PRIMARY KEY (PRODUCT_PRICE_ID)
 ) 
 OPTIONS (UPDATABLE 'FALSE',PRODUCT_PRICE.IMPLEMENTED 'TRUE')
 AS 
 (SELECT CAST(PRODUCT_PRICE_ID AS STRING),AREA_ID,
 PRICE_DATE,
 PRICE_BBL,
 PRICE_MCF,
 ROW_CHANGED_DATE,
 CAST(ROW_CHANGED_BY AS STRING),
 ROW_CREATED_DATE,
 CAST(ROW_CREATED_BY AS STRING),
 CAST(ACTIVE_IND AS STRING),
 CAST(REMARKS AS STRING)
  FROM PDMExtSrc.PRODUCT_PRICE );
  
CREATE VIEW ENTITY_COST(
COST_EXPENSE_ID STRING(40) NOT NULL,
ENTITY_ID STRING(40),
ENTITY_NAME STRING(255),
COST_DATE TIMESTAMP,
LIFTING_COST BIGDECIMAL (15,4),
LIFTING_COST_BOE BIGDECIMAL (15,4),
LIFTING_COST_POT BIGDECIMAL(15,4),
WORKOVER_COST BIGDECIMAL (15,4),
WORKOVER_COST_BOE BIGDECIMAL (15,4),
WORKOVER_COST_POT BIGDECIMAL (15,4),
LEASE_OPERATING_COST BIGDECIMAL (15,4),
LEASE_OPERATING_COST_BOE BIGDECIMAL (15,4),
LEASE_OPERATING_COST_POT BIGDECIMAL (15,4),
FUEL_GAS_COST BIGDECIMAL (15,4),
FUEL_GAS_COST_BOE BIGDECIMAL (15,4),
OPEX BIGDECIMAL (15,4),
OPEX_BOE BIGDECIMAL (15,4),
OPEX_POT BIGDECIMAL (15,4),
CAPEX BIGDECIMAL (15,4),
CAPEX_BOE BIGDECIMAL (15,4),
CAPEX_POT BIGDECIMAL (15,4),
GAS_SALES BIGDECIMAL (15,4),
GAS_SALES_BOE BIGDECIMAL (15,4),
OIL_SALES BIGDECIMAL (15,4),
TOTAL_REVENUE BIGDECIMAL (15,4),
TOTAL_REVENUE_POT BIGDECIMAL (15,4),
UNC_COST_OIL BIGDECIMAL (15,4),
UNC_COST_GAS BIGDECIMAL (15,4),
UNC_COST_BOE BIGDECIMAL (15,4),
UNC_COST_OTHER BIGDECIMAL (15,4),
GAS_SALES_COST BIGDECIMAL (15,4),
BOE_SALES_COST BIGDECIMAL (15,4),
OIL_SALES_COST BIGDECIMAL (15,4),
ROW_CHANGED_DATE TIMESTAMP,
ROW_CHANGED_BY STRING(20),
ROW_CREATED_DATE TIMESTAMP,
ROW_CREATED_BY STRING(20),
ACTIVE_IND  STRING(1),
REMARKS  STRING(100),
CONSTRAINT PK_COST_EXPENSE_ID PRIMARY KEY (COST_EXPENSE_ID)
) 
OPTIONS (UPDATABLE 'FALSE',ENTITY_COST.IMPLEMENTED 'TRUE')
AS 
(
SELECT 
UUID(), ENTITY_ID, ENTITY_NAME, ENTITY_DATE,
MAX(LIFTING_COST) LIFTING_COST, MAX(LIFTING_COST_BOE) LIFTING_COST_BOE, MAX(LIFT_COST_POT) LIFT_COST_POT,
MAX(WORKOVER_COST) WORKOVER_COST, MAX(WORKOVER_COST_BOE) WORKOVER_COST_BOE, MAX(WORKOVER_COST_POT) WORKOVER_COST_POT,
MAX(LEASE_OPERATING_COST) LEASE_OPERATING_COST, MAX(LEASE_OPERATING_COST_BOE) LEASE_OPERATING_COST_BOE,
MAX(LEASE_OPERATING_COST_POT) LEASE_OPERATING_COST_POT,
MAX(FUEL_GAS_COST) FUEL_GAS_COST, MAX(FUEL_GAS_COST_BOE) FUEL_GAS_COST_BOE,
MAX(OPEX) OPEX, MAX(OPEX_BOE) OPEX_BOE, MAX(OPEX_POT) OPEX_POT,
MAX(CAPEX) CAPEX, MAX(CAPEX_BOE) CAPEX_BOE, MAX(CAPEX_POT) CAPEX_POT,
MAX(GAS) GAS, NULL, MAX(OIL) OIL,
MAX(TOTAL_REVENUE) TOTAL_REVENUE, MAX(TOTAL_REVENUE_POT) TOTAL_REVENUE_POT,
MAX(UNCLASSIFIED_COST_OIL) UNCLASSIFIED_COST_OIL, MAX(UNCLASSIFIED_COST_GAS) UNCLASSIFIED_COST_GAS,
MAX(UNCLASSIFIED_COST_BOE) UNCLASSIFIED_COST_BOE, MAX(UNCLASSIFIED_COST_OTHER) UNCLASSIFIED_COST_OTHER,
MAX(GAS_SALES_COST) GAS_SALES_COST, MAX(BOE_SALES_COST) BOE_SALES_COST, MAX(OIL_SALES_COST) OIL_SALES_COST,
MAX(ROW_CHANGED_DATE) ROW_CHANGED_DATE,
MAX(ROW_CHANGED_BY) ROW_CHANGED_BY,
MAX(ROW_CREATED_DATE) ROW_CREATED_DATE, 
MAX(ROW_CREATED_BY) ROW_CREATED_BY, 
'Y', MAX(REMARKS) REMARKS
FROM
(
SELECT EN.ENTITY_ID, EN.ENTITY_NAME,  PVSA.VOLUME_DATE AS ENTITY_DATE,
0 AS  LIFTING_COST, 0 AS LIFTING_COST_BOE, 0 AS LIFT_COST_POT, 0 AS WORKOVER_COST, 
0 AS WORKOVER_COST_BOE, 0 AS WORKOVER_COST_POT, 0 AS LEASE_OPERATING_COST, 0 AS LEASE_OPERATING_COST_BOE,
0 AS LEASE_OPERATING_COST_POT, 0 AS FUEL_GAS_COST, 0 AS FUEL_GAS_COST_BOE, 0 AS OPEX,
 0 AS OPEX_BOE, 0 AS OPEX_POT, 0 AS CAPEX, 0 AS CAPEX_BOE, 0 AS CAPEX_POT,
 SUM(CASE WHEN PR.PRODUCT_NAME = 'Gas' THEN PVSA.VOLUME END) GAS,
  SUM(CASE WHEN PR.PRODUCT_NAME = 'Oil' THEN PVSA.VOLUME END) OIL,
 0 AS TOTAL_REVENUE, 0 AS TOTAL_REVENUE_POT, 0 AS UNCLASSIFIED_COST_OIL, 0 AS UNCLASSIFIED_COST_GAS,
 0 AS UNCLASSIFIED_COST_BOE, 0 AS UNCLASSIFIED_COST_OTHER,
 0 AS GAS_SALES_COST, 0 AS BOE_SALES_COST, 0 AS OIL_SALES_COST,
 MAX(CASE WHEN PVSA.ROW_CHANGED_DATE IS NULL THEN PVSA.ROW_CREATED_DATE ELSE PVSA.ROW_CHANGED_DATE END) ROW_CHANGED_DATE,
 MAX(CASE WHEN PVSA.ROW_CHANGED_BY IS NULL THEN PVSA.ROW_CREATED_BY ELSE PVSA.ROW_CHANGED_BY END) ROW_CHANGED_BY,
 MAX(PVSA.ROW_CREATED_DATE) ROW_CREATED_DATE, 
MAX(PVSA.ROW_CREATED_BY) ROW_CREATED_BY, 
 '' REMARKS, 1 AS ROW_NUM
 FROM 
PPDMSrc.PDEN_VOL_SUMMARY_ALLOCATED PVSA
INNER JOIN (
	SELECT PDEN_ID, W.WELL_ID AS ENTITY_ID, WELL_NAME AS ENTITY_NAME 
	FROM 
	PPDMSrc.PDEN_WELL PW 
	INNER JOIN PPDMSrc.WELL W ON PW.WELL_ID = W.WELL_ID
	WHERE PW.ACTIVE_IND = 'Y' AND W.ACTIVE_IND = 'Y'
	UNION ALL 
	SELECT PDEN_ID, F.FACILITY_ID AS ENTITY_ID, FACILITY_NAME AS ENTITY_NAME 
	FROM 
	PPDMSrc.PDEN_FACILITY PF
	INNER JOIN PPDMSrc.FACILITY F ON PF.FACILITY_ID = F.FACILITY_ID
	WHERE PF.ACTIVE_IND = 'Y' AND F.ACTIVE_IND = 'Y'
	)E ON PVSA.PDEN_ID = E.PDEN_ID
INNER JOIN PPDMSrc.R_ACTIVITY_TYPE AT ON PVSA.ACTIVITY_TYPE = AT.R_ACTIVITY_TYPE_ID
INNER JOIN PPDMSrc.PRODUCT PR ON PVSA.PRODUCT_ID = PR.PRODUCT_ID
INNER JOIN PPDMSrc.PDEN_PERIOD PP ON PVSA.PDEN_PERIOD_ID = PP.PDEN_PERIOD_ID
INNER JOIN PPDMSrc.R_PERIOD_TYPE PT ON PP.PERIOD_TYPE = PT.R_PERIOD_TYPE_ID
LEFT OUTER JOIN PDMExtSrc.ENTITY_COST EC ON (E.ENTITY_ID = EC.ENTITY_ID 
	AND PVSA.VOLUME_DATE = EC.COST_DATE AND EC.ACTIVE_IND = 'Y')
INNER JOIN (
	SELECT W.WELL_ID AS ENTITY_ID, WELL_NAME AS ENTITY_NAME 
	FROM 
	PPDMSrc.WELL W WHERE ACTIVE_IND = 'Y'
	UNION ALL 
	SELECT  F.FACILITY_ID AS ENTITY_ID, FACILITY_NAME AS ENTITY_NAME 
	FROM 
	PPDMSrc.FACILITY F
	WHERE ACTIVE_IND = 'Y'
	)EN ON (E.ENTITY_ID = EN.ENTITY_ID OR EC.ENTITY_ID = EN.ENTITY_ID)
WHERE PVSA.ACTIVE_IND = 'Y' AND AT.R_ACTIVITY_TYPE = 'Sold' AND PT.R_PERIOD_TYPE = 'Daily' AND
PR.PRODUCT_NAME IN ('Oil','Gas') 
GROUP BY EN.ENTITY_ID, EN.ENTITY_NAME, PVSA.VOLUME_DATE, EC.COST_DATE 
UNION ALL 
SELECT EN.ENTITY_ID, EN.ENTITY_NAME,  EN.COST_DATE AS ENTITY_DATE,
EN.LIFTING_COST, EN.LIFTING_COST_BOE, EN.LIFT_COST_POT, EN.WORKOVER_COST, 
EN.WORKOVER_COST_BOE, EN.WORKOVER_COST_POT, EN.LEASE_OPERATING_COST, EN.LEASE_OPERATING_COST_BOE,
EN.LEASE_OPERATING_COST_POT, EN.FUEL_GAS_COST, EN.FUEL_GAS_COST_BOE, EN.OPEX,
 EN.OPEX_BOE, EN.OPEX_POT, EN.CAPEX, EN.CAPEX_BOE, EN.CAPEX_POT,
 NULL AS GAS,
 NULL AS OIL,
 EN.TOTAL_REVENUE, EN.TOTAL_REVENUE_POT, EN.UNCLASSIFIED_COST_OIL, EN.UNCLASSIFIED_COST_GAS,
 EN.UNCLASSIFIED_COST_BOE, EN.UNCLASSIFIED_COST_OTHER,
 EN.GAS_SALES_COST, EN.BOE_SALES_COST, EN.OIL_SALES_COST,
 CASE WHEN EN.ROW_CHANGED_DATE IS NULL THEN EN.ROW_CREATED_DATE ELSE EN.ROW_CHANGED_DATE END ROW_CHANGED_DATE,
 CASE WHEN EN.ROW_CHANGED_BY IS NULL THEN EN.ROW_CREATED_BY ELSE EN.ROW_CHANGED_BY END ROW_CHANGED_BY,
 EN.ROW_CREATED_DATE ROW_CREATED_DATE, 
EN.ROW_CREATED_BY ROW_CREATED_BY, 
EN.REMARKS REMARKS,
ROW_NUMBER() OVER (PARTITION BY EN.ENTITY_ID, EN.ENTITY_NAME, COST_DATE ORDER BY ROW_CHANGED_DATE DESC, ROW_CREATED_DATE DESC) ROW_NUM
 FROM 
PDMExtSrc.ENTITY_COST EN WHERE EN.ACTIVE_IND = 'Y'
)T 
WHERE T.ROW_NUM = 1
GROUP BY  T.ENTITY_ID, T.ENTITY_NAME, T.ENTITY_DATE
);

CREATE VIEW PDM_OW_MAPPING(
PDM_WELL_UWI STRING(255) NOT NULL,
OW_WELL_UWI STRING(255),
OW_PROJECT_NAME STRING(255),
OW_WELL_NATIVE_UID STRING(40),
PDM_ENTITY_ID STRING(40) NOT NULL,
CONSTRAINT PK_PDM_OW_MAP PRIMARY KEY (PDM_ENTITY_ID)
 ) 
 OPTIONS (UPDATABLE 'FALSE',PDM_OW_MAPPING.IMPLEMENTED 'TRUE')
 AS
 (
SELECT
		PDMExtSrc.PDM_OW_MAPPING.PDM_WELL_UWI, PDMExtSrc.PDM_OW_MAPPING.OW_WELL_UWI, PDMExtSrc.PDM_OW_MAPPING.OW_PROJECT_NAME, PDMExtSrc.PDM_OW_MAPPING.OW_WELL_NATIVE_UID, PDMExtSrc.PDM_OW_MAPPING.PDM_ENTITY_ID
	FROM
		PDMExtSrc.PDM_OW_MAPPING);
		
CREATE VIEW FORECAST_CASE(
FORECAST_CASE_ID STRING(40) NOT NULL,
FORECAST_CASE_NAME STRING(100),
FORECAST_CASE_DESCRIPTION STRING(2000),
FORECAST_BATCH_NAME STRING(100),
FORECAST_CASE_ACCESS STRING(40),
ROW_CHANGED_BY STRING(40),
ROW_CHANGED_DATE TIMESTAMP,
ROW_CREATED_BY STRING(40),
ROW_CREATED_DATE TIMESTAMP,
PRODUCT_NAME STRING(40),
ANALYSIS_TYPE STRING(40),
WELL_COUNT STRING(10),
WELL_NAME STRING(40),
CONSTRAINT PK_FORECAST_CASE PRIMARY KEY (FORECAST_CASE_ID)
 ) 
 OPTIONS (UPDATABLE 'TRUE',FORECAST_CASE.IMPLEMENTED 'TRUE')
 AS
 (
 SELECT
FORECAST_CASE_ID, FORECAST_CASE_NAME, FORECAST_CASE_DESCRIPTION, FORECAST_BATCH_NAME, FORECAST_CASE_ACCESS,
 ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_BY, ROW_CREATED_DATE, 
 PRODUCT_NAME, ANALYSIS_TYPE, WELL_COUNT, WELL_NAME
FROM
PDMExtSrc.FORECAST_CASES
 );
 
CREATE VIEW FORECAST_CASE_DETAILS(
FORECAST_CASE_ID STRING(40) NOT NULL,
FORECAST_CASE_NAME STRING(100),
FORECAST_CASE_DESCRIPTION STRING(2000),
FORECAST_BATCH_NAME STRING(100),
FORECAST_CASE_ACCESS STRING(40),
FORECAST_CASE_CONTENT STRING(999999999),
ROW_CHANGED_BY STRING(40),
ROW_CHANGED_DATE TIMESTAMP,
ROW_CREATED_BY STRING(40),
ROW_CREATED_DATE TIMESTAMP,
FORECAST_INPUT  STRING(999999999),
FORECAST_OUTPUT  STRING(99999999),
PRODUCT_NAME STRING(40),
ANALYSIS_TYPE STRING(40),
WELL_NAME STRING(40),
WELL_COUNT STRING(10),
CONSTRAINT PK_FORECAST_CASE_DETAILS PRIMARY KEY (FORECAST_CASE_ID)
 ) 
 OPTIONS (UPDATABLE 'TRUE',FORECAST_CASE_DETAILS.IMPLEMENTED 'TRUE')
 AS
 (
 SELECT
FORECAST_CASE_ID, FORECAST_CASE_NAME, FORECAST_CASE_DESCRIPTION, FORECAST_BATCH_NAME, FORECAST_CASE_ACCESS,
 FORECAST_CASE_CONTENT, ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_BY, ROW_CREATED_DATE,
 FORECAST_INPUT, FORECAST_OUTPUT, PRODUCT_NAME,  ANALYSIS_TYPE, WELL_NAME, WELL_COUNT
FROM
PDMExtSrc.FORECAST_CASES
 );
 
 CREATE VIEW R_WELL_STATUS
(
 WELL_STATUS string(100) NOT NULL,
 STATUS_TYPE	string(100),
 SOURCE_NAME string(100),
 WELL_STATUS_ID string(40) NOT NULL,
 ACTIVE_IND string(1),
  ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp	,
 CONSTRAINT PK_WELL_STATUS PRIMARY KEY (WELL_STATUS_ID))
OPTIONS (UPDATABLE 'FALSE', R_WELL_STATUS.IMPLEMENTED 'TRUE')
AS
(
	SELECT cast(WS.STATUS AS string) AS WELL_STATUS, cast(WST.STATUS_TYPE AS string) AS STATUS_TYPE, 
	cast(RS.SOURCE_NAME AS string) AS SOURCE, cast(WS.R_WELL_STATUS_ID AS string) AS WELL_STATUS_ID, cast(WS.ACTIVE_IND AS string) AS ACTIVE_IND,
	cast(WS.ROW_CHANGED_BY AS string) AS ROW_CHANGED_BY,cast(WS.ROW_CHANGED_DATE AS timestamp) AS ROW_CHANGED_DATE,
	cast(WS.ROW_CREATED_BY AS string) AS ROW_CREATED_BY,cast(WS.ROW_CREATED_DATE AS timestamp) AS ROW_CREATED_DATE
	FROM 
	PPDMSrc.R_WELL_STATUS AS WS
	INNER JOIN PPDMSrc.R_WELL_STATUS_TYPE AS WST ON WS.R_WELL_STATUS_TYPE_ID = WST.R_WELL_STATUS_TYPE_ID
	LEFT OUTER JOIN PPDMSrc.R_SOURCE AS RS ON WS.SOURCE = RS.SOURCE_ID
);

 CREATE VIEW R_PRODUCTION_METHOD
(
 PRODUCTION_METHOD string(100) NOT NULL,
 SOURCE_NAME string(100),
 PRODUCTION_METHOD_ID string(40) NOT NULL,
 ACTIVE_IND string(1),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp,
 CONSTRAINT PK_WELL_STATUS PRIMARY KEY (PRODUCTION_METHOD_ID))
OPTIONS (UPDATABLE 'FALSE', R_PRODUCTION_METHOD.IMPLEMENTED 'TRUE')
AS
(
SELECT  cast(PM.PRODUCTION_METHOD AS string) AS PRODUCTION_METHOD, cast(RS.SOURCE_NAME AS string) AS SOURCE,
	cast(PM.R_PRODUCTION_METHOD_ID AS string) AS PRODUCTION_METHOD_ID,cast(PM.ACTIVE_IND AS string) AS ACTIVE_IND,
	cast(PM.ROW_CHANGED_BY AS string) AS ROW_CHANGED_BY,cast(PM.ROW_CHANGED_DATE AS timestamp) AS ROW_CHANGED_DATE,
	cast(PM.ROW_CREATED_BY AS string) AS ROW_CREATED_BY,cast(PM.ROW_CREATED_DATE AS timestamp) AS ROW_CREATED_DATE
	FROM PPDMSrc.R_PRODUCTION_METHOD AS PM
	LEFT OUTER JOIN PPDMSrc.R_SOURCE AS RS ON PM.SOURCE = RS.SOURCE_ID
);

CREATE VIEW ENTITY_ESTIMATION
(
 ENTITY_ESTIMATION_ID string(40) NOT NULL,
 ESTIMATION_METHOD string(100),
 ENTITY_ID	string(40),
 ENTITY_NAME string(255),
 ACTIVE_IND string(1),
 SOURCE_NAME string(100),
 SOURCE_ID string(40),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp,
 EFFECTIVE_DATE	timestamp,
 EXPIRY_DATE	timestamp,
 REMARK string(2000),
CONSTRAINT PK_EN_EST PRIMARY KEY (ENTITY_ESTIMATION_ID))
OPTIONS (UPDATABLE 'FALSE', ENTITY_ESTIMATION.IMPLEMENTED 'TRUE')
AS
 (
 SELECT 
 cast(ENTITY_ESTIMATION_ID AS string),cast(ESTIMATION_METHOD AS string),
 cast(ENTITY_ID as string), cast(ENTITY_NAME as string),
 cast(ACTIVE_IND as string),cast(SOURCE_NAME as string),
 cast(SOURCE_ID as string),cast(ROW_CHANGED_BY as string),
 cast(ROW_CHANGED_DATE AS timestamp),cast(ROW_CREATED_BY AS string),
 cast(ROW_CREATED_DATE AS timestamp),cast(EFFECTIVE_DATE AS timestamp),
 cast(EXPIRY_DATE AS timestamp),cast(REMARKS AS string)
 FROM PDMExtSrc.ENTITY_ESTIMATION
 );
 
 CREATE VIEW PPDM_UOM
(
 UOM_ID string(40) NOT NULL,
 UOM string(20),
 ACTIVE_IND string(1),
 BASE_UNIT_IND string(1),
 EFFECTIVE_DATE	timestamp,
 EXPIRY_DATE	timestamp, 
 REMARK string(2000),
 SOURCE_NAME string(100),
 UOM_FULL_NAME string(100),
 UOM_QUANTITY_TYPE_ID	string(40),
 QUANTITY_TYPE string(100),
 UOM_SYSTEM_ID	string(40),
 UOM_SYSTEM string(100),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp,
 ROW_QUALITY_ID string (40),
 ROW_QUALITY_NAME string (100), 
CONSTRAINT PK_EN_EST PRIMARY KEY (UOM_ID))
OPTIONS (UPDATABLE 'FALSE', PPDM_UOM.IMPLEMENTED 'TRUE')
AS
 (
SELECT
		cast(UOM.UOM_ID AS string), cast(UOM.UOM AS string), cast(UOM.ACTIVE_IND AS string), 
		cast(UOM.BASE_UNIT_IND AS string), cast(UOM.EFFECTIVE_DATE AS timestamp), cast(UOM.EXPIRY_DATE AS timestamp),
		cast(UOM.REMARK AS string), 
		cast(S.SOURCE_NAME AS string) AS SOURCE, cast(UOM.UOM_FULL_NAME AS string), 
		cast(UOM.UOM_QUANTITY_TYPE_ID AS string), cast(Q.QUANTITY_TYPE AS string), cast(UOM.UOM_SYSTEM_ID AS string),
		cast(M.UOM_SYSTEM AS string), cast(UOM.ROW_CHANGED_BY AS string), cast(UOM.ROW_CHANGED_DATE AS timestamp),
		cast(UOM.ROW_CREATED_BY AS string), cast(UOM.ROW_CREATED_DATE AS timestamp), 
		cast(UOM.ROW_QUALITY_ID AS string), cast(RQ.ROW_QUALITY_NAME AS string) AS ROW_QUALITY
	FROM
		PPDMSrc.PPDM_UNIT_OF_MEASURE AS UOM 
		INNER JOIN PPDMSrc.PPDM_QUANTITY AS Q ON UOM.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
		INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM AS M ON UOM.UOM_SYSTEM_ID = M.UOM_SYSTEM_ID
		LEFT OUTER JOIN PPDMSrc.R_SOURCE AS S ON UOM.SOURCE = S.SOURCE_ID
		LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY AS RQ ON UOM.ROW_QUALITY_ID = RQ.ROW_QUALITY_ID
 );
 
 CREATE VIEW GROUPS(
GROUP_ID STRING(40) NOT NULL,
GROUP_NAME STRING(100),
GROUP_DESCRIPTION STRING(2000),
ACTIVE_IND STRING(1),
REMARK STRING(2000),
SOURCE_ID STRING(40),
SOURCE_NAME STRING(100),
ROW_CHANGED_BY STRING(20),
ROW_CHANGED_DATE TIMESTAMP,
ROW_CREATED_BY STRING(20),
ROW_CREATED_DATE TIMESTAMP,
CONSTRAINT PK_GROUPS PRIMARY KEY (GROUP_ID)
 ) 
 OPTIONS (UPDATABLE 'TRUE',GROUPS.IMPLEMENTED 'TRUE')
 AS
 (
 SELECT
GROUP_ID, GROUP_NAME, GROUP_DESCRIPTION,
ACTIVE_IND,
REMARKS,
SOURCE_ID,
SOURCE_NAME,
 ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_BY, ROW_CREATED_DATE
FROM
PDMExtSrc.GROUPS
 );

CREATE VIEW GROUP_ASSETS(
GROUP_ASSETS_ID STRING(255) NOT NULL,
GROUP_ID STRING(40) NOT NULL,
ASSET_ID STRING(100) NOT NULL,
ASSET_IND STRING(1) NOT NULL,
REMARK STRING(2000),
SOURCE_ID STRING(40),
SOURCE_NAME STRING(100),
ROW_CHANGED_BY STRING(20),
ROW_CHANGED_DATE TIMESTAMP,
ROW_CREATED_BY STRING(20),
ROW_CREATED_DATE TIMESTAMP,
CONSTRAINT PK_GROUP_ASSETS_ID PRIMARY KEY (GROUP_ASSETS_ID)
 ) 
 OPTIONS (UPDATABLE 'TRUE',GROUP_ASSETS.IMPLEMENTED 'TRUE')
 AS
 (
 SELECT
GROUP_ASSETS_ID, GROUP_ID, ASSET_ID, ASSET_IND,
REMARKS,
SOURCE_ID,
SOURCE_NAME,
 ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_BY, ROW_CREATED_DATE
FROM
PDMExtSrc.GROUP_ASSETS WHERE ASSET_IND = 'W' AND ACTIVE_IND = 'Y'
 );
 
 CREATE VIEW O_EQUIPMENT
(
EQUIPMENT_ID string (40) NOT NULL,
ACTIVE_IND string (1),
COST BIGDECIMAL (15,4),
COMMISSION_DATE timestamp,
DECOMMISSION_DATE timestamp,
DESCRIPTION string(2000),
EFFECTIVE_DATE timestamp,
EQUIPMENT_GROUP string (100),
EQUIPMENT_NAME string (255),
CAT_EQUIP_SUB_TYPE_ID string (40),
EQUIPMENT_SUB_TYPE string (100),
CAT_EQUIP_TYPE_ID string (40),
EQUIPMENT_TYPE string (100),
EXPIRY_DATE timestamp,
PURCHASE_DATE timestamp,
REFERENCE_NUM string (100),
SERIAL_NUM string (100),
IS_VIRTUAL string(3),
OWNER_BA_ID string(40),
CAT_EQUIPMENT_ID string(40),
REMARK string (2000),
SOURCE_NAME string (100),
ROW_CHANGED_BY string (100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string (100),
ROW_CREATED_DATE timestamp,
ROW_QUALITY_NAME string (100),
CONSTRAINT PK_O_EQUIPMENT PRIMARY KEY (EQUIPMENT_ID))
OPTIONS (UPDATABLE 'FALSE',O_EQUIPMENT.IMPLEMENTED 'TRUE')
 AS
(SELECT
		CAST(E.EQUIPMENT_ID AS string), CAST(E.ACTIVE_IND AS string), E.COST, CAST(E.COMMISSION_DATE AS TIMESTAMP), CAST(E.DECOMMISSION_DATE AS TIMESTAMP), 
		CAST(E.DESCRIPTION AS string), CAST(E.EFFECTIVE_DATE AS TIMESTAMP), 
		CAST(EG.CAT_EQUIP_GROUP AS string) AS EQUIPMENT_GROUP, CAST(E.EQUIPMENT_NAME AS string), 
		CAST(EST.CAT_EQUIP_SUB_TYPE_ID AS string), 
		CAST(EST.CAT_EQUIP_SUB_TYPE AS string) AS EQUIPMENT_SUB_TYPE, CAST(ET.CAT_EQUIP_TYPE_ID AS string), 
		CAST(ET.CAT_EQUIP_TYPE AS string) AS EQUIPMENT_TYPE, 
		CAST(E.EXPIRY_DATE AS TIMESTAMP), CAST(E.PURCHASE_DATE AS TIMESTAMP), CAST(E.REFERENCE_NUM AS string), 
		CAST(E.SERIAL_NUM AS string), CAST(E.IS_VIRTUAL AS string), 
		CAST(E.OWNER_BA_ID AS string), CAST(E.CAT_EQUIPMENT_ID AS string), 
		CAST(E.REMARK AS string), CAST(S.SOURCE_NAME AS string), CAST(E.ROW_CHANGED_BY AS string), 
		CAST(E.ROW_CHANGED_DATE AS TIMESTAMP), CAST(E.ROW_CREATED_BY AS string), 
		CAST(E.ROW_CREATED_DATE AS TIMESTAMP), 
		CAST(RQ.ROW_QUALITY_NAME AS string)
	FROM
		PPDMSrc.EQUIPMENT AS E 
		LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY AS RQ ON UPPER(RQ.ROW_QUALITY_ID) = UPPER(E.ROW_QUALITY)
		LEFT OUTER JOIN PPDMSrc.R_SOURCE AS S ON UPPER(S.SOURCE_ID) = UPPER(E.SOURCE)
		LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_GROUP AS EG ON UPPER(E.EQUIPMENT_GROUP) = UPPER(EG.CAT_EQUIP_GROUP_ID)
		LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE AS EST ON UPPER(E.EQUIPMENT_SUB_TYPE) = UPPER(EST.CAT_EQUIP_SUB_TYPE_ID)
		LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_TYPE AS ET ON UPPER(ET.CAT_EQUIP_TYPE_ID) = UPPER(EST.CAT_EQUIP_TYPE)		
		LEFT OUTER JOIN PPDMSrc.CAT_EQUIPMENT AS CE ON UPPER(CE.CAT_EQUIPMENT_ID) = UPPER(E.CAT_EQUIPMENT_ID)
		LEFT OUTER JOIN PPDMSrc.BUSINESS_ASSOCIATE AS CEBA ON UPPER(CE.MANUFACTURER) = UPPER(CEBA.BUSINESS_ASSOCIATE_ID)
		LEFT OUTER JOIN PPDMSrc.BUSINESS_ASSOCIATE B ON E.OWNER_BA_ID = B.BUSINESS_ASSOCIATE_ID
		WHERE
		E.ACTIVE_IND = 'Y');
		
CREATE VIEW FACILITY_REMARK
 (
 REMARK_ID	string	(40)	NOT NULL,
 ENTITY_ID	string	(40)	NOT NULL,
 FACILITY_NAME	string	(255),
 SOURCE_ID string(40),
 SOURCE_NAME string(100),
 REMARK_TYPE_ID string(40),
 REMARK_TYPE	string	(100),
 ACTIVE_IND	string	(1),
 EFFECTIVE_DATE	timestamp,
EXPIRY_DATE	timestamp,
REMARK	string	(2000),
REMARK_DATE	timestamp,
REMARK_STRAT_UNIT_ID string(40),
STRAT_NAME_SET_ID string(40),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CREATED_DATE timestamp,
ROW_QUALITY_NAME string (100),
ROW_QUALITY_ID string(40),
FACILITY_TYPE string(100),
ATTACHMENT_IND string(1),
CONSTRAINT PK_FAC_REMARK PRIMARY KEY (REMARK_ID))
OPTIONS (UPDATABLE 'FALSE',FACILITY_REMARK.IMPLEMENTED 'TRUE')
AS
 (
 SELECT
		cast(FR.FACILITY_REMARK_ID AS string) AS REMARK_ID, cast(F.FACILITY_ID AS string) AS ENTITY_ID, cast(F.FACILITY_NAME AS string) AS FACILITY_NAME, 
		cast(FR.SOURCE_NAME AS string) AS SOURCE_ID, cast(FR.SOURCE_NAME AS string) AS SOURCE,
		cast(FR.REMARK_TYPE AS string) AS REMARK_TYPE_ID, cast(FR.REMARK_TYPE AS string) AS REMARK_TYPE, cast(FR.ACTIVE_IND AS string) AS ACTIVE_IND,
		cast(FR.EFFECTIVE_DATE AS timestamp) AS EFFECTIVE_DATE, cast(FR.EXPIRY_DATE AS timestamp) AS EXPIRY_DATE, cast(FR.REMARKS AS string) AS REMARK, 
		cast(FR.REMARK_DATE AS timestamp) AS REMARK_DATE, 
		cast(FR.REMARK_STRAT_UNIT_ID AS string) AS REMARK_STRAT_UNIT_ID, cast(FR.STRAT_NAME_SET_ID AS string) AS STRAT_NAME_SET_ID, 
		cast(FR.ROW_CHANGED_BY AS string) AS ROW_CHANGED_BY, cast(FR.ROW_CHANGED_DATE AS timestamp) AS ROW_CHANGED_DATE, 
		cast(FR.ROW_CREATED_BY AS string) AS ROW_CREATED_BY, cast(FR.ROW_CREATED_DATE AS timestamp) AS ROW_CREATED_DATE, 
		cast(FR.ROW_QUALITY AS string) AS ROW_QUALITY, FR.ROW_QUALITY, FT.FACILITY_TYPE AS FACILITY_TYPE,
		cast(FR.ATTACHMENT_IND AS string) AS ATTACHMENT_IND
	FROM
		PDMExtSrc.FACILITY_REMARK AS FR 
		LEFT OUTER JOIN PPDMSrc.FACILITY AS F ON UPPER(cast(FR.FACILITY_ID AS string)) = UPPER(cast(F.FACILITY_ID AS string))
		LEFT OUTER JOIN PPDMSrc.R_FACILITY_TYPE FT ON UPPER(cast(F.FACILITY_TYPE_ID AS string)) = UPPER(cast(FT.FACILITY_TYPE_ID AS string))
	);		
		
CREATE VIEW FACILITY_DOCUMENT
 (
 DOCUMENT_ID	string	(40)	NOT NULL,
 ENTITY_ID	string	(40)	NOT NULL,
 FACILITY_NAME	string	(255),
 SOURCE_ID string(40),
 SOURCE_NAME string(100),
 REMARK_ID string(40),
 DOCUMENT_TYPE	string	(100),
 ACTIVE_IND	string	(1),
 EFFECTIVE_DATE	timestamp,
EXPIRY_DATE	timestamp,
REMARK	string	(2000),
SOURCE_DOCUMENT string(2000),
DOCUMENT_FULL_PATH string(2000),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CREATED_DATE timestamp,
ROW_QUALITY_NAME string (2400),
ROW_QUALITY_ID string(40),
DOCUMENT_TITLE string(100),
CONSTRAINT PK_FAC_DOC PRIMARY KEY (DOCUMENT_ID))
OPTIONS (UPDATABLE 'FALSE',FACILITY_DOCUMENT.IMPLEMENTED 'TRUE')
AS
 (
 SELECT
		cast(FD.SOURCE_DOCUMENT_ID AS string) AS DOCUMENT_ID, cast(F.FACILITY_ID AS string) AS ENTITY_ID, 
		cast(F.FACILITY_NAME AS string) AS FACILITY_NAME, 
		cast(FD.SOURCE_ID AS string) AS SOURCE_ID, cast(FD.SOURCE_NAME AS string) AS SOURCE_NAME,
		cast(FR.FACILITY_REMARK_ID AS string) AS REMARK_ID, cast(FD.DOCUMENT_TYPE AS string) AS DOCUMENT_TYPE, cast(FD.ACTIVE_IND AS string) AS ACTIVE_IND,
		cast(FD.EFFECTIVE_DATE AS timestamp) AS EFFECTIVE_DATE, cast(FD.EXPIRY_DATE AS timestamp) AS EXPIRY_DATE, cast(FD.REMARKS AS string) AS REMARK, 
		cast(FD.SOURCE_DOCUMENT AS string) AS SOURCE_DOCUMENT, cast(FD.DOCUMENT_FULL_PATH AS string) AS DOCUMENT_FULL_PATH, 
		cast(FD.ROW_CHANGED_BY AS string) AS ROW_CHANGED_BY, cast(FD.ROW_CHANGED_DATE AS timestamp) AS ROW_CHANGED_DATE, 
		cast(FD.ROW_CREATED_BY AS string) AS ROW_CREATED_BY, cast(FD.ROW_CREATED_DATE AS timestamp) AS ROW_CREATED_DATE, 
		FD.ROW_QUALITY_NAME, cast(FD.ROW_QUALITY_ID AS string) AS ROW_QUALITY_ID, cast(FD.DOCUMENT_TITLE AS string) AS DOCUMENT_TITLE
	FROM
		PDMExtSrc.SOURCE_DOCUMENT AS FD
		INNER JOIN PDMExtSrc.FACILITY_REMARK FR ON cast(FD.OBJECT_ID AS string) = cast(FR.FACILITY_REMARK_ID AS string)
		LEFT OUTER JOIN PPDMSrc.FACILITY AS F ON cast(FR.FACILITY_ID AS string) = cast(F.FACILITY_ID AS string)
		LEFT OUTER JOIN PPDMSrc.R_FACILITY_TYPE FT ON cast(F.FACILITY_TYPE_ID AS string) = cast(FT.FACILITY_TYPE_ID AS string)
	);	

CREATE VIEW WELL_COMPLETION_DOCUMENT
 (
 DOCUMENT_ID	string	(40)	NOT NULL,
 ENTITY_ID	string	(40)	NOT NULL,
 WELL_NAME	string	(255),
 WELL_COMPLETION string (255),
 WELL_COMPLETION_ID string(40),
 SOURCE_ID string(40),
 SOURCE_NAME string(100),
 REMARK_ID string(40),
 DOCUMENT_TYPE	string	(100),
 ACTIVE_IND	string	(1),
 EFFECTIVE_DATE	timestamp,
EXPIRY_DATE	timestamp,
REMARK	string	(2000),
SOURCE_DOCUMENT string(2000),
DOCUMENT_FULL_PATH string(2000),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CREATED_DATE timestamp,
ROW_QUALITY_NAME string (2400),
ROW_QUALITY_ID string(40),
DOCUMENT_TITLE string(100),
CONSTRAINT PK_WELL_COMPL_DOC PRIMARY KEY (DOCUMENT_ID))
OPTIONS (UPDATABLE 'FALSE',WELL_COMPLETION_DOCUMENT.IMPLEMENTED 'TRUE')
AS
 (
 SELECT
		cast(WD.SOURCE_DOCUMENT_ID AS string) AS DOCUMENT_ID, 
		cast(W.WELL_ID AS string) AS ENTITY_ID, 
		cast(W.WELL_NAME AS string) AS WELL_NAME, WC.WELL_COMPLETION, WC.WELL_COMPLETION_ID,
		cast(WD.SOURCE_ID AS string) AS SOURCE_ID, cast(WD.SOURCE_NAME AS string) AS SOURCE_NAME,
		cast(WCR.WELL_COMPLETION_REMARK_ID AS string) AS REMARK_ID, 
		cast(WD.DOCUMENT_TYPE AS string) AS DOCUMENT_TYPE, cast(WD.ACTIVE_IND AS string) AS ACTIVE_IND,
		cast(WD.EFFECTIVE_DATE AS timestamp) AS EFFECTIVE_DATE, cast(WD.EXPIRY_DATE AS timestamp) AS EXPIRY_DATE, 
		cast(WD.REMARKS AS string) AS REMARK, 
		cast(WD.SOURCE_DOCUMENT AS string) AS SOURCE_DOCUMENT, cast(WD.DOCUMENT_FULL_PATH AS string) AS DOCUMENT_FULL_PATH, 
		cast(WD.ROW_CHANGED_BY AS string) AS ROW_CHANGED_BY, cast(WD.ROW_CHANGED_DATE AS timestamp) AS ROW_CHANGED_DATE, 
		cast(WD.ROW_CREATED_BY AS string) AS ROW_CREATED_BY, cast(WD.ROW_CREATED_DATE AS timestamp) AS ROW_CREATED_DATE, 
		WD.ROW_QUALITY_NAME, cast(WD.ROW_QUALITY_ID AS string) AS ROW_QUALITY_ID, 
		cast(WD.DOCUMENT_TITLE AS string) AS DOCUMENT_TITLE
	FROM
		PDMExtSrc.SOURCE_DOCUMENT AS WD
		INNER JOIN PDMExtSrc.WELL_COMPLETION_REMARK WCR ON cast(WD.OBJECT_ID AS string) = cast(WCR.WELL_COMPLETION_REMARK_ID AS string)
		INNER JOIN PPDMSrc.WELL_COMPLETION AS WC ON UPPER(cast(WCR.WELL_COMPLETION_ID AS string)) = UPPER(cast(WC.WELL_COMPLETION_ID AS string))
		INNER JOIN PPDMSrc.WELL AS WB ON UPPER(WC.WELL_ID) = UPPER(WB.WELL_ID) AND cast(WB.ACTIVE_IND AS string) = 'Y'
		INNER JOIN PPDMSrc.WELL_XREF AS WX ON UPPER(WB.WELL_ID) = UPPER(WX.WELL_ID) AND cast(WX.ACTIVE_IND AS string) = 'Y' 
		INNER JOIN PPDMSrc.WELL AS W ON UPPER(WX.WELL_ID2) = UPPER(W.WELL_ID) AND cast(W.ACTIVE_IND AS string) = 'Y' 
		INNER JOIN PPDMSrc.R_WELL_XREF_TYPE AS WXT ON UPPER(WX.R_WELL_XREF_TYPE_ID) = UPPER(WXT.R_WELL_XREF_TYPE_ID) 
		AND UPPER(cast(WXT.XREF_TYPE AS string)) = 'WELLBORETOWELL'
	UNION ALL 
	SELECT
		cast(WD.SOURCE_DOCUMENT_ID AS string) AS DOCUMENT_ID, 
		cast(W.WELL_ID AS string) AS ENTITY_ID, 
		cast(W.WELL_NAME AS string) AS WELL_NAME, NULL, NULL,
		cast(WD.SOURCE_ID AS string) AS SOURCE_ID, cast(WD.SOURCE_NAME AS string) AS SOURCE_NAME,
		cast(WR.WELL_REMARK_ID AS string) AS REMARK_ID, 
		cast(WD.DOCUMENT_TYPE AS string) AS DOCUMENT_TYPE, cast(WD.ACTIVE_IND AS string) AS ACTIVE_IND,
		cast(WD.EFFECTIVE_DATE AS timestamp) AS EFFECTIVE_DATE, cast(WD.EXPIRY_DATE AS timestamp) AS EXPIRY_DATE, 
		cast(WD.REMARKS AS string) AS REMARK, 
		cast(WD.SOURCE_DOCUMENT AS string) AS SOURCE_DOCUMENT, cast(WD.DOCUMENT_FULL_PATH AS string) AS DOCUMENT_FULL_PATH, 
		cast(WD.ROW_CHANGED_BY AS string) AS ROW_CHANGED_BY, cast(WD.ROW_CHANGED_DATE AS timestamp) AS ROW_CHANGED_DATE, 
		cast(WD.ROW_CREATED_BY AS string) AS ROW_CREATED_BY, cast(WD.ROW_CREATED_DATE AS timestamp) AS ROW_CREATED_DATE, 
		WD.ROW_QUALITY_NAME, cast(WD.ROW_QUALITY_ID AS string) AS ROW_QUALITY_ID, 
		cast(WD.DOCUMENT_TITLE AS string) AS DOCUMENT_TITLE
	FROM
		PDMExtSrc.SOURCE_DOCUMENT AS WD
		INNER JOIN PDMExtSrc.WELL_REMARK WR ON cast(WD.OBJECT_ID AS string) = cast(WR.WELL_REMARK_ID AS string)
		INNER JOIN PPDMSrc.WELL AS W ON UPPER(WR.WELL_ID) = UPPER(W.WELL_ID) AND cast(W.ACTIVE_IND AS string) = 'Y'
);	

CREATE VIEW GAS_ANALYSIS_DETAILS
(
	ANALYSIS_DATE timestamp NOT NULL,
	SAMPLE_DATE timestamp NOT NULL,
	EQUIPMENT_ID string(40),
	EQUIPMENT_NAME string(100),
	BTU_FACTOR bigdecimal(15,4),
	GAS_INIT_PRESSURE bigdecimal(15,4),
	GAS_INIT_TEMPERATURE bigdecimal(15,4),
	SUPERCOMPRESSIBILITY bigdecimal(15,4),
	WOBBE_INDEX bigdecimal(15,4),
	SPECIFIC_GRAVITY bigdecimal(15,4),
	ISO_BUTANE_PERC bigdecimal(15,4),
	BUTANE_PERC bigdecimal(15,4),
	CARBON_DIOXIDE_PERC bigdecimal(15,4),
	DECANE_PERC bigdecimal(15,4),
	DODECANE_PERC bigdecimal(15,4),
	ETHANE_PERC bigdecimal(15,4),
	HELIUM_PERC bigdecimal(15,4),
	HEPTANE_PERC bigdecimal(15,4),
	HEXANE_PERC bigdecimal(15,4),
	HYD_SULPHIDE_PERC bigdecimal(15,4),
	METHANE_PERC bigdecimal(15,4),
	ISO_PENTANE_PERC bigdecimal(15,4),
	NONANE_PERC bigdecimal(15,4),
	PENTANE_PERC bigdecimal(15,4),
	PROPANE_PERC bigdecimal(15,4),
	NITROGEN_PERC bigdecimal(15,4),
	HYDROGEN_PERC bigdecimal(15,4),
	OXYGEN_PERC bigdecimal(15,4),
	UNDECANE_PERC bigdecimal(15,4),
	OCTANE_PERC bigdecimal(15,4),
	HEX_PLUS_PERC bigdecimal(15,4),
	PRESSURE_UOM string(20),
	TEMPERATURE_UOM string(20),
	ANALYSIS_ID string(40),
	ENTITY_NAME string(255),
	ENTITY_ID string(40),
	REMARKS string(2000),
	SOURCE_ID string(40),
	SOURCE_NAME string(100),
	ROW_CHANGED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
	GAS_ANALYSIS_ID string(40),
CONSTRAINT PK_SA_GAS_ANALYSIS PRIMARY KEY (GAS_ANALYSIS_ID))
OPTIONS (UPDATABLE 'FALSE',GAS_ANALYSIS_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT SA.ANALYSIS_DATE,SA.SAMPLE_DATE, PE.EQUIPMENT_ID,
PE.EQUIPMENT_NAME,SGA.BTU_FACTOR,SGA.GAS_INIT_PRESSURE,SGA.GAS_INIT_TEMPERATURE,
SGA.SUPERCOMPRESSIBILITY, SGA.WOBBE_INDEX, SGA.SPECIFIC_GRAVITY,
SGAD.ISO_BUTANE_PERC,SGAD.BUTANE_PERC,SGAD.CARBON_DIOXIDE_PERC,
SGAD.DECANE_PERC,SGAD.DODECANCE_PERC,SGAD.ETHANE_PERC,SGAD.HELIUM_PERC,
SGAD.HEPTANE_PERC,SGAD.HEXANE_PERC,SGAD.HYD_SULP_PERC,SGAD.METHANE_PERC,
SGAD.ISO_PENTANE_PERC, SGAD.NONANE_PERC, SGAD.PENTANE_PERC, SGAD.PROPANE_PERC,
SGAD.NITROGEN_PERC,SGAD.HYDROGEN_PERC,SGAD.OXYGEN_PERC,
SGAD.UNDECANE_PERC,SGAD.OCTANE_PERC,SGAD.HEX_PLUS_PERC,
PUOM.UOM AS PRESSURE_UOM, TUOM.UOM AS TEMPERATURE_UOM,
SA.SAMPLE_ANALYSIS_ID AS ANALYSIS_ID,
W.WELL_NAME AS ENTITY_NAME,W.WELL_ID AS ENTITY_ID,
SGA.REMARK AS REMARKS,SGA.SOURCE AS SOURCE_ID, RS.SOURCE_NAME,
SGA.ROW_CHANGED_BY,SGA.ROW_CHANGED_DATE,SGA.ROW_CREATED_DATE,SGA.ROW_CREATED_BY,
SGA.SAMPLE_GAS_ANALYSIS_ID AS GAS_ANALYSIS_ID
 FROM PPDMSrc.SAMPLE_GAS_ANALYSIS SGA 
 INNER JOIN PPDMSrc.SAMPLE_ANALYSIS SA ON SA.SAMPLE_ANALYSIS_ID = SGA.SAMPLE_ANALYSIS_ID
INNER JOIN (SELECT PW.PDEN_ID,W.WELL_ID,W.WELL_NAME FROM PPDMSrc.PDEN_WELL PW 
			INNER JOIN PPDMSrc.WELL W ON PW.WELL_ID = W.WELL_ID
			UNION ALL 
			SELECT PF.PDEN_ID,F.FACILITY_ID AS WELL_ID, F.FACILITY_NAME AS WELL_NAME FROM PPDMSrc.PDEN_FACILITY PF
			INNER JOIN PPDMSrc.FACILITY F ON PF.FACILITY_ID = F.FACILITY_ID)W ON SA.PDEN_ID = W.PDEN_ID
LEFT OUTER JOIN PPDMSrc.EQUIPMENT PE ON SA.EQUIPMENT_ID = PE.EQUIPMENT_ID
LEFT OUTER JOIN (SELECT SGAD.SAMPLE_GAS_ANALYSIS_ID,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'ISO-BUTANE' THEN SGAV.ANALYSIS_VALUE END) AS ISO_BUTANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'NONANE' THEN SGAV.ANALYSIS_VALUE END) AS NONANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'PENTANE' THEN SGAV.ANALYSIS_VALUE END) AS PENTANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'PROPANE' THEN SGAV.ANALYSIS_VALUE END) AS PROPANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'DECANE' THEN SGAV.ANALYSIS_VALUE END) AS DECANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'ETHANE' THEN SGAV.ANALYSIS_VALUE END) AS ETHANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'BUTANE' THEN SGAV.ANALYSIS_VALUE END) AS BUTANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'HEPTANE' THEN SGAV.ANALYSIS_VALUE END) AS HEPTANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'CARBON DIOXIDE' THEN SGAV.ANALYSIS_VALUE END) AS CARBON_DIOXIDE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'METHANE' THEN SGAV.ANALYSIS_VALUE END) AS METHANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'ISO-PENTANE' THEN SGAV.ANALYSIS_VALUE END) AS ISO_PENTANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'HEXANE' THEN SGAV.ANALYSIS_VALUE END) AS HEXANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'HELIUM' THEN SGAV.ANALYSIS_VALUE END) AS HELIUM_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'DODECANE' THEN SGAV.ANALYSIS_VALUE END) AS DODECANCE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'HYDROGEN SULFIDE' THEN SGAV.ANALYSIS_VALUE END) AS HYD_SULP_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'HEXANE PLUS' THEN SGAV.ANALYSIS_VALUE END) AS HEX_PLUS_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'HYDROGEN' THEN SGAV.ANALYSIS_VALUE END) AS HYDROGEN_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'OXYGEN' THEN SGAV.ANALYSIS_VALUE END) AS OXYGEN_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'UNDECANE' THEN SGAV.ANALYSIS_VALUE END) AS UNDECANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'OCTANE' THEN SGAV.ANALYSIS_VALUE END) AS OCTANE_PERC,
MAX(CASE UPPER(AP.R_ANALYSIS_PROPERTY) WHEN 'NITROGEN' THEN SGAV.ANALYSIS_VALUE END) AS NITROGEN_PERC
 FROM PPDMSrc.SAMPLE_GAS_ANALYSIS_DETAIL SGAD
INNER JOIN PPDMSrc.SAMPLE_GAS_ANALYSIS_VALUE SGAV ON SGAD.SAMPLE_GAS_ANALYSIS_DETAIL_ID = SGAV.SAMPLE_GAS_ANALYSIS_DETAIL_ID
INNER JOIN PPDMSrc.R_ANALYSIS_PROPERTY_CODE APC ON SGAV.ANALYSIS_VALUE_CODE = APC.R_ANALYSIS_PROPERTY_CODE_ID
INNER JOIN PPDMSrc.R_ANALYSIS_PROPERTY AP ON SGAD.ANALYSIS_PROPERTY = AP.R_ANALYSIS_PROPERTY_ID
WHERE SGAV.ACTIVE_IND = 'Y' AND SGAD.ACTIVE_IND = 'Y' AND APC.R_ANALYSIS_PROPERTY_CODE = 'Percent'
GROUP BY SGAD.SAMPLE_GAS_ANALYSIS_ID)SGAD ON SGA.SAMPLE_GAS_ANALYSIS_ID = SGAD.SAMPLE_GAS_ANALYSIS_ID
LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON SGA.SOURCE = RS.SOURCE_ID
LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE PUOM ON SGA.GAS_INIT_PRESSURE_OUOM = PUOM.UOM_ID
LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE TUOM ON SGA.GAS_INIT_TEMPERATURE_OUOM = TUOM.UOM_ID
WHERE SA.ACTIVE_IND = 'Y' AND SGA.ACTIVE_IND = 'Y'
);

CREATE VIEW FLOW_CHOKE_DETAILS
(
	MEASUREMENT_DATE timestamp,
	EFFECTIVE_DATE timestamp,
	EXPIRY_DATE timestamp,
	CHOKE_DURATION bigdecimal(15,4),
	DURATION_UOM string(20),
	CHOKE_SIZE bigdecimal(15,4),
	CHOKE_IND string(10),
	SIZE_UOM string(20),
	OIL_MEASURED_VOLUME bigdecimal(15,4),
	GAS_MEASURED_VOLUME bigdecimal(15,4),
	WATER_MEASURED_VOLUME bigdecimal(15,4),
	GLP_MEASURED_VOLUME bigdecimal(15,4),
	GASOLIN_MEASURED_VOLUME bigdecimal(15,4),
	OIL_UOM string(20),
	GAS_UOM string(20),
	WATER_UOM string(20),
	GLP_UOM string(20),
	GASOLIN_UOM string(20),
	ENTITY_NAME string(255),
	ENTITY_ID string(40),
	SOURCE_ID string(40),
	SOURCE_NAME string(100),
	ROW_CHANGED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
	FLOW_CHOKE_DETAILS_ID string(40),
CONSTRAINT PK_CHOKE_DETAILS PRIMARY KEY (FLOW_CHOKE_DETAILS_ID))
OPTIONS (UPDATABLE 'FALSE',FLOW_CHOKE_DETAILS.IMPLEMENTED 'TRUE')
AS
(
SELECT PM.MEASUREMENT_DATE, NULL AS EFFECTIVE_DATE, NULL AS EXPIRY_DATE, NULL AS CHOKE_DURATION,
NULL AS DURATION_UOM,
 PM.VALUE AS CHOKE_SIZE,'Y' AS CHOKE_IND, PQ.UOM AS SIZE_UOM, PFM.OIL_VOLUME AS OIL_MEASURED_VOLUME,
PFM.GAS_VOLUME AS GAS_MEASURED_VOLUME, PFM.WATER_VOLUME AS WATER_MEASURED_VOLUME,
PFM.GLP_VOLUME AS GLP_MEASURED_VOLUME, PFM.GASOL_VOLUME AS GASOLIN_MEASURED_VOLUME,
PFM.OIL_VOLUME_UOM AS OIL_UOM,
PFM.GAS_VOLUME_UOM AS GAS_UOM, PFM.WATER_VOLUME_UOM AS WATER_UOM,
PFM.GLP_VOLUME_UOM AS GLP_UOM, PFM.GASOL_VOLUME_UOM AS GASOLIN_UOM,W.WELL_NAME AS ENTITY_NAME,
W.WELL_ID AS ENTITY_ID, PM.SOURCE, RS.SOURCE_NAME,
PM.ROW_CHANGED_BY,PM.ROW_CHANGED_DATE, PM.ROW_CREATED_DATE, PM.ROW_CREATED_BY,
PM.PDEN_MEASUREMENT_ID
FROM PPDMSrc.PDEN_MEASUREMENT PM
INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON PM.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
INNER JOIN PPDMSrc.PDEN_EQUIPMENT PE ON PM.PDEN_EQUIPMENT_ID = PE.PDEN_EQUIPMENT_ID
INNER JOIN PPDMSrc.PDEN_WELL PW ON PE.PDEN_ID = PW.PDEN_ID
INNER JOIN PPDMSrc.WELL W ON PW.WELL_ID = W.WELL_ID
LEFT OUTER JOIN (SELECT PFM.MEASUREMENT_DATE, W.WELL_ID, 
MAX(CASE UPPER(PD.PRODUCT_NAME) WHEN 'OIL' THEN PFM.PRODUCTION_VOLUME END) AS OIL_VOLUME,
MAX(CASE UPPER(PD.PRODUCT_NAME) WHEN 'GAS' THEN PFM.PRODUCTION_VOLUME END) AS GAS_VOLUME,
MAX(CASE UPPER(PD.PRODUCT_NAME) WHEN 'WATER' THEN PFM.PRODUCTION_VOLUME END) AS WATER_VOLUME,
MAX(CASE UPPER(PD.PRODUCT_NAME) WHEN 'GLP' THEN PFM.PRODUCTION_VOLUME END) AS GLP_VOLUME,
MAX(CASE UPPER(PD.PRODUCT_NAME) WHEN 'GASOLINA' THEN PFM.PRODUCTION_VOLUME END) AS GASOL_VOLUME,
MAX(CASE UPPER(PD.PRODUCT_NAME) WHEN 'OIL' THEN U.UOM END) AS OIL_VOLUME_UOM,
MAX(CASE UPPER(PD.PRODUCT_NAME) WHEN 'GAS' THEN U.UOM END) AS GAS_VOLUME_UOM,
MAX(CASE UPPER(PD.PRODUCT_NAME) WHEN 'WATER' THEN U.UOM END) AS WATER_VOLUME_UOM,
MAX(CASE UPPER(PD.PRODUCT_NAME) WHEN 'GLP' THEN U.UOM END) AS GLP_VOLUME_UOM,
MAX(CASE UPPER(PD.PRODUCT_NAME) WHEN 'GASOLINA' THEN U.UOM END) AS GASOL_VOLUME_UOM
FROM
PPDMSrc.PDEN_FLOW_MEASUREMENT PFM
	INNER JOIN PPDMSrc.PRODUCT PD ON PFM.PRODUCT_ID = PD.PRODUCT_ID
	INNER JOIN PPDMSrc.PDEN_EQUIPMENT PE ON PFM.PDEN_EQUIPMENT_ID = PE.PDEN_EQUIPMENT_ID
	INNER JOIN PPDMSrc.PDEN_WELL PW ON PE.PDEN_ID = PW.PDEN_ID
	INNER JOIN PPDMSrc.WELL W ON PW.WELL_ID = W.WELL_ID
	LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE U ON PFM.PRODUCTION_VOLUME_OUOM = U.UOM_ID
	WHERE PFM.ACTIVE_IND = 'Y' GROUP BY PFM.MEASUREMENT_DATE, W.WELL_ID) PFM
 ON (W.WELL_ID = PFM.WELL_ID AND PM.MEASUREMENT_DATE = PFM.MEASUREMENT_DATE)
 LEFT OUTER JOIN (SELECT U.UOM, PQ.QUANTITY_TYPE_ID FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U
	INNER JOIN PPDMSrc.PPDM_QUANTITY PQ ON U.UOM_QUANTITY_TYPE_ID = PQ.QUANTITY_TYPE_ID
	INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM MS ON U.UOM_SYSTEM_ID = MS.UOM_SYSTEM_ID
	WHERE MS.UOM_SYSTEM IN ('English'))PQ ON MP.QUANTITY_TYPE_ID = PQ.QUANTITY_TYPE_ID
LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON PM.SOURCE = RS.SOURCE_ID 	
WHERE MP.R_MEASUREMENT_POINT IN ('Choke Position') AND MP.ACTIVE_IND = 'Y'
AND PE.ACTIVE_IND = 'Y' AND PW.ACTIVE_IND = 'Y' AND W.ACTIVE_IND = 'Y'
);

CREATE VIEW POOL
(
	POOL_ID string(40),
	POOL_NAME string(100),
	POOL_STATUS string(100),
	POOL_TYPE string(100),
	REMARKS string(2000),
	SOURCE_ID string(40),
	SOURCE_NAME string(100),
	ROW_CHANGED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
CONSTRAINT PK_POOL PRIMARY KEY (POOL_ID))
OPTIONS (UPDATABLE 'FALSE',POOL.IMPLEMENTED 'TRUE')
AS
(
SELECT P.POOL_ID,P.POOL AS POOL_NAME,PS.POOL_STATUS,PT.POOL_TYPE, P.REMARK,
	P.SOURCE AS SOURCE_ID,RS.SOURCE_NAME,P.ROW_CHANGED_BY,P.ROW_CHANGED_DATE,
	P.ROW_CREATED_DATE,P.ROW_CREATED_BY
	FROM PPDMSrc.POOL P
	INNER JOIN PPDMSrc.R_POOL_STATUS PS ON P.POOL_STATUS = PS.POOL_STATUS_ID
	INNER JOIN PPDMSrc.R_POOL_TYPE PT ON P.POOL_TYPE = PT.POOL_TYPE_ID
	LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON P.SOURCE = RS.SOURCE_ID
	WHERE P.ACTIVE_IND = 'Y'
);

CREATE VIEW POOL_WELL_COMPL_PERCENT
(
	POOL_ID string(40),
	ENTITY_ID string(40),
	POOL_NAME string(100),
	ENTITY_NAME string(255),
	WELL_COMPL_IND string(10),
	EFFECTIVE_DATE timestamp,
	EXPIRY_DATE timestamp,
	OIL_PERCENT bigdecimal(15,4),
	GAS_PERCENT bigdecimal(15,4),
	WATER_PERCENT bigdecimal(15,4),
	OTHER1_PERCENT bigdecimal(15,4),
	OTHER2_PERCENT bigdecimal(15,4),
	OTHER3_PERCENT bigdecimal(15,4),
	REMARKS string(2000),
	SOURCE_ID string(40),
	SOURCE_NAME string(100),
	ROW_CHANGED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
	POOL_WELL_COMPL_ID string(40),
CONSTRAINT PK_POOL_WELL_COMPL PRIMARY KEY (POOL_WELL_COMPL_ID))
OPTIONS (UPDATABLE 'FALSE',POOL_WELL_COMPL.IMPLEMENTED 'TRUE')
AS
(
SELECT WC.POOL_ID,WC.WELL_ID, P.POOL AS POOL_NAME,W.WELL_NAME,'W' as WELL_COMPL_IND,
	WC.EFFECTIVE_DATE,WC.EXPIRY_DATE,100 AS OIL_PERCENT,100 AS GAS_PERCENT,100 AS WATER_PERCENT,
	100 AS OTHER1_PERCENT,100 AS OTHER2_PERCENT,100 AS OTHER3_PERCENT,WC.REMARK,WC.SOURCE AS SOURCE_ID,RS.SOURCE_NAME,
	WC.ROW_CHANGED_BY,WC.ROW_CHANGED_DATE,WC.ROW_CREATED_DATE,WC.ROW_CREATED_BY,WC.WELL_COMPONENT_ID AS POOL_WELL_COMPL_ID
	FROM PPDMSrc.WELL_COMPONENT WC
	INNER JOIN PPDMSrc.R_WELL_COMPONENT_TYPE WCT ON WC.WELL_COMPONENT_TYPE = WCT.R_WELL_COMPONENT_TYPE_ID
	INNER JOIN PPDMSrc.WELL W ON WC.WELL_ID = W.WELL_ID
	INNER JOIN PPDMSrc.POOL P ON WC.POOL_ID = P.POOL_ID
	LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON WC.SOURCE = RS.SOURCE_ID
	WHERE WCT.WELL_COMPONENT_TYPE = 'POOL' AND WC.ACTIVE_IND = 'Y' AND P.ACTIVE_IND = 'Y' AND W.ACTIVE_IND = 'Y'
	UNION ALL 
	SELECT CPC.POOL_ID,CP.COMPLETION_ID,P.POOL AS POOL_NAME,WC.WELL_COMPLETION,'C' AS WELL_COMPL_IND,
	CP.EFFECTIVE_DATE,CP.EXPIRY_DATE,CPV.OIL_PERCENT,CPV.GAS_PERCENT,CPV.WATER_PERCENT,
	CPV.OTHER1_PERCENT,CPV.OTHER2_PERCENT,CPV.OTHER3_PERCENT,
	NULL AS REMARK,CP.SOURCE,RS.SOURCE_NAME,CP.ROW_CHANGED_BY,CP.ROW_CHANGED_DATE,CP.ROW_CREATED_DATE,CP.ROW_CREATED_BY,
	CP.COMPL_POOL_PERCENT_ID AS POOL_WELL_COMPL_ID
	FROM PPDMSrc.COMPL_POOL_PERCENT CP
	INNER JOIN PPDMSrc.COMPL_POOL_PERCENT_COMP CPC ON CP.COMPL_POOL_PERCENT_ID = CPC.COMPL_POOL_PERCENT_ID
	INNER JOIN PPDMSrc.WELL_COMPLETION WC ON CP.COMPLETION_ID = WC.WELL_COMPLETION_ID
	INNER JOIN PPDMSrc.POOL P ON CPC.POOL_ID = P.POOL_ID
	LEFT OUTER JOIN (SELECT CPV.COMPL_POOL_PERCENT_COMP_ID,
				MAX(CASE WHEN P.PRODUCT_NAME = 'Oil' THEN CPV.VALUE END) AS OIL_PERCENT,
				MAX(CASE WHEN P.PRODUCT_NAME = 'Gas' THEN CPV.VALUE END) AS GAS_PERCENT,
				MAX(CASE WHEN P.PRODUCT_NAME = 'Water' THEN CPV.VALUE END) AS WATER_PERCENT,
				MAX(CASE WHEN P.PRODUCT_NAME = 'GLP' THEN CPV.VALUE END) AS OTHER1_PERCENT,
				MAX(CASE WHEN P.PRODUCT_NAME = 'Gasoline' THEN CPV.VALUE END) AS OTHER2_PERCENT,
				MAX(CASE WHEN P.PRODUCT_NAME = 'CO2' THEN CPV.VALUE END) AS OTHER3_PERCENT
				 FROM PPDMSrc.COMPL_POOL_PERCENT_VALUE CPV
			INNER JOIN PPDMSrc.PRODUCT P ON CPV.PRODUCT_ID = P.PRODUCT_ID
			WHERE CPV.ACTIVE_IND = 'Y'
			GROUP BY CPV.COMPL_POOL_PERCENT_COMP_ID)CPV ON CPC.COMPL_POOL_PERCENT_COMP_ID = CPV.COMPL_POOL_PERCENT_COMP_ID
	LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON CP.SOURCE = RS.SOURCE_ID
	WHERE CP.ACTIVE_IND = 'Y' AND CPC.ACTIVE_IND = 'Y' AND CP.IS_ACTIVE = 'Y' AND WC.ACTIVE_IND = 'Y' AND P.ACTIVE_IND = 'Y'
);

CREATE VIEW ZONE
(
	ZONE_ID string(40),
	ZONE_NAME string(100),
	ZONE_STATUS string(100),
	BASE_DEPTH bigdecimal(15,4),
	TOP_DEPTH bigdecimal(15,4),
	DEPTH_UOM string(20),
	REMARKS string(2000),
	SOURCE_ID string(40),
	SOURCE_NAME string(100),
	ROW_CHANGED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
CONSTRAINT PK_ZONE PRIMARY KEY (ZONE_ID))
OPTIONS (UPDATABLE 'FALSE',ZONE.IMPLEMENTED 'TRUE')
AS
(
SELECT Z.PROD_STRING_FORMATION_ID,Z.ZONE_ID AS POOL_NAME,WS.STATUS AS ZONE_STATUS,Z.BASE_DEPTH,Z.TOP_DEPTH,
	CASE WHEN (B.UOM IS NOT NULL OR B.UOM <> '') THEN B.UOM ELSE T.UOM END AS DEPTH_UOM,	Z.REMARK,
	Z.SOURCE AS SOURCE_ID,RS.SOURCE_NAME,Z.ROW_CHANGED_BY,Z.ROW_CHANGED_DATE,
	Z.ROW_CREATED_DATE,Z.ROW_CREATED_BY
	FROM PPDMSrc.PROD_STRING_FORMATION Z
	INNER JOIN PPDMSrc.R_WELL_STATUS WS ON Z.CURRENT_STATUS = WS.R_WELL_STATUS_ID
	LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE B ON Z.BASE_DEPTH_OUOM = B.UOM_ID
	LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE T ON Z.TOP_DEPTH_OUOM = T.UOM_ID
	LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON Z.SOURCE = RS.SOURCE_ID
	WHERE Z.ACTIVE_IND = 'Y'
);

CREATE VIEW ZONE_WELL_COMPL_PERCENT
(
	ZONE_ID string(40),
	ENTITY_ID string(40),
	ZONE_NAME string(100),
	ENTITY_NAME string(255),
	WELL_COMPL_IND string(10),
	EFFECTIVE_DATE timestamp,
	EXPIRY_DATE timestamp,
	OIL_PERCENT bigdecimal(15,4),
	GAS_PERCENT bigdecimal(15,4),
	WATER_PERCENT bigdecimal(15,4),
	OTHER1_PERCENT bigdecimal(15,4),
	OTHER2_PERCENT bigdecimal(15,4),
	OTHER3_PERCENT bigdecimal(15,4),
	REMARKS string(2000),
	SOURCE_ID string(40),
	SOURCE_NAME string(100),
	ROW_CHANGED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
	ZONE_WELL_COMPL_ID string(40),
CONSTRAINT PK_ZONE_WELL_COMPL PRIMARY KEY (ZONE_WELL_COMPL_ID))
OPTIONS (UPDATABLE 'FALSE',ZONE_WELL_COMPL.IMPLEMENTED 'TRUE')
AS
(
	SELECT CZC.ZONE_ID AS ZONE_ID,CZ.COMPLETION_ID,Z.ZONE_ID AS ZONE_NAME,WC.WELL_COMPLETION,'C' AS WELL_COMPL_IND,
	CZ.EFFECTIVE_DATE,CZ.EXPIRY_DATE,CZV.OIL_PERCENT,CZV.GAS_PERCENT,CZV.WATER_PERCENT,
	CZV.OTHER1_PERCENT,CZV.OTHER2_PERCENT,CZV.OTHER3_PERCENT,
	NULL AS REMARK,CZ.SOURCE,RS.SOURCE_NAME,CZ.ROW_CHANGED_BY,CZ.ROW_CHANGED_DATE,CZ.ROW_CREATED_DATE,CZ.ROW_CREATED_BY,
	CZ.COMPL_ZONE_PERCENT_ID AS ZONE_WELL_COMPL_ID
	FROM PPDMSrc.COMPL_ZONE_PERCENT CZ
	INNER JOIN PPDMSrc.COMPL_ZONE_PERCENT_COMP CZC ON CZ.COMPL_ZONE_PERCENT_ID = CZC.COMPL_ZONE_PERCENT_ID
	INNER JOIN PPDMSrc.WELL_COMPLETION WC ON CZ.COMPLETION_ID = WC.WELL_COMPLETION_ID
	INNER JOIN PPDMSrc.PROD_STRING_FORMATION Z ON CZC.ZONE_ID = Z.PROD_STRING_FORMATION_ID
	LEFT OUTER JOIN (SELECT CZV.COMPL_ZONE_PERCENT_COMP_ID,
				MAX(CASE WHEN P.PRODUCT_NAME = 'Oil' THEN CZV.VALUE END) AS OIL_PERCENT,
				MAX(CASE WHEN P.PRODUCT_NAME = 'Gas' THEN CZV.VALUE END) AS GAS_PERCENT,
				MAX(CASE WHEN P.PRODUCT_NAME = 'Water' THEN CZV.VALUE END) AS WATER_PERCENT,
				MAX(CASE WHEN P.PRODUCT_NAME = 'GLP' THEN CZV.VALUE END) AS OTHER1_PERCENT,
				MAX(CASE WHEN P.PRODUCT_NAME = 'Gasoline' THEN CZV.VALUE END) AS OTHER2_PERCENT,
				MAX(CASE WHEN P.PRODUCT_NAME = 'CO2' THEN CZV.VALUE END) AS OTHER3_PERCENT
				 FROM PPDMSrc.COMPL_ZONE_PERCENT_VALUE CZV
			INNER JOIN PPDMSrc.PRODUCT P ON CZV.PRODUCT_ID = P.PRODUCT_ID
			WHERE CZV.ACTIVE_IND = 'Y'
			GROUP BY CZV.COMPL_ZONE_PERCENT_COMP_ID)CZV ON CZC.COMPL_ZONE_PERCENT_COMP_ID = CZV.COMPL_ZONE_PERCENT_COMP_ID
	LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON CZ.SOURCE = RS.SOURCE_ID
	WHERE CZ.ACTIVE_IND = 'Y' AND CZ.IS_ACTIVE = 'Y' AND CZC.ACTIVE_IND = 'Y' AND WC.ACTIVE_IND = 'Y' AND Z.ACTIVE_IND = 'Y'
);

CREATE VIEW VOLUME
(
VOLUME_DATE timestamp NOT NULL,
PERIOD_TYPE string(50) NOT NULL,
VOLUME  bigdecimal(15,4),
VOLUME_POT  bigdecimal(15,4),
VOLUME_UOM  string(20),
CUM_VOLUME	bigdecimal	(15,4),
CUM_VOLUME_POT	bigdecimal	(15,4),
CD_VOLUME bigdecimal(15,4),
CD_VOLUME_POT bigdecimal(15,4),
ACTIVITY_TYPE_ID string (40),
ACTIVITY_TYPE_NAME  string (255) NOT NULL,
PRODUCT_ID string (40),
PRODUCT_NAME  string (255) NOT NULL,
PRODUCT_LONG_NAME  string (255) NOT NULL,
ENTITY_ID string (40),
ENTITY_NAME  string (255) NOT NULL,
ENTITY_TYPE string (50),
NETWORK_ID string (40),
NETWORK_NAME string (255),
REMARKS string(2000),
SOURCE_ID string (40),
SOURCE_NAME string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
VOL_ID   string (40) NOT NULL,
LEVEL1_ID string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE   string (100),
LEVEL2_ID string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE   string (100),
LEVEL3_ID string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE   string (100),
LEVEL4_ID string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE   string (100),
LEVEL5_ID string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE   string (100),
LEVEL6_ID string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE   string (100),
CONSTRAINT PK_VOLUME PRIMARY KEY (VOL_ID))
OPTIONS (UPDATABLE 'FALSE',VOLUME.IMPLEMENTED 'TRUE')
AS
(SELECT VOLUME_DATE,PT.R_PERIOD_TYPE AS PERIOD_TYPE,VOLUME,POTENTIAL_VOLUME,U.UOM AS VOLUME_UOM,NULL AS CUM_VOLUME, NULL AS CUM_VOLUME_POT,
NULL AS CD_VOLUME, NULL AS CD_VOLUME_POT,ACTIVITY_TYPE AS ACTIVITY_TYPE_ID,AT.R_ACTIVITY_TYPE AS ACTIVITY_TYPE,
PVSA.PRODUCT_ID,P.PRODUCT_NAME,P.LONG_NAME PRODUCT_LONG_NAME, E.ENTITY_ID,E.ENTITY_NAME,E.ENTITY_TYPE,PVSA.DELIVERY_NETWORK_ID AS NETWORK_ID,N.DELIVERY_NETWORK AS NETWORK_NAME,PVSA.REMARK,
PVSA.SOURCE AS SOURCE_ID,RS.SOURCE_NAME,PVSA.ROW_CHANGED_BY,PVSA.ROW_CHANGED_DATE,PVSA.ROW_CREATED_DATE,PVSA.ROW_CREATED_BY,
PDEN_VOL_SUMMARY_ALLOCATED_ID AS VOL_ID, NULL AS LEVEL1_ID,NULL AS LEVEL1_NAME,NULL AS LEVEL1_TYPE,
NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE,NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE,
NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE,NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,
NULL AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE
FROM 
PPDMSrc.PDEN_VOL_SUMMARY_ALLOCATED PVSA
INNER JOIN PPDMSrc.R_ACTIVITY_TYPE AT ON PVSA.ACTIVITY_TYPE = AT.R_ACTIVITY_TYPE_ID
INNER JOIN PPDMSrc.PRODUCT P ON PVSA.PRODUCT_ID = P.PRODUCT_ID
LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE U ON PVSA.VOLUME_UOM = U.UOM_ID
INNER JOIN PPDMSrc.PDEN_PERIOD PP ON PVSA.PDEN_PERIOD_ID = PP.PDEN_PERIOD_ID
INNER JOIN PPDMSrc.R_PERIOD_TYPE PT ON PP.PERIOD_TYPE = PT.R_PERIOD_TYPE_ID
LEFT OUTER JOIN PPDMSrc.DELIVERY_NETWORK N ON PVSA.DELIVERY_NETWORK_ID = N.DELIVERY_NETWORK_ID
INNER JOIN (SELECT PW.PDEN_ID, W.WELL_ID AS ENTITY_ID,WELL_NAME AS ENTITY_NAME,'W' AS ENTITY_TYPE FROM PPDMSrc.WELL W 
			INNER JOIN PPDMSrc.R_WELL_LEVEL_TYPE WL ON W.WELL_LEVEL_TYPE = WL.R_WELL_LEVEL_TYPE_ID
			INNER JOIN PPDMSrc.PDEN_WELL PW ON W.WELL_ID = PW.WELL_ID
			WHERE UPPER(WL.R_WELL_LEVEL_TYPE) = 'WELL' AND W.ACTIVE_IND = 'Y' AND PW.ACTIVE_IND = 'Y'
			UNION ALL 
			SELECT PF.PDEN_ID, F.FACILITY_ID AS ENTITY_ID,FACILITY_NAME AS ENTITY_NAME,'F' AS ENTITY_TYPE FROM PPDMSrc.FACILITY F
			INNER JOIN PPDMSrc.PDEN_FACILITY PF ON F.FACILITY_ID = PF.FACILITY_ID
			WHERE F.ACTIVE_IND = 'Y' AND PF.ACTIVE_IND = 'Y'
			UNION ALL 
			SELECT PWC.PDEN_ID, WC.WELL_COMPLETION_ID AS ENTITY_ID, WELL_COMPLETION AS ENTITY_NAME,'C' AS ENTITY_TYPE FROM PPDMSrc.WELL_COMPLETION WC
			INNER JOIN PPDMSrc.PDEN_WELL_COMPLETION PWC ON WC.WELL_COMPLETION_ID = PWC.WELL_COMPLETION_ID
			WHERE WC.ACTIVE_IND = 'Y' AND PWC.ACTIVE_IND = 'Y')E ON PVSA.PDEN_ID = E.PDEN_ID
LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON PVSA.SOURCE = RS.SOURCE_ID
WHERE N.ACTIVE_IND <> 'N'
);

CREATE VIEW POOL_WELL_COMPL_PERCENT_ALL
(
POOL_ID string (40),
ENTITY_ID string (40),
POOL_NAME	string (100),
ENTITY_NAME	string (100),
WELL_COMPL_IND	string (1),
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
PRODUCT_NAME string (100),
PRODUCT_LONG_NAME string (100),
PRODUCT_PERCENT bigdecimal(15,4),
REMARK string(2000),
SOURCE_ID string(40),
SOURCE_NAME string(100),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY string(100),
POOL_WELL_COMPL_ID string(40),
CONSTRAINT PK_VOLUME PRIMARY KEY (POOL_WELL_COMPL_ID))
OPTIONS (UPDATABLE 'FALSE',VOLUME.IMPLEMENTED 'TRUE')
AS
(SELECT WC.POOL_ID,WC.WELL_ID, P.POOL AS POOL_NAME,W.WELL_NAME,'W' as WELL_COMPL_IND,
	WC.EFFECTIVE_DATE,WC.EXPIRY_DATE,null as PRODUCT_NAME,null as PRODUCT_LONG_NAME,null as PRODUCT_PERCENT,WC.REMARK,WC.SOURCE AS SOURCE_ID,RS.SOURCE_NAME,
	WC.ROW_CHANGED_BY,WC.ROW_CHANGED_DATE,WC.ROW_CREATED_DATE,WC.ROW_CREATED_BY,WC.WELL_COMPONENT_ID AS POOL_WELL_COMPL_ID
	FROM PPDMSrc.WELL_COMPONENT WC
	INNER JOIN PPDMSrc.R_WELL_COMPONENT_TYPE WCT ON WC.WELL_COMPONENT_TYPE = WCT.R_WELL_COMPONENT_TYPE_ID
	INNER JOIN PPDMSrc.WELL W ON WC.WELL_ID = W.WELL_ID
	INNER JOIN PPDMSrc.POOL P ON WC.POOL_ID = P.POOL_ID
	LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON WC.SOURCE = RS.SOURCE_ID
	WHERE WCT.WELL_COMPONENT_TYPE = 'POOL' AND WC.ACTIVE_IND = 'Y' AND P.ACTIVE_IND = 'Y' AND W.ACTIVE_IND = 'Y'
	UNION ALL 
	SELECT CPC.POOL_ID,CP.COMPLETION_ID,P.POOL AS POOL_NAME,WC.WELL_COMPLETION,'C' AS WELL_COMPL_IND,
	CP.EFFECTIVE_DATE,CP.EXPIRY_DATE,CPV.PRODUCT_NAME,CPV.LONG_NAME PRODUCT_LONG_NAME,CPV.PRODUCT_PERCENT,
	NULL AS REMARK,CP.SOURCE,RS.SOURCE_NAME,CP.ROW_CHANGED_BY,CP.ROW_CHANGED_DATE,CP.ROW_CREATED_DATE,CP.ROW_CREATED_BY,
	CP.COMPL_POOL_PERCENT_ID AS POOL_WELL_COMPL_ID
	FROM PPDMSrc.COMPL_POOL_PERCENT CP
	INNER JOIN PPDMSrc.COMPL_POOL_PERCENT_COMP CPC ON CP.COMPL_POOL_PERCENT_ID = CPC.COMPL_POOL_PERCENT_ID
	INNER JOIN PPDMSrc.WELL_COMPLETION WC ON CP.COMPLETION_ID = WC.WELL_COMPLETION_ID
	INNER JOIN PPDMSrc.POOL P ON CPC.POOL_ID = P.POOL_ID
	INNER JOIN (SELECT CPV.COMPL_POOL_PERCENT_COMP_ID,P.PRODUCT_NAME,P.LONG_NAME,CPV.VALUE AS PRODUCT_PERCENT 
		FROM PPDMSrc.COMPL_POOL_PERCENT_VALUE CPV
			INNER JOIN PPDMSrc.PRODUCT P ON CPV.PRODUCT_ID = P.PRODUCT_ID
			WHERE CPV.ACTIVE_IND = 'Y'
			)CPV ON CPC.COMPL_POOL_PERCENT_COMP_ID = CPV.COMPL_POOL_PERCENT_COMP_ID
	LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON CP.SOURCE = RS.SOURCE_ID
	WHERE CP.ACTIVE_IND = 'Y' AND CPC.ACTIVE_IND = 'Y' AND CP.IS_ACTIVE = 'Y' AND WC.ACTIVE_IND = 'Y' AND P.ACTIVE_IND = 'Y'
);

CREATE VIEW ZONE_WELL_COMPL_PERCENT_ALL
(
ZONE_ID string (40),
ENTITY_ID string (40),
ZONE_NAME	string (100),
ENTITY_NAME	string (100),
WELL_COMPL_IND	string (1),
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
PRODUCT_NAME string (100),
PRODUCT_LONG_NAME string (100),
PRODUCT_PERCENT bigdecimal(15,4),
REMARK string(2000),
SOURCE_ID string(40),
SOURCE_NAME string(100),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY string(100),
ZONE_WELL_COMPL_ID string(40),
CONSTRAINT PK_VOLUME PRIMARY KEY (ZONE_WELL_COMPL_ID))
OPTIONS (UPDATABLE 'FALSE',VOLUME.IMPLEMENTED 'TRUE')
AS
(SELECT CZC.ZONE_ID AS ZONE_ID,CZ.COMPLETION_ID,Z.ZONE_ID AS ZONE_NAME,WC.WELL_COMPLETION,'C' AS WELL_COMPL_IND,
	CZ.EFFECTIVE_DATE,CZ.EXPIRY_DATE,CZV.PRODUCT_NAME,CZV.LONG_NAME PRODUCT_LONG_NAME, CZV.PRODUCT_PERCENT,
	NULL AS REMARK,CZ.SOURCE,RS.SOURCE_NAME,CZ.ROW_CHANGED_BY,CZ.ROW_CHANGED_DATE,CZ.ROW_CREATED_DATE,CZ.ROW_CREATED_BY,
	CZ.COMPL_ZONE_PERCENT_ID AS ZONE_WELL_COMPL_ID
	FROM PPDMSrc.COMPL_ZONE_PERCENT CZ
	INNER JOIN PPDMSrc.COMPL_ZONE_PERCENT_COMP CZC ON CZ.COMPL_ZONE_PERCENT_ID = CZC.COMPL_ZONE_PERCENT_ID
	INNER JOIN PPDMSrc.WELL_COMPLETION WC ON CZ.COMPLETION_ID = WC.WELL_COMPLETION_ID
	INNER JOIN PPDMSrc.PROD_STRING_FORMATION Z ON CZC.ZONE_ID = Z.PROD_STRING_FORMATION_ID
	INNER JOIN (SELECT CZV.COMPL_ZONE_PERCENT_COMP_ID,P.PRODUCT_NAME,P.LONG_NAME,CZV.VALUE  PRODUCT_PERCENT
			 FROM PPDMSrc.COMPL_ZONE_PERCENT_VALUE CZV
			INNER JOIN PPDMSrc.PRODUCT P ON CZV.PRODUCT_ID = P.PRODUCT_ID
			WHERE CZV.ACTIVE_IND = 'Y'
		)CZV ON CZC.COMPL_ZONE_PERCENT_COMP_ID = CZV.COMPL_ZONE_PERCENT_COMP_ID
	LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON CZ.SOURCE = RS.SOURCE_ID
	WHERE CZ.ACTIVE_IND = 'Y' AND CZ.IS_ACTIVE = 'Y' AND CZC.ACTIVE_IND = 'Y' AND WC.ACTIVE_IND = 'Y' AND Z.ACTIVE_IND = 'Y'
);

CREATE VIEW GAS_COMPONENT_VOLUME
(
VOLUME_DATE timestamp NOT NULL,
PERIOD_TYPE string(50) NOT NULL,
VOLUME  bigdecimal(15,4),
VOLUME_UOM  string(20),
ACTIVITY_TYPE_ID string (40),
ACTIVITY_TYPE_NAME  string (255) NOT NULL,
ACTVT_TYP_LONG_NAME string (255),
PRODUCT_ID string (40),
PRODUCT_NAME  string (255) NOT NULL,
PRODUCT_LONG_NAME  string (255) NOT NULL,
ENTITY_ID string (40),
ENTITY_NAME  string (255) NOT NULL,
ENTITY_TYPE string (50),
NETWORK_ID string (40),
NETWORK_NAME string (255),
REMARKS string(2000),
SOURCE_ID string (40),
SOURCE_NAME string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
VOL_ID   string (40) NOT NULL,
LEVEL1_ID string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE   string (100),
LEVEL2_ID string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE   string (100),
LEVEL3_ID string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE   string (100),
LEVEL4_ID string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE   string (100),
LEVEL5_ID string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE   string (100),
LEVEL6_ID string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE   string (100),
CONSTRAINT PK_VOLUME PRIMARY KEY (VOL_ID))
OPTIONS (UPDATABLE 'FALSE',VOLUME.IMPLEMENTED 'TRUE')
AS

(SELECT PVSA.VOLUME_DATE,PT.R_PERIOD_TYPE AS PERIOD_TYPE,
SUM((PVSAG.VOLUME * 0.023809523049954)) VOLUME,('bbl') AS VOLUME_UOM,PVSA.ACTIVITY_TYPE AS ACTIVITY_TYPE_ID,MAX(AT.R_ACTIVITY_TYPE) AS ACTIVITY_TYPE_NAME,MAX(AT.LONG_NAME) AS ACTVT_TYP_LONG_NAME,
RAG.PRODUCT_ID,MAX(P.PRODUCT_NAME) PRODUCT_NAME,MAX(P.LONG_NAME) PRODUCT_LONG_NAME, E.ENTITY_ID, MAX(E.ENTITY_NAME) ENTITY_NAME,MAX(E.ENTITY_TYPE) ENTITY_TYPE,DN.DELIVERY_NETWORK_ID AS NETWORK_ID,
 MAX(DN.DELIVERY_NETWORK) AS NETWORK_NAME, MAX(PVSA.REMARK) REMARK,NULL AS SOURCE_ID,MAX(RS.SOURCE_NAME) SOURCE_NAME,
MAX(PVSA.ROW_CHANGED_BY) ROW_CHANGED_BY,MAX(PVSA.ROW_CHANGED_DATE) ROW_CHANGED_DATE,MAX(PVSA.ROW_CREATED_DATE) ROW_CREATED_DATE,MAX(PVSA.ROW_CREATED_BY) ROW_CREATED_BY,
PVSA.PDEN_VOL_SUMMARY_ALLOCATED_ID AS VOL_ID,
NULL AS LEVEL1_ID,NULL AS LEVEL1_NAME,NULL AS LEVEL1_TYPE,
NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE,NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE,
NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE,NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,
NULL AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE
FROM 
PPDMSrc.PDEN_VOL_SUMMARY_ALLOCATED PVSA 
		INNER JOIN PPDMSrc.PDEN_VOL_SUMMARY_ALOC_GASCOMP PVSAG ON PVSAG.PDEN_VOL_SUMMARY_ALLOCATED_ID = PVSA.PDEN_VOL_SUMMARY_ALLOCATED_ID 
		INNER JOIN PPDMSrc.R_ANALYSIS_PROPERTY RAP ON RAP.R_ANALYSIS_PROPERTY_ID = PVSAG.ANALYSIS_PROPERTY_ID 
		INNER JOIN PPDMSrc.R_ANALYSIS_GROUP_PROPERTY RAGP ON RAGP.R_ANALYSIS_PROPERTY_ID = RAP.R_ANALYSIS_PROPERTY_ID
		INNER JOIN PPDMSrc.R_ANALYSIS_GROUP RAG ON RAG.R_ANALYSIS_GROUP_ID = RAGP.R_ANALYSIS_GROUP_ID
		INNER JOIN PPDMSrc.R_ACTIVITY_TYPE AT ON PVSA.ACTIVITY_TYPE = AT.R_ACTIVITY_TYPE_ID
		INNER JOIN PPDMSrc.PRODUCT P ON RAG.PRODUCT_ID = P.PRODUCT_ID
		INNER JOIN PPDMSrc.PDEN_PERIOD PP ON PVSA.PDEN_PERIOD_ID = PP.PDEN_PERIOD_ID
		INNER JOIN PPDMSrc.R_PERIOD_TYPE PT ON PP.PERIOD_TYPE = PT.R_PERIOD_TYPE_ID
		INNER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE U ON PVSAG.VOLUME_OUOM = U.UOM_ID
		INNER JOIN PPDMSrc.DELIVERY_NETWORK DN ON PVSA.DELIVERY_NETWORK_ID = DN.DELIVERY_NETWORK_ID
		INNER JOIN PPDMSrc.DELIVERY_NETWORK_VERSION DNV ON DNV.DELIVERY_NETWORK_ID = DN.DELIVERY_NETWORK_ID 
		INNER JOIN PPDMSrc.DELVRY_NW_VER_GAS_SETTINGS  DNVGS on DNVGS.DELIVERY_NETWORK_VERSION_ID = DNV.DELIVERY_NETWORK_VERSION_ID
		INNER JOIN PPDMSrc.DELVRY_NW_VER_GAS_SET_COMP DNVGSC ON DNVGSC.DLVRY_NW_VER_GAS_SETNG_ID = DNVGS.DLVRY_NW_VER_GAS_SETNG_ID and RAG.R_ANALYSIS_GROUP_ID=DNVGSC.R_ANALYSIS_GROUP_ID
		INNER JOIN (SELECT PW.PDEN_ID, W.WELL_ID AS ENTITY_ID,WELL_NAME AS ENTITY_NAME,'W' AS ENTITY_TYPE FROM PPDMSrc.WELL W 
			INNER JOIN PPDMSrc.R_WELL_LEVEL_TYPE WL ON W.WELL_LEVEL_TYPE = WL.R_WELL_LEVEL_TYPE_ID
			INNER JOIN PPDMSrc.PDEN_WELL PW ON W.WELL_ID = PW.WELL_ID
			WHERE UPPER(WL.R_WELL_LEVEL_TYPE) = 'WELL' AND W.ACTIVE_IND = 'Y' AND PW.ACTIVE_IND = 'Y'
			UNION ALL 
			SELECT PF.PDEN_ID, F.FACILITY_ID AS ENTITY_ID,FACILITY_NAME AS ENTITY_NAME,'F' AS ENTITY_TYPE FROM PPDMSrc.FACILITY F
			INNER JOIN PPDMSrc.PDEN_FACILITY PF ON F.FACILITY_ID = PF.FACILITY_ID
			WHERE F.ACTIVE_IND = 'Y' AND PF.ACTIVE_IND = 'Y'
			UNION ALL 
			SELECT PWC.PDEN_ID, WC.WELL_COMPLETION_ID AS ENTITY_ID, WELL_COMPLETION AS ENTITY_NAME,'C' AS ENTITY_TYPE FROM PPDMSrc.WELL_COMPLETION WC
			INNER JOIN PPDMSrc.PDEN_WELL_COMPLETION PWC ON WC.WELL_COMPLETION_ID = PWC.WELL_COMPLETION_ID
			WHERE WC.ACTIVE_IND = 'Y' AND PWC.ACTIVE_IND = 'Y')E ON PVSA.PDEN_ID = E.PDEN_ID
		LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON PVSA.SOURCE = RS.SOURCE_ID
WHERE 
		(PVSA.VOLUME_DATE >= DNV.EFFECTIVE_DATE) 
		AND (PVSA.VOLUME_DATE < NVL(DNV.EXPIRY_DATE, CAST ('2100-12-31' AS DATE))) 
		AND (PVSA.ACTIVE_IND = 'Y') AND (PVSAG.ACTIVE_IND = 'Y') 
		AND (RAGP.ACTIVE_IND = 'Y') 
		AND (P.ACTIVE_IND = 'Y') 
		AND (DN.ACTIVE_IND = 'Y') 
		AND (DNV.ACTIVE_IND = 'Y') 
		AND U.UOM='gal'
		GROUP BY 
		PVSA.PDEN_VOL_SUMMARY_ALLOCATED_ID, 
		E.ENTITY_ID,		
		PVSA.ACTIVITY_TYPE, 		
		RAG.PRODUCT_ID, 
		PVSA.VOLUME_DATE,
		DN.DELIVERY_NETWORK_ID, 
		PT.R_PERIOD_TYPE
);

CREATE VIEW DISPOSITION
(
DISPOSITION_ID STRING (100),
DISPOSITION_NAME STRING (40),
DISPOSITION_TYPE_CATEGORY_ID STRING (100),
DISPOSITION_CATEGORY_NAME STRING(100),
HAUL_TYPE_ID STRING (100),
ACTIVE_IND STRING (100),
LONG_NAME STRING (100),
HAUL_TYPE STRING (100),
SOURCE STRING (100),
ROW_CHANGED_BY STRING (100),
ROW_CHANGED_DATE TIMESTAMP,
ROW_CREATED_BY STRING (100),
ROW_CREATED_DATE TIMESTAMP,
ROW_QUALITY STRING (100),
CONSTRAINT PK_DISPOSITION PRIMARY KEY (DISPOSITION_ID))
OPTIONS (UPDATABLE 'FALSE',DISPOSITION.IMPLEMENTED 'TRUE')
AS
(
SELECT
CAST (RAT.R_ACTIVITY_TYPE_ID AS STRING) AS DISPOSITION_ID,
CAST (RAT.R_ACTIVITY_TYPE AS STRING) AS DISPOSITION_NAME,
CAST (RAT.R_ACTIVITY_TYPE_CATEGORY_ID AS STRING) AS DISPOSITION_TYPE_CATEGORY_ID,
CAST (RATC.R_ACTIVITY_TYPE_CATEGORY AS STRING)  AS DISPOSITION_CATEGORY_NAME,
CAST (RAT.R_HAUL_TYPE_ID AS STRING) AS HAUL_TYPE_ID,
CAST (RAT.ACTIVE_IND AS STRING) AS ACTIVE_IND,
CAST (RAT.LONG_NAME AS STRING) AS LONG_NAME,
CAST (RAT.HAUL_TYPE AS STRING) AS HAUL_TYPE,
CAST (RAT.SOURCE AS STRING) AS SOURCE,
CAST (RAT.ROW_CHANGED_BY AS STRING) AS ROW_CHANGED_BY,
RAT.ROW_CHANGED_DATE,
CAST (RAT.ROW_CREATED_BY AS STRING) AS ROW_CREATED_BY,
RAT.ROW_CREATED_DATE,
CAST (RAT.ROW_QUALITY AS STRING) AS ROW_QUALITY
FROM PPDMSrc.R_ACTIVITY_TYPE AS RAT
INNER JOIN PPDMSrc.R_ACTIVITY_TYPE_CATEGORY AS RATC
 on  RATC.R_ACTIVITY_TYPE_CATEGORY_ID=RAT.R_ACTIVITY_TYPE_CATEGORY_ID
);

CREATE VIEW PRODUCT
(
PRODUCT_ID STRING (40),
PRODUCT_NAME STRING (100),
ABBREVIATION STRING (100),
PARENT_PRODUCT_ID STRING (100),
PARENT_PRODUCT_NAME STRING(100),
PRODUCT_CLASS_ID STRING (100),
PRODUCT_CLASS STRING (100),
ACTIVE_IND STRING (40),
CONVERSION_QUANTITY STRING (40),
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
LONG_NAME STRING (100),
PREFERRED_UOM STRING (100),
PROPERTY_SET_ID STRING (100),
SHORT_NAME STRING (100),
ROW_CHANGED_BY STRING (100) ,
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY STRING (40),
ROW_CREATED_DATE timestamp ,
ROW_QUALITY STRING (100),
CONSTRAINT PK_PRODUCT PRIMARY KEY (PRODUCT_ID))
OPTIONS (UPDATABLE 'FALSE',PRODUCT.IMPLEMENTED 'TRUE')
AS
(
SELECT
CAST(PR.PRODUCT_ID AS STRING) AS PRODUCT_ID,
CAST(PR.PRODUCT_NAME AS STRING) AS PRODUCT_NAME,
CAST(PR.ABBREVIATION AS STRING) AS ABBREVIATION,
CAST(PR.PARENT_PRODUCT_ID AS STRING) AS PARENT_PRODUCT_ID,
CAST(PR1.PRODUCT_NAME AS STRING) AS PARENT_PRODUCT_NAME,
CAST(PR.PRODUCT_CLASS AS STRING) AS PRODUCT_CLASS_ID,
CAST(PRC.R_PRODUCT_CLASS AS STRING) AS PRODUCT_CLASS,
CAST(PR.ACTIVE_IND AS STRING) AS ACTIVE_IND,
CAST(PR.CONVERSION_QUANTITY AS STRING) AS CONVERSION_QUANTITY,
PR.EFFECTIVE_DATE,
PR.EXPIRY_DATE,
CAST(PR.LONG_NAME AS STRING) AS LONG_NAME,
CAST(PR.PREFERRED_UOM AS STRING) AS PREFERRED_UOM,
CAST(PR.PROPERTY_SET_ID AS STRING) AS PROPERTY_SET_ID,
CAST(PR.SHORT_NAME AS STRING) AS SHORT_NAME,
CAST(PR.ROW_CHANGED_BY AS STRING) AS ROW_CHANGED_BY,
PR.ROW_CHANGED_DATE, 
CAST(PR.ROW_CREATED_BY AS STRING) AS ROW_CREATED_BY,
PR.ROW_CREATED_DATE,
CAST(PR.ROW_QUALITY AS STRING) AS ROW_QUALITY
FROM  PPDMSrc.PRODUCT AS PR
INNER JOIN PPDMSrc.R_PRODUCT_CLASS AS PRC
ON PRC.R_PRODUCT_CLASS_ID=PR.PRODUCT_CLASS
LEFT JOIN PPDMSrc.PRODUCT AS PR1
  ON PR1.PRODUCT_ID=PR.PARENT_PRODUCT_ID
); 

CREATE VIEW EQUIPMENT_DOWNTIME(
INCIDENT_DATE  timestamp  NOT NULL,
INCIDENT_TYPE_ID  string	(40),
INCIDENT_TYPE   string	(100),
INCIDENT_SUB_TYPE_ID  string	(40),
INCIDENT_SUB_TYPE   string	(100),
DOWNTIME  bigdecimal	(15,4),
DOWNTIME_UOM   string	(20),
ENTITY_ID  string	(40	)	NOT NULL,
ENTITY_NAME  string	(255),
EQUIPMENT_ID  string	(40	)	NOT NULL,
EQUIPMENT_NAME  string	(255),
PRODUCT_ID string	(40	),
PRODUCT_NAME string	(255),
DELIVERY_NETWORK_ID  string(40),
DELIVERY_NETWORK  string(100),
LEVEL6_ID  string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE  string (100),
CALC_DURATION_TYPE_ID  string(40),
CALC_DURATION_TYPE  string(100),
CARRY_FWD_DT_TYPE_ID  string(40),
CARRY_FWD_DT_TYPE  string(100),
START_DATE  timestamp,
END_DATE  timestamp,
CARRY_FWD_DT_IND  string(10),
CARRY_FWD_DURATION bigdecimal(10,4),
SOURCE_NAME	 string	(100),
ROW_QUALITY	 string	(100),
ACTIVE_IND	string	(1),
REMARK string(2000),
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY	string	(100),
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string	(100),
INCIDENT_ID  string(40) NOT NULL,
EQUIP_DT_ID string(40) NOT NULL,
CONSTRAINT PK_INCIDENT PRIMARY KEY (EQUIP_DT_ID))
OPTIONS (UPDATABLE 'FALSE', EQUIPMENT_DOWNTIME.IMPLEMENTED 'TRUE')
AS
( 
SELECT FI.INCIDENT_DATE,CAST(RFT.R_FAILURE_TYPE_ID AS STRING) AS INCIDENT_TYPE_ID,
CAST(RFT.R_FAILURE_TYPE AS STRING) AS INCIDENT_TYPE,
CAST(FIT.FAILURE_INCIDENT_TYPE_ID AS STRING) AS INCIDENT_SUB_TYPE_ID,
CAST(FIT.FAILURE_INCIDENT_TYPE AS STRING) AS INCIDENT_SUB_TYPE,
FI.INCIDENT_DURATION AS DOWNTIME, CAST(U.UOM AS STRING) AS DOWNTIME_UOM,
CAST(P.ENTITY_ID AS STRING) AS ENTITY_ID, CAST(P.ENTITY_NAME AS STRING) AS ENTITY_NAME,
CAST(E.EQUIPMENT_ID AS STRING) AS EQUIPMENT_ID ,CAST(E.EQUIPMENT_NAME AS STRING) AS EQUIPMENT_NAME,
PE.PRODUCT_ID,PRO.PRODUCT_NAME ,
CAST(DN.DELIVERY_NETWORK_ID AS STRING) AS DELIVERY_NETWORK_ID, CAST(DN.DELIVERY_NETWORK AS STRING) AS DELIVERY_NETWORK,
CAST(DN.AREA_ID AS STRING) AS LEVEL6_ID, CAST(A.PREFERRED_NAME AS STRING) AS LEVEL6_NAME,NULL AS LEVEL6_TYPE,
CAST(FICO.CALC_DURATION_TYPE_ID AS STRING) AS CALC_DURATION_TYPE_ID,
CAST(CDT.CALC_DURATION_TYPE AS STRING) AS CALC_DURATION_TYPE,
CAST(FICO.CARRY_FORWARD_DOWNTIME_TYPE_ID AS STRING) AS CARRY_FWD_DT_TYPE_ID ,
CAST(CFD.CARRY_FORWARD_DOWNTIME_TYPE AS STRING) AS CARRY_FWD_DT_TYPE ,FICO.START_DATE AS START_DATE ,
FICO.END_DATE AS END_DATE ,
CAST(FICO.CARRY_FORWARD_DOWNTIME AS STRING) AS CARRY_FWD_DT_IND ,FICO.CARRY_FORWARD_DURATION AS CARRY_FWD_DURATION ,
CAST(RS.SOURCE_NAME AS STRING) AS  SOURCE_NAME,
CAST(PRQ.ROW_QUALITY_NAME AS STRING) AS  ROW_QUALITY,CAST(FI.ACTIVE_IND AS STRING) AS ACTIVE_IND,CAST(FI.REMARK AS STRING) AS REMARK,
 FI.ROW_CHANGED_DATE,CAST(FI.ROW_CHANGED_BY AS STRING) AS ROW_CHANGED_BY,
FI.ROW_CREATED_DATE,CAST(FI.ROW_CREATED_BY AS STRING) AS ROW_CREATED_BY,
CAST(FI.FAILURE_INCIDENT_ID AS STRING) AS INCIDENT_ID, UUID() AS EQUIP_DT_ID
FROM PPDMSrc.FAILURE_INCIDENT FI
INNER JOIN  PPDMSrc.FAILURE_INCIDENT_TYPE  FIT ON FI.FAILURE_INCIDENT_TYPE_ID = FIT.FAILURE_INCIDENT_TYPE_ID
INNER JOIN  PPDMSrc.R_FAILURE_TYPE RFT ON RFT.R_FAILURE_TYPE_ID = FI.FAILURE_TYPE_ID
INNER JOIN PPDMSrc.FAILURE_INCIDENT_COMPONENT FICO ON FICO.FAILURE_INCIDENT_ID = FI.FAILURE_INCIDENT_ID
INNER JOIN PPDMSrc.PDEN_EQUIPMENT PE ON FICO.PDEN_EQUIPMENT_ID = PE.PDEN_EQUIPMENT_ID 
LEFT OUTER JOIN PPDMSrc.PRODUCT PRO ON PE.PRODUCT_ID = PRO.PRODUCT_ID
INNER JOIN PPDMSrc.EQUIPMENT E ON E.EQUIPMENT_ID = PE.EQUIPMENT_ID
LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE U ON FI.INCIDENT_DURATION_UOM = U.UOM_ID
LEFT OUTER JOIN PPDMSrc.R_SOURCE AS  RS ON FI.SOURCE = RS.SOURCE_ID
LEFT OUTER JOIN PPDMSrc.R_PPDM_ROW_QUALITY AS  PRQ ON FI.ROW_QUALITY= PRQ.ROW_QUALITY_ID
LEFT OUTER JOIN PPDMSrc.DELIVERY_NETWORK_VERSION DNV ON DNV.DELIVERY_NETWORK_VERSION_ID = PE.DELIVERY_NETWORK_VERSION_ID
INNER JOIN PPDMSrc.DELIVERY_NETWORK DN ON DN.DELIVERY_NETWORK_ID = DNV.DELIVERY_NETWORK_ID
INNER JOIN PPDMSrc.AREA A ON DN.AREA_ID = A.AREA_ID
INNER JOIN (
SELECT PW.PDEN_ID, W.WELL_ID AS ENTITY_ID, W.WELL_NAME AS ENTITY_NAME 
,'Well' AS ENTITY_TYPE
FROM 
PPDMSrc.PDEN_WELL PW 
INNER JOIN PPDMSrc.WELL W ON PW.WELL_ID = W.WELL_ID
WHERE W.ACTIVE_IND = 'Y' AND PW.ACTIVE_IND = 'Y' 
UNION ALL 
SELECT PF.PDEN_ID, F.FACILITY_ID AS ENTITY_ID, F.FACILITY_NAME AS ENTITY_NAME, 
'Facility' AS ENTITY_TYPE
FROM 
PPDMSrc.PDEN_FACILITY PF
INNER JOIN PPDMSrc.FACILITY F ON PF.FACILITY_ID = F.FACILITY_ID
WHERE F.ACTIVE_IND = 'Y' AND PF.ACTIVE_IND = 'Y' 
)P ON P.PDEN_ID = PE.PDEN_ID
LEFT OUTER JOIN PPDMSrc.R_CALC_DURATION_TYPE CDT ON FICO.CALC_DURATION_TYPE_ID = CDT.CALC_DURATION_TYPE_ID
LEFT OUTER JOIN PPDMSrc.R_CARRY_FORWARD_DOWNTIME_TYPE CFD 
ON FICO.CARRY_FORWARD_DOWNTIME_TYPE_ID = CFD.CARRY_FORWARD_DOWNTIME_TYPE_ID
WHERE FI.ACTIVE_IND = 'Y' AND FICO.ACTIVE_IND = 'Y' AND RFT.R_FAILURE_TYPE = 'DOWN_TIME'
);

CREATE VIEW HSE_INCIDENT
(
HSE_INCIDENT_ID string (40),
HSE_CATALOG_ID string (40),
HSE_CATALOG_NAME string (100),
HSE_CATALOG_TYPE string (100),
HSE_CATALOG_DESC string (2000),
INCIDENT_DATE timestamp,
INCIDENT_DURATION bigdecimal(15,4),
DURATION_UOM string (20),
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
ACTIVE_IND string (1),
SOURCE_NAME string (100),
ROW_CHANGED_DATE timestamp,
ROW_CHANGED_BY  string (100),
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY string (100),
ENTITY_ID string (40),
ENTITY_NAME  string (255) ,
ENTITY_TYPE  string (100),
LEVEL6_ID string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE   string (100),
LEVEL5_ID  string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE  string (100),
LEVEL4_ID  string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE  string (100),
LEVEL3_ID  string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE  string (100),
LEVEL2_ID  string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE  string (100),
LEVEL1_ID  string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE  string (100),
CONSTRAINT PK_HSE_INCIDENT PRIMARY KEY (HSE_INCIDENT_ID))
OPTIONS (UPDATABLE 'FALSE',HSE_INCIDENT.IMPLEMENTED 'TRUE')
AS
(SELECT 
HI.HSE_INCIDENT_ID,HI.HSE_CATALOG_ID,HC.HSE_CATALOG_NAME,HC.HSE_CATALOG_TYPE,
HC.HSE_CATALOG_DESC,HI.INCIDENT_DATE,HI.INCIDENT_DURATION,HI.DURATION_UOM,
HI.EFFECTIVE_DATE,HI.EXPIRY_DATE,HI.ACTIVE_IND,HI.SOURCE_NAME,
HI.ROW_CHANGED_DATE,HI.ROW_CHANGED_BY,HI.ROW_CREATED_DATE,
HI.ROW_CREATED_BY,HI.ENTITY_ID,HI.ENTITY_NAME,HI.ENTITY_TYPE,
HI.LEVEL6_ID AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE ,
NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE ,
NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE ,
NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE ,
NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE ,
NULL AS LEVEL1_ID,NULL AS LEVEL1_NAME,NULL AS LEVEL1_TYPE 
FROM PDMExtSrc.HSE_INCIDENT HI
INNER JOIN PDMExtSrc.HSE_CATALOG HC ON HC.HSE_CATALOG_ID = HI.HSE_CATALOG_ID);

CREATE VIEW PRODUCTION_TARGET
(
PRODUCTION_TARGET_ID string(40) NOT NULL,
EFFECTIVE_DATE timestamp NOT NULL,
EXPIRY_DATE timestamp,
ENTITY_TYPE string(100) ,
ENTITY_ID string(40) NOT NULL,
ENTITY_NAME string(255) ,
TARGET_VALUE bigdecimal(15,4),
TARGET_UOM string(20),
BA_ASSOCIATE_ID string(40) ,
BA_ASSOCIATE string(100) ,
CHOKE_SIZE integer NOT NULL,
CHOKE_UOM string(20),
SOURCE_NAME string(100),
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CHANGED_BY string(100),
ACTIVE_IND string(10),
PROD_PARAM_ID string(40),
PROD_PARAM string(100),
CONSTRAINT PK_PRODUCTION_TARGET PRIMARY KEY (PRODUCTION_TARGET_ID))
OPTIONS (UPDATABLE 'FALSE',PRODUCTION_TARGET.IMPLEMENTED 'TRUE')
AS
(
SELECT PRODUCTION_TARGET_ID,EFFECTIVE_DATE,EXPIRY_DATE,ENTITY_TYPE,ENTITY_ID,ENTITY_NAME,TARGET_VALUE,TARGET_UOM,BA_ASSOCIATE_ID,
BA_ASSOCIATE,CHOKE_SIZE,CHOKE_UOM,SOURCE_NAME,ROW_CREATED_DATE,ROW_CREATED_BY,ROW_CHANGED_DATE,ROW_CHANGED_BY,
ACTIVE_IND,PROD_PARAM_ID,PROD_PARAM
FROM PDMExtSrc.PRODUCTION_TARGET
)
;

CREATE VIEW RISK_MATRIX(
SEVERITY string(40) NOT NULL,
LIKELIHOOD	string(40) NOT NULL,
RISK_RANK	bigdecimal(15,4) NOT NULL,
RISK_RANK_COLOR	string(100),
FREQUENCY	bigdecimal(15,4),
PROBABILITY	bigdecimal(15,4),
SEVERITY_TYPE_ID string(40),
SEVERITY_TYPE string(100),
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY	string(100),
ROW_CHANGED_DATE timestamp,
ROW_CHANGED_BY	string(100),
ACTIVE_IND	string(1),
SOURCE_NAME	string(100),
REMARK	string(2000),
RISK_MATRIX_ID	string(40) NOT NULL,
CONSTRAINT PK_RISK_MATRIX PRIMARY KEY (RISK_MATRIX_ID))
OPTIONS(UPDATABLE 'FALSE',RISK_MATRIX.IMPLEMENTED 'TRUE') 
AS
	SELECT
	PM.Y_VALUE AS SEVERITY ,PM.X_VALUE AS LIKELIHOOD,PM.WEIGHTAGE_FACTOR AS RISK_RANK,null AS RISK_RANK_COLOR,
	PM.PROCESS_DIMENSION_Y AS FREQUENCY,  PM.PROCESS_DIMENSION_X AS PROBABILITY, PM.SEVERITY_TYPE AS SEVERITY_TYPE_ID, P.R_PRIORITY AS SEVERITY_TYPE,
	PM.ROW_CREATED_DATE AS ROW_CREATED_DATE,PM.ROW_CREATED_BY ROW_CREATED_BY,PM.ROW_CHANGED_DATE ROW_CHANGED_DATE,
	PM.ROW_CHANGED_BY ROW_CHANGED_BY,PM.ACTIVE_IND ACTIVE_IND,RS.SOURCE_NAME SOURCE_NAME,PM.REMARK REMARK,PM.PROCESS_MATRIX_ID AS RISK_MATRIX_ID
	FROM PDMExtSrc.PROCESS_MATRIX PM
	LEFT OUTER JOIN PDMExtSrc.R_PRIORITY P ON PM.SEVERITY_TYPE = P.R_PRIORITY_ID
	LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON PM.SOURCE_ID = RS.SOURCE_ID 
	WHERE PM.ENTITY_ID IS NULL
;

CREATE VIEW RISK_RANK_DETAILS(
SEVERITY string(40) NOT NULL,
LIKELIHOOD	string(40) NOT NULL,
RISK_RANK	bigdecimal(15,4) NOT NULL,
RISK_RANK_COLOR	string(100),
SEVERITY_TYPE_ID string(40),
SEVERITY_TYPE string(100),
ENTITY_ID	string(40),
ENTITY_NAME	string(255),
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string(100),
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY	string(100),
ACTIVE_IND	string(1),
SOURCE_NAME	string(100),
REMARK	string(2000),
RISK_RANK_ID	string(40)NOT NULL,
CONSTRAINT PK_RISK_DETAILS PRIMARY KEY (RISK_RANK_ID)
) OPTIONS(UPDATABLE 'FALSE',RISK_RANK_DETAILS.IMPLEMENTED 'TRUE') 
AS
	SELECT
	PM.Y_VALUE SEVERITY,PM.X_VALUE AS LIKELIHOOD,PM.WEIGHTAGE_FACTOR AS RISK_RANK,null AS RISK_RANK_COLOR,
	PM.SEVERITY_TYPE, P.R_PRIORITY,	W.WELL_ID AS ENTITY_ID,
	W.WELL_NAME AS ENTITY_NAME,PM.ROW_CREATED_DATE AS ROW_CREATED_DATE,PM.ROW_CREATED_BY AS ROW_CREATED_BY,
	PM.ROW_CHANGED_DATE AS ROW_CHANGED_DATE,PM.ROW_CHANGED_BY AS ROW_CHANGED_BY,PM.ACTIVE_IND AS ACTIVE_IND,RS.SOURCE_NAME AS SOURCE_NAME,
	PM.REMARK REMARK,UUID() AS RISK_RANK_ID
	FROM PDMExtSrc.PROCESS_MATRIX PM
	LEFT OUTER JOIN PDMExtSrc.R_PRIORITY P ON PM.SEVERITY_TYPE = P.R_PRIORITY_ID
	LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON PM.SOURCE_ID = RS.SOURCE_ID 
	INNER JOIN  PPDMSrc.WELL W ON W.WELL_ID=PM.ENTITY_ID
;

CREATE VIEW RISK_RANK_AUDIT(
	SEVERITY string(40)NOT NULL,
	LIKELIHOOD	string(40)NOT NULL,
	RISK_RANK	bigdecimal(15,4)	NOT NULL,
	RISK_RANK_COLOR	string(100),
	SEVERITY_TYPE_ID string(40),
	SEVERITY_TYPE string(100),
	ENTITY_ID	string(40),
	ENTITY_NAME	string(255),
	ROW_CREATED_DATE	timestamp,
	ROW_CREATED_BY	string(100),
	ROW_CHANGED_DATE	timestamp,
	ROW_CHANGED_BY	string(100),
	ACTIVE_IND	string(1),
	SOURCE_NAME	string(100),
	REMARK	string(2000),
	RISK_RANK_AUDIT_ID	string(40)NOT NULL,
CONSTRAINT PK_RISK_AUDIT PRIMARY KEY (RISK_RANK_AUDIT_ID)
) OPTIONS(UPDATABLE 'FALSE',RISK_RANK_DETAILS.IMPLEMENTED 'TRUE') 
AS
	SELECT
	PMA.Y_VALUE,PMA.X_VALUE,PMA.WEIGHTAGE_FACTOR,null,
	PMA.SEVERITY_TYPE, PMA.SEVERITY_TYPE,
	PMA.ENTITY_ID,W.WELL_NAME,PMA.ROW_CREATED_DATE,PMA.ROW_CREATED_BY,PMA.ROW_CHANGED_DATE,
	PMA.ROW_CHANGED_BY,PMA.ACTIVE_IND,RS.SOURCE_NAME,PMA.REMARK,UUID() AS RISK_RANK_AUDIT_ID
	FROM PDMExtSrc.PROCESS_MATRIX_AUDIT PMA
	LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON PMA.SOURCE_ID = RS.SOURCE_ID 
	INNER JOIN  PPDMSrc.WELL W ON W.WELL_ID = PMA.ENTITY_ID
;

CREATE VIEW ANNULUS_OPR_LIMITS (
ANNULUS_ID	string(40) NOT NULL,
ANNULUS_NAME string(100)	NOT NULL,
LOWER_NORMAL_OPR_LIMIT	bigdecimal(15,4),
UPPER_NORMAL_OPR_LIMIT	bigdecimal(15,4),
LOWER_SAFE_DESIGN_LIMIT	bigdecimal(15,4),
UPPER_SAFE_DESIGN_LIMIT	bigdecimal(15,4),
LOWER_SAFE_OPR_LIMIT	bigdecimal(15,4),
UPPER_SAFE_OPR_LIMIT	bigdecimal(15,4),
BURST_PRESSURE	bigdecimal(15,4),
COLLAPSE_PRESSURE	bigdecimal(15,4),
SHOE_RATING	bigdecimal(15,4),
PRESSURE_UOM	string(20),
ENTITY_ID	string(40) NOT NULL,
ENTITY_NAME	string(255) NOT NULL,
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY string(100),
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY string(100),
ACTIVE_IND	string(1),
SOURCE_NAME string(100),
REMARK	string(2000),
ANNULUS_OPR_LIMIT_ID	string(40) NOT NULL,
	CONSTRAINT pk_OPERATING_LIMIT PRIMARY KEY(ANNULUS_OPR_LIMIT_ID)
) OPTIONS(UPDATABLE 'FALSE',ANNULUS_OPR_LIMITS.IMPLEMENTED 'TRUE') 
AS
	SELECT 
		E.EQUIPMENT_ID AS ANNULUS_ID, 
		E.EQUIPMENT_NAME AS ANNULUS_NAME,
		MIN(CASE EMD.OPR_DETAIL_TYPE WHEN 'Normal Operating Limit' THEN EMD.OPR_DETAIL_MIN_VALUE END) AS LOWER_NORMAL_OPR_LIMIT, 
		MAX(CASE EMD.OPR_DETAIL_TYPE WHEN 'Normal Operating Limit' THEN EMD.OPR_DETAIL_MAX_VALUE END) AS UPPER_NORMAL_OPR_LIMIT,
		MIN(CASE EMD.OPR_DETAIL_TYPE WHEN 'Safe Design Limit' THEN EMD.OPR_DETAIL_MIN_VALUE END) AS LOWER_SAFE_DESIGN_LIMIT,
		MAX(CASE EMD.OPR_DETAIL_TYPE WHEN 'Safe Design Limit' THEN EMD.OPR_DETAIL_MAX_VALUE END) AS UPPER_SAFE_DESIGN_LIMIT,
		MIN(CASE EMD.OPR_DETAIL_TYPE WHEN 'Safe Operating Limit' THEN EMD.OPR_DETAIL_MIN_VALUE END) AS LOWER_SAFE_OPR_LIMIT,
		MAX(CASE EMD.OPR_DETAIL_TYPE WHEN 'Safe Operating Limit' THEN EMD.OPR_DETAIL_MAX_VALUE END) AS UPPER_SAFE_OPR_LIMIT,
		MAX(CASE EMD.OPR_DETAIL_TYPE WHEN 'Burst Pressure' THEN EMD.OPR_DETAIL_VALUE END) AS BURST_PRESSURE,
		MAX(CASE EMD.OPR_DETAIL_TYPE WHEN 'Collapse Pressure' THEN EMD.OPR_DETAIL_VALUE END) AS COLLAPSE_PRESSURE,
		MAX(CASE EMD.OPR_DETAIL_TYPE WHEN 'Shoe Rating' THEN EMD.OPR_DETAIL_VALUE END) AS SHOE_RATING,		
		max(EMD.OPR_DETAIL_VALUE_UOM) AS PRESSURE_UOM, W.WELL_ID,
		W.WELL_NAME,
		MAX(EMD.ROW_CREATED_DATE) AS ROW_CREATED_DATE,		 
		MAX(EMD.ROW_CREATED_BY) AS ROW_CREATED_BY,MAX(EMD.ROW_CHANGED_DATE) AS ROW_CHANGED_DATE,MAX(EMD.ROW_CHANGED_BY) AS ROW_CHANGED_BY,
		MAX(EMD.ACTIVE_IND)ACTIVE_IND,MAX(EMD.SOURCE_NAME)SOURCE_NAME,MAX(EMD.REMARKS)REMARK,UUID() AS ANNULUS_OPR_LIMIT_ID
FROM 
	PPDMSrc.WELL W
	INNER JOIN 
	(SELECT EQUIPMENT_ID, ENTITY_ID FROM PDMExtSrc.WELL_EQUIPMENT 
	UNION ALL 
	SELECT WE.EQUIPMENT_ID, W.WELL_ID AS ENTITY_ID 
	FROM PPDMSrc.PDEN_EQUIPMENT WE
  	INNER JOIN PPDMSrc.PDEN_WELL PW ON WE.PDEN_ID = PW.PDEN_ID
  	INNER JOIN PPDMSrc.WELL W ON PW.WELL_ID = W.WELL_ID WHERE WE.ACTIVE_IND = 'Y' AND PW.ACTIVE_IND = 'Y' AND W.ACTIVE_IND = 'Y') WE ON W.WELL_ID = WE.ENTITY_ID
	INNER JOIN PPDMSrc.EQUIPMENT E ON WE.EQUIPMENT_ID = E.EQUIPMENT_ID
	INNER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE EST ON E.EQUIPMENT_SUB_TYPE = EST.CAT_EQUIP_SUB_TYPE_ID
	LEFT OUTER JOIN (SELECT ODT.OPR_DETAIL_TYPE,EMD.OPR_DETAIL_MIN_VALUE, EMD.OPR_DETAIL_MAX_VALUE, 
	OPR_DETAIL_VALUE, EMD.OPR_DETAIL_VALUE_UOM, EMD.ENTITY_ID, EMD.EQUIPMENT_ID, EMD.ROW_CREATED_DATE,
	EMD.ROW_CREATED_BY, EMD.ROW_CHANGED_DATE, EMD.ROW_CHANGED_BY, EMD.ACTIVE_IND, EMD.SOURCE_NAME, EMD.REMARKS,
	E.EQUIPMENT_NAME
	FROM PDMExtSrc.EQ_METER_OPERATION_DETAIL EMD
		INNER JOIN PDMExtSrc.R_OPR_DETAIL_TYPE AS ODT ON EMD.OPR_DETAIL_TYPE_ID = ODT.OPR_DETAIL_TYPE_ID 
		INNER JOIN PDMExtSrc.R_OPR_TYPE AS OT ON ODT.OPR_TYPE_ID = OT.OPR_TYPE_ID
		INNER JOIN PPDMSrc.EQUIPMENT E ON EMD.EQUIPMENT_ID = E.EQUIPMENT_ID
		WHERE EMD.EXPIRY_DATE IS NULL AND OT.OPR_TYPE = 'Operating Limits')EMD ON ((E.EQUIPMENT_ID = EMD.EQUIPMENT_ID OR E.EQUIPMENT_NAME = EMD.EQUIPMENT_NAME) AND W.WELL_ID = EMD.ENTITY_ID)
	WHERE EST.CAT_EQUIP_SUB_TYPE = 'Annulus Tubing Gauge'
	GROUP BY W.WELL_ID,W.WELL_NAME,E.EQUIPMENT_ID,E.EQUIPMENT_NAME	
;

CREATE VIEW ANNULUS_OPR_PARAMS
(
ANNULUS_ID	string(40)	NOT NULL,
ANNULUS_NAME	string(100)	NOT NULL,
ANNULUS_OPR_LIMIT_ID	string(40),
OPR_DETAIL_TYPE_ID	string(40)	NOT NULL,
OPR_DETAIL_TYPE	string(40)	NOT NULL,
OPR_TYPE_ID	string(40)	NOT NULL,
OPR_TYPE	string(40)	NOT NULL,
PARAM_MIN_VALUE	bigdecimal(15,4),
PARAM_MAX_VALUE	bigdecimal(15,4),
PARAM_VALUE	bigdecimal(15,4),
PARAM_VALUE_UOM	string(20),
EFFECTIVE_DATE	timestamp,
EXPIRY_DATE	timestamp,
ENTITY_ID	string(40)	NOT NULL,
ENTITY_NAME	string(255)	NOT NULL,
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string(100),
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY	string(100),
ACTIVE_IND	string(1),
SOURCE_NAME	string(100),
REMARK	string(2000),
ANNULUS_OPR_PARAM_AUD_ID	string(40)	NOT NULL,
CONSTRAINT pk_ANN_OPR_PRM_AUD PRIMARY KEY(ANNULUS_OPR_PARAM_AUD_ID)
) OPTIONS(UPDATABLE 'FALSE',ANNULUS_OPR_PARAMS_AUDIT.IMPLEMENTED 'TRUE') 
AS
SELECT EMD.EQUIPMENT_ID AS ANNULUS_ID,
CASE WHEN E.EQUIPMENT_NAME IS NULL THEN EMD.EQUIPMENT_NAME ELSE E.EQUIPMENT_NAME END AS ANNULUS_NAME,
EMD.EQ_METER_OPERATION_DETAIL_ID,EMD.OPR_DETAIL_TYPE_ID,
OPR_DETAIL_TYPE,OT.OPR_TYPE_ID,OPR_TYPE,OPR_DETAIL_MIN_VALUE,OPR_DETAIL_MAX_VALUE,
OPR_DETAIL_VALUE,OPR_DETAIL_VALUE_UOM,EMD.EFFECTIVE_DATE
,EMD.EXPIRY_DATE,EMD.ENTITY_ID,
CASE WHEN W.WELL_NAME IS NULL THEN EMD.ENTITY_NAME ELSE W.WELL_NAME END AS ENTITY_NAME,EMD.ROW_CREATED_DATE,
EMD.ROW_CREATED_BY,EMD.ROW_CHANGED_DATE,
EMD.ROW_CHANGED_BY,EMD.ACTIVE_IND,EMD.SOURCE_NAME,EMD.REMARKS,UUID() AS ANNULUS_OPR_PARAM_AUD_ID
FROM 
		PDMExtSrc.EQ_METER_OPERATION_DETAIL EMD
		LEFT OUTER JOIN PDMExtSrc.R_OPR_DETAIL_TYPE AS ODT ON EMD.OPR_DETAIL_TYPE_ID = ODT.OPR_DETAIL_TYPE_ID 
		LEFT OUTER JOIN PDMExtSrc.R_OPR_TYPE AS OT ON ODT.OPR_TYPE_ID = OT.OPR_TYPE_ID
		LEFT OUTER JOIN PPDMSrc.EQUIPMENT E ON EMD.EQUIPMENT_ID = E.EQUIPMENT_ID
		LEFT OUTER JOIN PPDMSrc.WELL W ON EMD.ENTITY_ID = W.WELL_ID		
		WHERE EMD.EXPIRY_DATE IS NULL AND OT.OPR_TYPE = 'Operating Parameter Limits'
;

CREATE VIEW ANNULUS_OPR_LIMITS_AUDIT
(
	ANNULUS_ID	string(40)	NOT NULL,
	ANNULUS_NAME	string(100)	NOT NULL,
	LOWER_NORMAL_OPR_LIMIT	bigdecimal(15,4),
	UPPER_NORMAL_OPR_LIMIT	bigdecimal(15,4),
	LOWER_SAFE_DESIGN_LIMIT	bigdecimal(15,4),
	UPPER_SAFE_DESIGN_LIMIT	bigdecimal(15,4),
	LOWER_SAFE_OPR_LIMIT	bigdecimal(15,4),
	UPPER_SAFE_OPR_LIMIT	bigdecimal(15,4),
	BURST_PRESSURE	bigdecimal(15,4),
	COLLAPSE_PRESSURE	bigdecimal(15,4),
	SHOE_RATING	bigdecimal(15,4),
	PRESSURE_UOM	string(20),
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp,
	ROW_CREATED_BY	string(100),
	ROW_CHANGED_DATE	timestamp,
	ROW_CHANGED_BY	string(100),
	ACTIVE_IND	string(1),
	SOURCE_NAME	string(100),
	REMARK	string(2000),
	ANNULUS_OPR_LIMIT_AUD_ID	string(40)	NOT NULL,
CONSTRAINT pk_ANN_OPR_LMTS_AUD PRIMARY KEY(ANNULUS_OPR_LIMIT_AUD_ID)
) OPTIONS(UPDATABLE 'FALSE',ANNULUS_OPR_LIMITS_AUDIT.IMPLEMENTED 'TRUE') 
AS
SELECT OLA.EQUIPMENT_ID AS ANNULUS_ID,E.EQUIPMENT_NAME AS ANNULUS_NAME,OLA.LNOL,OLA.UNOL,OLA.LSDL,OLA.USDL,OLA.LSOL,OLA.USOL,OLA.BURST_PRESSURE,OLA.COLLAPSE_PRESSURE,OLA.SHOE_RATING,OLA.PRESSURE_UOM,
OLA.ENTITY_ID,W.WELL_NAME,OLA.ROW_CREATED_DATE,OLA.ROW_CREATED_BY,OLA.ROW_CHANGED_DATE,OLA.ROW_CHANGED_BY,OLA.ACTIVE_IND,OLA.SOURCE_NAME,OLA.REMARK,UUID() AS ANNULUS_OPR_LIMIT_AUD_ID
FROM
	PDMExtSrc.OPERATING_LIMITS_AUDIT OLA
	LEFT OUTER JOIN PPDMSrc.WELL W ON OLA.ENTITY_ID = W.WELL_ID
LEFT OUTER JOIN PPDMSrc.EQUIPMENT E ON OLA.EQUIPMENT_ID = E.EQUIPMENT_ID
;

CREATE VIEW ANNULUS_OPR_PARAMS_AUDIT
(
ANNULUS_ID	string(40)	NOT NULL,
ANNULUS_NAME	string(100)	NOT NULL,
ANNULUS_OPR_LIMIT_ID	string(40),
OPR_DETAIL_TYPE_ID	string(40)	NOT NULL,
OPR_DETAIL_TYPE	string(40)	NOT NULL,
OPR_TYPE_ID	string(40)	NOT NULL,
OPR_TYPE	string(40)	NOT NULL,
PARAM_MIN_VALUE	bigdecimal(15,4),
PARAM_MAX_VALUE	bigdecimal(15,4),
PARAM_VALUE	bigdecimal(15,4),
PARAM_VALUE_UOM	string(20),
EFFECTIVE_DATE	timestamp,
EXPIRY_DATE	timestamp,
ENTITY_ID	string(40)	NOT NULL,
ENTITY_NAME	string(255)	NOT NULL,
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string(100),
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY	string(100),
ACTIVE_IND	string(1),
SOURCE_NAME	string(100),
REMARK	string(2000),
ANNULUS_OPR_PARAM_AUD_ID	string(40)	NOT NULL,
CONSTRAINT pk_ANN_OPR_PRM_AUD PRIMARY KEY(ANNULUS_OPR_PARAM_AUD_ID)
) OPTIONS(UPDATABLE 'FALSE',ANNULUS_OPR_PARAMS_AUDIT.IMPLEMENTED 'TRUE') 
AS
SELECT OPA.EQUIPMENT_ID AS ANNULUS_ID,E.EQUIPMENT_NAME AS ANNULUS_NAME,null,OPA.OPR_DETAIL_TYPE_ID,ODT.OPR_DETAIL_TYPE,ODT.OPR_TYPE_ID,
OT.OPR_TYPE,PARAM_MIN_VALUE,PARAM_MAX_VALUE,PARAM_VALUE,Q.UOM,OPA.EFFECTIVE_DATE
,OPA.EXPIRY_DATE,OPA.ENTITY_ID,W.WELL_NAME,OPA.ROW_CREATED_DATE,
OPA.ROW_CREATED_BY,OPA.ROW_CHANGED_DATE,OPA.ROW_CHANGED_BY,OPA.ACTIVE_IND,OPA.SOURCE_NAME,OPA.REMARK,UUID() AS ANNULUS_OPR_PARAM_AUD_ID
FROM PDMExtSrc.OPERATING_PARAM_AUDIT OPA
LEFT OUTER JOIN PDMExtSrc.R_OPR_DETAIL_TYPE ODT ON OPA.OPR_DETAIL_TYPE_ID = ODT.OPR_DETAIL_TYPE_ID
LEFT OUTER JOIN PDMExtSrc.R_OPR_TYPE OT ON ODT.OPR_TYPE_ID = OT.OPR_TYPE_ID
LEFT OUTER JOIN PPDMSrc.WELL W ON OPA.ENTITY_ID = W.WELL_ID
LEFT OUTER JOIN PPDMSrc.EQUIPMENT E ON OPA.EQUIPMENT_ID = E.EQUIPMENT_ID
LEFT OUTER JOIN (SELECT Q.QUANTITY_TYPE_ID, Q.QUANTITY_TYPE, U.UOM, U.UOM_ID,
	ROW_NUMBER() OVER (PARTITION BY Q.QUANTITY_TYPE ORDER BY U.ROW_CREATED_DATE DESC, Q.ROW_CREATED_DATE DESC) ROW_NUM
	FROM 
	PPDMSrc.PPDM_UNIT_OF_MEASURE U
	INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
	INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM M ON U.UOM_SYSTEM_ID = M.UOM_SYSTEM_ID
	WHERE M.UOM_SYSTEM = 'English')Q ON (ODT.QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID AND Q.ROW_NUM = 1)
;

CREATE VIEW WELL_OPR_LIMIT_DOCUMENT
(
	WDOL_FULL_PATH	string(2000)	,
	WDOL_PATH	string(2000)	,
	WDOL_TITLE	string(200)	,
	WDOL_CATEGORY	string(100)	,
	WDOL_CATEGORY_ID	string(40)	,
	WDOL_SUB_CATEGORY	string(100)	,
	WDOL_SUB_CATEGORY_ID	string(40)	,
	WDOL_TYPE	string(50)	,
	WDOL_FIG_REFERENCE	string(100)	,
	WDOL_PUBLISHER	string(255)	,
	WDOL_ISSUE	string(50)	,
	WDOL_LANGUAGE	string(100)	,
	ANNULUS_OPR_LIMIT_ID	string(40)	,
	ANNULUS_ID	string(40)	,
	ANNULUS_NAME	string(100)	,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	WELL_OPR_LIMIT_DOC_ID	string(40)	NOT NULL,
CONSTRAINT pk_WDOL PRIMARY KEY(WELL_OPR_LIMIT_DOC_ID)
) OPTIONS(UPDATABLE 'FALSE',WELL_OPR_LIMIT_DOCUMENT.IMPLEMENTED 'TRUE') 
AS
SELECT 
 SD.DOCUMENT_FULL_PATH AS WDOL_FULL_PATH, SD.DOCUMENT_FULL_PATH AS WDOL_PATH,SD.DOCUMENT_TITLE AS WDOL_TITLE,SD.DOC_CATEGORY AS WDOL_CATEGORY,SD.DOC_CATEGORY_ID AS WDOL_CATEGORY_ID,SD.DOC_SUB_CATEGORY AS WDOL_SUB_CATEGORY,
 SD.DOC_SUB_CATEGORY_ID AS WDOL_SUB_CATEGORY_ID,SD.DOCUMENT_TYPE AS WDOL_TYPE,SD.FIGURE_REFERENCE WDOL_FIG_REFERENCE,SD.PUBLISHER AS WDOL_PUBLISHER,SD.ISSUE WDOL_ISSUE,SD.DOC_LANGUAGE AS WDOL_LANGUAGE,NULL AS ANNULUS_OPR_LIMIT_ID, NULL AS ANNULUS_ID,
 NULL AS ANNULUS_NAME,W.WELL_ID AS ENTITY_ID,W.WELL_NAME AS ENTITY_NAME, SD.ROW_CREATED_DATE, SD.ROW_CREATED_BY,SD.ROW_CHANGED_DATE, SD.ROW_CHANGED_BY,SD.ACTIVE_IND,  SD.SOURCE_NAME AS SOURCE,SD.REMARKS
,UUID() AS WELL_OPR_LIMIT_DOC_ID
 FROM PDMExtSrc.SOURCE_DOCUMENT SD
 INNER JOIN PPDMSrc.WELL W ON W.WELL_ID=SD.OBJECT_ID
;

CREATE VIEW ANOMALY_DETAILS
(
	ANOMALY_TYPE	string(100)	NOT NULL,
	ANOMALY_TYPE_ID	string(40)	NOT NULL,
	COORDINATOR	string(100),
	OPEN_DATE	timestamp		NOT NULL,
	CLOSE_DATE	timestamp,
	ANOMALY_DESC	string(2000)	NOT NULL,
	ANOMALY_PLAN	string(2000),
	OPEN_DAYS	integer,
	ANOMALY_ID	string(40)	NOT NULL,
	OBSERVED_DATE	timestamp		NOT NULL,
	ANOMALY_CONCLUSION	string(2000),
	ANOMALY_CONCLUSION_ID	string(40),
	ANOMALY_EVAL_PRIORITY	string(100),
	ANOMALY_EVAL_PRIOR_ID	string(40),
	ROW_CREATED_DATE	timestamp,
	ROW_CREATED_BY	string(100),
	ROW_CHANGED_DATE	timestamp,
	ROW_CHANGED_BY	string(100),
	ACTIVE_IND	string(1),
	SOURCE_NAME	string(100),
	REMARK	string(2000),
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255),
	LEVEL1_ID	string(40),
	LEVEL1_NAME	string(255),
	LEVEL1_TYPE	string(100),
	LEVEL2_ID	string(40),
	LEVEL2_NAME	string(255),
	LEVEL2_TYPE	string(100),
	LEVEL3_ID	string(40),
	LEVEL3_NAME	string(255),
	LEVEL3_TYPE	string(100),
	LEVEL4_ID	string(40),
	LEVEL4_NAME	string(255),
	LEVEL4_TYPE	string(100),
	LEVEL5_ID	string(40),
	LEVEL5_NAME	string(255),
	LEVEL5_TYPE	string(100),
	LEVEL6_ID	string(40),
	LEVEL6_NAME	string(255) NOT NULL,
	LEVEL6_TYPE	string(100),
	ANOMALY_DETAILS_ID	string(40)	NOT NULL,
CONSTRAINT pk_ANOMALY_DETAILS PRIMARY KEY(ANOMALY_DETAILS_ID)
) OPTIONS(UPDATABLE 'FALSE',ANOMALY_DETAILS_ID.IMPLEMENTED 'TRUE') 
AS
SELECT RAT.R_ANOMALY_TYPE,A.ANOMALY_TYPE_ID,A.COORDINATED_BY,A.OPEN_DATE,A.CLOSE_DATE,A.ANOMALY_DESC,A.ANOMALY_PLAN,
CAST(CASE WHEN A.CLOSE_DATE IS NULL THEN TIMESTAMPDIFF(SQL_TSI_DAY, CAST(A.OPEN_DATE AS DATE), NOW()) ELSE TIMESTAMPDIFF(SQL_TSI_DAY, CAST(A.OPEN_DATE AS DATE), CAST(A.CLOSE_DATE AS DATE)) END AS integer) AS OPEN_DAYS,
A.ANOMALY_ID,A.OBSERVED_DATE,RAC.R_ANOMALY_CONCLUSION,A.ANOMALY_CONCLUSION_ID,RP.R_PRIORITY AS ANOMALY_EVAL_PRIORITY,
A.ANOMALY_EVAL_PRIOR_ID,A.ROW_CREATED_DATE,A.ROW_CREATED_BY,A.ROW_CHANGED_DATE,A.ROW_CHANGED_BY,A.ACTIVE_IND,A.SOURCE_NAME,A.REMARK,A.ENTITY_ID,W.WELL_NAME, NULL AS LEVEL1_ID,NULL AS LEVEL1_NAME,NULL AS LEVEL1_TYPE,
NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE, NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE, NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE, NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,
 WA.AREA_ID AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE,UUID() AS ANOMALY_DETAILS_ID
FROM PDMExtSrc.ANOMALY A
INNER JOIN PDMExtSrc.R_ANOMALY_TYPE RAT ON RAT.R_ANOMALY_TYPE_ID=A.ANOMALY_TYPE_ID
LEFT OUTER JOIN PDMExtSrc.R_ANOMALY_CONCLUSION RAC ON RAC.R_ANOMALY_CONC_ID=A.ANOMALY_CONCLUSION_ID
LEFT OUTER JOIN PDMExtSrc.R_PRIORITY RP ON RP.R_PRIORITY_ID= A.ANOMALY_EVAL_PRIOR_ID
INNER JOIN PPDMSrc.WELL W ON A.ENTITY_ID = W.WELL_ID
INNER JOIN PPDMSrc.WELL_AREA WA ON W.WELL_ID = WA.WELL_ID AND WA.ACTIVE_IND = 'Y'
; 

CREATE VIEW R_ANOMALY_TYPE
(
 ANOMALY_TYPE string(100) NOT NULL,
 REMARK	string(2000),
 SOURCE_NAME string(100),
 ANOMALY_TYPE_ID string(40) NOT NULL,
 ACTIVE_IND string(1),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp	,
 CONSTRAINT PK_ANOMALY_TYPE PRIMARY KEY (ANOMALY_TYPE_ID))
OPTIONS (UPDATABLE 'FALSE', R_ANOMALY_TYPE.IMPLEMENTED 'TRUE')
AS
(
	SELECT R_ANOMALY_TYPE, REMARK, SOURCE_NAME, R_ANOMALY_TYPE_ID, ACTIVE_IND, ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_BY,
	ROW_CREATED_DATE FROM PDMExtSrc.R_ANOMALY_TYPE
);

CREATE VIEW R_ANOMALY_CONCLUSION
(
 ANOMALY_CONCLUSION string(100) NOT NULL,
 REMARK	string(2000),
 SOURCE_NAME string(100),
 ANOMALY_CONCLUSION_ID string(40) NOT NULL,
 ACTIVE_IND string(1),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp	,
 CONSTRAINT PK_ANOMALY_CONCLUSION PRIMARY KEY (ANOMALY_CONCLUSION_ID))
OPTIONS (UPDATABLE 'FALSE', R_ANOMALY_CONCLUSION.IMPLEMENTED 'TRUE')
AS
(
	SELECT R_ANOMALY_CONCLUSION, REMARK, SOURCE_NAME, R_ANOMALY_CONC_ID, ACTIVE_IND, ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_BY,
	ROW_CREATED_DATE FROM PDMExtSrc.R_ANOMALY_CONCLUSION
);

CREATE VIEW R_ACTION_GROUP
(
 ACTION_GROUP string(100) NOT NULL,
 REMARK	string(2000),
 SOURCE_NAME string(100),
 ACTION_GROUP_ID string(40) NOT NULL,
 ACTIVE_IND string(1),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp	,
 CONSTRAINT PK_ACTION_GROUP PRIMARY KEY (ACTION_GROUP_ID))
OPTIONS (UPDATABLE 'FALSE', R_ACTION_GROUP.IMPLEMENTED 'TRUE')
AS
(
	SELECT R_ACTION_GROUP, REMARK, SOURCE_NAME, R_ACTION_GROUP_ID, ACTIVE_IND, ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_BY,
	ROW_CREATED_DATE FROM PDMExtSrc.R_ACTION_GROUP
);

CREATE VIEW R_SEVERITY_OR_PRIORITY
(
 SEVERITY_OR_PRIORITY string(100) NOT NULL,
 SEV_OR_PRIOR_NUM_VALUE INTEGER,
 SEV_OR_PRIOR_TYPE string (100),
 REMARK	string(2000),
 SOURCE_NAME string(100),
 SEV_OR_PRIOR_ID string(40) NOT NULL,
 ACTIVE_IND string(1),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp	,
 CONSTRAINT PK_SEV_OR_PRIOR PRIMARY KEY (SEV_OR_PRIOR_ID))
OPTIONS (UPDATABLE 'FALSE', R_SEVERITY_OR_PRIORITY.IMPLEMENTED 'TRUE')
AS
(
	SELECT R_PRIORITY, cast(R_PRIORITY_NUM_VALUE AS INTEGER), NULL, REMARK, SOURCE_NAME, R_PRIORITY_ID, ACTIVE_IND, ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_BY,
	ROW_CREATED_DATE FROM PDMExtSrc.R_PRIORITY
);

CREATE VIEW PLANNED_ACTIONS
(
	PA_DESC	string(2000)	NOT NULL,
	PA_GROUP	string(100)	,
	PA_GROUP_ID	string(40)	,
	PA_PRIORITY	string(50)	NOT NULL,
	PA_PRIORITY_ID	string(40)	NOT NULL,
	PA_PRIORITY_NUM integer,
	PA_STEP_NUM	integer		,
	PA_STEP_TYPE	string(100)	,
	PA_STEP_TYPE_ID	string(40)	,
	PA_STEP_NAME	string(100)	,
	PA_STEP_RULE	string(100)	,
	PA_PLAN	string(2000)	,
	PA_PLAN_ID	string(40)	,
	OBJECT_REF_ID	string(40)	,
	OBJECT_REF_NAME	string(100)	,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	PLANNED_ACTIONS_ID	string(40)	NOT NULL,
CONSTRAINT pk_PLANNED_ACTIONS PRIMARY KEY(PLANNED_ACTIONS_ID)
) OPTIONS(UPDATABLE 'FALSE',PLANNED_ACTIONS.IMPLEMENTED 'TRUE') 
AS
SELECT  PP.REMARKS AS PA_DESC,RAG.R_ACTION_GROUP AS PA_GROUP,PP.R_ACTION_GROUP_ID AS PA_GROUP_ID,RP.R_PRIORITY AS PA_PRIORITY,
PP.R_PRIORITY_ID AS PA_PRIORITY_ID, RP.R_PRIORITY_NUM_VALUE,
1,NULL AS PA_STEP_TYPE,NULL AS PA_STEP_TYPE_ID,NULL AS PA_STEP_NAME,NULL AS PA_STEP_RULE,PP.PROJECT_PLAN AS PA_PLAN,PP.PROJECT_PLAN_ID AS PA_PLAN_ID,
NULL AS OBJECT_REF_ID,NULL AS OBJECT_REF_NAME,PP.ENTITY_ID,W.WELL_NAME,
PP.ROW_CREATED_DATE,PP.ROW_CREATED_BY,PP.ROW_CHANGED_DATE,PP.ROW_CHANGED_BY,PP.ACTIVE_IND,PP.SOURCE_NAME,PP.REMARKS,UUID() AS PLANNED_ACTIONS_ID
 FROM PDMExtSrc.PROJECT_PLAN PP
INNER JOIN PDMExtSrc.R_ACTION_GROUP RAG ON RAG.R_ACTION_GROUP_ID = PP.R_ACTION_GROUP_ID
INNER JOIN PDMExtSrc.R_PRIORITY RP ON RP.R_PRIORITY_ID = PP.R_PRIORITY_ID
INNER JOIN PPDMSrc.WELL W ON PP.ENTITY_ID = W.WELL_ID
;

CREATE VIEW R_OPR_DETAIL_TYPE
(
 OPR_DETAIL_TYPE string(100) NOT NULL,
 OPR_TYPE_ID string(40),
 OPR_TYPE string (100),
 REMARK	string(2000),
 SOURCE_NAME string(100),
 OPR_DETAIL_TYPE_ID string(40) NOT NULL,
 ACTIVE_IND string(1),
 ROW_CHANGED_BY	string (100),
 ROW_CHANGED_DATE	timestamp	, 
 ROW_CREATED_BY	string (100),
 ROW_CREATED_DATE	timestamp	,
 QUANTITY_TYPE string(100),
 OPR_DETAIL_TYPE_UOM string(20),
 CONSTRAINT PK_OPR_DETAIL_TYPE_ID PRIMARY KEY (OPR_DETAIL_TYPE_ID))
OPTIONS (UPDATABLE 'FALSE', R_OPR_DETAIL_TYPE.IMPLEMENTED 'TRUE')
AS
(
	SELECT ODT.OPR_DETAIL_TYPE, ODT.OPR_TYPE_ID, OT.OPR_TYPE, ODT.REMARKS, ODT.SOURCE_NAME, ODT.OPR_DETAIL_TYPE_ID, 
	ODT.ACTIVE_IND, ODT.ROW_CHANGED_BY, ODT.ROW_CHANGED_DATE, ODT.ROW_CREATED_BY,
	ODT.ROW_CREATED_DATE, Q.QUANTITY_TYPE, U.UOM
	FROM PDMExtSrc.R_OPR_DETAIL_TYPE ODT
	INNER JOIN PDMExtSrc.R_OPR_TYPE OT ON ODT.OPR_TYPE_ID = OT.OPR_TYPE_ID
	LEFT OUTER JOIN PPDMSrc.PPDM_QUANTITY Q ON ODT.QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
	LEFT OUTER JOIN (SELECT U.UOM_QUANTITY_TYPE_ID, U.UOM FROM
	PPDMSrc.PPDM_UNIT_OF_MEASURE U
	INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
	WHERE S.UOM_SYSTEM = 'English')U ON Q.QUANTITY_TYPE_ID = U.UOM_QUANTITY_TYPE_ID
);

CREATE VIEW WBE_IMPAIR_FAILURE
(
	IF_TYPE	string(100)	NOT NULL,
	IF_TYPE_ID	string(40)	NOT NULL,
	IF_DESC	string(2000)	NOT NULL,
	IF_CAUSE	string(2000)	,
	IF_CONSEQUENCE	string(100)	,
	IF_CONSEQUENCE_ID	string(40)	,
	IF_REMARK	string(2000)	,
	IF_EQUIP_SUB_TYPE	string(100)	NOT NULL,
	IF_EQUIP_SUB_TYPE_ID	string(40)	NOT NULL,
	IF_EQUIP_TYPE	string(100),
	IF_EQUIP_TYPE_ID	string(40),	
	IF_EQUIP_DESC	string(2000)	,
	IF_EQUIP_INSTALL_DATE	timestamp		,
	IF_START_DATE	timestamp		,
	IF_END_DATE	timestamp		,
	IF_CLOSE_IND	string(1)	,
	IF_RCFA_REQ_IND	string(1)	,
	IF_RCFA_REPORT_DATE	timestamp		,
	IF_MOC_IND	string(1)	,
	IF_RCFA_LOCATION	string(2000)	,
	IF_MOC_DATE	timestamp		,
	IF_MOC_REMARK	string(2000)	,
	IF_LINK_MOC_RECORD	string(2000)	,
	IF_MOC_EXPIRY_DATE	timestamp		,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	WBE_IF_ID	string(40)	NOT NULL,
	LEVEL1_ID	string(40),
	LEVEL1_NAME	string(255),
	LEVEL1_TYPE	string(100),
	LEVEL2_ID	string(40),
	LEVEL2_NAME	string(255),
	LEVEL2_TYPE	string(100),
	LEVEL3_ID	string(40),
	LEVEL3_NAME	string(255),
	LEVEL3_TYPE	string(100),
	LEVEL4_ID	string(40),
	LEVEL4_NAME	string(255),
	LEVEL4_TYPE	string(100),
	LEVEL5_ID	string(40),
	LEVEL5_NAME	string(255),
	LEVEL5_TYPE	string(100),
	LEVEL6_ID	string(40),
	LEVEL6_NAME	string(255) NOT NULL,
	LEVEL6_TYPE string(100),
CONSTRAINT PK_WBE_IMPAIR_FAILURE PRIMARY KEY (WBE_IF_ID))
OPTIONS (UPDATABLE 'FALSE', WBE_IMPAIR_FAILURE.IMPLEMENTED 'TRUE')
AS
SELECT RIT.R_IF_TYPE,WFI.FAILURE_IMPAIR_TYPE_ID,WFI.IF_DESCRIPTION,WFI.IF_CAUSE,RIC.R_IF_CONSEQUENCE,WFI.IF_CONSEQ_ID,WFI.IF_REMARKS,EST.CAT_EQUIP_SUB_TYPE,
WFI.EQUIP_SUB_TYPE_ID, ET.CAT_EQUIP_TYPE, EST.CAT_EQUIP_TYPE,WFI.EQUIP_DESCRIPTION,WFI.WBE_INSTALL_DATE,
WFI.IF_START_DATE,WFI.IF_END_DATE,
CASE WHEN WFI.IF_END_DATE IS NOT NULL THEN 'Y' ELSE 'N' END AS IF_CLOSE_IND,WFI.RCFA_IND,WFI.RCFA_REPORT_DATE,WFI.MOC_IND,WFI.RCFA_LOCATION,WFI.MOC_DATE,WFI.MOC_REMARKS,
WFI.MOC_LOCATION AS IF_LINK_MOC_RECORD,WFI.MOC_END_DATE,WFI.ENTITY_ID,W.WELL_NAME,WFI.ROW_CREATED_DATE,WFI.ROW_CREATED_BY,WFI.ROW_CHANGED_DATE,WFI.ROW_CHANGED_BY
,WFI.ACTIVE_IND,WFI.SOURCE_NAME,WFI.WI_FAILURE_IMPAIR_ID AS WBE_IF_ID,
NULL AS LEVEL1_ID,NULL AS LEVEL1_NAME,NULL AS LEVEL1_TYPE,
NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE, NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE, NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE, NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,
 WA.AREA_ID AS LEVEL6_ID,NULL AS LEVEL6_NAME,NULL AS LEVEL6_TYPE
FROM PDMExtSrc.WI_FAILURE_IMPAIRMENT WFI
INNER JOIN PDMExtSrc.R_IF_TYPE RIT ON RIT.R_IF_TYPE_ID = WFI.FAILURE_IMPAIR_TYPE_ID
LEFT OUTER JOIN PDMExtSrc.R_IF_CONSEQUENCE RIC ON RIC.R_IF_CONSEQUENCE_ID = WFI.IF_CONSEQ_ID
LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE EST ON WFI.EQUIP_SUB_TYPE_ID = EST.CAT_EQUIP_SUB_TYPE_ID
LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_TYPE ET ON EST.CAT_EQUIP_TYPE = ET.CAT_EQUIP_TYPE_ID
INNER JOIN PPDMSrc.WELL W ON WFI.ENTITY_ID = W.WELL_ID
INNER JOIN PPDMSrc.WELL_AREA WA ON W.WELL_ID = WA.WELL_ID
;

CREATE VIEW R_IF_TYPE
(
	R_IF_TYPE_ID string(40) NOT NULL,
	R_IF_TYPE string(100) NOT NULL,
	ACTIVE_IND string(1) ,
	REMARK string(2000) ,
	EFFECTIVE_DATE timestamp ,
	EXPIRY_DATE timestamp ,
	SOURCE_NAME string(100) ,
	ROW_CREATED_DATE timestamp ,
	ROW_CREATED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CHANGED_BY string(100) ,
CONSTRAINT PK_R_IF_TYPE PRIMARY KEY (R_IF_TYPE_ID))
OPTIONS (UPDATABLE 'FALSE', R_IF_TYPE.IMPLEMENTED 'TRUE')
AS
SELECT R_IF_TYPE_ID,R_IF_TYPE,ACTIVE_IND,REMARK,EFFECTIVE_DATE,EXPIRY_DATE,SOURCE_NAME,ROW_CREATED_DATE,ROW_CREATED_BY,ROW_CHANGED_DATE,ROW_CHANGED_BY
FROM PDMExtSrc.R_IF_TYPE;

CREATE VIEW R_IF_CONSEQUENCE
(
	R_IF_CONSEQUENCE_ID string(40) NOT NULL,
	R_IF_CONSEQUENCE string(100) NOT NULL,
	ACTIVE_IND string(1) ,
	REMARK string(2000) ,
	EFFECTIVE_DATE timestamp ,
	EXPIRY_DATE timestamp ,
	SOURCE_NAME string(100) ,
	ROW_CREATED_DATE timestamp ,
	ROW_CREATED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CHANGED_BY string(100) ,
CONSTRAINT PK_R_IF_CONSEQUENCE PRIMARY KEY (R_IF_CONSEQUENCE_ID))
OPTIONS (UPDATABLE 'FALSE', R_IF_CONSEQUENCE.IMPLEMENTED 'TRUE')
AS
SELECT max(R_IF_CONSEQUENCE_ID),R_IF_CONSEQUENCE,max(ACTIVE_IND),max(REMARK),max(EFFECTIVE_DATE),max(EXPIRY_DATE),max(SOURCE_NAME),max(ROW_CREATED_DATE),max(ROW_CREATED_BY),max(ROW_CHANGED_DATE),max(ROW_CHANGED_BY)
	  FROM PDMExtSrc.R_IF_CONSEQUENCE
	  group by R_IF_CONSEQUENCE ;

CREATE VIEW R_EQUIP_SUB_TYPE
(
	EQUIP_SUB_TYPE_ID string(40) NOT NULL,
	EQUIP_SUB_TYPE string(100) NOT NULL,
	EQUIP_TYPE_ID string(40),
	EQUIP_TYPE string(100),	
	ACTIVE_IND string(1) ,
	REMARK string(2000) ,
	EFFECTIVE_DATE timestamp ,
	EXPIRY_DATE timestamp ,
	SOURCE_NAME string(100) ,
	ROW_CREATED_DATE timestamp ,
	ROW_CREATED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CHANGED_BY string(100) ,
CONSTRAINT PK_EQUIP_SUB_TYPE PRIMARY KEY (EQUIP_SUB_TYPE_ID))
OPTIONS (UPDATABLE 'FALSE', EQUIP_SUB_TYPE.IMPLEMENTED 'TRUE')
AS
SELECT CAT_EQUIP_SUB_TYPE_ID,CAT_EQUIP_SUB_TYPE,ET.CAT_EQUIP_TYPE_ID, ET.CAT_EQUIP_TYPE, EST.ACTIVE_IND,
EST.REMARK,EST.EFFECTIVE_DATE,EST.EXPIRY_DATE,RS.SOURCE_NAME,
EST.ROW_CREATED_DATE,EST.ROW_CREATED_BY,EST.ROW_CHANGED_DATE,EST.ROW_CHANGED_BY
FROM PPDMSrc.R_CAT_EQUIP_SUB_TYPE EST
LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_TYPE ET ON EST.CAT_EQUIP_TYPE = ET.CAT_EQUIP_TYPE_ID
LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON EST.SOURCE = RS.SOURCE_ID
;

CREATE VIEW WELL_AUDIT
(
	AUDIT_DATE	timestamp		NOT NULL,
	AUDIT_ID	string(40)	NOT NULL,
	AUDIT_REPORT_FILE	string(2000)	,
	CLIENT_REPRESENTATIVE	string(100)	,
	CLIENT_REP_ID	string(40)	,
	AUDITOR_NAME	string(100)	,
	AUDITOR_ID	string(40)	,
	FIELD_NAME	string(100)	,
	PRODUCTION_STATUS	string(100)	,
	OPERATING_STATUS	string(100)	,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	LEVEL1_ID	string(40)	,
	LEVEL1_NAME	string(255)	,
	LEVEL1_TYPE	string(100)	,
	LEVEL2_ID	string(40)	,
	LEVEL2_NAME	string(255)	,
	LEVEL2_TYPE	string(100)	,
	LEVEL3_ID	string(40)	,
	LEVEL3_NAME	string(255)	,
	LEVEL3_TYPE	string(100)	,
	LEVEL4_ID	string(40)	,
	LEVEL4_NAME	string(255)	,
	LEVEL4_TYPE	string(100)	,
	LEVEL5_ID	string(40)	,
	LEVEL5_NAME	string(255)	,
	LEVEL5_TYPE	string(100)	,
	LEVEL6_ID	string(40)	,
	LEVEL6_NAME	string(255)	NOT NULL,
	LEVEL6_TYPE	string(100)	,
	WELL_AUDIT_ID	string(40)	NOT NULL,
	AUDIT_STATUS string(10),
	SUBMITTED_BY string(100),
	SUBMITTED_DATE TIMESTAMP,
	APPR_REJ_BY string(100),
	APPR_REJ_DATE timestamp,
	REJECT_REASON string(2000)	,
	AUDIT_DATE_ID string(40),
	WS_DOC_ID string(40),
	DOC_TITLE string(100),
	WH_PHOTO_CATEGORY string(100),
CONSTRAINT PK_WELL_AUDIT PRIMARY KEY (WELL_AUDIT_ID))
OPTIONS (UPDATABLE 'FALSE', WELL_AUDIT.IMPLEMENTED 'TRUE')
AS
SELECT  WA.AUDIT_DATE,WA.AUDIT_ID,SD.DOCUMENT_FULL_PATH as AUDIT_REPORT_FILE,WA.CLIENT_REPRESENTATIVE,NULL CLIENT_REP_ID,
WA.AUDITED_BY,NULL AS AUDITOR_ID,F.FIELD AS FIELD_NAME,
WS.PRODUCTION_STATUS,
WS.OPERATING_STATUS,
W.WELL_ID,W.WELL_NAME,WA.ROW_CREATED_DATE,WA.ROW_CREATED_BY,WA.ROW_CHANGED_DATE,WA.ROW_CHANGED_BY,WA.ACTIVE_IND,WA.SOURCE_NAME,WA.REMARK,NULL AS LEVEL1_ID,NULL AS LEVEL1_NAME,NULL AS LEVEL1_TYPE,
NULL AS LEVEL2_ID,NULL AS LEVEL2_NAME,NULL AS LEVEL2_TYPE,NULL AS LEVEL3_ID,NULL AS LEVEL3_NAME,NULL AS LEVEL3_TYPE,NULL AS LEVEL4_ID,NULL AS LEVEL4_NAME,NULL AS LEVEL4_TYPE,
NULL AS LEVEL5_ID,NULL AS LEVEL5_NAME,NULL AS LEVEL5_TYPE,WAR.AREA_ID AS LEVEL6_ID,A.PREFERRED_NAME AS LEVEL6_NAME,RAT.AREA_TYPE AS LEVEL6_TYPE,WA.WELL_AUDIT_ID,NULL AS AUDIT_STATUS,
NULL AS SUBMITTED_BY,NULL AS SUBMITTED_DATE,NULL AS APPR_REJ_BY,NULL AS APPR_REJ_DATE,NULL AS REJECT_REASON,(convert(WA.AUDIT_DATE,date)||'  '||WA.AUDIT_ID ) AS AUDIT_DATE_ID,SD.SOURCE_DOCUMENT_ID AS WS_DOC_ID,SD.DOCUMENT_TITLE AS DOC_TITLE,('WH Audit-'||convert(WA.AUDIT_DATE,date)||'  '||WA.AUDIT_ID ) AS WH_PHOTO_CATEGORY FROM PDMExtSrc.WELL_AUDIT WA
LEFT OUTER JOIN (SELECT SD.SOURCE_DOCUMENT, SD.DOCUMENT_FULL_PATH, SD.SOURCE_DOCUMENT_ID, SD.OBJECT_ID, SD.DOCUMENT_TITLE,
		ROW_NUMBER() OVER (PARTITION BY SD.OBJECT_ID ORDER BY SD.ROW_CREATED_DATE DESC) AS ROW_NUM 
		FROM PDMExtSrc.SOURCE_DOCUMENT AS SD 
		WHERE (SD.ACTIVE_IND = 'Y') AND (SD.DOC_CATEGORY = 'Well Audit') 
		AND (SD.DOC_SUB_CATEGORY = 'Well Audit Score')) AS SD ON WA.WELL_AUDIT_ID = SD.OBJECT_ID AND SD.ROW_NUM = 1
INNER JOIN PPDMSrc.WELL W ON W.WELL_ID=WA.WELL_ID
LEFT OUTER JOIN PPDMSrc.FIELD F ON F.FIELD_ID=W.ASSIGNED_FIELD
LEFT OUTER JOIN (SELECT WS.WELL_ID, 
MAX(CASE cast(WS.STATUS_TYPE AS   string) WHEN 'Production' THEN cast(WS.STATUS AS   string) END) AS  PRODUCTION_STATUS,
MAX(CASE cast(WS.STATUS_TYPE AS   string) WHEN 'Operating' THEN cast(WS.STATUS AS   string) END) AS  OPERATING_STATUS
FROM (
SELECT WS.WELL_ID, RWST.STATUS_TYPE, RWS.STATUS, WS.STATUS_DATE,
ROW_NUMBER() OVER (PARTITION BY WS.WELL_ID, RWST.STATUS_TYPE ORDER BY WS.STATUS_DATE DESC, WS.ROW_CREATED_DATE DESC) ROW_NUM
FROM PPDMSrc.WELL_STATUS WS
INNER JOIN PPDMSrc.R_WELL_STATUS RWS ON WS.R_WELL_STATUS_ID = RWS.R_WELL_STATUS_ID
INNER JOIN PPDMSrc.R_WELL_STATUS_TYPE RWST ON RWS.R_WELL_STATUS_TYPE_ID = RWST.R_WELL_STATUS_TYPE_ID
WHERE cast(RWST.STATUS_TYPE AS   string) IN ('Production','Operating','Product')) WS 
WHERE WS.ROW_NUM = 1
GROUP BY WS.WELL_ID)WS ON W.WELL_ID = WS.WELL_ID
LEFT OUTER JOIN PPDMSrc.WELL_AREA WAR ON WAR.WELL_ID=W.WELL_ID
LEFT OUTER JOIN PPDMSrc.AREA A ON A.AREA_ID=WAR.AREA_ID
LEFT OUTER JOIN PPDMSrc.R_AREA_TYPE RAT ON RAT.R_AREA_TYPE_ID=A.AREA_TYPE
;

CREATE VIEW WELL_AUDIT_DOCUMENT
(
	WA_DOC_FULL_PATH	string(2000)	,
	WA_DOC_PATH	string(2000)	,
	WA_DOC_TITLE	string(200)	,
	WA_DOC_CATEGORY	string(100)	,
	WA_DOC_CATEGORY_ID	string(40)	,
	WA_DOC_SUB_CATEGORY	string(100)	,
	WA_DOC_SUB_CATEGORY_ID	string(40)	,
	WA_DOC_TYPE	string(50)	,
	WA_FIG_REFERENCE	string(100)	,
	WA_DOC_PUBLISHER	string(255)	,
	WA_DOC_ISSUE	string(50)	,
	WA_DOC_LANGUAGE	string(100)	,
	AUDIT_ID	string(40)	,
	WELL_AUDIT_ID	string(40)	,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	WA_DOC_ID	string(40)	NOT NULL,
CONSTRAINT PK_WELL_AUDIT_DOC PRIMARY KEY (WA_DOC_ID))
OPTIONS (UPDATABLE 'FALSE', WELL_AUDIT_DOCUMENT.IMPLEMENTED 'TRUE')
AS
SELECT SD.DOCUMENT_FULL_PATH,SD.SOURCE_DOCUMENT,SD.DOCUMENT_TITLE,SD.DOC_CATEGORY,SD.DOC_CATEGORY_ID,SD.DOC_SUB_CATEGORY,SD.DOC_SUB_CATEGORY_ID,
SD.DOCUMENT_TYPE,SD.FIGURE_REFERENCE,SD.PUBLISHER,SD.ISSUE,SD.DOC_LANGUAGE,WA.AUDIT_ID,WA.WELL_AUDIT_ID,SD.ENTITY_ID,W.WELL_NAME,SD.ROW_CREATED_DATE,
SD.ROW_CREATED_BY,SD.ROW_CHANGED_DATE,SD.ROW_CHANGED_BY,SD.ACTIVE_IND,SD.SOURCE_NAME,SD.REMARKS,SD.SOURCE_DOCUMENT_ID AS WA_DOC_ID
 FROM PDMExtSrc.SOURCE_DOCUMENT SD
INNER JOIN PDMExtSrc.WELL_AUDIT WA ON WA.WELL_AUDIT_ID = SD.OBJECT_ID
INNER JOIN PPDMSrc.WELL W ON SD.ENTITY_ID = W.WELL_ID
WHERE SD.DOC_CATEGORY = 'Well Audit' AND SD.ACTIVE_IND = 'Y'
;

CREATE VIEW WELL_AUDIT_SCORE
(
	WA_CATEGORY	string(100)	,
	WA_CATEGORY_ID	string(40)	,
	NUM_OF_CRITICAL	integer		,
	NUM_OF_MAJOR	integer		,
	NUM_OF_MINOR	integer		,
	WELL_AUDIT_ID	string(40)	NOT NULL,
	AUDIT_ID	string(40)	NOT NULL,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	AUDIT_TYPE_ORDER integer,
	WA_SCORE_ID	string(40)	NOT NULL,
CONSTRAINT PK_WELL_AUDIT_SCORE PRIMARY KEY (WA_SCORE_ID))
OPTIONS (UPDATABLE 'FALSE', WELL_AUDIT_SCORE.IMPLEMENTED 'TRUE')
AS
SELECT ADS.AUDIT_CRITERIA AS WA_CATEGORY, ADS.AUDIT_SCORE_ID AS WA_CATEGORY_ID,
WAS.NUM_CRITICAL,WAS.NUM_MAJOR,WAS.NUM_MINOR,WA.WELL_AUDIT_ID,WA.AUDIT_ID,W.WELL_ID,
W.WELL_NAME,WAS.ROW_CREATED_DATE,WAS.ROW_CREATED_BY,WAS.ROW_CHANGED_DATE,WAS.ROW_CHANGED_BY,
WAS.ACTIVE_IND,WAS.SOURCE,WAS.REMARK,ADS.AUDIT_TYPE_ORDER,UUID() AS WA_SCORE_ID
	FROM PDMExtSrc.WELL_AUDIT_SCORE WAS
	INNER JOIN PDMExtSrc.AUDIT_SCORE ADS ON ADS.AUDIT_SCORE_ID=WAS.AUDIT_SCORE_ID
	INNER JOIN PDMExtSrc.WELL_AUDIT WA ON WA.WELL_AUDIT_ID=WAS.WELL_AUDIT_ID
	INNER JOIN PPDMSrc.WELL W ON W.WELL_ID=WA.WELL_ID
	WHERE
		WAS.ACTIVE_IND = 'Y'
UNION ALL 
SELECT
		'Total' AS WA_CATEGORY, NULL, 
		CAST(SUM(WAS.NUM_CRITICAL) AS INTEGER) AS NUM_CRITICAL, 
		CAST(SUM(WAS.NUM_MAJOR) AS INTEGER) AS NUM_MAJOR, 
		CAST(SUM(WAS.NUM_MINOR) AS INTEGER) AS NUM_MINOR,
		WA.WELL_AUDIT_ID, WA.AUDIT_ID, WA.WELL_ID, W.WELL_NAME,
		MAX(WAS.ROW_CREATED_DATE) AS ROW_CREATED_DATE, MAX(WAS.ROW_CREATED_BY) AS ROW_CREATED_BY, 
		MAX(WAS.ROW_CHANGED_DATE) AS ROW_CHANGED_DATE, MAX(WAS.ROW_CHANGED_BY) AS ROW_CHANGED_BY, 
		'Y', 'DSWIM','Total' AS REMARK, 99 AS AUDIT_TYPE_ORDER, UUID()
	FROM PDMExtSrc.WELL_AUDIT_SCORE WAS
	INNER JOIN PDMExtSrc.AUDIT_SCORE ADS ON ADS.AUDIT_SCORE_ID=WAS.AUDIT_SCORE_ID
	INNER JOIN PDMExtSrc.WELL_AUDIT WA ON WA.WELL_AUDIT_ID=WAS.WELL_AUDIT_ID
	INNER JOIN PDMExtSrc.R_AUDIT_TYPE RAT ON RAT.R_AUDIT_TYPE_ID=ADS.AUDIT_TYPE
	INNER JOIN PPDMSrc.WELL W ON W.WELL_ID=WA.WELL_ID
	WHERE
		WAS.ACTIVE_IND = 'Y'
	GROUP BY WA.WELL_ID, W.WELL_NAME, WA.WELL_AUDIT_ID, WA.AUDIT_ID	;
	
CREATE VIEW AUDIT_SCORE(
AUDIT_SCORE_ID string (40) NOT NULL,
AUDIT_TYPE string(40) NOT NULL,
AUDIT_CRITERIA string(2000),
SOURCE_NAME string(2000),
ACTIVE_IND string(1),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CREATED_DATE timestamp,
AUDIT_TYPE_ORDER integer,
CONSTRAINT PK_AUDIT_SCORE PRIMARY KEY (AUDIT_SCORE_ID))
OPTIONS (UPDATABLE 'FALSE', AUDIT_SCORE.IMPLEMENTED 'TRUE')
AS
SELECT AUDIT_SCORE_ID,AUDIT_TYPE,AUDIT_CRITERIA,SOURCE,ACTIVE_IND,ROW_CHANGED_BY,ROW_CHANGED_DATE,ROW_CREATED_BY,ROW_CREATED_DATE,AUDIT_TYPE_ORDER
FROM PDMExtSrc.AUDIT_SCORE
;

CREATE VIEW WA_RECOMMENDATIONS
(
	RECOMMENDATION_DESC	string(2000)	NOT NULL,
	WELL_AUDIT_ID	string(40)	NOT NULL,
	AUDIT_ID	string(40)	NOT NULL,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100),
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100),
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100),
	REMARK	string(2000)	,
	WA_RECOMMENDATION_ID	string(40)	NOT NULL,
CONSTRAINT PK_WA_RECOMMENDATIONS PRIMARY KEY (WA_RECOMMENDATION_ID))
OPTIONS (UPDATABLE 'FALSE', WA_RECOMMENDATIONS.IMPLEMENTED 'TRUE')
AS
SELECT AR.RECOMMENDATION,AR.WELL_AUDIT_ID,WA.AUDIT_ID,WA.WELL_ID,W.WELL_NAME,AR.ROW_CREATED_DATE,AR.ROW_CREATED_BY,AR.ROW_CHANGED_DATE,AR.ROW_CHANGED_BY,
AR.ACTIVE_IND,AR.SOURCE,AR.REMARK,AR.AUDIT_RECOMMEND_ID AS WA_RECOMMENDATION_ID
FROM PDMExtSrc.AUDIT_RECOMMENDATIONS AR
INNER JOIN PDMExtSrc.WELL_AUDIT WA ON WA.WELL_AUDIT_ID=AR.WELL_AUDIT_ID
INNER JOIN PPDMSrc.WELL W ON W.WELL_ID=WA.WELL_ID
WHERE AR.ACTIVE_IND='Y'
;

CREATE VIEW AUDIT_RECOMMEND_SUMMARY
(
	SUMMARY_DETAILS	string(2000),
	SCORE_RANGE	string(100),
	RANGE_ORDER	integer,
	SUMMARY string(400),
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100),
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100),
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100),
	REMARK	string(2000)	,
	WA_REC_SUM_ID	string(40)	NOT NULL,
CONSTRAINT PK_WA_RECOMMEND_SUM PRIMARY KEY (WA_REC_SUM_ID))
OPTIONS (UPDATABLE 'FALSE', AUDIT_RECOMMEND_SUMMARY.IMPLEMENTED 'TRUE')
AS
SELECT SUMMARY_DETAILS, SCORE_RANGE, RANGE_ORDER, SUMMARY, ROW_CREATED_DATE, ROW_CREATED_BY, ROW_CHANGED_DATE, ROW_CHANGED_BY,
ACTIVE_IND, SOURCE, REMARK, AUDIT_RECOMMEND_SUM_ID FROM PDMExtSrc.AUDIT_RECOMMEND_SUMMARY
;

CREATE VIEW WELL_AUDIT_CASE
(
	WA_CASE_NAME	string(100)	NOT NULL,
	WA_CASE_DETAILS	string(2000)	NOT NULL,
	WA_CASE_FORMAT	string(50)	,
	WELL_AUDIT_ID	string(40)	NOT NULL,
	AUDIT_ID	string(40)	NOT NULL,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	WA_CASE_ID	string(40)	NOT NULL,
	WA_CASE_FILE_PATH string(2000),
CONSTRAINT PK_WELL_AUDIT_CASE PRIMARY KEY (WA_CASE_ID))
OPTIONS (UPDATABLE 'FALSE', WELL_AUDIT_CASE.IMPLEMENTED 'TRUE')
AS
SELECT AC.CASE_NAME, AC.CASE_DETAILS,AC.CASE_FORMAT,AC.WELL_AUDIT_ID,WA.AUDIT_ID,W.WELL_ID,W.WELL_NAME,AC.ROW_CREATED_DATE,AC.ROW_CREATED_BY,AC.ROW_CHANGED_DATE,AC.ROW_CHANGED_BY,
AC.ACTIVE_IND,AC.SOURCE,AC.REMARK,AC.AUDIT_CASE_ID AS WA_CASE_ID,SD.DOCUMENT_FULL_PATH AS  WA_CASE_FILE_PATH
FROM PDMExtSrc.AUDIT_CASE AC
INNER JOIN PDMExtSrc.WELL_AUDIT WA ON WA.WELL_AUDIT_ID=AC.WELL_AUDIT_ID AND AC.ACTIVE_IND = 'Y'
LEFT OUTER JOIN (SELECT SD.SOURCE_DOCUMENT, SD.DOCUMENT_FULL_PATH, SD.SOURCE_DOCUMENT_ID, SD.OBJECT_ID, 
		ROW_NUMBER() OVER (PARTITION BY SD.OBJECT_ID ORDER BY SD.ROW_CREATED_DATE DESC) AS ROW_NUM 
		FROM PDMExtSrc.SOURCE_DOCUMENT AS SD 
		WHERE (SD.ACTIVE_IND = 'Y') AND (SD.DOC_CATEGORY = 'Well Audit') 
		AND (SD.DOC_SUB_CATEGORY in('Well Case Score' ,'Well Audit Case')) )AS SD ON AC.AUDIT_CASE_ID = SD.OBJECT_ID AND SD.ROW_NUM = 1
INNER JOIN PPDMSrc.WELL W ON W.WELL_ID=WA.WELL_ID
;

CREATE VIEW WA_CASE_SCENARIO
(
	WA_CASE_SCENARIO	string(2000)	NOT NULL,
	WA_CASE_ID	string(40)	NOT NULL,
	WELL_AUDIT_ID	string(40)	NOT NULL,
	AUDIT_ID	string(40)	NOT NULL,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	WA_CASE_SCENARIO_ID	string(40)	NOT NULL,
CONSTRAINT PK_WA_CASE_SCENARIO PRIMARY KEY (WA_CASE_SCENARIO_ID))
OPTIONS (UPDATABLE 'FALSE', WA_CASE_SCENARIO.IMPLEMENTED 'TRUE')
AS
SELECT ACS.SCENARIO,ACS.AUDIT_CASE_ID,WA.WELL_AUDIT_ID,WA.AUDIT_ID,W.WELL_ID,W.WELL_NAME,ACS.ROW_CREATED_DATE,ACS.ROW_CREATED_BY,
ACS.ROW_CHANGED_DATE,ACS.ROW_CHANGED_BY,ACS.ACTIVE_IND,ACS.SOURCE,ACS.REMARK,UUID() AS WA_CASE_SCENARIO_ID
FROM PDMExtSrc.AUDIT_CASE_SCENARIO ACS
LEFT OUTER JOIN PDMExtSrc.AUDIT_CASE AC ON AC.AUDIT_CASE_ID=ACS.AUDIT_CASE_ID
INNER JOIN PDMExtSrc.WELL_AUDIT WA ON WA.WELL_AUDIT_ID=ACS.WELL_AUDIT_ID
INNER JOIN PPDMSrc.WELL W ON W.WELL_ID=WA.WELL_ID
;

CREATE VIEW WELL_EVENTS
(
	WELL_EVENT_SYSTEM	string(100)	,
	WELL_EVENT_DATE timestamp	NOT NULL,
	WELL_EVENT_DESC string(2000),
	ENTITY_ID  string(40)	NOT NULL,
	ENTITY_NAME  string(255) NOT NULL,
	ROW_CREATED_DATE  timestamp,
	ROW_CREATED_BY  string(100),
	ACTIVE_IND  string(1),
	SOURCE_NAME string(100),
	REMARK	 string(2000),
	WELL_EVENT_ID	string(40)	NOT NULL,
    CONSTRAINT pk_WELL_EVENTS PRIMARY KEY(WELL_EVENT_ID)
)   OPTIONS(UPDATABLE 'FALSE',WELL_EVENT_ID.IMPLEMENTED 'TRUE') 
AS
SELECT RS.SOURCE_NAME AS WELL_EVENT_SYSTEM,FI.INCIDENT_DATE AS WELL_EVENT_DATE,FI.REMARK AS WELL_EVENT_DESC,
 W.WELL_ID AS ENTITY_ID,W.WELL_NAME AS ENTITY_NAME,FI.ROW_CREATED_DATE ,FI.ROW_CREATED_BY,
FI.ACTIVE_IND,RS.SOURCE_NAME AS SOURCE_NAME ,FI.REMARK	AS REMARK ,
UUID() AS WELL_EVENT_ID 
FROM  PPDMSrc.FAILURE_INCIDENT FI
LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON  RS.SOURCE_ID = FI.SOURCE 
INNER JOIN PPDMSrc.FAILURE_INCIDENT_COMPONENT FIC ON FIC.FAILURE_INCIDENT_ID=FI.FAILURE_INCIDENT_ID
LEFT OUTER JOIN PPDMSrc.R_FAILURE_TYPE RFT ON RFT.R_FAILURE_TYPE_ID=FI.FAILURE_TYPE_ID
LEFT OUTER JOIN PPDMSrc.WELL W ON W.WELL_ID=FIC.UWI
WHERE RFT.R_FAILURE_TYPE = 'EVENTS' AND FI.ACTIVE_IND = 'Y';

CREATE VIEW WELL_WORK_MANAGEMENT (
EQUIP_NAME  string(100)  NOT NULL,
EQUIP_NAME_ID  string(40)  ,
EQUIP_TAG_NUM  string(40)  ,
EQUIP_TYPE  string(100)  ,
EQUIP_TYPE_ID  string(40)  ,
EQUIP_SUB_TYPE_ID  string(40)  ,
EQUIP_SUB_TYPE  string(100)  ,
EQUIP_SERIAL_NUM  string(40)  ,
WORK_ORDER_TYPE  string(100)  NOT NULL,
WORK_ORDER_TYPE_ID  string(40)  ,
WO_CREATED_DATE  timestamp  NOT NULL,
WO_COMPLETED_DATE  timestamp ,
WO_DUE_DATE  timestamp NOT NULL,
WO_TIME_SPENT  bigdecimal(15,4)  ,
TIME_UOM  string(20)  ,
WO_ASSIGNED_TO  string(100)  ,
WORK_DETAILS  string(2000)  NOT NULL,
WORK_DONE  string(2000)  ,
WO_STATUS  string(100)  NOT NULL,
WO_STATUS_ID  string(40)  ,
WO_REMARK  string(2000)  ,
WO_FREQUENCY_TYPE  string(100)  NOT NULL,
WO_FREQUENCY_TYPE_ID  string(40)  ,
WO_DUE_FREQ_INTERVAL  bigdecimal(15,4)  ,
FREQUENCY_UOM  string(20)  ,
WORK_DONE_BY  string(100)  ,
ENTITY_ID  string(40)  NOT NULL,
ENTITY_NAME  string(255)  NOT NULL,
ROW_CREATED_DATE  timestamp ,
ROW_CREATED_BY  string(100)  ,
ROW_CHANGED_DATE  timestamp ,
ROW_CHANGED_BY  string(100)  ,
ACTIVE_IND  string(1)  ,
SOURCE_NAME  string(100)  ,
WORK_ORDER_ID  string(40)  NOT NULL,
CONSTRAINT pk_WELL_WORK_MGMT PRIMARY KEY(WORK_ORDER_ID)
)   OPTIONS(UPDATABLE 'FALSE',WORK_ORDER_ID.IMPLEMENTED 'TRUE') 
AS
SELECT EQUIPMENT_NAME AS EQUIP_NAME,EQUIPMENT_ID AS EQUIP_NAME_ID, TAG_NUMBER AS EQUIP_TAG_NUM,EQUIPMENT_TYPE AS
EQUIP_TYPE,EQUIP_TYPE_ID AS EQUIP_TYPE_ID,EQUIP_SUB_TYPE_ID AS EQUIP_SUB_TYPE_ID, 
EQUIP_SUB_TYPE AS EQUIP_SUB_TYPE,SERIAL_NUMBER AS EQUIP_SERIAL_NUM,
WO_TYPE AS WORK_ORDER_TYPE,WO_TYPE_ID AS WORK_ORDER_TYPE_ID ,
EFFECTIVE_DATE AS WO_CREATED_DATE,END_DATE AS WO_COMPLETED_DATE,DUE_DATE AS WO_DUE_DATE,
CAST (TIMESTAMPDIFF(SQL_TSI_DAY,EFFECTIVE_DATE,END_DATE) AS BIGDECIMAL) AS WO_TIME_SPENT,
NULL AS TIME_UOM, WO_ASSIGNED_TO AS WO_ASSIGNED_TO,
WORK_ORDER AS WORK_DETAILS, WO_EXECUTED AS WORK_DONE,WO_STATUS AS WO_STATUS,
WO_STATUS_ID AS WO_STATUS_ID,
REMARK AS WO_REMARK,  WO_FREQUENCY_TYPE AS WO_FREQUENCY_TYPE , WO_FREQUENCY_TYPE_ID AS WO_FREQUENCY_TYPE_ID,
WO_DUE_FREQ_INTERVAL AS WO_DUE_FREQ_INTERVAL,
NULL AS FREQUENCY_UOM,WO_BY AS WORK_DONE_BY,
ENTITY_ID AS ENTITY_ID, ENTITY_NAME AS ENTITY_NAME,ROW_CREATED_DATE,ROW_CREATED_BY,
ROW_CHANGED_DATE,ROW_CHANGED_BY,ACTIVE_IND,SOURCE_NAME AS SOURCE_NAME ,UUID()  AS WORK_ORDER_ID
FROM PDMExtSrc.WORK_ORDER WHERE ACTIVE_IND = 'Y';

CREATE VIEW PLANNED_ACTIVITIES	(
PA_SOURCE    string(100)   ,	
PA_CREATED_DATE    timestamp   NOT NULL,	
PA_DUE_DATE    timestamp  ,	
PA_ACTION_OWNER    string(100)   ,	
PA_ACTION_OWNER_ID    string(40)   ,	
PA_WELL_WORK_TYPE    string(100)   NOT NULL,	
PA_WELL_WORK_TYPE_ID    string(40)   ,	
PA_REMARK    string(2000)   ,	
PA_COMPLETED_DATE    timestamp   ,	
ENTITY_ID    string(40)   NOT NULL,	
ENTITY_NAME    string(255)   NOT NULL,	
ROW_CREATED_DATE    timestamp   ,	
ROW_CREATED_BY    string(100)   ,	
ROW_CHANGED_DATE    timestamp   ,	
ROW_CHANGED_BY    string(100)   ,	
ACTIVE_IND    string(1)   ,	
SOURCE_NAME    string(100)   ,	
PLANNED_ACTIVITY_ID    string(40)   NOT NULL,	
CONSTRAINT pk_WELL_ACTIVITY PRIMARY KEY(PLANNED_ACTIVITY_ID)
)   OPTIONS(UPDATABLE 'FALSE',PLANNED_ACTIVITY_ID.IMPLEMENTED 'TRUE') 
AS
SELECT SOURCE_NAME AS PA_SOURCE,START_DATE AS PA_CREATED_DATE,
DUE_DATE AS PA_DUE_DATE,OWNER_BA AS PA_ACTION_OWNER,OWNER_BA_ID AS PA_ACTION_OWNER_ID,
WELL_WORK_TYPE AS PA_WELL_WORK_TYPE,WELL_WORK_TYPE_ID AS PA_WELL_WORK_TYPE_ID,REMARK AS PA_REMARK,
EXPIRY_DATE AS PA_COMPLETED_DATE,ENTITY_ID AS ENTITY_ID,ENTITY_NAME AS ENTITY_NAME,
ROW_CREATED_DATE,ROW_CREATED_BY,ROW_CHANGED_DATE,ROW_CHANGED_BY,ACTIVE_IND,
SOURCE_NAME,UUID() AS PLANNED_ACTIVITY_ID
FROM PDMExtSrc.WELL_ACTIVITY WHERE ACTIVE_IND = 'Y';

CREATE VIEW BARRIER_ENV_TEST_HISTORY
(
	BE_TEST_DATE	timestamp,
	BE_TEST_TYPE	string(100),
	BE_TEST_TYPE_ID	string(40),
	BE_TEST_RESULT	string(100),
	BE_TEST_RESULT_ID	string(40),
	BE_PRESSURE	bigdecimal(15,4),
	PRESSURE_UOM	string(20)	,
	BE_RESET_FREQ_STATUS	string(100)	,
	BE_RESET_FREQ_STATUS_ID	string(40)	,
	BE_REMARK	string(2000),
	BE_TEST_FREQ	integer	,
	BE_TEST_HOURS	bigdecimal(15,4)	,
	FREQUENCY_UOM	string(20)	,
	BE_NEXT_TEST_DATE	timestamp		,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	BE_TEST_FREQ_ID string(40),
	BE_TEST_ID	string(40)	NOT NULL,
	LEVEL1_ID	string(40)	,
	LEVEL1_NAME	string(255)	,
	LEVEL1_TYPE	string(100)	,
	LEVEL2_ID	string(40)	,
	LEVEL2_NAME	string(255)	,
	LEVEL2_TYPE	string(100)	,
	LEVEL3_ID	string(40)	,
	LEVEL3_NAME	string(255)	,
	LEVEL3_TYPE	string(100)	,
	LEVEL4_ID	string(40)	,
	LEVEL4_NAME	string(255)	,
	LEVEL4_TYPE	string(100)	,
	LEVEL5_ID	string(40)	,
	LEVEL5_NAME	string(255)	,
	LEVEL5_TYPE	string(100)	,
	LEVEL6_ID	string(40)	NOT NULL,
	LEVEL6_NAME	string(255)	,
	LEVEL6_TYPE	string(100)	,
CONSTRAINT PK_BAR_ENV_TEST_HIS PRIMARY KEY (BE_TEST_ID))
OPTIONS (UPDATABLE 'FALSE', BARRIER_ENV_TEST_HISTORY.IMPLEMENTED 'TRUE')
AS
SELECT BT.TEST_DATE,RTT.R_TEST_TYPE,BTF.BE_TEST_TYPE_ID,RTR.TEST_RESULT,BT.TEST_RESULT_ID,BT.TEST_PRESSURE,BT.TEST_PRESS_UOM,BT.RESET_IND,NULL,
BT.REMARKS,cast(BTF.BE_TEST_FREQUENCY as integer),null,BTF.FREQUENCY_UOM,
CASE WHEN (BTF.BE_TEST_FREQUENCY IS NOT NULL AND BTF.BE_TEST_FREQUENCY <> '') THEN TIMESTAMPADD(SQL_TSI_MONTH, cast(BTF.BE_TEST_FREQUENCY as integer), BT.TEST_DATE) ELSE NULL END,
BT.ENTITY_ID,W.WELL_NAME AS ENTITY_NAME,BT.ROW_CREATED_DATE,BT.ROW_CREATED_BY,
BT.ROW_CHANGED_DATE,BT.ROW_CHANGED_BY,BT.ACTIVE_IND,BT.SOURCE_NAME,BT.REMARKS,BT.BE_TEST_FREQ_ID,BE_TEST_ID,
NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
WA.AREA_ID,NULL,NULL
FROM PDMExtSrc.BE_ENV_TEST BT
INNER JOIN PPDMSrc.WELL W ON BT.ENTITY_ID = W.WELL_ID
INNER JOIN PPDMSrc.WELL_AREA WA ON W.WELL_ID = WA.WELL_ID
INNER JOIN PDMExtSrc.R_TEST_TYPE RTT ON RTT.R_TEST_TYPE_ID = BT.TEST_TYPE_ID
LEFT OUTER JOIN PDMExtSrc.BE_TEST_FREQUENCY BTF ON (BT.TEST_TYPE_ID = BTF.BE_TEST_TYPE_ID AND BTF.ENTITY_ID = W.WELL_ID)
LEFT OUTER JOIN PDMExtSrc.R_TEST_RESULT RTR ON RTR.R_TEST_RESULT_ID = BT.TEST_RESULT_ID
;

CREATE VIEW BARRIER_ENV_TEST_FREQUENCY
(
	BET_FREQ_INTERVAL	bigdecimal(15,4)	NOT NULL,
	FREQUENCY_UOM	string(20)	,
	BET_FREQ_REMARK	string(2000),
	BE_TEST_TYPE	string(100),
	BE_TEST_TYPE_ID	string(40)	NOT NULL,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255),
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	BET_FREQ_ID	string(40)	NOT NULL,
CONSTRAINT PK_BAR_ENV_TEST_FREQ PRIMARY KEY (BET_FREQ_ID))
OPTIONS (UPDATABLE 'FALSE', BARRIER_ENV_TEST_FREQUENCY.IMPLEMENTED 'TRUE')
AS
SELECT cast(BTF.BE_TEST_FREQUENCY as bigdecimal),BTF.FREQUENCY_UOM,BTF.REMARKS,RTT.R_TEST_TYPE,BTF.BE_TEST_TYPE_ID,BTF.ENTITY_ID,
W.WELL_NAME AS ENTITY_NAME,
cast(BTF.ROW_CREATED_DATE as timestamp),BTF.ROW_CREATED_BY,cast(BTF.ROW_CHANGED_DATE as timestamp),BTF.ROW_CHANGED_BY,BTF.ACTIVE_IND,BTF.SOURCE_NAME,BTF.REMARKS,
BE_TEST_FREQUENCY_ID AS BET_FREQ_ID
FROM PDMExtSrc.BE_TEST_FREQUENCY BTF
INNER JOIN PDMExtSrc.R_TEST_TYPE RTT ON RTT.R_TEST_TYPE_ID=BTF.BE_TEST_TYPE_ID
INNER JOIN PPDMSrc.WELL W ON BTF.ENTITY_ID = W.WELL_ID
WHERE BTF.ACTIVE_IND='Y'
;

CREATE VIEW BARRIER_ENV_TEST_FREQ_AUDIT
(
	BET_FREQ_INTERVAL	integer,
	FREQUENCY_UOM	string(20)	,
	BET_FREQ_REMARK	string(2000),
	BE_TEST_TYPE	string(100),
	BE_TEST_TYPE_ID	string(40),
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255),
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	BET_FREQ_AUD_ID	string(40)	NOT NULL,
CONSTRAINT PK_BAR_EV_TST_FREQ_AUD PRIMARY KEY (BET_FREQ_AUD_ID))
OPTIONS (UPDATABLE 'FALSE', BARRIER_ENV_TEST_FREQ_AUDIT.IMPLEMENTED 'TRUE')
AS
SELECT cast(BTF.BE_TEST_FREQUENCY as integer),BTF.FREQUENCY_UOM,BTA.REMARKS,RTT.R_TEST_TYPE,BTF.BE_TEST_TYPE_ID,BTA.ENTITY_ID,W.WELL_NAME AS ENTITY_NAME,
BTA.ROW_CREATED_DATE,BTA.ROW_CREATED_BY,BTA.ROW_CHANGED_DATE,BTA.ROW_CHANGED_BY,BTA.ACTIVE_IND,BTA.SOURCE_NAME,
BTA.REMARKS,BE_TEST_FREQ_AUD_ID AS BET_FREQ_AUD_ID
FROM PDMExtSrc.BE_TEST_FREQ_AUDIT BTA
LEFT OUTER JOIN PDMExtSrc.BE_TEST_FREQUENCY BTF ON BTF.BE_TEST_FREQUENCY_ID= BTA.BE_TEST_FREQUENCY_ID
LEFT OUTER JOIN PDMExtSrc.R_TEST_TYPE RTT ON RTT.R_TEST_TYPE_ID=BTA.BE_TEST_TYPE_ID
LEFT OUTER JOIN PPDMSrc.WELL W ON BTA.ENTITY_ID = W.WELL_ID
;

CREATE VIEW BARRIER_ENV_TEST_DOCUMENT
(
	BET_DOC_FULL_PATH	string(2000)	,
	WPH_DOC_PATH	string(2000)	,
	WPH_DOC_TITLE	string(200)	,
	WPH_DOC_CATEGORY	string(100)	,
	WPH_DOC_CATEGORY_ID	string(40)	,
	WPH_DOC_SUB_CATEGORY	string(100)	,
	WPH_DOC_SUB_CATEGORY_ID	string(40)	,
	WPH_DOC_TYPE	string	(50)	,
	WPH_FIG_REFERENCE	string(100)	,
	WPH_DOC_PUBLISHER	string(255)	,
	WPH_DOC_ISSUE	string	(50)	,
	WPH_DOC_LANGUAGE	string(100)	,
	BE_TEST_ID	string(40)	,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255),
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string	(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	SOURCE_DOCUMENT string(2000),
	WPH_DOC_ID string(40),
	BET_DOC_ID	string(40)	NOT NULL,
CONSTRAINT PK_BAR_ENV_TEST_DOC PRIMARY KEY (BET_DOC_ID))
OPTIONS (UPDATABLE 'FALSE', BARRIER_ENV_TEST_DOCUMENT.IMPLEMENTED 'TRUE')
AS
SELECT SD.DOCUMENT_FULL_PATH,SD.SOURCE_DOCUMENT AS WPH_DOC_PATH,SD.DOCUMENT_TITLE AS WPH_DOC_TITLE,SD.DOC_CATEGORY AS WPH_DOC_CATEGORY,
SD.DOC_CATEGORY_ID,SD.DOC_SUB_CATEGORY AS WPH_DOC_SUB_CATEGORY,
SD.DOC_SUB_CATEGORY_ID,SD.DOCUMENT_TYPE AS WPH_DOC_TYPE,SD.FIGURE_REFERENCE,SD.PUBLISHER,SD.ISSUE,SD.DOC_LANGUAGE,BT.BE_TEST_ID,
BT.ENTITY_ID,W.WELL_NAME AS ENTITY_NAME,SD.ROW_CREATED_DATE,SD.ROW_CREATED_BY,SD.ROW_CHANGED_DATE,SD.ROW_CHANGED_BY,SD.ACTIVE_IND,
SD.SOURCE_NAME,SD.REMARKS,SD.SOURCE_DOCUMENT,SD.SOURCE_DOCUMENT_ID AS WPH_DOC_ID,
UUID() AS BET_DOC_ID
FROM PDMExtSrc.SOURCE_DOCUMENT SD
INNER JOIN PDMExtSrc.BE_ENV_TEST BT ON SD.OBJECT_ID = BT.BE_TEST_ID
INNER JOIN PPDMSrc.WELL W ON BT.ENTITY_ID = W.WELL_ID
;

CREATE VIEW R_TEST_TYPE(
	R_TEST_TYPE_ID string(40) NOT NULL,
	TEST_TYPE string(100) NOT NULL,
	ACTIVE_IND string(1) ,
	EFFECTIVE_DATE timestamp ,
	EXPIRY_DATE timestamp ,
	REMARK string(2000) ,
	SOURCE_NAME string(100) ,
	ROW_CHANGED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CREATED_BY string(100)  ,
	ROW_CREATED_DATE timestamp  ,
	CONSTRAINT PK_R_TEST_TYPE PRIMARY KEY (R_TEST_TYPE_ID))
OPTIONS (UPDATABLE 'FALSE', R_TEST_TYPE.IMPLEMENTED 'TRUE')
AS
SELECT 	R_TEST_TYPE_ID ,R_TEST_TYPE ,ACTIVE_IND ,EFFECTIVE_DATE,EXPIRY_DATE,REMARKS,SOURCE_NAME,ROW_CHANGED_BY,ROW_CHANGED_DATE,ROW_CREATED_BY ,ROW_CREATED_DATE 
FROM PDMExtSrc.R_TEST_TYPE
;

CREATE VIEW R_TEST_RESULT(
	R_TEST_RESULT_ID string(40) NOT NULL,
	TEST_RESULT string(100) NOT NULL,
	ABBREVIATION STRING(100),
	ACTIVE_IND string(1) ,
	EFFECTIVE_DATE timestamp ,
	EXPIRY_DATE timestamp ,
	REMARK string(2000) ,
	SOURCE_NAME string(100) ,
	ROW_CHANGED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CREATED_BY string(100)  ,
	ROW_CREATED_DATE timestamp  ,
CONSTRAINT PK_R_TEST_RESULT_ID PRIMARY KEY (R_TEST_RESULT_ID))
OPTIONS (UPDATABLE 'FALSE', R_TEST_RESULT.IMPLEMENTED 'TRUE')
AS
SELECT 	R_TEST_RESULT_ID,TEST_RESULT,ABBREVIATION ,ACTIVE_IND,EFFECTIVE_DATE,EXPIRY_DATE,REMARKS,SOURCE_NAME,ROW_CHANGED_BY ,ROW_CHANGED_DATE  ,ROW_CREATED_BY ,	ROW_CREATED_DATE
FROM PDMExtSrc.R_TEST_RESULT
;

CREATE VIEW R_FLUID_TYPE(
	FLUID_TYPE_ID string(40) NOT NULL,
	FLUID_TYPE string(100) NOT NULL,
	FLUID_TYPE_NAME string(200),
	ACTIVE_IND string(10) ,
	EFFECTIVE_DATE timestamp ,
	EXPIRY_DATE timestamp ,
	REMARK string(2000) ,
	SOURCE_NAME string(100) ,
	ROW_CHANGED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CREATED_BY string(100)  ,
	ROW_CREATED_DATE timestamp  ,
CONSTRAINT PK_R_FLUID_TYPE_ID PRIMARY KEY (FLUID_TYPE_ID))
OPTIONS (UPDATABLE 'FALSE', R_FLUID_TYPE.IMPLEMENTED 'TRUE')
AS
SELECT R_FLUID_TYPE_ID,R_FLUID_TYPE,ET.LONG_NAME,ET.ACTIVE_IND,ET.EFFECTIVE_DATE,ET.EXPIRY_DATE,
	ET.REMARK,ET.SOURCE_NAME,ET.ROW_CHANGED_BY,ET.ROW_CHANGED_DATE,ET.ROW_CREATED_BY ,
	ET.ROW_CREATED_DATE FROM PDMExtSrc.R_FLUID_TYPE ET WHERE ACTIVE_IND = 'Y'
;

CREATE VIEW R_PM_EVENT_TYPE(
	PM_EVENT_TYPE_ID string(40) NOT NULL,
	PM_EVENT_TYPE string(100) NOT NULL,
	ACTIVE_IND string(10) ,
	EFFECTIVE_DATE timestamp ,
	EXPIRY_DATE timestamp ,
	REMARK string(2000) ,
	SOURCE_NAME string(100) ,
	ROW_CHANGED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CREATED_BY string(100)  ,
	ROW_CREATED_DATE timestamp  ,
CONSTRAINT PK_R_PM_EVENT_TYPE_ID PRIMARY KEY (PM_EVENT_TYPE_ID))
OPTIONS (UPDATABLE 'FALSE', R_PM_EVENT_TYPE.IMPLEMENTED 'TRUE')
AS
SELECT R_PM_EVENT_TYPE_ID,PM_EVENT_TYPE,ACTIVE_IND,EFFECTIVE_DATE,EXPIRY_DATE,REMARK,SOURCE_NAME,ROW_CHANGED_BY,ROW_CHANGED_DATE,ROW_CREATED_BY ,	ROW_CREATED_DATE FROM PDMExtSrc.R_PM_EVENT_TYPE
;

CREATE VIEW PM_EVENT_MEASUREMENTS(
	MEASUREMENT_DATE timestamp NOT NULL,
	PM_EVENT_MEAS_POINT string(100) NOT NULL,
	PM_EVENT_MEAS_POINT_ID string(40),
	PM_EVENT_MEAS_TYPE_ID string(40),
	PM_EVENT_MEAS_TYPE string(100),
	PM_EVENT_MEASUREMENT bigdecimal(15,4),
	MEASUREMENT_UOM string(20),
	EQUIPMENT_ID string(40),
	EQUIPMENT_NAME  string(100) NOT NULL,
	ENTITY_ID string(40),
	ENTITY_NAME string(255) NOT NULL,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CHANGED_BY string(100),
	ACTIVE_IND string(10),
	SOURCE_NAME string(100),
	REMARK string(2000),
	PM_EVENT_ID string(40),
	PM_EVENT_MEAS_ID string(40) NOT NULL,
CONSTRAINT PK_PM_EVENT_MEAS PRIMARY KEY (PM_EVENT_MEAS_ID))
OPTIONS (UPDATABLE 'FALSE', PM_EVENT_MEASUREMENTS.IMPLEMENTED 'TRUE')
AS
SELECT PM.MEASUREMENT_DATE,MP.R_MEASUREMENT_POINT,MP.R_MEASUREMENT_POINT_ID,
MP.QUANTITY_TYPE_ID, Q.QUANTITY_TYPE,PM.MEASUREMENT_VALUE, PM.VALUE_UOM,E.EQUIPMENT_ID,
E.EQUIPMENT_NAME, W.WELL_ID, W.WELL_NAME, PM.ROW_CREATED_DATE, PM.ROW_CREATED_BY, PM.ROW_CHANGED_DATE, PM.ROW_CHANGED_BY,
PM.ACTIVE_IND, PM.SOURCE_NAME, NULL, PM.OBJECT_ID, PM.EQ_MEASUREMENT_ID
FROM 
PDMExtSrc.EQ_MEASUREMENT PM 
INNER JOIN PPDMSrc.EQUIPMENT E ON PM.EQUIPMENT_ID = E.EQUIPMENT_ID 
INNER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE EST ON E.EQUIPMENT_SUB_TYPE = EST.CAT_EQUIP_SUB_TYPE_ID
INNER JOIN PPDMSrc.R_CAT_EQUIP_TYPE ET ON EST.CAT_EQUIP_TYPE = ET.CAT_EQUIP_TYPE_ID
INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON PM.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON MP.QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
INNER JOIN PPDMSrc.WELL W ON PM.ENTITY_ID = W.WELL_ID
WHERE EST.CAT_EQUIP_SUB_TYPE = 'Annulus Tubing Gauge' 
AND MP.R_MEASUREMENT_POINT IN ('D Annulus Pressure','B Annulus Pressure','C Annulus Pressure','A Annulus Pressure','E Annulus Pressure',
'Tubing Pressure','D Annulus Temperature','B Annulus Temperature','C Annulus Temperature','A Annulus Temperature','E Annulus Temperature')
AND PM.ACTIVE_IND = 'Y'
;

CREATE VIEW PM_EVENT_FLUID(
	FLUID_NAME string(100) NOT NULL,
	FLUID_ABBREVIATION string(20),
	FLUID_SHORT_NAME string(50),
	FLUID_LONG_NAME string(200),
	FLUID_TYPE_ID string(40),
	PM_EVENT_ID string(40) NOT NULL,
	EQUIPMENT_ID string(40),
	EQUIPMENT_NAME  string(100) NOT NULL,
	ENTITY_ID string(40),
	ENTITY_NAME string(255) NOT NULL,
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string(100),
	ROW_CHANGED_DATE timestamp,
	ROW_CHANGED_BY string(100),
	ACTIVE_IND string(10),
	SOURCE_NAME string(100),
	REMARK string(2000),
	PM_EVENT_FLUID_ID string(40) NOT NULL,
CONSTRAINT PK_PM_EVENT_FLUID PRIMARY KEY (PM_EVENT_FLUID_ID))
OPTIONS (UPDATABLE 'FALSE', PM_EVENT_FLUID.IMPLEMENTED 'TRUE')
AS
SELECT FT.R_FLUID_TYPE, FT.ABBREVIATION, FT.SHORT_NAME, FT.LONG_NAME, FT.R_FLUID_TYPE_ID,
 ES.PM_EVENT_ID,
PT.EQUIPMENT_ID, E.EQUIPMENT_NAME, PT.ENTITY_ID, W.WELL_NAME,
ES.ROW_CREATED_DATE, ES.ROW_CREATED_BY, ES.ROW_CHANGED_DATE, ES.ROW_CHANGED_BY,
ES.ACTIVE_IND,ES.SOURCE_NAME,ES.REMARK,ES.PM_EVENT_SAMPLE_ID
FROM PDMExtSrc.PM_EVENT_SAMPLE ES
INNER JOIN PDMExtSrc.R_FLUID_TYPE FT ON ES.R_SAMPLE_FLUID_ID = FT.R_FLUID_TYPE_ID
INNER JOIN PDMExtSrc.PM_EVENT PT ON ES.PM_EVENT_ID = PT.PM_EVENT_ID
LEFT OUTER JOIN PPDMSrc.EQUIPMENT E ON PT.EQUIPMENT_ID = E.EQUIPMENT_ID
INNER JOIN PPDMSrc.WELL W ON PT.ENTITY_ID = W.WELL_ID
;
		
CREATE VIEW PM_EVENT(
PM_EVENT_TYPE string(100) NOT NULL,
PM_EVENT_TYPE_ID string(40),
PM_EVENT_DATE timestamp,
ANNULUS_NAME string(100) NOT NULL,
ANNULUS_ID string(40),
START_PRESSURE bigdecimal(15,4),
END_PRESSURE bigdecimal(15,4),
START_TEMPERATURE bigdecimal(15,4),
END_TEMPERATURE bigdecimal(15,4),
PRESSURE_UOM string(20),
TEMPERATURE_UOM string(20),
PM_EVENT_DURATION bigdecimal(15,4),
DURATION_UOM string(20),
PM_EVENT_VOLUME bigdecimal(15,4),
VOLUME_UOM string(20),
OPERATOR_NAME string(100),
OPERATOR_ID string(40),
SAMPLE_TAKEN_IND string(10),
FLUID_GRAVITY bigdecimal(15,4),
GRAVITY_UOM string(20),
FLUID_DESC string(200),
FLUID_OTHER string(100),
PRE_BLEED_PRESSURE bigdecimal(15,4),
POST_BLEED_PRESSURE bigdecimal(15,4),
POST_DAY_PRESSURE bigdecimal(15,4),
PM_EVENT_REMARK string(2000),
PM_EVENT_REC_CHART_IND string(10),
ENTITY_ID string(40) NOT NULL,
ENTITY_NAME string(255) NOT NULL,
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CHANGED_BY string(100),
ACTIVE_IND string(10),
SOURCE_NAME string(100),
PM_EVENT_ID string(40) NOT NULL,
LEVEL1_ID	string(40)	,
LEVEL1_NAME	string(255)	,
LEVEL1_TYPE	string(100)	,
LEVEL2_ID	string(40)	,
LEVEL2_NAME	string(255)	,
LEVEL2_TYPE	string(100)	,
LEVEL3_ID	string(40)	,
LEVEL3_NAME	string(255)	,
LEVEL3_TYPE	string(100)	,
LEVEL4_ID	string(40)	,
LEVEL4_NAME	string(255)	,
LEVEL4_TYPE	string(100)	,
LEVEL5_ID	string(40)	,
LEVEL5_NAME	string(255)	,
LEVEL5_TYPE	string(100)	,
LEVEL6_ID	string(40)	NOT NULL,
LEVEL6_NAME	string(255)	,
LEVEL6_TYPE	string(100)	,
CONSTRAINT PK_PM_EVENT PRIMARY KEY (PM_EVENT_ID))
OPTIONS (UPDATABLE 'FALSE', PM_EVENT.IMPLEMENTED 'TRUE')
AS
SELECT PET.PM_EVENT_TYPE,PE.R_PM_EVENT_TYPE_ID,PE.EVENT_DATE,E.EQUIPMENT_NAME,PE.EQUIPMENT_ID, SP.MEASUREMENT_VALUE AS START_PRESSURE,
EP.MEASUREMENT_VALUE AS END_PRESSURE, ST.MEASUREMENT_VALUE AS START_TEMPERATURE, ET.MEASUREMENT_VALUE AS END_TEMPERATURE,
SP.VALUE_UOM AS PRESSURE_UOM, EP.VALUE_UOM AS TEMPERATURE_UOM,
PE.EVENT_DURATION,PE.EVENT_DURATION_UOM,PE.VOLUME,PE.VOLUME_UOM,PE.OPERATOR_NAME,NULL,
PE.SAMPLE_IND,PE.FLUID_GRAVITY,NULL,NULL,PE.FLUID_OTHER,
PRP.MEASUREMENT_VALUE AS PRE_BLEED_PRESSURE,
POP.MEASUREMENT_VALUE AS POST_BLEED_PRESSURE,
DP.MEASUREMENT_VALUE AS POST_DAY_PRESSURE,
PE.REMARK,PE.RECORD_IND,PE.ENTITY_ID,W.WELL_NAME,
PE.ROW_CREATED_DATE,
PE.ROW_CREATED_BY,PE.ROW_CHANGED_DATE,PE.ROW_CHANGED_BY,PE.ACTIVE_IND,PE.SOURCE_NAME,
PE.PM_EVENT_ID,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
WA.AREA_ID,NULL,NULL
FROM PDMExtSrc.PM_EVENT AS PE
INNER JOIN PDMExtSrc.R_PM_EVENT_TYPE AS PET ON PE.R_PM_EVENT_TYPE_ID = PET.R_PM_EVENT_TYPE_ID
INNER JOIN PPDMSrc.EQUIPMENT AS E ON PE.EQUIPMENT_ID = E.EQUIPMENT_ID
INNER JOIN PPDMSrc.WELL AS W ON PE.ENTITY_ID = W.WELL_ID
INNER JOIN PPDMSrc.WELL_AREA WA ON (WA.WELL_ID= W.WELL_ID AND WA.ACTIVE_IND = 'Y')
LEFT OUTER JOIN (
	SELECT SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.MEASUREMENT_DATE, SP.MEASUREMENT_VALUE, SP.VALUE_UOM AS VALUE_UOM,SP.R_MEASUREMENT_POINT_ID,
	ROW_NUMBER() OVER (PARTITION BY SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.R_MEASUREMENT_POINT_ID 
	ORDER BY SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.R_MEASUREMENT_POINT_ID, SP.MEASUREMENT_DATE) ROW_NUM
	FROM PDMExtSrc.EQ_MEASUREMENT SP
	INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON SP.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
	WHERE MP.R_MEASUREMENT_POINT IN ('A Annulus Pressure','B Annulus Pressure','C Annulus Pressure','D Annulus Pressure','E Annulus Pressure')
	)SP ON (PE.EQUIPMENT_ID = SP.EQUIPMENT_ID AND PE.ENTITY_ID = SP.ENTITY_ID AND SP.MEASUREMENT_DATE = PE.EVENT_DATE)
LEFT OUTER JOIN (SELECT SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.MEASUREMENT_DATE, SP.MEASUREMENT_VALUE, SP.VALUE_UOM AS VALUE_UOM
	FROM PDMExtSrc.EQ_MEASUREMENT SP
	INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON SP.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
	WHERE MP.R_MEASUREMENT_POINT IN ('A Annulus Pressure','B Annulus Pressure','C Annulus Pressure','D Annulus Pressure','E Annulus Pressure')
	)EP ON (PE.EQUIPMENT_ID = EP.EQUIPMENT_ID AND PE.ENTITY_ID = EP.ENTITY_ID AND EP.MEASUREMENT_DATE = TIMESTAMPADD(SQL_TSI_MINUTE,cast(PE.EVENT_DURATION as integer),PE.EVENT_DATE))
LEFT OUTER JOIN (
	SELECT SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.MEASUREMENT_DATE, SP.MEASUREMENT_VALUE, SP.VALUE_UOM AS VALUE_UOM
	FROM PDMExtSrc.EQ_MEASUREMENT SP
	INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON SP.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
	WHERE MP.R_MEASUREMENT_POINT IN ('A Annulus Temperature','B Annulus Temperature','C Annulus Temperature','D Annulus Temperature','E Annulus Temperature')
	)ST ON (PE.EQUIPMENT_ID = ST.EQUIPMENT_ID AND PE.ENTITY_ID = ST.ENTITY_ID AND ST.MEASUREMENT_DATE = PE.EVENT_DATE)
LEFT OUTER JOIN (SELECT SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.MEASUREMENT_DATE, SP.MEASUREMENT_VALUE, SP.VALUE_UOM AS VALUE_UOM
	FROM PDMExtSrc.EQ_MEASUREMENT SP
	INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON SP.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
	WHERE MP.R_MEASUREMENT_POINT IN ('A Annulus Temperature','B Annulus Temperature','C Annulus Temperature','D Annulus Temperature','E Annulus Temperature')
	)ET ON (PE.EQUIPMENT_ID = ET.EQUIPMENT_ID AND PE.ENTITY_ID = ET.ENTITY_ID AND ET.MEASUREMENT_DATE = TIMESTAMPADD(SQL_TSI_MINUTE,cast(PE.EVENT_DURATION as integer),PE.EVENT_DATE))
LEFT OUTER JOIN (
	SELECT SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.MEASUREMENT_DATE, SP.MEASUREMENT_VALUE, SP.VALUE_UOM AS VALUE_UOM,SP.R_MEASUREMENT_POINT_ID,
	ROW_NUMBER() OVER (PARTITION BY SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.R_MEASUREMENT_POINT_ID 
	ORDER BY SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.R_MEASUREMENT_POINT_ID, SP.MEASUREMENT_DATE) ROW_NUM
	FROM PDMExtSrc.EQ_MEASUREMENT SP
	INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON SP.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
	WHERE MP.R_MEASUREMENT_POINT IN ('A Annulus Pressure','B Annulus Pressure','C Annulus Pressure','D Annulus Pressure','E Annulus Pressure')
	)PRP ON (SP.EQUIPMENT_ID = PRP.EQUIPMENT_ID AND SP.ENTITY_ID = PRP.ENTITY_ID AND SP.R_MEASUREMENT_POINT_ID = PRP.R_MEASUREMENT_POINT_ID AND PRP.ROW_NUM = (SP.ROW_NUM - 1))
LEFT OUTER JOIN (
	SELECT SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.MEASUREMENT_DATE, SP.MEASUREMENT_VALUE, SP.VALUE_UOM AS VALUE_UOM,SP.R_MEASUREMENT_POINT_ID,
	ROW_NUMBER() OVER (PARTITION BY SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.R_MEASUREMENT_POINT_ID 
	ORDER BY SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.R_MEASUREMENT_POINT_ID, SP.MEASUREMENT_DATE) ROW_NUM
	FROM PDMExtSrc.EQ_MEASUREMENT SP
	INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON SP.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
	WHERE MP.R_MEASUREMENT_POINT IN ('A Annulus Pressure','B Annulus Pressure','C Annulus Pressure','D Annulus Pressure','E Annulus Pressure')
	)POP ON (SP.EQUIPMENT_ID = POP.EQUIPMENT_ID AND SP.ENTITY_ID = POP.ENTITY_ID AND SP.R_MEASUREMENT_POINT_ID = POP.R_MEASUREMENT_POINT_ID AND POP.ROW_NUM = (SP.ROW_NUM + 1))
LEFT OUTER JOIN (SELECT SP.EQUIPMENT_ID, SP.ENTITY_ID, SP.MEASUREMENT_DATE, SP.MEASUREMENT_VALUE, SP.VALUE_UOM AS VALUE_UOM
	FROM PDMExtSrc.EQ_MEASUREMENT SP
	INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON SP.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
	WHERE MP.R_MEASUREMENT_POINT IN ('A Annulus Pressure','B Annulus Pressure','C Annulus Pressure','D Annulus Pressure','E Annulus Pressure')
	)DP ON (PE.EQUIPMENT_ID = DP.EQUIPMENT_ID AND PE.ENTITY_ID = DP.ENTITY_ID AND DP.MEASUREMENT_DATE = TIMESTAMPADD(SQL_TSI_MINUTE,(1440 + cast(PE.EVENT_DURATION as integer)),PE.EVENT_DATE))	
;

CREATE VIEW PM_EVENT_DOCUMENT
(
	PE_DOC_FULL_PATH	string(2000)	,
	PE_DOC_PATH	string(2000)	,
	PE_DOC_TITLE	string(200)	,
	PE_DOC_CATEGORY	string(100)	,
	PE_DOC_CATEGORY_ID	string(40)	,
	PE_DOC_SUB_CATEGORY	string(100)	,
	PE_DOC_SUB_CATEGORY_ID	string(40)	,
	PE_DOC_TYPE	string(50)	,
	PE_FIG_REFERENCE	string(100)	,
	PE_DOC_PUBLISHER	string(255)	,
	PE_DOC_ISSUE	string(50)	,
	PE_DOC_LANGUAGE	string(100)	,
	PM_EVENT_ID	string(40)	,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	PE_DOC_ID	string(40)	NOT NULL,
CONSTRAINT PK_PM_EVENT_DOC PRIMARY KEY (PE_DOC_ID))
OPTIONS (UPDATABLE 'FALSE', PM_EVENT_DOCUMENT.IMPLEMENTED 'TRUE')
AS
SELECT SD.DOCUMENT_FULL_PATH,SD.SOURCE_DOCUMENT,SD.DOCUMENT_TITLE,SD.DOC_CATEGORY,SD.DOC_CATEGORY_ID,SD.DOC_SUB_CATEGORY,SD.DOC_SUB_CATEGORY_ID,
SD.DOCUMENT_TYPE,SD.FIGURE_REFERENCE,SD.PUBLISHER,SD.ISSUE,SD.DOC_LANGUAGE,SD.OBJECT_ID,SD.ENTITY_ID,W.WELL_NAME,SD.ROW_CREATED_DATE,
SD.ROW_CREATED_BY,SD.ROW_CHANGED_DATE,SD.ROW_CHANGED_BY,SD.ACTIVE_IND,SD.SOURCE_NAME,SD.REMARKS,SD.SOURCE_DOCUMENT_ID
 FROM PDMExtSrc.SOURCE_DOCUMENT SD
INNER JOIN PPDMSrc.WELL W ON SD.ENTITY_ID = W.WELL_ID
WHERE DOC_CATEGORY = 'Pressure Incident' AND SD.ACTIVE_IND = 'Y'
;

CREATE VIEW WELL_EQUIPMENT (
	WELL_EQUIPMENT_ID string(40) NOT NULL ,
	EQUIPMENT_ID string(40) NOT NULL,
	WELL_EQUIP_NAME string(100),
	EQUIPMENT_NAME string(100) ,
	ACTIVE_IND string(1),
	REMARK string(2000) ,
	EFFECTIVE_DATE timestamp ,
	EXPIRY_DATE timestamp ,	
	SOURCE_NAME string(100) ,	
	ROW_CHANGED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CREATED_BY string(100) ,
	ROW_CREATED_DATE timestamp ,
	ENTITY_ID string(40) NOT NULL ,
	ENTITY_NAME string(255) ,
	EQUIPMENT_SUB_TYPE string(100),
	EQUIP_SUB_TYPE_ID string(40),
	EQUIPMENT_TYPE string(100),
	EQUIP_TYPE_ID string(40),
	TAG_NUM string(40),
	MANUFACTURER string(100),
	SERIAL_NUMBER string(40),
	SCE_IND string(10),
	CONSTRAINT pk_WELL_EQUIP PRIMARY KEY(WELL_EQUIPMENT_ID)
) OPTIONS(UPDATABLE 'TRUE') 
AS
SELECT WELL_EQUIPMENT_ID ,WE.EQUIPMENT_ID,WELL_EQUIP_NAME,E.EQUIPMENT_NAME,WE.ACTIVE_IND,WE.REMARK,WE.EFFECTIVE_DATE,WE.EXPIRY_DATE,WE.SOURCE_NAME,WE.ROW_CHANGED_BY,WE.ROW_CHANGED_DATE,WE.ROW_CREATED_BY
      ,WE.ROW_CREATED_DATE,WE.ENTITY_ID ,W.WELL_NAME AS ENTITY_NAME,EST.CAT_EQUIP_SUB_TYPE,E.EQUIPMENT_SUB_TYPE ,ET.CAT_EQUIP_TYPE
	  ,EST.CAT_EQUIP_TYPE,E.TAG_NUMBER ,BA.BUSINESS_ASSOCIATE ,E.SERIAL_NUM ,'Y' AS GE_SCE_IND
  FROM PDMExtSrc.WELL_EQUIPMENT WE
  INNER JOIN PPDMSrc.WELL W ON WE.ENTITY_ID = W.WELL_ID  
  INNER JOIN (SELECT E.EQUIPMENT_ID,E.EQUIPMENT_NAME,E.EQUIPMENT_SUB_TYPE,E.CAT_EQUIPMENT_ID,E.SERIAL_NUM,NULL AS TAG_NUMBER FROM PPDMSrc.EQUIPMENT E 
  UNION SELECT EE.EQUIPMENT_ID,EE.EQUIPMENT_NAME,NULL,NULL,EE.TAG_NUMBER AS SERIAL_NUM,EE.TAG_NUMBER FROM  PDMExtSrc.EQUIPMENT EE)E ON E.EQUIPMENT_ID = WE.EQUIPMENT_ID 
  LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE EST ON E.EQUIPMENT_SUB_TYPE = EST.CAT_EQUIP_SUB_TYPE_ID
  LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_TYPE ET ON EST.CAT_EQUIP_TYPE = ET.CAT_EQUIP_TYPE_ID
  LEFT OUTER JOIN PPDMSrc.CAT_EQUIPMENT CE ON CE.CAT_EQUIPMENT_ID=E.CAT_EQUIPMENT_ID
  LEFT OUTER JOIN PPDMSrc.BUSINESS_ASSOCIATE BA ON BA.BUSINESS_ASSOCIATE_ID=CE.MANUFACTURER
 UNION ALL 
 SELECT PDEN_EQUIPMENT_ID,WE.EQUIPMENT_ID,PDEN_EQUIPMENT_NAME,E.EQUIPMENT_NAME,WE.ACTIVE_IND,E.REMARK,WE.EFFECTIVE_DATE,WE.EXPIRY_DATE,RS.SOURCE_NAME,WE.ROW_CHANGED_BY,WE.ROW_CHANGED_DATE,WE.ROW_CREATED_BY
      ,WE.ROW_CREATED_DATE ,W.WELL_ID AS ENTITY_ID,W.WELL_NAME AS ENTITY_NAME ,EST.CAT_EQUIP_SUB_TYPE ,E.EQUIPMENT_SUB_TYPE ,ET.CAT_EQUIP_TYPE
	  ,EST.CAT_EQUIP_TYPE ,EE.TAG_NUMBER ,BA.BUSINESS_ASSOCIATE ,E.SERIAL_NUM  ,'Y' AS GE_SCE_IND
  FROM PPDMSrc.PDEN_EQUIPMENT WE
  INNER JOIN PPDMSrc.PDEN_WELL PW ON WE.PDEN_ID = PW.PDEN_ID
  INNER JOIN PPDMSrc.WELL W ON PW.WELL_ID = W.WELL_ID
  INNER JOIN PPDMSrc.EQUIPMENT E ON WE.EQUIPMENT_ID = E.EQUIPMENT_ID
  LEFT OUTER JOIN PDMExtSrc.EQUIPMENT EE ON E.EQUIPMENT_ID = EE.EQUIPMENT_ID
  LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON WE.SOURCE = RS.SOURCE_ID
  INNER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE EST ON E.EQUIPMENT_SUB_TYPE = EST.CAT_EQUIP_SUB_TYPE_ID
  INNER JOIN PPDMSrc.R_CAT_EQUIP_TYPE ET ON EST.CAT_EQUIP_TYPE = ET.CAT_EQUIP_TYPE_ID  
  LEFT OUTER JOIN PPDMSrc.CAT_EQUIPMENT CE ON CE.CAT_EQUIPMENT_ID=E.CAT_EQUIPMENT_ID
  LEFT OUTER JOIN PPDMSrc.BUSINESS_ASSOCIATE BA ON BA.BUSINESS_ASSOCIATE_ID=CE.MANUFACTURER
  ;

CREATE VIEW WI_COMMENTS (
	WI_COMMENTS_ID string(40) NOT NULL ,
	ENTITY_ID string(40) NOT NULL ,
	ENTITY_NAME string(255) ,
	SOURCE_NAME string(100) ,
	ACTIVE_IND string(1),
	DISPLAY_IND string(1),
	DISPLAY_IND_VAL string(20),
	REMARK string(2000) ,
	REMARK_DATE timestamp ,
	ANNOTATION_IND string(1) ,
	ROW_CHANGED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CREATED_BY string(100) ,
	ROW_CREATED_DATE timestamp ,
	HIDE_IND string(10),
	COORDINATOR string(100),
	CONSTRAINT pk_WI_COMMENTS PRIMARY KEY(WI_COMMENTS_ID)
) OPTIONS(UPDATABLE 'TRUE') 
AS
SELECT WR.WELL_REMARK_ID,WR.WELL_ID,W.WELL_NAME,WR.SOURCE_NAME,WR.ACTIVE_IND,WR.DISPLAY_IND,
CASE  WHEN WR.DISPLAY_IND = 'Y' THEN 'Active' ELSE 'Hidden' END AS DISPLAY_IND_VAL,WR.REMARKS,WR.REMARK_DATE,WR.ANNOTATION_IND,
CASE  WHEN WR.ROW_CHANGED_BY IS NULL THEN WR.ROW_CREATED_BY ELSE WR.ROW_CHANGED_BY END  AS ROW_CHANGED_BY,
CASE  WHEN WR.ROW_CHANGED_DATE IS NULL THEN WR.ROW_CREATED_DATE ELSE WR.ROW_CHANGED_DATE END  AS ROW_CHANGED_DATE,WR.ROW_CREATED_BY,WR.ROW_CREATED_DATE,
CASE WHEN DISPLAY_IND = 'Y' THEN 'N' ELSE 'Y' END AS HIDE_IND, WR.COORDINATED_BY
FROM PDMExtSrc.WELL_REMARK AS WR 
INNER JOIN PPDMSrc.WELL W ON W.WELL_ID = WR.WELL_ID
INNER JOIN PDMExtSrc.R_REMARK_TYPE AS RT ON WR.REMARK_TYPE_ID = RT.R_REMARK_TYPE_ID 
WHERE RT.R_REMARK_TYPE='Well Integrity Comments'
;

CREATE VIEW OPERATOR_NOTES (
	OPR_NOTE_ID string(40) NOT NULL ,
	ENTITY_ID string(40) NOT NULL ,
	ENTITY_NAME string(255) ,
	SOURCE_NAME string(100) ,
	COORDINATED_BY string(100),
	REMARK string(2000) ,
	REMARK_DATE timestamp ,
	ROW_CHANGED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CREATED_BY string(100) ,
	ROW_CREATED_DATE timestamp ,
	CONSTRAINT pk_OPERATOR_NOTES PRIMARY KEY(OPR_NOTE_ID)
) OPTIONS(UPDATABLE 'TRUE') 
AS
SELECT WR.WELL_REMARK_ID,WR.WELL_ID,W.WELL_NAME,WR.SOURCE_NAME,WR.COORDINATED_BY ,WR.REMARKS,WR.REMARK_DATE,
CASE  WHEN WR.ROW_CHANGED_BY IS NULL THEN WR.ROW_CREATED_BY ELSE WR.ROW_CHANGED_BY END  AS ROW_CHANGED_BY,
CASE  WHEN WR.ROW_CHANGED_DATE IS NULL THEN WR.ROW_CREATED_DATE ELSE WR.ROW_CHANGED_DATE END  AS ROW_CHANGED_DATE,WR.ROW_CREATED_BY,WR.ROW_CREATED_DATE
FROM PDMExtSrc.WELL_REMARK AS WR 
INNER JOIN PPDMSrc.WELL W ON W.WELL_ID=WR.WELL_ID
INNER JOIN PDMExtSrc.R_REMARK_TYPE AS RT ON WR.REMARK_TYPE_ID = RT.R_REMARK_TYPE_ID 
WHERE RT.R_REMARK_TYPE='Operator Notes'
;

CREATE VIEW TREE_WELLHEAD_NOTES (
	TREE_WH_NOTE_ID string(40) NOT NULL ,
	ENTITY_ID string(40) NOT NULL ,
	ENTITY_NAME string(255) ,
	SOURCE_NAME string(100) ,
	REMARK_TYPE_ID string(100),
	REMARK_TYPE string(100) NOT NULL,
	REMARK string(2000) ,
	REMARK_DATE timestamp ,
	ROW_CHANGED_BY string(100) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CREATED_BY string(100) ,
	ROW_CREATED_DATE timestamp ,
	CONSTRAINT pk_TREE_NOTES  PRIMARY KEY(TREE_WH_NOTE_ID)
) OPTIONS(UPDATABLE 'TRUE') 
AS
SELECT WR.WELL_REMARK_ID,WR.WELL_ID,W.WELL_NAME,WR.SOURCE_NAME,RT.R_REMARK_TYPE_ID,RT.R_REMARK_TYPE,WR.REMARKS,WR.REMARK_DATE,
CASE  WHEN WR.ROW_CHANGED_BY IS  NULL THEN WR.ROW_CREATED_BY ELSE WR.ROW_CHANGED_BY END  AS ROW_CHANGED_BY,
CASE  WHEN WR.ROW_CHANGED_DATE IS NULL THEN WR.ROW_CREATED_DATE ELSE WR.ROW_CHANGED_DATE END  AS ROW_CHANGED_DATE,WR.ROW_CREATED_BY,WR.ROW_CREATED_DATE
FROM PDMExtSrc.WELL_REMARK AS WR 
INNER JOIN PPDMSrc.WELL W ON W.WELL_ID=WR.WELL_ID
INNER JOIN PDMExtSrc.R_REMARK_TYPE AS RT ON WR.REMARK_TYPE_ID = RT.R_REMARK_TYPE_ID 
WHERE RT.R_REMARK_TYPE IN('Tree Notes','Wellhead Notes','Tree and Wellhead Notes')
;

CREATE VIEW WELLBORE (
	WELLBORE_ID string(100) NOT NULL,
	ENTITY_ID string(100) NOT NULL,
	WELLBORE_UWI string(100) NOT NULL,
	WELLBORE_NAME string(255) NOT NULL,
	ENTITY_NAME string(255) NOT NULL,
	ROW_CHANGED_BY string(30),
	ROW_CHANGED_DATE timestamp ,
	ROW_CREATED_BY string(30) ,
	ROW_CREATED_DATE timestamp ,
	ACTIVE_IND   string(10)    ,
	REMARK   string(2000)    ,
	SOURCE_NAME   string(100)  ,
	CONSTRAINT pk_WELLBORE PRIMARY KEY(WELLBORE_ID)
) OPTIONS(UPDATABLE 'TRUE') 
AS
SELECT
		WB.WELL_ID AS WELLBORE_ID, W.WELL_ID AS ENTITY_ID, 
		WB.UWI AS WELLBORE_UWI,  WB.WELL_NAME AS WELLBORE_NAME, W.WELL_NAME AS ENTITY_NAME,
		WB.ROW_CHANGED_BY,WB.ROW_CHANGED_DATE,WB.ROW_CREATED_BY,WB.ROW_CREATED_DATE,WB.ACTIVE_IND,WB.REMARK,
		RS.SOURCE_NAME AS SOURCE_NAME
	FROM
		PPDMSrc.WELL AS WB 
		INNER JOIN PPDMSrc.R_WELL_LEVEL_TYPE AS WL ON WB.WELL_LEVEL_TYPE = WL.R_WELL_LEVEL_TYPE_ID
		 LEFT OUTER JOIN PPDMSrc.WELL_XREF AS WX ON (WX.WELL_ID) = (WB.WELL_ID)
		 LEFT OUTER JOIN PPDMSrc.R_WELL_XREF_TYPE AS RX ON WX.R_WELL_XREF_TYPE_ID = RX.R_WELL_XREF_TYPE_ID AND RX.XREF_TYPE = 'WellboreToWell'
		 LEFT OUTER JOIN PPDMSrc.WELL AS W ON WX.WELL_ID2 = W.WELL_ID
		 LEFT OUTER JOIN PPDMSrc.R_SOURCE AS RS ON WL.SOURCE = RS.SOURCE_ID 
	WHERE
		UPPER(WL.R_WELL_LEVEL_TYPE) = 'BOREHOLE' AND WB.ACTIVE_IND = 'Y';

CREATE VIEW DIR_SURVEY
(
WELLBORE_NAME   string(255)    NOT NULL,
WELLBORE_ID   string(40)    ,
WELLBORE_UWI   string(100)    NOT NULL,
DIR_SURVEY_TYPE   string(100)    NOT NULL,
DIR_SURVEY_TYPEP_ID   string(40)    ,
SURVEY_COMPANY_NAME   string(100)    ,
SURVEY_COMPANY_ID   string(40)    ,
SURVEY_DATE   timestamp    NOT NULL,
MDT   bigdecimal(15,4)    ,
MDB   bigdecimal(15,4)    ,
APPROVED_IND   string(10)    ,
DATUM_TYPE   string(100)    ,
DATUM_TYPE_ID   string(40)    ,
DATUM_EVALUATION   bigdecimal(10, 5)    ,
DATUM_EVAL_IND   string(10)    ,
DATUM_EVAL_DATE   timestamp    ,
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(10)    ,
REMARK   string(2000)    ,
SOURCE_NAME   string(100)    ,
DIR_SURVEY_ID   string(40)    NOT NULL,
CONSTRAINT pk_DIR_SURVEY   PRIMARY KEY(DIR_SURVEY_ID)
)   OPTIONS(UPDATABLE 'FALSE',DIR_SURVEY.IMPLEMENTED 'TRUE') 
AS
SELECT WB.WELL_NAME AS WELLBORE_NAME,WB.WELL_ID AS WELLBORE_ID,WB.UWI AS WELLBORE_UWI,
		DT.SURVEY_TYPE AS DIR_SURVEY_TYPE, WDS.SURVEY_TYPE AS DIR_SURVEY_TYPEP_ID,
		BA.BUSINESS_ASSOCIATE AS SURVEY_COMPANY_NAME,WDS.SURVEY_COMPANY AS SURVEY_COMPANY_ID, WDS.SURVEY_DATE,
		WDS.TOP_DEPTH AS MDT,WDS.BASE_DEPTH AS MDB,
		CASE WDS.SURVEY_QUALITY WHEN 'APPROVED' THEN 'Yes' ELSE 'No' END AS APPROVED_IND, 
		WDT.WELL_DATUM_TYPE AS DATUM_TYPE,
		WDT.R_WELL_DATUM_TYPE_ID AS DATUM_TYPE_ID,
		WDS.REPORT_LOG_DATUM_ELEV AS DATUM_EVALUATION,
		WDT.ACTIVE_IND AS DATUM_EVAL_IND,WDT.EFFECTIVE_DATE AS DATUM_EVAL_DATE,
		 W.WELL_ID AS ENTITY_ID, W.WELL_NAME AS ENTITY_NAME,  
		 WDS.ROW_CREATED_DATE,WDS.ROW_CREATED_BY,WDS.ROW_CHANGED_DATE, WDS.ROW_CHANGED_BY,
		WDS.ACTIVE_IND, WDS.REMARK, RS.SOURCE_NAME AS SOURCE_NAME,  
		  UUID() AS DIR_SURVEY_ID
	FROM
		PDMExtSrc.WELL_DIR_SRVY AS WDS 
		LEFT OUTER JOIN PPDMSrc.WELL AS WB ON WDS.WELL_ID = WB.WELL_ID 
		LEFT OUTER JOIN PPDMSrc.WELL_XREF AS WX ON WB.WELL_ID = WX.WELL_ID 
		LEFT OUTER JOIN PPDMSrc.R_WELL_XREF_TYPE AS RX ON WX.R_WELL_XREF_TYPE_ID = RX.R_WELL_XREF_TYPE_ID AND RX.XREF_TYPE = 'WellboreToWell'
		LEFT OUTER JOIN PPDMSrc.WELL AS W ON WX.WELL_ID2 = W.WELL_ID
		LEFT OUTER JOIN PPDMSrc.R_WELL_DATUM_TYPE AS WDT ON WDS.REPORT_LOG_DATUM = WDT.R_WELL_DATUM_TYPE_ID 
		LEFT OUTER JOIN PPDMSrc.R_SOURCE AS RS ON WDS.SOURCE = RS.SOURCE_ID 
		LEFT OUTER JOIN PPDMSrc.BUSINESS_ASSOCIATE AS BA ON WDS.SURVEY_COMPANY = BA.BUSINESS_ASSOCIATE_ID 
		LEFT OUTER JOIN PDMExtSrc.R_DIR_SRVY_TYPE AS DT ON WDS.SURVEY_TYPE = DT.R_DIR_SRVY_TYPE_ID
	WHERE
		WDS.ACTIVE_IND = 'Y';
		
CREATE VIEW   DIR_SURVEY_DETAILS
(
MD   bigdecimal(15,4)    NOT NULL,
INCLINATION_ANGLE   bigdecimal(15,4)    ,
AZIMUTH   bigdecimal(15,4)    ,
ANGLE_UOM   string(20)    ,
AZIMUTH_UOM   string(20)    ,
TVD   bigdecimal(15,4)    NOT NULL,
SS   bigdecimal(15,4)    ,
DEPARTURE   bigdecimal(15,4)    ,
DEPTH_UOM   string(20)    ,
DOGLEG_SEVERITY   bigdecimal(15,4)    ,
SEVERITY_UOM   string(20)    ,
DX   bigdecimal(15,4)    ,
DY   bigdecimal(15,4)    ,
GEOX   bigdecimal(15,4)    ,
GEOY   bigdecimal(15,4)    ,
DIR_SURVEY_ID   string(40)    NOT NULL,
SURVEY_DATE   timestamp    NOT NULL,
WELLBORE_ID   string(40)    NOT NULL,
WELLBORE_NAME   string(255)    NOT NULL,
WELLBORE_UWI   string(100)    NOT NULL,
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
REMARK   string(2000)    ,
SOURCE_NAME   string(100)    ,
DIR_SURVEY_DET_ID   string(40)    NOT NULL,
CONSTRAINT pk_DIR_SURVEY_DETAILS   PRIMARY KEY(DIR_SURVEY_DET_ID)
)   OPTIONS(UPDATABLE 'FALSE',DIR_SURVEY_DETAILS.IMPLEMENTED 'TRUE') 
AS 
SELECT
WDS.STATION_MD AS MD, WDS.INCLINATION AS INCLINATION_ANGLE, WDS.AZIMUTH,UOM1.UOM AS ANGLE_UOM, 
UOM.UOM AS AZIMUTH_UOM,WDS.STATION_TVD AS TVD,WDS.STATION_TVD_SS AS SS,
(WDS.STATION_MD - WDS.STATION_TVD) AS DEPARTURE, UOM2.UOM AS DEPTH_UOM, 
WDS.DOG_LEG_SEVERITY AS DOGLEG_SEVERITY, NULL AS SEVERITY_UOM,WDS.X_OFFSET AS DX,WDS.Y_OFFSET AS DY,
WDS.GEOLOGICAL_X AS GEOX,WDS.GEOLOGICAL_Y AS GEOY,WDS.SURVEY_ID AS DIR_SURVEY_ID, WDS.EFFECTIVE_DATE AS SURVEY_DATE, 
WB.WELL_ID AS WELLBORE_ID,WB.WELL_NAME AS WELLBORE_NAME,WB.UWI AS WELLBORE_UWI, 
W.WELL_ID AS ENTITY_ID, W.WELL_NAME AS ENTITY_NAME, 
WDS.ROW_CREATED_DATE,WDS.ROW_CREATED_BY, WDS.ROW_CHANGED_DATE, WDS.ROW_CHANGED_BY,
WDS.ACTIVE_IND,  WDS.REMARK,RS.SOURCE_NAME AS SOURCE_NAME,UUID() AS DIR_SURVEY_DET_ID
	FROM
		PDMExtSrc.WELL_DIR_SRVY_DETAILS AS WDS 
		LEFT OUTER JOIN PDMExtSrc.WELL_DIR_SRVY AS WD ON WDS.SURVEY_ID = WD.WELL_DIR_SRVY_ID
		LEFT OUTER JOIN PPDMSrc.WELL AS WB ON WD.WELL_ID = WB.WELL_ID 
		LEFT OUTER JOIN PPDMSrc.WELL_XREF AS WX ON WB.WELL_ID = WX.WELL_ID 
		LEFT OUTER JOIN PPDMSrc.R_WELL_XREF_TYPE AS RX ON WX.R_WELL_XREF_TYPE_ID = RX.R_WELL_XREF_TYPE_ID AND RX.XREF_TYPE = 'WellboreToWell' 
		LEFT OUTER JOIN PPDMSrc.WELL AS W ON WX.WELL_ID2 = W.WELL_ID 
		LEFT OUTER JOIN PPDMSrc.R_SOURCE AS RS ON WDS.SOURCE = RS.SOURCE_ID 
		LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE AS UOM ON WDS.AZIMUTH_OUOM = UOM.UOM_ID 
		LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE AS UOM1 ON WDS.INCLINATION_OUOM = UOM1.UOM_ID 
		LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE AS UOM2 ON WDS.STATION_MD_OUOM = UOM2.UOM_ID 
	WHERE
		WDS.ACTIVE_IND = 'Y';
		
CREATE VIEW GEN_EQUIPMENT_INVENTORY
(
GE_TAG_NUM   string(40)    ,
GE_TYPE_ID   string(40),
GE_TYPE   string(100)    NOT NULL,
GE_SUB_TYPE_ID   string(40),
GE_SUB_TYPE   string(100)    NOT NULL,
GE_NAME   string(100)    NOT NULL,
GE_MANUFACTURER   string(100)    ,
GE_SERIAL_NUM   string(40)    ,
GE_INSTALL_DATE   timestamp    ,
GE_SCE_IND   string(10)    ,
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(10)    ,
SOURCE_NAME   string(100)    ,
REMARK   string(2000)    ,
GEN_EQUIP_ID   string(40)    NOT NULL,
CONSTRAINT pk_GEN_EQUIP_INVENTORY PRIMARY KEY(GEN_EQUIP_ID)
)   OPTIONS(UPDATABLE 'FALSE',GEN_EQUIPMENT_INVENTORY.IMPLEMENTED 'TRUE') 
AS
	SELECT WE.TAG_NUM,EQUIP_TYPE_ID, EQUIPMENT_TYPE, WE.EQUIP_SUB_TYPE_ID, WE.EQUIPMENT_SUB_TYPE, WE.EQUIPMENT_NAME, WE.MANUFACTURER, WE.SERIAL_NUMBER, WE.EFFECTIVE_DATE, WE.SCE_IND,
	WE.ENTITY_ID,WE.ENTITY_NAME,WE.ROW_CREATED_DATE,WE.ROW_CREATED_BY,WE.ROW_CHANGED_DATE,WE.ROW_CHANGED_BY,WE.ACTIVE_IND,WE.SOURCE_NAME,WE.REMARK,
	WE.EQUIPMENT_ID
	FROM PDMTx.WELL_EQUIPMENT WE
	WHERE WE.EQUIPMENT_ID NOT IN (SELECT BARRIER_EQUIP_ID FROM PDMExtSrc.BARRIER_EQUIP_INVENTORY WHERE ACTIVE_IND = 'Y')
;

CREATE VIEW GEN_EQUIP_DOCUMENT
(
	GE_DOC_FULL_PATH	string(2000)	,
	GE_DOC_PATH	string(2000)	,
	GE_DOC_TITLE	string(200)	,
	GE_DOC_CATEGORY	string(100)	,
	GE_DOC_CATEGORY_ID	string(40)	,
	GE_DOC_SUB_CATEGORY	string(100)	,
	GE_DOC_SUB_CATEGORY_ID	string(40)	,
	GE_DOC_TYPE	string(50)	,
	GE_FIG_REFERENCE	string(100)	,
	GE_DOC_PUBLISHER	string(255)	,
	GE_DOC_ISSUE	string(50)	,
	GE_DOC_LANGUAGE	string(100)	,
	GE_NAME	string(100)	,
	GEN_EQUIP_ID	string(40)	,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	GE_DOC_ID	string(40)	NOT NULL,
CONSTRAINT PK_GEN_EQUIP_DOC PRIMARY KEY (GE_DOC_ID))
OPTIONS (UPDATABLE 'FALSE', GEN_EQUIP_DOCUMENT.IMPLEMENTED 'TRUE')
AS
SELECT SD.DOCUMENT_FULL_PATH,SD.SOURCE_DOCUMENT,SD.DOCUMENT_TITLE,SD.DOC_CATEGORY,SD.DOC_CATEGORY_ID,SD.DOC_SUB_CATEGORY,SD.DOC_SUB_CATEGORY_ID,
SD.DOCUMENT_TYPE,SD.FIGURE_REFERENCE,SD.PUBLISHER,SD.ISSUE,SD.DOC_LANGUAGE,E.EQUIPMENT_NAME,WE.EQUIPMENT_ID,SD.ENTITY_ID,W.WELL_NAME,SD.ROW_CREATED_DATE,
SD.ROW_CREATED_BY,SD.ROW_CHANGED_DATE,SD.ROW_CHANGED_BY,SD.ACTIVE_IND,SD.SOURCE_NAME,SD.REMARKS,SD.SOURCE_DOCUMENT_ID AS WA_DOC_ID
 FROM PDMExtSrc.SOURCE_DOCUMENT SD
INNER JOIN PDMExtSrc.WELL_EQUIPMENT WE ON WE.EQUIPMENT_ID = SD.OBJECT_ID
INNER JOIN PPDMSrc.EQUIPMENT E ON WE.EQUIPMENT_ID = E.EQUIPMENT_ID
INNER JOIN PPDMSrc.WELL W ON WE.ENTITY_ID = W.WELL_ID
WHERE SD.DOC_CATEGORY = 'General Equipment' AND SD.ACTIVE_IND = 'Y'
;

CREATE VIEW DHSV_EQUIP_INVENTORY
(
DHSVE_INSTALL_DATE   timestamp    ,
DHSVE_NIPPLE_PROFILE   string(100)    ,
NIPPLE_PROFILE_UOM   string(20)    ,
DHSVE_NIPPLE_SIZE   bigdecimal(15,4)    ,
SIZE_UOM   string(20)    ,
DHSVE_VALVE_MANUFACTURER   string(100)    ,
DHSVE_CONTROL_SYS_TYPE   string(100)    ,
DHSVE_CONTROL_SYS_TYPE_ID   string(40)    ,
DHSVE_VALVE_TYPE   string(100)    ,
DHSVE_VALVE_TYPE_ID   string(40)    ,
DHSVE_VALVE_SIZE   bigdecimal(15,4)    ,
DHSVE_OPR_PRESSURE   bigdecimal(15,4) ,
PRESSURE_UOM   string(20)    ,
DHSVE_REGULATION   string(100)  ,
DHSVE_REGULATION_ID   string(40)    ,
DHSVE_REMARK   string(2000)    NOT NULL,
DHSVE_VALVE_MODEL   string(100)    ,
DHSV_EQUIP_NAME   string(100)    ,
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
SOURCE_NAME   string(100)    ,
DHSV_EQUIP_ID   string(40)    NOT NULL,
DHSV_SER_NUM	string(100),
CONSTRAINT pk_DHSV_EQUIP_INVENTORY   PRIMARY KEY(DHSV_EQUIP_ID)
)   OPTIONS(UPDATABLE 'FALSE',DHSV_EQUIP_INVENTORY.IMPLEMENTED 'TRUE') 
AS 
SELECT DHSVE_INSTALL_DATE,DHSVE_NIPPLE_PROFILE,NIPPLE_PROFILE_UOM,DHSVE_NIPPLE_SIZE,SIZE_UOM,DHSVE_VALVE_MANUFACTURER,DHSVE_CONTROL_SYS_TYPE,DHSVE_CONTROL_SYS_TYPE_ID,DHSVE_VALVE_TYPE,DHSVE_VALVE_TYPE_ID,DHSVE_VALVE_SIZE,
DHSVE_OPR_PRESSURE,PRESSURE_UOM,DHSVE_REGULATION,DHSVE_REGULATION_ID,DHSVE_REMARK,DHSVE_VALVE_MODEL,DHSV_EQUIP_NAME,D.ENTITY_ID,D.ENTITY_NAME,D.ROW_CREATED_DATE,D.ROW_CREATED_BY,
CASE  WHEN D.ROW_CHANGED_DATE IS NULL THEN D.ROW_CREATED_DATE ELSE D.ROW_CHANGED_DATE END  AS ROW_CHANGED_DATE,
CASE  WHEN D.ROW_CHANGED_BY IS NULL THEN D.ROW_CREATED_BY ELSE D.ROW_CHANGED_BY END  AS ROW_CHANGED_BY,D.ACTIVE_IND,D.SOURCE_NAME,DHSV_EQUIP_ID,
E.SERIAL_NUM
FROM PDMExtSrc.DHSV_EQUIP_INVENTORY D
INNER JOIN (SELECT PE.EQUIPMENT_ID,PE.EQUIPMENT_NAME, PE.SERIAL_NUM,NULL FROM PPDMSrc.EQUIPMENT PE 
UNION 
SELECT PEx.EQUIPMENT_ID,PEx.EQUIPMENT_NAME,PEx.TAG_NUMBER,PEx.TAG_NUMBER from  PDMExtSrc.EQUIPMENT PEx )E ON D.DHSV_EQUIP_ID = E.EQUIPMENT_ID
;		

CREATE VIEW GLV_EQUIP_INVENTORY
(
GLVE_VALVE_TYPE   string(100)    NOT NULL,
GLVE_VALVE_TYPE_ID   string(40)    ,
GLVE_VALVE_DIAMETER   bigdecimal(15,4)    ,
DIAMETER_UOM   string(20)    ,
GLVE_LATCH_TYPE   string(100)    ,
GLVE_LATCH_TYPE_ID   string(40)    ,
GLVE_SURF_OPEN_PRESSURE   bigdecimal(15,4)    ,
GLVE_SURF_CLOSE_PRESSURE   bigdecimal(15,4)    ,
PRESSURE_UOM   string(20)    ,
GLVE_PORT_SIZE   bigdecimal(15,4)    ,
SIZE_UOM   string(20)    ,
WELL_BORE   string(255)    NOT NULL,
WELL_BORE_ID   string(40)    ,
GLVE_INSTALL_DATE   timestamp    ,
GLVE_MD   bigdecimal(15,4)    ,
GLVE_TVD   bigdecimal(15,4)    ,
DEPTH_UOM   string(20)    ,
GLV_EQUIP_NAME   string(100)    ,
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
SOURCE_NAME   string(100)    ,
REMARK   string(2000)    ,
GLV_EQUIP_ID   string(40)    NOT NULL,
CONSTRAINT pk_GLV_EQUIP_INVENTORY   PRIMARY KEY(GLV_EQUIP_ID)
)   OPTIONS(UPDATABLE 'FALSE',GLV_EQUIP_INVENTORY.IMPLEMENTED 'TRUE')
AS	
SELECT GLVE_VALVE_TYPE,GLVE_VALVE_TYPE_ID,GLVE_VALVE_DIAMETER,DIAMETER_UOM,GLVE_LATCH_TYPE,GLVE_LATCH_TYPE_ID,GLVE_SURF_OPEN_PRESSURE,GLVE_SURF_CLOSE_PRESSURE,PRESSURE_UOM,GLVE_PORT_SIZE,SIZE_UOM,WELL_BORE,WELL_BORE_ID,GLVE_INSTALL_DATE,GLVE_MD
,GLVE_TVD,DEPTH_UOM,GLV_EQUIP_NAME,ENTITY_ID,ENTITY_NAME,ROW_CREATED_DATE,ROW_CREATED_BY,
CASE  WHEN ROW_CHANGED_DATE IS NULL THEN ROW_CREATED_DATE ELSE ROW_CHANGED_DATE END  AS ROW_CHANGED_DATE,
CASE  WHEN ROW_CHANGED_BY IS NULL THEN ROW_CREATED_BY ELSE ROW_CHANGED_BY END  AS ROW_CHANGED_BY,ACTIVE_IND,SOURCE_NAME,REMARKS, GLV_EQUIP_ID
FROM 
PDMExtSrc.GLV_EQUIP_INVENTORY
;

CREATE VIEW CIV_EQUIP_INVENTORY
(
CIVE_VALVE_TYPE   string(100)    NOT NULL,
CIVE_VALVE_TYPE_ID   string(40)    ,
CIVE_VALVE_DIAMETER   bigdecimal(15,4)    ,
DIAMETER_UOM   string(20)    ,
CIVE_LATCH_TYPE   string(100)    NOT NULL,
CIVE_LATCH_TYPE_ID   string(40)    ,
CIVE_INSTALL_DATE   timestamp    ,
CIVE_MD   bigdecimal(15,4)    ,
CIVE_TVD   bigdecimal(15,4)    ,
DEPTH_UOM   string(20)    ,
CIV_EQUIP_NAME   string(255)    ,
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
SOURCE_NAME   string(100)    ,
REMARK   string(2000)    ,
CIV_EQUIP_ID   string(40)    NOT NULL,
CONSTRAINT pk_CIV_EQUIP_INVENTORY   PRIMARY KEY(CIV_EQUIP_ID)
)   OPTIONS(UPDATABLE 'FALSE',CIV_EQUIP_ID.IMPLEMENTED 'TRUE') 
AS
SELECT CIVE_VALVE_TYPE,CIVE_VALVE_TYPE_ID,CIVE_VALVE_DIAMETER,DIAMETER_UOM,CIVE_LATCH_TYPE,CIVE_LATCH_TYPE_ID,CIVE_INSTALL_DATE,CIVE_MD,CIVE_TVD,DEPTH_UOM,CIV_EQUIP_NAME,ENTITY_ID,ENTITY_NAME,ROW_CREATED_DATE,ROW_CREATED_BY,
CASE  WHEN ROW_CHANGED_DATE IS NULL THEN ROW_CREATED_DATE ELSE ROW_CHANGED_DATE END  AS ROW_CHANGED_DATE,
CASE  WHEN ROW_CHANGED_BY IS NULL THEN ROW_CREATED_BY ELSE ROW_CHANGED_BY END  AS ROW_CHANGED_BY,
ACTIVE_IND,SOURCE_NAME,REMARKS,CIV_EQUIP_ID
FROM PDMExtSrc.CIV_EQUIP_INVENTORY
;

CREATE VIEW WELL_SCHEMATIC_DOCUMENT
(	WS_DOC_FULL_PATH	string(2000)	,
	WS_DOC_PATH	string(2000)	,
	WS_DOC_TITLE	string(200)	,
	WS_DOC_CATEGORY	string(100)	,
	WS_DOC_CATEGORY_ID	string(40)	,
	WS_DOC_SUB_CATEGORY	string(100)	,
	WS_DOC_SUB_CATEGORY_ID	string(40)	,
	WS_DOC_TYPE	string(50)	,
	WS_FIG_REFERENCE	string(100)	,
	WS_DOC_PUBLISHER	string(255)	,
	WS_DOC_ISSUE	string(50)	,
	WS_DOC_LANGUAGE	string(100)	,
	WS_EQUIP_ID	string(40)	,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	WS_DOC_ID	string(40)	NOT NULL,
CONSTRAINT pk_WELL_SCHM_DOC   PRIMARY KEY(WS_DOC_ID)
)   OPTIONS(UPDATABLE 'FALSE',WELL_SCHEMATIC_DOCUMENT.IMPLEMENTED 'TRUE') 
AS
SELECT SD.DOCUMENT_FULL_PATH,SD.SOURCE_DOCUMENT,SD.DOCUMENT_TITLE,SD.DOC_CATEGORY,SD.DOC_CATEGORY_ID,SD.DOC_SUB_CATEGORY,SD.DOC_SUB_CATEGORY_ID,SD.DOCUMENT_TYPE,
SD.FIGURE_REFERENCE,SD.PUBLISHER,SD.ISSUE,SD.DOC_LANGUAGE,NULL,W.WELL_ID,W.WELL_NAME,SD.ROW_CREATED_DATE,SD.ROW_CREATED_BY,SD.ROW_CHANGED_DATE,SD.ROW_CHANGED_BY,
SD.ACTIVE_IND,SD.SOURCE_NAME,SD.REMARKS,SD.SOURCE_DOCUMENT_ID as WS_DOC_ID
FROM PDMExtSrc.SOURCE_DOCUMENT SD
INNER JOIN PPDMSrc.WELL W ON W.WELL_ID = SD.ENTITY_ID
WHERE SD.DOC_CATEGORY = 'WellSchematics'
;

CREATE VIEW R_MEASUREMENT_POINT
(
MEASUREMENT_POINT_ID   string(40)    NOT NULL,
MEASUREMENT_POINT   string(100) ,
MEASUREMENT_TYPE_ID   string(40),
MEASUREMENT_TYPE   string(100) ,
MP_SHORT_NAME	string(50),
MP_LONG_NAME	string(200),
REMARK string(2000),
ROW_CREATED_DATE	timestamp		,
ROW_CREATED_BY	string(100)	,
ROW_CHANGED_DATE	timestamp		,
ROW_CHANGED_BY	string(100)	,
ACTIVE_IND	string(1)	,
SOURCE_NAME	string(100)	,
CONSTRAINT pk_MEAS_POINT   PRIMARY KEY(MEASUREMENT_POINT_ID)
)   OPTIONS(UPDATABLE 'FALSE',R_MEASUREMENT_POINT.IMPLEMENTED 'TRUE') 
AS
SELECT MP.R_MEASUREMENT_POINT_ID, MP.R_MEASUREMENT_POINT, MP.QUANTITY_TYPE_ID, Q.QUANTITY_TYPE, 
	MP.SHORT_NAME, MP.LONG_NAME, MP.REMARK, MP.ROW_CREATED_DATE, MP.ROW_CREATED_BY,
	MP.ROW_CHANGED_DATE, MP.ROW_CHANGED_BY, MP.ACTIVE_IND, RS.SOURCE_NAME
 FROM PPDMSrc.R_MEASUREMENT_POINT MP
 INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON MP.QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
 LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON MP.SOURCE = RS.SOURCE_ID
;

CREATE VIEW R_PM_EVENT_MEAS_TYPE
(
PM_EVENT_MEAS_TYPE_ID   string(40)    NOT NULL,
PM_EVENT_MEAS_TYPE   string(100) ,
PME_SHORT_NAME	string(50),
PME_LONG_NAME	string(200),
REMARK string(2000),
ROW_CREATED_DATE	timestamp		,
ROW_CREATED_BY	string(100)	,
ROW_CHANGED_DATE	timestamp		,
ROW_CHANGED_BY	string(100)	,
ACTIVE_IND	string(1)	,
SOURCE_NAME	string(100)	,
CONSTRAINT pk_PME_MEAS_TYPE   PRIMARY KEY(PM_EVENT_MEAS_TYPE_ID)
)   OPTIONS(UPDATABLE 'FALSE',R_PM_EVENT_MEAS_TYPE.IMPLEMENTED 'TRUE') 
AS
SELECT MP.R_PM_EVENT_MEAS_TYPE_ID, MP.R_PM_EVENT_MEAS_TYPE, 
	MP.SHORT_NAME, MP.LONG_NAME, MP.REMARK, MP.ROW_CREATED_DATE, MP.ROW_CREATED_BY,
	MP.ROW_CHANGED_DATE, MP.ROW_CHANGED_BY, MP.ACTIVE_IND, MP.SOURCE_NAME
 FROM PDMExtSrc.R_PM_EVENT_MEAS_TYPE MP
;

CREATE VIEW BARRIER_EQUIP_SECTION
(
BARRIER_EQUIP_TYPE   string(100)    NOT NULL,
BES_ABBREVIATION   string(20)    ,
BES_SHORT_NAME   string(50)    ,
BES_LONG_NAME   string(255)    ,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp   ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
SOURCE_NAME   string(100)    ,
REMARK   string(2000)    ,
BARRIER_EQUIP_TYPE_ID   string(40)    NOT NULL,
CONSTRAINT pk_BARRIER_EQUIP_SECTION   PRIMARY KEY(BARRIER_EQUIP_TYPE_ID)
)   OPTIONS(UPDATABLE 'FALSE',BARRIER_EQUIP_SECTION.IMPLEMENTED 'TRUE') 
AS
SELECT  RS.R_BARRIER_EQUIP_TYPE AS BARRIER_EQUIP_SEC_NAME, RS.ABBREVIATION AS BES_ABBREVIATION,RS.SHORT_NAME AS BES_SHORT_NAME,
		 RS.LONG_NAME AS BES_LONG_NAME,RS.ROW_CREATED_DATE,RS.ROW_CREATED_BY, RS.ROW_CHANGED_DATE,
		 RS.ROW_CHANGED_BY, RS.ACTIVE_IND, RS.SOURCE_NAME AS SOURCE_NAME,RS.REMARK,RS.R_BARRIER_EQUIP_TYPE_ID AS BARRIER_EQUIP_SEC_ID
	FROM
		PDMExtSrc.R_BARRIER_EQUIP_TYPE AS RS 
;
		
CREATE VIEW BARRIER_EQUIP_TEST_DETAILS
(
BE_TEST_DATE   timestamp    NOT NULL,
BE_TEST_TYPE   string(100)    NOT NULL,
BE_TEST_TYPE_ID   string(40)    ,
BE_TEST_DETAILS   string(2000)    ,
BE_TEST_RESULT   string(200)    ,
BE_TEST_RESULT_ID   string(40)    ,
BE_TEST_RESULT_UOM   string(20)    ,
BARRIER_EQUIP_ID   string(40),
BARRIER_EQUIP_NAME   string(100)    NOT NULL,
BARRIER_EQUIP_SEC_ID   string(40),
BARRIER_EQUIP_SEC_NAME   string(100)    NOT NULL,
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
SOURCE_NAME   string(100)    ,
REMARK   string(2000)    ,
BARRIER_EQUIP_TEST_ID   string(40)    NOT NULL,
LEVEL1_ID	string(40)	,
LEVEL1_NAME	string(255)	,
LEVEL1_TYPE	string(100)	,
LEVEL2_ID	string(40)	,
LEVEL2_NAME	string(255)	,
LEVEL2_TYPE	string(100)	,
LEVEL3_ID	string(40)	,
LEVEL3_NAME	string(255)	,
LEVEL3_TYPE	string(100)	,
LEVEL4_ID	string(40)	,
LEVEL4_NAME	string(255)	,
LEVEL4_TYPE	string(100)	,
LEVEL5_ID	string(40)	,
LEVEL5_NAME	string(255)	,
LEVEL5_TYPE	string(100)	,
LEVEL6_ID	string(40)	NOT NULL,
LEVEL6_NAME	string(255)	,
LEVEL6_TYPE	string(100),
CONSTRAINT pk_BARRIER_EQUIP_TEST_DETAILS   PRIMARY KEY(BARRIER_EQUIP_TEST_ID)
)   OPTIONS(UPDATABLE 'FALSE',BARRIER_EQUIP_TEST_DETAILS.IMPLEMENTED 'TRUE') 
AS
SELECT BET.TEST_DATE AS BE_TEST_DATE,BETT.BARRIER_EQUIP_TEST_TYPE AS BE_TEST_TYPE, 
BETT.BARRIER_EQUIP_TEST_TYPE_ID AS BE_TEST_TYPE_ID, BETMT.R_MEASUREMENT_POINT AS BE_TEST_DETAILS,
TR.TEST_RESULT AS BE_TEST_RESULT, BET.TEST_RESULT_ID AS BE_TEST_RESULT_ID,PUOM.UOM AS BE_TEST_RESULT_UOM,
BET.EQUIPMENT_ID AS BARRIER_EQUIP_ID, E.EQUIPMENT_NAME AS BARRIER_EQUIP_NAME  ,
ET.CAT_EQUIP_TYPE_ID AS BARRIER_EQUIP_SEC_ID,ET.CAT_EQUIP_TYPE AS BARRIER_EQUIP_SEC_NAME,W.WELL_ID AS ENTITY_ID, W.WELL_NAME AS ENTITY_NAME,  
BETM.ROW_CREATED_DATE,BETM.ROW_CREATED_BY, BETM.ROW_CHANGED_DATE, BETM.ROW_CHANGED_BY, BET.ACTIVE_IND,PPDMSrc.R_SOURCE.SOURCE_NAME,
NULL AS REMARK,BET.BARRIER_EQUIP_TEST_ID, NULL AS  LEVEL1_ID,
NULL AS  LEVEL1_NAME,NULL AS  LEVEL1_TYPE,NULL AS  LEVEL2_ID,NULL AS  LEVEL2_NAME,NULL AS  LEVEL2_TYPE,NULL AS  LEVEL3_ID,
NULL AS  LEVEL3_NAME,NULL AS  LEVEL3_TYPE,NULL AS  LEVEL4_ID,NULL AS  LEVEL4_NAME,NULL AS  LEVEL4_TYPE,
NULL AS  LEVEL5_ID,NULL AS  LEVEL5_NAME,NULL AS  LEVEL5_TYPE,WA.AREA_ID AS  LEVEL6_ID,NULL AS  LEVEL6_NAME,
NULL AS  LEVEL6_TYPE
	FROM
		PDMExtSrc.BARRIER_EQUIP_TEST AS BET 
		INNER JOIN PDMExtSrc.BARRIER_EQUIP_TEST_MEAS AS BETM ON (BET.BARRIER_EQUIP_TEST_ID) = (BETM.BARRIER_EQUIP_TEST_ID) 
		AND BETM.ACTIVE_IND = 'Y'
		LEFT OUTER JOIN PDMExtSrc.R_BARRIER_EQUIP_TEST_TYPE AS BETT ON (BETT.BARRIER_EQUIP_TEST_TYPE_ID) = (BET.BARRIER_EQUIP_TEST_TYPE_ID) 
		LEFT OUTER JOIN PDMExtSrc.R_BARRIER_EQUIP_TEST_MEAS_PT AS BETMT ON (BETMT.R_MEASUREMENT_POINT_ID) = (BETM.MEASUREMENT_POINT_ID) 
		INNER JOIN PPDMSrc.EQUIPMENT AS E ON (BET.EQUIPMENT_ID) = (E.EQUIPMENT_ID)
		INNER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE AS EST ON (E.EQUIPMENT_SUB_TYPE) = (EST.CAT_EQUIP_SUB_TYPE_ID)
		INNER JOIN PPDMSrc.R_CAT_EQUIP_TYPE AS ET ON EST.CAT_EQUIP_TYPE = IFNULL(ET.CAT_EQUIP_TYPE_ID, '')
		LEFT OUTER JOIN PDMExtSrc.R_TEST_RESULT AS TR ON BET.TEST_RESULT_ID = TR.R_TEST_RESULT_ID 
		INNER JOIN PPDMSrc.WELL AS W ON BET.ENTITY_ID = W.WELL_ID
		 LEFT OUTER JOIN PPDMSrc.PPDM_QUANTITY AS PQ ON PQ.QUANTITY_TYPE_ID = BETMT.QUANTITY_TYPE_ID
		LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE AS PUOM ON PUOM.UOM_QUANTITY_TYPE_ID = PQ.QUANTITY_TYPE_ID AND PUOM.UOM_SYSTEM_ID IN 
		 (SELECT PMS2.UOM_SYSTEM_ID FROM PPDMSrc.PPDM_MEASUREMENT_SYSTEM AS PMS2 WHERE PMS2.UOM_SYSTEM = 'English')
		LEFT OUTER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM AS PMS ON PMS.UOM_SYSTEM_ID = PUOM.UOM_SYSTEM_ID AND PMS.UOM_SYSTEM = 'English' 
		 LEFT OUTER JOIN PPDMSrc.R_SOURCE ON BETM.SOURCE = R_SOURCE.SOURCE_ID
		 INNER JOIN PPDMSrc.WELL_AREA WA ON (W.WELL_ID = WA.WELL_ID AND WA.ACTIVE_IND = 'Y')
	WHERE
		BET.ACTIVE_IND = 'Y';	

CREATE VIEW R_BARRIER_ENVELOPE
(
BARRIER_ENV_ID   string(40)    NOT NULL,
BARRIER_ENVELOPE   string(100) ,
BE_SHORT_NAME	string(50),
BE_LONG_NAME	string(200),
REMARK string(2000),
ROW_CREATED_DATE	timestamp		,
ROW_CREATED_BY	string(100)	,
ROW_CHANGED_DATE	timestamp		,
ROW_CHANGED_BY	string(100)	,
ACTIVE_IND	string(1)	,
SOURCE_NAME	string(100)	,
CONSTRAINT pk_R_BE   PRIMARY KEY(BARRIER_ENV_ID)
)   OPTIONS(UPDATABLE 'FALSE',R_BARRIER_ENVELOPE.IMPLEMENTED 'TRUE') 
AS
SELECT BE.R_BARRIER_ENVELOPE_ID, BE.R_BARRIER_ENVELOPE, 
	BE.SHORT_NAME, BE.LONG_NAME, BE.REMARK, BE.ROW_CREATED_DATE, BE.ROW_CREATED_BY,
	BE.ROW_CHANGED_DATE, BE.ROW_CHANGED_BY, BE.ACTIVE_IND, BE.SOURCE_NAME
 FROM PDMExtSrc.R_BARRIER_ENVELOPE BE
;		

CREATE VIEW BARRIER_EQUIP_INVENTORY
(
BARRIER_EQUIP_SUB_TYPE   string(100)    NOT NULL,
BARRIER_EQUIP_SUB_TYPE_ID   string(40)    ,
BARRIER_EQUIP_NAME   string(100)    NOT NULL,
BE_OPERATING_PRESSURE   bigdecimal(15,4)    ,
PRESSURE_UOM   string(20)    ,
BE_REGULATION   string(100)    ,
BE_REGULATION_ID   string(40)    ,
BE_SCE_IND   string(1)    NOT NULL,
BARRIER_ENVELOPE   string(100)    NOT NULL,
BE_REMARK   string(2000)    ,
BE_TAG_NUM   string(40)    ,
BE_MANUFACTURER   string(100)    ,
BE_SERIAL_NUM   string(40)    ,
BE_INSTALL_DATE   timestamp    ,
BARRIER_ENVELOPE_ID   string(40) ,
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
SOURCE_NAME   string(100)    ,
BARRIER_EQUIP_ID   string(40)    NOT NULL,
BARRIER_EQUIP_TYPE   string(100)  ,
BARRIER_EQUIP_TYPE_ID   string(40)    ,
PREVIOUS_TEST_DATE timestamp,
CURRENT_TEST_DATE timestamp,
CURRENT_TEST_RISK_RANK string(40),
CONSTRAINT pk_BARRIER_EQUIP_INVENTORY   PRIMARY KEY(BARRIER_EQUIP_ID)
)   OPTIONS(UPDATABLE 'FALSE',BARRIER_EQUIP_ID.IMPLEMENTED 'TRUE') 
AS
SELECT WE.EQUIPMENT_SUB_TYPE, WE.EQUIP_SUB_TYPE_ID, 
WE.EQUIPMENT_NAME,BEI.BE_OPERATING_PRESSURE,BEI.PRESSURE_UOM,
BEI.BE_REGULATION,BEI.BE_REGULATION_ID,BEI.BE_SCE_IND,
BEI.BARRIER_ENVELOPE,BEI.BE_REMARK,WE.TAG_NUM,WE.MANUFACTURER,
WE.SERIAL_NUMBER,WE.EFFECTIVE_DATE,BEI.BARRIER_ENVELOPE_ID,WE.ENTITY_ID,WE.ENTITY_NAME,BEI.ROW_CREATED_DATE,
BEI.ROW_CREATED_BY,
CASE  WHEN BEI.ROW_CHANGED_DATE IS NULL THEN BEI.ROW_CREATED_DATE ELSE BEI.ROW_CHANGED_DATE END  AS ROW_CHANGED_DATE,
CASE  WHEN BEI.ROW_CHANGED_BY IS NULL THEN BEI.ROW_CREATED_BY ELSE BEI.ROW_CHANGED_BY END  AS ROW_CHANGED_BY,BEI.ACTIVE_IND,
BEI.SOURCE_NAME,BEI.BARRIER_EQUIP_ID,WE.EQUIPMENT_TYPE,WE.EQUIP_TYPE_ID,
KET.PREVIOUS_TEST_DATE AS PREVIOUS_TEST_DATE,
KET.CURRENT_TEST_DATE AS CURRENT_TEST_DATE,
KET.SEVERITY AS CURRENT_TEST_RISK_RANK 
FROM PDMExtSrc.BARRIER_EQUIP_INVENTORY BEI
INNER JOIN PDMTx.WELL_EQUIPMENT WE ON BEI.BARRIER_EQUIP_ID = WE.EQUIPMENT_ID
LEFT OUTER JOIN 
	(SELECT ENTITY_ID, EQUIPMENT_ID, MAX(CASE ROW_NUM WHEN 1 THEN R_PRIORITY END) AS SEVERITY,
	MAX(CASE ROW_NUM WHEN 1 THEN TEST_DATE END) AS CURRENT_TEST_DATE, MAX(CASE ROW_NUM WHEN 2 THEN TEST_DATE END) AS PREVIOUS_TEST_DATE
	FROM 
		(SELECT ENTITY_ID, EQUIPMENT_ID, R_PRIORITY, TEST_DATE,ROW_NUMBER() OVER (PARTITION BY ENTITY_ID, EQUIPMENT_ID ORDER BY TEST_DATE DESC) AS ROW_NUM 
		FROM PDMExtSrc.BARRIER_EQUIP_TEST B
		LEFT OUTER JOIN PDMExtSrc.R_PRIORITY P ON B.SEVERITY_ID = P.R_PRIORITY_ID) 
	AS TR
	GROUP BY ENTITY_ID, EQUIPMENT_ID) KET ON (KET.EQUIPMENT_ID = BEI.BARRIER_EQUIP_ID AND WE.ENTITY_ID = KET.ENTITY_ID)
;
		
CREATE VIEW R_WI_STATUS
(
WI_STATUS_ID   string(40)    NOT NULL,
WI_STATUS   string(100) ,
WIS_SHORT_NAME	string(50),
WIS_LONG_NAME	string(200),
REMARK string(2000),
ROW_CREATED_DATE	timestamp		,
ROW_CREATED_BY	string(100)	,
ROW_CHANGED_DATE	timestamp		,
ROW_CHANGED_BY	string(100)	,
ACTIVE_IND	string(1)	,
SOURCE_NAME	string(100)	,
CONSTRAINT pk_R_WIS   PRIMARY KEY(WI_STATUS_ID)
)   OPTIONS(UPDATABLE 'FALSE',R_WI_STATUS.IMPLEMENTED 'TRUE') 
AS
SELECT WIS.WI_STATUS_ID, WIS.WI_STATUS, 
	WIS.SHORT_NAME, WIS.LONG_NAME, WIS.REMARK, WIS.ROW_CREATED_DATE, WIS.ROW_CREATED_BY,
	WIS.ROW_CHANGED_DATE, WIS.ROW_CHANGED_BY, WIS.ACTIVE_IND, WIS.SOURCE_NAME
 FROM PDMExtSrc.R_WI_STATUS WIS
;

CREATE VIEW WI_STATUS
(
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME string(100) NOT NULL,
R_WI_STATUS   string(100),
R_WI_STATUS_ID string(40),
INJECTION_TYPE_ID   string(40)    ,
INJECTION_TYPE   string(100)    ,
UWI   string(100)    ,
WELL_TYPE_ID   string(40)    ,
WELL_TYPE   string(100)    ,
ARTIFICIAL_LIFT_ID   string(40)    ,
ARTIFICIAL_LIFT   string(100)    ,
WELL_HISTORY   string(2000)    ,
DHSV   string(2000)    ,
WIE_NOTE   string(2000)    ,
REMARK string(2000),
ROW_CREATED_DATE	timestamp,
ROW_CREATED_BY	string(100)	,
ROW_CHANGED_DATE	timestamp,
ROW_CHANGED_BY	string(100)	,
ACTIVE_IND	string(1)	,
SOURCE_NAME	string(100)	,
LEVEL1_ID	string(40)	,
LEVEL1_NAME	string(255)	,
LEVEL1_TYPE	string(100)	,
LEVEL2_ID	string(40)	,
LEVEL2_NAME	string(255)	,
LEVEL2_TYPE	string(100)	,
LEVEL3_ID	string(40)	,
LEVEL3_NAME	string(255)	,
LEVEL3_TYPE	string(100)	,
LEVEL4_ID	string(40)	,
LEVEL4_NAME	string(255)	,
LEVEL4_TYPE	string(100)	,
LEVEL5_ID	string(40)	,
LEVEL5_NAME	string(255)	,
LEVEL5_TYPE	string(100)	,
LEVEL6_ID	string(40)	NOT NULL,
LEVEL6_NAME	string(255)	,
LEVEL6_TYPE	string(100)	,
RISK_RANK integer,
EVAL_START_DATE timestamp,
DEVIATION string(200),
IF_TYPE string(2000),
RISK_SEVERITY string(100),
RISK_SEV_COLOR string(100),
REG_DEP_ANNULUS string(100),
CONSTRAINT pk_WIS   PRIMARY KEY(ENTITY_ID)
)   OPTIONS(UPDATABLE 'FALSE',WI_STATUS.IMPLEMENTED 'TRUE') 
AS 
SELECT WS.WELL_ID, W.WELL_NAME, WIS.WI_STATUS, WS.R_WI_STATUS_ID,RIT.R_INJECTION_TYPE_ID,RIT.R_INJECTION_TYPE,W.UWI,WS.PRODUCTION_STATUS_ID,RWS.STATUS,PM.R_PRODUCTION_METHOD_ID,PM.PRODUCTION_METHOD,WS.WELL_HISTORY,
WS.DHSV,WS.WIE_NOTE , WS.REMARKS, WS.ROW_CREATED_DATE,WS.ROW_CREATED_BY, WS.ROW_CHANGED_DATE, WS.ROW_CHANGED_BY, WS.ACTIVE_IND, WS.SOURCE_NAME,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
WA.AREA_ID,A.PREFERRED_NAME,AT.AREA_TYPE, cast(RR.WEIGHTAGE_FACTOR as integer) AS RISK_RANK, EV.EVAL_START_DATE, cast(D.RESTRICTION_TYPE as string) AS DEVIATION,
WBE.IF_TYPE, RP.R_PRIORITY AS RISK_SEVERITY, RP.COLOR_CODE AS RISK_COLOR, DE.DEP_ANN_NAME
FROM PDMExtSrc.WELL WS
INNER JOIN PPDMSrc.WELL W ON WS.WELL_ID = W.WELL_ID
INNER JOIN PPDMSrc.WELL_AREA WA ON (WA.WELL_ID= W.WELL_ID AND WA.ACTIVE_IND  = 'Y')
INNER JOIN PPDMSrc.R_WELL_STATUS RWS ON RWS.R_WELL_STATUS_ID= WS.PRODUCTION_STATUS_ID
INNER JOIN PPDMSrc.AREA A ON WA.AREA_ID = A.AREA_ID
LEFT OUTER JOIN PPDMSrc.R_AREA_TYPE AT ON A.AREA_TYPE = AT.R_AREA_TYPE_ID
LEFT OUTER JOIN PDMExtSrc.R_WI_STATUS WIS ON WS.R_WI_STATUS_ID = WIS.WI_STATUS_ID
LEFT OUTER JOIN PDMExtSrc.R_INJECTION_TYPE RIT ON RIT.R_INJECTION_TYPE_ID= WS.INJECTION_TYPE_ID
LEFT OUTER JOIN PPDMSrc.R_PRODUCTION_METHOD PM ON WS.PRODUCTION_METHOD_ID = PM.R_PRODUCTION_METHOD_ID
LEFT OUTER JOIN PDMExtSrc.PROCESS_MATRIX RR ON W.WELL_ID = RR.ENTITY_ID
LEFT OUTER JOIN PDMExtSrc.R_PRIORITY RP ON RR.SEVERITY_TYPE = RP.R_PRIORITY_ID
LEFT OUTER JOIN (SELECT ENTITY_ID, EVAL_START_DATE, ROW_NUMBER() OVER (PARTITION BY ENTITY_ID ORDER BY EVAL_START_DATE DESC, ROW_CREATED_DATE DESC, ROW_CHANGED_DATE DESC) ROW_NUM
	FROM PDMExtSrc.EVALUATION E)EV ON (W.WELL_ID = EV.ENTITY_ID AND EV.ROW_NUM = 1)
LEFT OUTER JOIN (SELECT ENTITY_ID, string_agg(RESTRICTION_TYPE,',') AS RESTRICTION_TYPE
	FROM
	(
	SELECT ENTITY_ID, RT.RESTRICTION_TYPE, 
	ROW_NUMBER() OVER (PARTITION BY ENTITY_ID, RT.RESTRICTION_TYPE ORDER BY START_DATE DESC, D.ROW_CREATED_DATE DESC, D.ROW_CHANGED_DATE DESC) ROW_NUM
	FROM PDMExtSrc.DEVIATION D
	INNER JOIN PDMExtSrc.R_REST_TYPE RT ON D.R_DEVIATION_TYPE_ID = RT.R_REST_TYPE_ID
	)D 
	WHERE D.ROW_NUM = 1
	GROUP BY ENTITY_ID)D ON (W.WELL_ID = D.ENTITY_ID)
LEFT OUTER JOIN (SELECT WE.ENTITY_ID, 
	(FT.R_IF_TYPE || (CASE WHEN EST.CAT_EQUIP_SUB_TYPE IS NOT NULL THEN (',' || EST.CAT_EQUIP_SUB_TYPE) ELSE '' END)) AS IF_TYPE,
		ROW_NUMBER() OVER (PARTITION BY ENTITY_ID ORDER BY (CASE WHEN (IF_END_DATE IS NULL) THEN 1 ELSE 0 END) DESC, IF_END_DATE DESC) ROW_NUM
		 FROM PDMExtSrc.WI_FAILURE_IMPAIRMENT WE
		INNER JOIN PDMExtSrc.R_IF_TYPE FT ON WE.FAILURE_IMPAIR_TYPE_ID = FT.R_IF_TYPE_ID
		LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE EST ON WE.EQUIP_SUB_TYPE_ID = EST.CAT_EQUIP_SUB_TYPE_ID
		WHERE (WE.FAILURE_IMPAIR_TYPE_ID IS NOT NULL AND WE.FAILURE_IMPAIR_TYPE_ID <> '')
	)WBE ON (W.WELL_ID = WBE.ENTITY_ID AND WBE.ROW_NUM = 1)
LEFT OUTER JOIN (SELECT ENTITY_ID, DEP_ANN_NAME
	FROM
	(
	SELECT ENTITY_ID, CASE WHEN D.EQUIPMENT_ID IS NULL THEN D.EQUIPMENT_NAME ELSE E.EQUIPMENT_NAME END DEP_ANN_NAME, 
	ROW_NUMBER() OVER (PARTITION BY ENTITY_ID ORDER BY SUBMISSION_DATE DESC, D.ROW_CREATED_DATE DESC, D.ROW_CHANGED_DATE DESC) ROW_NUM
	FROM PDMExtSrc.DEPARTURE D
	LEFT OUTER JOIN PPDMSrc.EQUIPMENT E ON D.EQUIPMENT_ID = E.EQUIPMENT_ID
	)D 
	WHERE D.ROW_NUM = 1)DE ON (W.WELL_ID = DE.ENTITY_ID)	
;

CREATE VIEW R_DEVIATION_TYPE(
R_DEV_TYPE_ID string(40) NOT NULL,
DEVIATION_TYPE string(100) NOT NULL,
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
ACTIVE_IND string(10),
REMARK string(2000),
SOURCE_NAME  string(40),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CREATED_DATE timestamp,
CONSTRAINT pk_DEV_TYPE   PRIMARY KEY(R_DEV_TYPE_ID)
)   OPTIONS(UPDATABLE 'FALSE',DEVIATION_TYPE.IMPLEMENTED 'TRUE') 
AS
SELECT R_REST_TYPE_ID, RESTRICTION_TYPE,RT.EFFECTIVE_DATE,RT.EXPIRY_DATE,RT.ACTIVE_IND ,RT.REMARK,RT.SOURCE_NAME, RT.ROW_CHANGED_BY,RT.ROW_CHANGED_DATE,RT.ROW_CREATED_BY,RT.ROW_CREATED_DATE
FROM PDMExtSrc.R_REST_TYPE RT;

CREATE VIEW DEV_COMMUNICATION_TYPE(
DEV_COMMN_TYPE_ID string(40) NOT NULL,
DEV_COMMN_TYPE string(100) NOT NULL,
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
ACTIVE_IND string(10),
REMARK string(2000),
SOURCE_NAME  string(100),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CREATED_DATE timestamp,
CONSTRAINT pk_DEV_COMMN_TYPE   PRIMARY KEY(DEV_COMMN_TYPE_ID)
)   OPTIONS(UPDATABLE 'FALSE',DEV_COMMUNICATION_TYPE.IMPLEMENTED 'TRUE') 
AS
SELECT REST_CLASS_ID, REST_CLASS_NAME, RRT.EFFECTIVE_DATE,RRT.EXPIRY_DATE,RRT.ACTIVE_IND, RRT.REMARK,RRT.SOURCE_NAME, RRT.ROW_CHANGED_BY, RRT.ROW_CHANGED_DATE, RRT.ROW_CREATED_BY, RRT.ROW_CREATED_DATE
FROM PDMExtSrc.REST_CLASS RRT;

CREATE VIEW DEVIATION(
DEVIATION_TYPE   string(100)    NOT NULL,
DEVIATION_TYPE_ID   string(40)    ,
DEV_COMMN_TYPE   string(100)    NOT NULL,
DEV_COMMN_TYPE_ID   string(40)    ,
DEV_START_DATE   timestamp    ,
DEV_END_DATE   timestamp    ,
DEV_NUM_DAYS   integer    ,
DEV_REMARK   string(2000)    NOT NULL,
EXCL_MISS_ANN_REP_IND   string(10)    ,
DEV_EQUIP_ID string(40),
DEV_EQUIP_NAME string(100),
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp    ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(10)    ,
SOURCE_NAME   string(100)    ,
DEVIATION_ID   string(40)    NOT NULL,
	LEVEL1_ID	string(40)	,
	LEVEL1_NAME	string(255)	,
	LEVEL1_TYPE	string(100)	,
	LEVEL2_ID	string(40)	,
	LEVEL2_NAME	string(255)	,
	LEVEL2_TYPE	string(100)	,
	LEVEL3_ID	string(40)	,
	LEVEL3_NAME	string(255)	,
	LEVEL3_TYPE	string(100)	,
	LEVEL4_ID	string(40)	,
	LEVEL4_NAME	string(255)	,
	LEVEL4_TYPE	string(100)	,
	LEVEL5_ID	string(40)	,
	LEVEL5_NAME	string(255)	,
	LEVEL5_TYPE	string(100)	,
	LEVEL6_ID	string(40)	,
	LEVEL6_NAME	string(255)	NOT NULL,
	LEVEL6_TYPE	string(100)	,
CONSTRAINT pk_DEVIATION   PRIMARY KEY(DEVIATION_ID)
)   OPTIONS(UPDATABLE 'FALSE',DEVIATION.IMPLEMENTED 'TRUE') 
AS
SELECT RT.RESTRICTION_TYPE AS DEVIATION_TYPE, D.R_DEVIATION_TYPE_ID AS DEVIATION_TYPE_ID,
RC.REST_CLASS_NAME  AS COMMUNICATION_TYPE,D.R_DEVIATION_CLASS_ID AS COMMUNICATION_TYPE_ID,
D.START_DATE AS DEVIATION_START_DATE,D.END_DATE AS DEVIATION_END_DATE,
CAST(TIMESTAMPDIFF(SQL_TSI_DAY, D.START_DATE, 
	CAST((CASE WHEN D.END_DATE IS NULL THEN NOW() ELSE D.END_DATE END) AS DATE)) AS INTEGER) AS DEVIATION_NUM_DAYS,
D.REMARK AS DEVIATION_REMARK,
CASE D.EXCLUDE_IND WHEN 'Y' THEN 'Yes' WHEN 'N' THEN 'No' ELSE null END AS EXCL_MISS_ANN_REPORT_IND, D.EQUIPMENT_ID, D.EQUIPMENT_NAME,
D.ENTITY_ID,W.WELL_NAME,D.ROW_CREATED_DATE,D.ROW_CREATED_BY,D.ROW_CHANGED_DATE,D.ROW_CHANGED_BY,D.ACTIVE_IND,
D.SOURCE_NAME,DEVIATION_ID, NULL AS  LEVEL1_ID,
NULL AS  LEVEL1_NAME,NULL AS  LEVEL1_TYPE,NULL AS  LEVEL2_ID,NULL AS  LEVEL2_NAME,NULL AS  LEVEL2_TYPE,NULL AS  LEVEL3_ID,
NULL AS  LEVEL3_NAME,NULL AS  LEVEL3_TYPE,NULL AS  LEVEL4_ID,NULL AS  LEVEL4_NAME,NULL AS  LEVEL4_TYPE,
NULL AS  LEVEL5_ID,NULL AS  LEVEL5_NAME,NULL AS  LEVEL5_TYPE,WA.AREA_ID AS  LEVEL6_ID,NULL AS  LEVEL6_NAME,
NULL AS  LEVEL6_TYPE
FROM PDMExtSrc.DEVIATION D
LEFT OUTER JOIN PDMExtSrc.R_REST_TYPE AS RT ON D.R_DEVIATION_TYPE_ID = RT.R_REST_TYPE_ID
LEFT OUTER JOIN PDMExtSrc.REST_CLASS AS RC ON D.R_DEVIATION_CLASS_ID = RC.REST_CLASS_ID
INNER JOIN PPDMSrc.WELL W ON D.ENTITY_ID = W.WELL_ID
INNER JOIN PPDMSrc.WELL_AREA WA ON W.WELL_ID = WA.WELL_ID
;

CREATE VIEW REGULATORY_DEPARTURE
(
ANNULUS_NAME   string(100)    NOT NULL,
ANNULUS_ID   string(40)    ,
REG_DEPT_DESC   string(2000)    NOT NULL,
SUBMISSION_DATE   timestamp   ,
APPROVAL_DATE   timestamp   ,
EXPIRY_DATE   timestamp   ,
PRESSURE_LIMIT   bigdecimal(15,4)    ,
PRESSURE_UOM   string(20)    ,
LEAD_TIME   integer    ,
LEAD_TIME_UOM   string(20)    ,
RESOLVED_IND   string(10)    ,
REG_DEPT_REMARK   string(2000),
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp   ,
ROW_CREATED_BY   string(100)    ,
ROW_CHANGED_DATE   timestamp   ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
SOURCE_NAME   string(100)    ,
REG_DEPT_ID   string(40)    NOT NULL,
LEVEL1_ID  string (   40),
LEVEL1_NAME  string (   255),
LEVEL1_TYPE  string (   100),
LEVEL2_ID  string (   40),
LEVEL2_NAME  string (   255),
LEVEL2_TYPE  string (   100),
LEVEL3_ID  string (   40  ),
LEVEL3_NAME  string (   255),
LEVEL3_TYPE  string (   100),
LEVEL4_ID  string (   40  ),
LEVEL4_NAME  string (   255),
LEVEL4_TYPE  string (   100),
LEVEL5_ID  string (   40  ),
LEVEL5_NAME  string (   255),
LEVEL5_TYPE  string (   100),
LEVEL6_ID  string (   40  ) NOT NULL,
LEVEL6_NAME  string (   255),
LEVEL6_TYPE  string (100),
CONSTRAINT pk_REG_DEPARTURE   PRIMARY KEY(REG_DEPT_ID)
)   OPTIONS(UPDATABLE 'FALSE',REGULATORY_DEPARTURE.IMPLEMENTED 'TRUE') 
AS
 SELECT EQUIPMENT_NAME AS ANNULUS_NAME,EQUIPMENT_ID AS ANNULUS_ID,DEPARTURE_DESC AS REG_DEPT_DESC,SUBMISSION_DATE,APPROVAL_DATE,
 D.EXPIRY_DATE,CAST (PRESSURE_LIMIT AS bigdecimal) AS PRESSURE_LIMIT,
PRESSURE_UOM, 
CAST(
 TIMESTAMPDIFF(SQL_TSI_DAY, CAST((CASE WHEN D.EXPIRY_DATE IS NULL THEN NOW() ELSE D.EXPIRY_DATE END) AS DATE),
 NOW())   AS INTEGER)
  AS LEAD_TIME, 
 'Days' AS LEAD_TIME_UOM,R_DEP_RESOLVE_ID AS RESOLVED_IND,
D.REMARK AS REG_DEPT_REMARK, D.ENTITY_ID,W.WELL_NAME,D.ROW_CREATED_DATE    ,
D.ROW_CREATED_BY  ,D.ROW_CHANGED_DATE ,D.ROW_CHANGED_BY,D.ACTIVE_IND ,D.SOURCE_NAME ,
DEPARTURE_ID AS REG_DEPT_ID, NULL AS  LEVEL1_ID,
NULL AS  LEVEL1_NAME,NULL AS  LEVEL1_TYPE,NULL AS  LEVEL2_ID,NULL AS  LEVEL2_NAME,NULL AS  LEVEL2_TYPE,NULL AS  LEVEL3_ID,
NULL AS  LEVEL3_NAME,NULL AS  LEVEL3_TYPE,NULL AS  LEVEL4_ID,NULL AS  LEVEL4_NAME,NULL AS  LEVEL4_TYPE,
NULL AS  LEVEL5_ID,NULL AS  LEVEL5_NAME,NULL AS  LEVEL5_TYPE,WA.AREA_ID AS  LEVEL6_ID,NULL AS  LEVEL6_NAME,
NULL AS  LEVEL6_TYPE
FROM PDMExtSrc.DEPARTURE D
INNER JOIN PPDMSrc.WELL W ON D.ENTITY_ID = W.WELL_ID
INNER JOIN PPDMSrc.WELL_AREA WA ON (W.WELL_ID = WA.WELL_ID AND WA.ACTIVE_IND = 'Y');

CREATE VIEW EVALUATION
(
EVAL_START_DATE   timestamp    NOT NULL,
EVAL_END_DATE   timestamp,
EVAL_REMARK   string(2000),
ENTITY_ID   string(40)    NOT NULL,
ENTITY_NAME   string(255)    NOT NULL,
ROW_CREATED_DATE   timestamp ,
ROW_CREATED_BY   string(100) ,
ROW_CHANGED_DATE   timestamp    ,
ROW_CHANGED_BY   string(100)    ,
ACTIVE_IND   string(1)    ,
SOURCE_NAME   string(100)    ,
EVAL_ID   string(40)    NOT NULL,
CONSTRAINT pk_EVAL   PRIMARY KEY(EVAL_ID)
)   OPTIONS(UPDATABLE 'FALSE',EVALUATION.IMPLEMENTED 'TRUE') 
AS
SELECT EVAL_START_DATE,EVAL_END_DATE,EVAL_REMARK,ENTITY_ID,W.WELL_NAME,
E.ROW_CREATED_DATE, E.ROW_CREATED_BY, E.ROW_CHANGED_DATE, E.ROW_CHANGED_BY, E.ACTIVE_IND, E.SOURCE_NAME,EVAL_ID
FROM PDMExtSrc.EVALUATION E
INNER JOIN PPDMSrc.WELL W ON E.ENTITY_ID = W.WELL_ID;

CREATE VIEW R_INJECTION_TYPE
(
R_INJECTION_TYPE_ID string(40) NOT NULL,
R_INJECTION_TYPE string(40) NOT NULL,
LONG_NAME string(100) ,
SHORT_NAME string(100),
ACTIVE_IND string(10),
ABBREVIATION string(100),
EFFECTIVE_DATE TIMESTAMP,
EXPIRY_DATE TIMESTAMP,
REMARKS string(2000),
SOURCE_NAME string(100),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE TIMESTAMP,
ROW_CREATED_BY string(100),
ROW_CREATED_DATE TIMESTAMP,
ROW_QUALITY string(40),
CONSTRAINT pk_R_INJECTION_TYPE   PRIMARY KEY(R_INJECTION_TYPE_ID)
)   OPTIONS(UPDATABLE 'FALSE',R_INJECTION_TYPE.IMPLEMENTED 'TRUE') 
AS
SELECT R_INJECTION_TYPE_ID,R_INJECTION_TYPE,LONG_NAME,SHORT_NAME,ACTIVE_IND,ABBREVIATION,EFFECTIVE_DATE,EXPIRY_DATE,REMARKS,SOURCE_NAME,ROW_CHANGED_BY,ROW_CHANGED_DATE,ROW_CREATED_BY,ROW_CREATED_DATE,ROW_QUALITY
FROM PDMExtSrc.R_INJECTION_TYPE
;

CREATE VIEW WELL_PHOTOS
(
	WPH_DOC_FULL_PATH	string(2000)	,
	WPH_DOC_PATH	string(2000)	,
	WPH_DOC_TITLE	string(200)	,
	WPH_DOC_CATEGORY	string(100)	,
	WPH_DOC_CATEGORY_ID	string(40)	,
	WPH_DOC_SUB_CATEGORY	string(100)	,
	WPH_DOC_SUB_CATEGORY_ID	string(40)	,
	WPH_DOC_TYPE	string(50)	,
	WPH_FIG_REFERENCE	string(100)	,
	WPH_DOC_PUBLISHER	string(255)	,
	WPH_DOC_ISSUE	string(50)	,
	WPH_DOC_LANGUAGE	string(100)	,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100)	,
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100)	,
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100)	,
	REMARK	string(2000)	,
	WPH_DOC_ID	string(40)	NOT NULL,
	WP_CATEGORY string(100),
	WELL_AUDIT_ID string(40),
	AUDIT_ID string(100),
CONSTRAINT PK_PM_EVENT_DOC PRIMARY KEY (WPH_DOC_ID))
OPTIONS (UPDATABLE 'FALSE', WELL_PHOTOS.IMPLEMENTED 'TRUE')
AS
SELECT SD.DOCUMENT_FULL_PATH,SD.SOURCE_DOCUMENT,SD.DOCUMENT_TITLE,SD.DOC_CATEGORY,SD.DOC_CATEGORY_ID,SD.DOC_SUB_CATEGORY,SD.DOC_SUB_CATEGORY_ID,
SD.DOCUMENT_TYPE,SD.FIGURE_REFERENCE,SD.PUBLISHER,SD.ISSUE,SD.DOC_LANGUAGE,SD.ENTITY_ID,W.WELL_NAME,SD.ROW_CREATED_DATE,
SD.ROW_CREATED_BY,
CASE WHEN (SD.ROW_CHANGED_DATE IS NOT NULL AND SD.ROW_CHANGED_DATE <> '') THEN SD.ROW_CHANGED_DATE ELSE SD.ROW_CREATED_DATE END AS ROW_CHANGED_DATE,
CASE WHEN (SD.ROW_CHANGED_BY IS NOT NULL AND SD.ROW_CHANGED_BY <> '') THEN SD.ROW_CHANGED_BY ELSE SD.ROW_CREATED_BY END AS ROW_CHANGED_BY,
SD.ACTIVE_IND,SD.SOURCE_NAME,SD.REMARKS,SD.SOURCE_DOCUMENT_ID,
(CASE WHEN (SD.OBJECT_ID is not null AND SD.OBJECT_ID <>'') THEN ('WH Audit-'||convert(WA.AUDIT_DATE,date)||'  '||WA.AUDIT_ID ) ELSE 'Others' END)AS WP_CATEGORY,WA.WELL_AUDIT_ID,WA.AUDIT_ID
 FROM PDMExtSrc.SOURCE_DOCUMENT SD
 INNER JOIN PPDMSrc.WELL W ON SD.ENTITY_ID = W.WELL_ID
 LEFT OUTER JOIN PDMExtSrc.WELL_AUDIT WA ON WA.WELL_AUDIT_ID = SD.OBJECT_ID
WHERE DOC_CATEGORY = 'Well Photos' AND SD.ACTIVE_IND = 'Y' 
;

CREATE VIEW ANN_FLUID_SAMPLES
(
	SAMPLE_DATE	timestamp NOT NULL,
	SAMPLE_LOCATION	string(100)NOT NULL,
	SAMPLE_LOCATION_ID	string(40)	,
	SAMPLE_REF_NUM	string(100),
	ANALYSIS_DATE	timestamp ,
	LAB_REF_NUM	string(100),
	SAMPLE_REMARK	string(2000)	NOT NULL,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp ,
	ROW_CREATED_BY	string(100),
	ROW_CHANGED_DATE	timestamp ,
	ROW_CHANGED_BY	string(100),
	ACTIVE_IND	string(1)	,
	SOURCE_NAME	string(100),
	ANN_FLUID_SAMPLE_ID	string(40)	NOT NULL,
	COLLECTION_TYPE string(100),
CONSTRAINT pk_ANN_FLUID_SAMPLES   PRIMARY KEY(ANN_FLUID_SAMPLE_ID)
)   OPTIONS(UPDATABLE 'FALSE',ANN_FLUID_SAMPLES.IMPLEMENTED 'TRUE') 
AS
SELECT FS.SAMPLE_DATE,FS.SAMPLE_LOCATION,NULL AS SAMPLE_LOCATION_ID,FS.SAMPLE_REF_NUM,FS.ANALYSIS_DATE,FS.LAB_REF_NUM,FS.REMARK,FS.ENTITY_ID,FS.ENTITY_NAME,
FS.ROW_CREATED_DATE,FS.ROW_CREATED_BY,FS.ROW_CHANGED_DATE,FS.ROW_CHANGED_BY,FS.ACTIVE_IND,FS.SOURCE_NAME,FS.FLUID_SAMPLE_ID,FS.COLLECTION_TYPE
FROM PDMExtSrc.FLUID_SAMPLE FS
WHERE FS.COLLECTION_TYPE='Annulus Fluid Samples'
;

CREATE VIEW PROD_FLUID_SAMPLES
(
	SAMPLE_SOURCE	string(100)NOT NULL,
	SAMPLE_DATE	timestamp		NOT NULL,
	PROD_FL_SAMP_RESULTS	string(100),
	SAMPLE_ANALYSIS	string(200),
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp ,
	ROW_CREATED_BY	string(100),
	ROW_CHANGED_DATE	timestamp ,
	ROW_CHANGED_BY	string(100),
	ACTIVE_IND	string(1)	,
	REMARK	string(2000)	,
	SOURCE_NAME	string(100),
	PROD_FL_SAMP_ID	string(40)	NOT NULL,
CONSTRAINT pk_PROD_FLUID_SAMPLES   PRIMARY KEY(PROD_FL_SAMP_ID)
)   OPTIONS(UPDATABLE 'FALSE',PROD_FLUID_SAMPLES.IMPLEMENTED 'TRUE') 
AS
SELECT FS.EQUIPMENT_NAME,FS.SAMPLE_DATE,FS.RESULT_REMARK AS PROD_FL_SAMP_RESULTS,FS.REMARK AS SAMPLE_ANALYSIS,FS.ENTITY_ID,FS.ENTITY_NAME,
FS.ROW_CREATED_DATE,FS.ROW_CREATED_BY,FS.ROW_CHANGED_DATE,FS.ROW_CHANGED_BY,FS.ACTIVE_IND,FS.REMARK,FS.SOURCE_NAME,FS.FLUID_SAMPLE_ID
FROM PDMExtSrc.FLUID_SAMPLE FS
WHERE FS.COLLECTION_TYPE='Production Fluid Samples'
;

CREATE VIEW ANN_FLUID_SAMPLE_DETAILS
(
	FLUID_TYPE	string(100)NOT NULL,
	FLUID_TYPE_ID	string(40)	,
	ANALYSIS_PROPERTY	string(100)NOT NULL,
	ANALYSIS_PROPERTY_ID	string(40)	,
	ANN_FLUID_SAMPLE_VALUE	bigdecimal(15,4)	,
	ANN_FLUID_SAMPLE_UOM	string(20),
	ANN_FLUID_SAMPLE_ID	string(40)	NOT NULL,
	ENTITY_ID	string(40)	NOT NULL,
	ENTITY_NAME	string(255)	NOT NULL,
	ROW_CREATED_DATE	timestamp		,
	ROW_CREATED_BY	string(100),
	ROW_CHANGED_DATE	timestamp		,
	ROW_CHANGED_BY	string(100),
	ACTIVE_IND	string(1)	,
	REMARK	string(2000)	,
	SOURCE_NAME	string(100),
	ANN_FLUID_SAMP_DET_ID	string(40)	NOT NULL,
CONSTRAINT pk_ANN_FLUID_SAM_DET   PRIMARY KEY(ANN_FLUID_SAMP_DET_ID)
)   OPTIONS(UPDATABLE 'FALSE',ANN_FLUID_SAMPLE_DETAILS.IMPLEMENTED 'TRUE') 
AS
SELECT FSD.FLUID_TYPE,FSD.FLUID_TYPE_ID,FSD.ANALYSIS_PROPERTY,FSD.ANALYSIS_PROPERTY_ID,FSD.VALUE,FSD.VALUE_UOM,FSD.FLUID_SAMPLE_ID,FSD.ENTITY_ID,FSD.ENTITY_NAME,FSD.ROW_CREATED_DATE,FSD.ROW_CREATED_BY,FSD.ROW_CHANGED_DATE,
FSD.ROW_CHANGED_BY,FSD.ACTIVE_IND,FSD.REMARK,FSD.SOURCE_NAME,FSD.FLUID_SAM_DETAILS_ID
FROM PDMExtSrc.FLUID_SAMPLE_DETAILS FSD
;

CREATE VIEW ANNULUS_MEASUREMENT
(
ANN_MEASUREMENT_ID string(40) not null,
EQUIPMENT_ID string(40) not null,
ENTITY_ID string(40)  not null,
ENTITY_NAME string(255)  not null,
MEASUREMENT_DATE timestamp,
R_MEASUREMENT_POINT_ID string(40),
R_MEASUREMENT_POINT string(100),
QUANTITY_TYPE_ID string(40),
QUANTITY_TYPE string(100),
ACTIVE_IND string(10),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CREATED_DATE timestamp,
VALUE_UOM string(100),
EFFECTIVE_DATE timestamp,
SOURCE_NAME string(100),
MEASUREMENT_VALUE bigdecimal(15,4),
PM_EVENT_TYPE string(100),
FLUID_VOLUME bigdecimal(15,4),
FLUID_VOLUME_UOM string(20),
CONSTRAINT pk_ANNULUS_MEASUREMENT  PRIMARY KEY(ANN_MEASUREMENT_ID)
)   OPTIONS(UPDATABLE 'FALSE',ANNULUS_MEASUREMENT.IMPLEMENTED 'TRUE') 
AS 
SELECT PM.PDEN_MEASUREMENT_ID AS  EQ_MEASUREMENT_ID,E.EQUIPMENT_ID,W.WELL_ID AS ENTITY_ID,W.WELL_NAME AS ENTITY_NAME,PM.MEASUREMENT_DATE,
PM.R_MEASUREMENT_POINT_ID, 
MP.R_MEASUREMENT_POINT ,Q.QUANTITY_TYPE_ID, Q.QUANTITY_TYPE,
PM.ACTIVE_IND,PM.ROW_CHANGED_BY,PM.ROW_CHANGED_DATE,PM.ROW_CREATED_BY,PM.ROW_CREATED_DATE,Q.UOM AS VALUE_UOM,E.EFFECTIVE_DATE,
RS.SOURCE_NAME,PM.VALUE AS  MEASUREMENT_VALUE, NULL, NULL, NULL
FROM PPDMSrc.PDEN_MEASUREMENT PM
INNER JOIN PPDMSrc.PDEN_EQUIPMENT PE ON PM.PDEN_EQUIPMENT_ID = PE.PDEN_EQUIPMENT_ID
INNER JOIN PPDMSrc.EQUIPMENT E ON PE.EQUIPMENT_ID = E.EQUIPMENT_ID AND E.ACTIVE_IND='Y'
INNER JOIN PPDMSrc.PDEN_WELL PW ON PE.PDEN_ID = PW.PDEN_ID
INNER JOIN PPDMSrc.WELL W ON PW.WELL_ID = W.WELL_ID
INNER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON PM.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE AS CEST ON (E.EQUIPMENT_SUB_TYPE) = (CEST.CAT_EQUIP_SUB_TYPE_ID) AND CEST.ACTIVE_IND = 'Y'
LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_TYPE AS CET ON (CEST.CAT_EQUIP_TYPE) = (CET.CAT_EQUIP_TYPE_ID) AND CET.ACTIVE_IND = 'Y'
LEFT OUTER JOIN (SELECT Q.QUANTITY_TYPE_ID, Q.QUANTITY_TYPE, U.UOM, U.UOM_ID,
	ROW_NUMBER() OVER (PARTITION BY Q.QUANTITY_TYPE ORDER BY U.ROW_CREATED_DATE DESC, Q.ROW_CREATED_DATE DESC) ROW_NUM
	FROM 
	PPDMSrc.PPDM_UNIT_OF_MEASURE U
	INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
	INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM M ON U.UOM_SYSTEM_ID = M.UOM_SYSTEM_ID
	WHERE M.UOM_SYSTEM = 'English')Q ON (MP.QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID AND Q.ROW_NUM = 1)
LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON RS.SOURCE_ID=PM.SOURCE
WHERE MP.R_MEASUREMENT_POINT IN ('A Annulus Pressure','B Annulus Pressure','C Annulus Pressure','D Annulus Pressure',
'Tubing Pressure', 'Well On', 'Wellhead Temperature', 'E Annulus Pressure', 'Flow Rate', 'Wellhead Pressure')
AND W.ACTIVE_IND = 'Y' AND E.ACTIVE_IND = 'Y' AND PW.ACTIVE_IND = 'Y' AND PM.ACTIVE_IND = 'Y' AND PE.ACTIVE_IND = 'Y'
UNION ALL
SELECT EM.EQ_MEASUREMENT_ID,EM.EQUIPMENT_ID,EM.ENTITY_ID,W.WELL_NAME,EM.MEASUREMENT_DATE,
EM.R_MEASUREMENT_POINT_ID,
CASE WHEN MP.R_MEASUREMENT_POINT = 'Flow Rate' THEN 'Product Flow Rate' ELSE MP.R_MEASUREMENT_POINT END, Q.QUANTITY_TYPE_ID, Q.QUANTITY_TYPE,
EM.ACTIVE_IND,EM.ROW_CHANGED_BY,EM.ROW_CHANGED_DATE,EM.ROW_CREATED_BY,EM.ROW_CREATED_DATE,NULL AS VALUE_UOM,
EM.EFFECTIVE_DATE,EM.SOURCE_NAME,EM.MEASUREMENT_VALUE, RPM.PM_EVENT_TYPE,PE.VOLUME, PE.VOLUME_UOM
FROM PDMExtSrc.EQ_MEASUREMENT EM
LEFT OUTER JOIN PDMExtSrc.PM_EVENT PE ON PE.PM_EVENT_ID=EM.OBJECT_ID
LEFT OUTER JOIN PDMExtSrc.R_PM_EVENT_TYPE RPM ON RPM.R_PM_EVENT_TYPE_ID=PE.R_PM_EVENT_TYPE_ID
LEFT OUTER JOIN PPDMSrc.R_MEASUREMENT_POINT MP ON EM.R_MEASUREMENT_POINT_ID = MP.R_MEASUREMENT_POINT_ID
LEFT OUTER JOIN (SELECT Q.QUANTITY_TYPE_ID, Q.QUANTITY_TYPE, U.UOM, U.UOM_ID,
	ROW_NUMBER() OVER (PARTITION BY Q.QUANTITY_TYPE ORDER BY U.ROW_CREATED_DATE DESC, Q.ROW_CREATED_DATE DESC) ROW_NUM
	FROM 
	PPDMSrc.PPDM_UNIT_OF_MEASURE U
	INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON U.UOM_QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
	INNER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM M ON U.UOM_SYSTEM_ID = M.UOM_SYSTEM_ID
	WHERE M.UOM_SYSTEM = 'English')Q ON (MP.QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID AND Q.ROW_NUM = 1)
INNER JOIN PPDMSrc.WELL W ON EM.ENTITY_ID = W.WELL_ID	
WHERE MP.R_MEASUREMENT_POINT IN ('A Annulus Pressure','B Annulus Pressure','C Annulus Pressure','D Annulus Pressure',
'Tubing Pressure', 'Well On', 'Wellhead Temperature', 'E Annulus Pressure', 'Flow Rate', 'Wellhead Pressure');

CREATE VIEW ANNULUS_PLOT
(
ANNULUS_PLOT_ID string(40) NOT NULL,
A_ANN_PRESSURE bigdecimal(15,4),
B_ANN_PRESSURE bigdecimal(15,4),
C_ANN_PRESSURE bigdecimal(15,4),
D_ANN_PRESSURE bigdecimal(15,4),
E_ANN_PRESSURE bigdecimal(15,4),
TUBING_PRESSURE bigdecimal(15,4),
PRESSURE_UOM string(20),
WH_TEMPERATURE bigdecimal(15,4),
TEMPERATURE_UOM string(20),
A_UNOL bigdecimal(15,4),
A_LNOL bigdecimal(15,4),
B_UNOL bigdecimal(15,4),
B_LNOL bigdecimal(15,4),
C_UNOL bigdecimal(15,4),
C_LNOL bigdecimal(15,4),
D_UNOL bigdecimal(15,4),
D_LNOL bigdecimal(15,4),
E_UNOL bigdecimal(15,4),
E_LNOL bigdecimal(15,4),
ENTITY_ID string(40)  not null,
ENTITY_NAME string(255)  not null,
MEASUREMENT_DATE timestamp,
WELL_ON_DURATION bigdecimal(15,4),
DURATION_UOM string(20),
BLEED_VOLUME bigdecimal(15,4),
TOP_UP_VOLUME bigdecimal(15,4),
VOLUME_UOM string(20),
LEVEL1_ID  string (   40),
LEVEL1_NAME  string (   255),
LEVEL1_TYPE  string (   100),
LEVEL2_ID  string (   40),
LEVEL2_NAME  string (   255),
LEVEL2_TYPE  string (   100),
LEVEL3_ID  string (   40  ),
LEVEL3_NAME  string (   255),
LEVEL3_TYPE  string (   100),
LEVEL4_ID  string (   40  ),
LEVEL4_NAME  string (   255),
LEVEL4_TYPE  string (   100),
LEVEL5_ID  string (   40  ),
LEVEL5_NAME  string (   255),
LEVEL5_TYPE  string (   100),
LEVEL6_ID  string (   40  ) NOT NULL,
LEVEL6_NAME  string (   255),
LEVEL6_TYPE  string (100),
CONSTRAINT pk_ANN_PLOT  PRIMARY KEY(ANNULUS_PLOT_ID)
)   OPTIONS(UPDATABLE 'FALSE',ANNULUS_PLOT.IMPLEMENTED 'TRUE') 
AS 
SELECT UUID() AS ANNULUS_MEAS_DETAILS_ID,
AVG(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='A Annulus Pressure' THEN AM.MEASUREMENT_VALUE END) AS  A_ANN_PRESSURE,
AVG(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='B Annulus Pressure' THEN AM.MEASUREMENT_VALUE END) AS  B_ANN_PRESSURE,
AVG(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='C Annulus Pressure' THEN AM.MEASUREMENT_VALUE END) AS  C_ANN_PRESSURE,
AVG(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='D Annulus Pressure' THEN AM.MEASUREMENT_VALUE END) AS  D_ANN_PRESSURE,
AVG(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='E Annulus Pressure' THEN AM.MEASUREMENT_VALUE END) AS  E_ANN_PRESSURE,
AVG(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='Tubing Pressure' THEN AM.MEASUREMENT_VALUE END) AS  TUBING_PRESSURE,
MAX(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='A Annulus Pressure' THEN AM.VALUE_UOM END) AS  PRESSURE_UOM,
AVG(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='Wellhead Temperature' THEN AM.MEASUREMENT_VALUE END) AS  WH_TEMPERATURE,
MAX(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='Wellhead Temperature' THEN AM.VALUE_UOM END) AS TEMPERATURE_UOM,
MAX(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='A Annulus Pressure' THEN OP.UPPER_NORMAL_OPR_LIMIT END) AS  A_UNOL,
MIN(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='A Annulus Pressure' THEN OP.LOWER_NORMAL_OPR_LIMIT END) AS  A_LNOL,
MAX(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='B Annulus Pressure' THEN OP.UPPER_NORMAL_OPR_LIMIT END) AS  B_UNOL,
MIN(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='B Annulus Pressure' THEN OP.LOWER_NORMAL_OPR_LIMIT END) AS  B_LNOL,
MAX(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='C Annulus Pressure' THEN OP.UPPER_NORMAL_OPR_LIMIT END) AS  C_UNOL,
MIN(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='C Annulus Pressure' THEN OP.LOWER_NORMAL_OPR_LIMIT END) AS  C_LNOL,
MAX(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='D Annulus Pressure' THEN OP.UPPER_NORMAL_OPR_LIMIT END) AS  D_UNOL,
MIN(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='D Annulus Pressure' THEN OP.LOWER_NORMAL_OPR_LIMIT END) AS  D_LNOL,
MAX(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='E Annulus Pressure' THEN OP.UPPER_NORMAL_OPR_LIMIT END) AS  E_UNOL,
MIN(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='E Annulus Pressure' THEN OP.LOWER_NORMAL_OPR_LIMIT END) AS  E_LNOL,
AM.ENTITY_ID,AM.ENTITY_NAME,AM.MEASUREMENT_DATE,
MAX(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='Well On' THEN AM.MEASUREMENT_VALUE END) AS  WELL_ON_DURATION,
MAX(CASE WHEN cast(AM.R_MEASUREMENT_POINT AS  string) ='Well On' THEN AM.VALUE_UOM END) AS DURATION_UOM,
MAX(CASE WHEN cast(AM.PM_EVENT_TYPE AS  string) ='Bleed' THEN AM.FLUID_VOLUME END) AS BLEED_VOLUME,
MAX(CASE WHEN cast(AM.PM_EVENT_TYPE AS  string) ='Top Up' THEN AM.FLUID_VOLUME END) AS TOP_UP_VOLUME,
MAX(CASE WHEN cast(AM.PM_EVENT_TYPE AS  string) ='Bleed' THEN AM.FLUID_VOLUME_UOM END) AS VOLUME_UOM,
NULL AS  LEVEL1_ID,
NULL AS  LEVEL1_NAME,NULL AS  LEVEL1_TYPE,NULL AS  LEVEL2_ID,NULL AS  LEVEL2_NAME,NULL AS  LEVEL2_TYPE,NULL AS  LEVEL3_ID,
NULL AS  LEVEL3_NAME,NULL AS  LEVEL3_TYPE,NULL AS  LEVEL4_ID,NULL AS  LEVEL4_NAME,NULL AS  LEVEL4_TYPE,
NULL AS  LEVEL5_ID,NULL AS  LEVEL5_NAME,NULL AS  LEVEL5_TYPE,WA.AREA_ID AS  LEVEL6_ID,NULL AS  LEVEL6_NAME,
NULL AS  LEVEL6_TYPE
FROM PDMTx.ANNULUS_MEASUREMENT AM
INNER JOIN PPDMSrc.EQUIPMENT E ON AM.EQUIPMENT_ID = E.EQUIPMENT_ID
LEFT OUTER JOIN PDMTx.ANNULUS_OPR_LIMITS OP ON AM.ENTITY_ID = OP.ENTITY_ID AND (E.EQUIPMENT_ID = OP.ANNULUS_ID OR E.EQUIPMENT_NAME  = OP.ANNULUS_NAME) 
INNER JOIN PPDMSrc.WELL_AREA WA ON (AM.ENTITY_ID = WA.WELL_ID AND WA.ACTIVE_IND = 'Y')
GROUP BY WA.AREA_ID,AM.ENTITY_ID,AM.ENTITY_NAME,AM.MEASUREMENT_DATE
;

CREATE VIEW AP_ENVELOPE
(
AP_ENVELOPE_ID string(40) NOT NULL,
MEASUREMENT_DATE timestamp,
A_ANN_PRESSURE bigdecimal(15,4),
B_ANN_PRESSURE bigdecimal(15,4),
C_ANN_PRESSURE bigdecimal(15,4),
D_ANN_PRESSURE bigdecimal(15,4),
E_ANN_PRESSURE bigdecimal(15,4),
TBG_PRESSURE bigdecimal(15,4),
PRESSURE_UOM string(20),
A_UNOL bigdecimal(15,4),
A_LNOL bigdecimal(15,4),
B_UNOL bigdecimal(15,4),
B_LNOL bigdecimal(15,4),
C_UNOL bigdecimal(15,4),
C_LNOL bigdecimal(15,4),
D_UNOL bigdecimal(15,4),
D_LNOL bigdecimal(15,4),
E_UNOL bigdecimal(15,4),
E_LNOL bigdecimal(15,4),
ENTITY_ID string(40)  not null,
ENTITY_NAME string(255)  not null,
LEVEL1_ID  string (   40),
LEVEL1_NAME  string (   255),
LEVEL1_TYPE  string (   100),
LEVEL2_ID  string (   40),
LEVEL2_NAME  string (   255),
LEVEL2_TYPE  string (   100),
LEVEL3_ID  string (   40  ),
LEVEL3_NAME  string (   255),
LEVEL3_TYPE  string (   100),
LEVEL4_ID  string (   40  ),
LEVEL4_NAME  string (   255),
LEVEL4_TYPE  string (   100),
LEVEL5_ID  string (   40  ),
LEVEL5_NAME  string (   255),
LEVEL5_TYPE  string (   100),
LEVEL6_ID  string (   40  ) NOT NULL,
LEVEL6_NAME  string (   255),
LEVEL6_TYPE  string (100),
CONSTRAINT pk_AP_ENV_DIM  PRIMARY KEY(AP_ENVELOPE_ID)
)   OPTIONS(UPDATABLE 'FALSE',AP_ENVELOPE.IMPLEMENTED 'TRUE') 
AS
SELECT UUID() AS AP_ENVELOPE_ID,
MAX(MEASUREMENT_DATE) MEASUREMENT_DATE,
AVG(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='A Annulus Pressure' THEN T.MEASUREMENT_VALUE END) AS  A_ANN_PRESSURE,
AVG(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='B Annulus Pressure' THEN T.MEASUREMENT_VALUE END) AS  B_ANN_PRESSURE,
AVG(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='C Annulus Pressure' THEN T.MEASUREMENT_VALUE END) AS  C_ANN_PRESSURE,
AVG(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='D Annulus Pressure' THEN T.MEASUREMENT_VALUE END) AS  D_ANN_PRESSURE,
AVG(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='E Annulus Pressure' THEN T.MEASUREMENT_VALUE END) AS  E_ANN_PRESSURE,
AVG(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='Tubing Pressure' THEN T.MEASUREMENT_VALUE END) AS  TBG_PRESSURE,
MAX(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='A Annulus Pressure' THEN T.VALUE_UOM END) AS  PRESSURE_UOM,
MAX(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='A Annulus Pressure' THEN T.UPPER_NORMAL_OPR_LIMIT END) AS  A_UNOL,
MIN(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='A Annulus Pressure' THEN T.LOWER_NORMAL_OPR_LIMIT END) AS  A_LNOL,
MAX(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='B Annulus Pressure' THEN T.UPPER_NORMAL_OPR_LIMIT END) AS  B_UNOL,
MIN(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='B Annulus Pressure' THEN T.LOWER_NORMAL_OPR_LIMIT END) AS  B_LNOL,
MAX(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='C Annulus Pressure' THEN T.UPPER_NORMAL_OPR_LIMIT END) AS  C_UNOL,
MIN(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='C Annulus Pressure' THEN T.LOWER_NORMAL_OPR_LIMIT END) AS  C_LNOL,
MAX(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='D Annulus Pressure' THEN T.UPPER_NORMAL_OPR_LIMIT END) AS  D_UNOL,
MIN(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='D Annulus Pressure' THEN T.LOWER_NORMAL_OPR_LIMIT END) AS  D_LNOL,
MAX(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='E Annulus Pressure' THEN T.UPPER_NORMAL_OPR_LIMIT END) AS  E_UNOL,
MIN(CASE WHEN cast(T.R_MEASUREMENT_POINT AS  string) ='E Annulus Pressure' THEN T.LOWER_NORMAL_OPR_LIMIT END) AS  E_LNOL,
T.ENTITY_ID,T.ENTITY_NAME,
NULL AS  LEVEL1_ID,
NULL AS  LEVEL1_NAME,NULL AS  LEVEL1_TYPE,NULL AS  LEVEL2_ID,NULL AS  LEVEL2_NAME,NULL AS  LEVEL2_TYPE,NULL AS  LEVEL3_ID,
NULL AS  LEVEL3_NAME,NULL AS  LEVEL3_TYPE,NULL AS  LEVEL4_ID,NULL AS  LEVEL4_NAME,NULL AS  LEVEL4_TYPE,
NULL AS  LEVEL5_ID,NULL AS  LEVEL5_NAME,NULL AS  LEVEL5_TYPE,AREA_ID AS  LEVEL6_ID,NULL AS  LEVEL6_NAME,
NULL AS  LEVEL6_TYPE
FROM 
(
SELECT WA.AREA_ID, AM.ENTITY_ID, W.WELL_NAME AS ENTITY_NAME, AM.MEASUREMENT_DATE, AM.MEASUREMENT_VALUE, AM.R_MEASUREMENT_POINT, AM.VALUE_UOM,
ROW_NUMBER() OVER (PARTITION BY WA.AREA_ID, AM.ENTITY_ID, W.WELL_NAME, AM.R_MEASUREMENT_POINT ORDER BY AM.MEASUREMENT_DATE DESC, AM.ROW_CREATED_DATE DESC) ROW_NUM,OP.LOWER_NORMAL_OPR_LIMIT,OP.UPPER_NORMAL_OPR_LIMIT
FROM PDMTx.ANNULUS_MEASUREMENT AM
INNER JOIN PPDMSrc.EQUIPMENT E ON AM.EQUIPMENT_ID = E.EQUIPMENT_ID
INNER JOIN PPDMSrc.WELL W ON (AM.ENTITY_ID = W.WELL_ID AND W.ACTIVE_IND = 'Y')
LEFT OUTER JOIN PDMTx.ANNULUS_OPR_LIMITS OP ON AM.ENTITY_ID = OP.ENTITY_ID AND (E.EQUIPMENT_ID = OP.ANNULUS_ID OR E.EQUIPMENT_NAME  = OP.ANNULUS_NAME) 
INNER JOIN PPDMSrc.WELL_AREA WA ON (AM.ENTITY_ID = WA.WELL_ID AND WA.ACTIVE_IND = 'Y')
)T
WHERE T.ROW_NUM = 1
GROUP BY T.AREA_ID,T.ENTITY_ID,T.ENTITY_NAME
;

CREATE VIEW ANNOTATION_WELL_SCHEMATIC (
	ANNOTATION_ID string(40) NOT NULL,
	ENTITY_TYPE string(30),
	R_CONTEXT_TYPE_ID string(40),
	R_CONTEXT_TYPE string(50),
	ENTITY_ID string(46),
	ENTITY_NAME string(255),
	EQUIPMENT_ID string(40),
	EQUIPMENT_NAME string(255),
	CAT_EQUIP_TYPE string(100),
	CAT_EQUIP_SUB_TYPE string(100),
	PRODUCT_ID string(40),
	PRODUCT_NAME string(100) NOT NULL,
	DATE_ANNOTATED_FOR timestamp,
	ANNOTATED_COLUMN string(30),
	ANNOTATION_DETAILS string(2000),
	ACTIVE_IND string(1),
	EFFECTIVE_DATE timestamp,
	ROW_CHANGED_BY string(30),
	ROW_CHANGED_DATE timestamp,
	ROW_CREATED_BY string(30),
	ROW_CREATED_DATE timestamp,
	SOURCE_NAME string(100),
	CONSTRAINT pk_ANNOTATION PRIMARY KEY(ANNOTATION_ID)
) OPTIONS(UPDATABLE 'FALSE',ANNOTATION.IMPLEMENTED 'TRUE') 
AS
	SELECT
		ANNOTATION_ID, ENTITY_TYPE, A.R_CONTEXT_TYPE_ID, AC.R_CONTEXT_TYPE, ENTITY_ID, 
		W.WELL_NAME AS ENTITY_NAME, AE.EQUIPMENT_ID, E.EQUIPMENT_NAME, 
		ET.CAT_EQUIP_TYPE, EST.CAT_EQUIP_SUB_TYPE, AE.PRODUCT_ID,
		P.PRODUCT_NAME,  
		DATE_ANNOTATED_FOR, ANNOTATED_COLUMN, ANNOTATION_DETAILS, A.ACTIVE_IND, 
		A.EFFECTIVE_DATE, A.ROW_CHANGED_BY, A.ROW_CHANGED_DATE, 
		A.ROW_CREATED_BY, A.ROW_CREATED_DATE, A.SOURCE_NAME
	FROM
		PDMExtSrc.ANNOTATION A
		INNER JOIN PDMExtSrc.ANNOTATED_ENTITY AE ON A.ANNOTATED_ENTITY_ID = AE.ANNOTATED_ENTITY_ID
		LEFT OUTER JOIN PDMExtSrc.R_ANNOTATION_CONTEXT_TYPE AC ON A.R_CONTEXT_TYPE_ID = AC.R_CONTEXT_TYPE_ID
		LEFT OUTER JOIN PPDMSrc.WELL W ON AE.ENTITY_ID = W.WELL_ID
		LEFT OUTER JOIN PPDMSrc.EQUIPMENT E ON AE.EQUIPMENT_ID = E.EQUIPMENT_ID
		LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE EST ON E.EQUIPMENT_SUB_TYPE = EST.CAT_EQUIP_SUB_TYPE_ID
		LEFT OUTER JOIN PPDMSrc.R_CAT_EQUIP_TYPE ET ON EST.CAT_EQUIP_TYPE = ET.CAT_EQUIP_TYPE_ID
		LEFT OUTER JOIN PPDMSrc.PRODUCT P ON AE.PRODUCT_ID = P.PRODUCT_ID
		LEFT OUTER JOIN PPDMSrc.R_PERIOD_TYPE PT ON AE.PERIOD_TYPE = PT.R_PERIOD_TYPE_ID
	WHERE
		A.ACTIVE_IND = 'Y';

CREATE VIEW ANNOTATION_PLOT (
	ANNOTATION_ID string(36) NOT NULL ,
	ENTITY_ID string(40) NOT NULL ,
	ENTITY_NAME string(255) ,
	REMARK_TYPE_ID string(100) ,
	REMARK_TYPE string(100) NOT NULL ,
	EFFECTIVE_DATE timestamp ,
	EXPIRY_DATE timestamp ,
	REMARK string(2000) ,
	REMARK_VALUE integer ,
	REMARK_DATE timestamp ,
	COORDINATED_BY string(100) ,
	SOURCE_NAME string(100) ,
	ANNOTATION_IND string(1) ,
	ACTIVE_IND string(1) ,
	ROW_CHANGED_BY string(30) ,
	ROW_CHANGED_DATE timestamp ,
	ROW_CREATED_BY string(30),
	ROW_CREATED_DATE timestamp,
	ROW_QUALITY string(100) ,
	CONSTRAINT pk_ANNOTATION PRIMARY KEY(ANNOTATION_ID)
)   OPTIONS(UPDATABLE 'FALSE',ANNOTATION.IMPLEMENTED 'TRUE') 
AS
SELECT UUID() AS ANNOTATION_ID,WR.WELL_ID,W.WELL_NAME,WR.REMARK_TYPE_ID,WR.REMARK_TYPE,WR.EFFECTIVE_DATE,WR.EXPIRY_DATE,WR.REMARKS,100 AS REMARK_VALUE,
WR.REMARK_DATE,WR.COORDINATED_BY,WR.SOURCE_NAME,WR.ANNOTATION_IND,WR.ACTIVE_IND,
CASE WHEN WR.ROW_CHANGED_BY IS NOT NULL THEN WR.ROW_CHANGED_BY ELSE WR.ROW_CREATED_BY END  AS ROW_CHANGED_BY,
CASE WHEN WR.ROW_CHANGED_BY IS NOT NULL THEN WR.ROW_CHANGED_DATE ELSE WR.ROW_CREATED_DATE END AS ROW_CHANGED_DATE,
WR.ROW_CREATED_BY,WR.ROW_CREATED_DATE,WR.ROW_QUALITY
FROM PDMExtSrc.WELL_REMARK WR
INNER JOIN PPDMSrc.WELL W ON W.WELL_ID=WR.WELL_ID
INNER JOIN PDMExtSrc.R_REMARK_TYPE AS RT ON WR.REMARK_TYPE_ID = RT.R_REMARK_TYPE_ID 
WHERE RT.R_REMARK_TYPE='Well Integrity Comments'
AND WR.ANNOTATION_IND='Y'
;

CREATE VIEW WELL_DOCUMENT
(
WDOC_ID string(40) NOT NULL,
WDOC_FULL_PATH string(2000) ,
WDOC_PATH string(2000) ,
WDOC_TITLE string(200) ,
WDOC_CATEGORY string(100) ,
WDOC_CATEGORY_ID string(40) ,
WDOC_SUB_CATEGORY string(100) ,
WDOC_SUB_CATEGORY_ID string(40) ,
WDOC_TYPE string(50) ,
WDOC_FIG_REFERENCE string(100) ,
WDOC_PUBLISHER string(255) ,
WDOC_ISSUE string(50) ,
WDOC_LANGUAGE string(100) ,
EQUIP_ID string(40) ,
ENTITY_ID string(40) NOT NULL,
ENTITY_NAME string(255) NOT NULL,
ROW_CREATED_DATE timestamp ,
ROW_CREATED_BY string(100) ,
ROW_CHANGED_DATE timestamp ,
ROW_CHANGED_BY string(100) ,
ACTIVE_IND string(1) ,
SOURCE_NAME string(100) ,
REMARK string(2000) ,
CONSTRAINT pk_WELL_DOCUMENT PRIMARY KEY(WDOC_ID)
)   OPTIONS(UPDATABLE 'FALSE',WELL_DOCUMENT.IMPLEMENTED 'TRUE') 
AS
SELECT SD.SOURCE_DOCUMENT_ID, SD.DOCUMENT_FULL_PATH,SD.SOURCE_DOCUMENT,SD.DOCUMENT_TITLE,SD.DOC_CATEGORY,SD.DOC_CATEGORY_ID,SD.DOC_SUB_CATEGORY,SD.DOC_SUB_CATEGORY_ID,SD.DOCUMENT_TYPE,
SD.FIGURE_REFERENCE,SD.PUBLISHER,SD.ISSUE,SD.DOC_LANGUAGE,NULL,W.WELL_ID,W.WELL_NAME,SD.ROW_CREATED_DATE,SD.ROW_CREATED_BY,SD.ROW_CHANGED_DATE,SD.ROW_CHANGED_BY,
SD.ACTIVE_IND,SD.SOURCE_NAME,SD.REMARKS
FROM PDMExtSrc.SOURCE_DOCUMENT SD
INNER JOIN PPDMSrc.WELL W ON W.WELL_ID = SD.ENTITY_ID
WHERE ((SD.DOC_SUB_CATEGORY IN ('Completion') AND SD.DOC_CATEGORY IN ('WellSchematics')) OR SD.DOC_CATEGORY IN ('Well Files'));

CREATE VIEW R_MEASUREMENT_POINT_AP
(
MEASUREMENT_POINT_AP_ID   string(40)    NOT NULL,
MEASUREMENT_POINT   string(100) ,
MEASUREMENT_TYPE_ID   string(40),
MEASUREMENT_TYPE   string(100) ,
AP_SHORT_NAME	string(50),
AP_LONG_NAME	string(200),
REMARK string(2000),
ROW_CREATED_DATE	timestamp		,
ROW_CREATED_BY	string(100)	,
ROW_CHANGED_DATE	timestamp		,
ROW_CHANGED_BY	string(100)	,
ACTIVE_IND	string(1)	,
SOURCE_NAME	string(100)	,
CONSTRAINT pk_MEAS_POINT_AP   PRIMARY KEY(MEASUREMENT_POINT_AP_ID)
)   OPTIONS(UPDATABLE 'FALSE',R_MEASUREMENT_POINT_AP.IMPLEMENTED 'TRUE') 
AS
SELECT MP.R_MEASUREMENT_POINT_ID, 
	CASE WHEN MP.R_MEASUREMENT_POINT = 'Flow Rate' THEN 'Product Flow Rate' ELSE MP.R_MEASUREMENT_POINT END,
	MP.QUANTITY_TYPE_ID, Q.QUANTITY_TYPE, 
	MP.SHORT_NAME, MP.LONG_NAME, MP.REMARK, MP.ROW_CREATED_DATE, MP.ROW_CREATED_BY,
	MP.ROW_CHANGED_DATE, MP.ROW_CHANGED_BY, MP.ACTIVE_IND, RS.SOURCE_NAME
 FROM PPDMSrc.R_MEASUREMENT_POINT MP
 INNER JOIN PPDMSrc.PPDM_QUANTITY Q ON MP.QUANTITY_TYPE_ID = Q.QUANTITY_TYPE_ID
 LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON MP.SOURCE = RS.SOURCE_ID
 WHERE MP.R_MEASUREMENT_POINT IN ('A Annulus Pressure', 'B Annulus Pressure',
 'C Annulus Pressure', 'D Annulus Pressure', 'Wellhead Temperature', 'Tubing Pressure',
 'Flow Rate') AND MP.ACTIVE_IND = 'Y'
;

CREATE VIEW CORRELATION_PLOT
(
MEASUREMENT_DATE timestamp NOT NULL,
MEASUREMENT_POINT string(100) NOT NULL,
MEASUREMENT_POINT_ID string(40),
MEASUREMENT_VALUE bigdecimal(15,4),
VALUE_UOM string(20),
ENTITY_ID string (40) NOT NULL,
ENTITY_NAME  string (255),
SOURCE_NAME string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND    string (1),
CORRELATION_ID string (40) NOT NULL,
CONSTRAINT PK_CORRELATION PRIMARY KEY (CORRELATION_ID))
OPTIONS (UPDATABLE 'FALSE',CORRELATION_PLOT.IMPLEMENTED 'TRUE')
AS
SELECT 	AM.MEASUREMENT_DATE, 
R_MEASUREMENT_POINT, R_MEASUREMENT_POINT_ID, MEASUREMENT_VALUE, VALUE_UOM,
ENTITY_ID, ENTITY_NAME, SOURCE_NAME, ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_DATE, ROW_CREATED_BY,
 ACTIVE_IND,ANN_MEASUREMENT_ID FROM PDMTx.ANNULUS_MEASUREMENT AM
UNION ALL 
SELECT 	AM.MEASUREMENT_DATE, 
(CASE WHEN PM_EVENT_TYPE = 'Top Up' THEN 'Top Up Fluid Volume' 
WHEN PM_EVENT_TYPE = 'Bleed' THEN 'Bleed Fluid Volume' END) AS R_MEASUREMENT_POINT, 
NULL, FLUID_VOLUME, FLUID_VOLUME_UOM,
ENTITY_ID, ENTITY_NAME, SOURCE_NAME, ROW_CHANGED_BY, ROW_CHANGED_DATE, ROW_CREATED_DATE, ROW_CREATED_BY,
 ACTIVE_IND,ANN_MEASUREMENT_ID FROM PDMTx.ANNULUS_MEASUREMENT AM
 WHERE AM.PM_EVENT_TYPE IS NOT NULL AND FLUID_VOLUME IS NOT NULL
;

CREATE VIEW WI_KPI_STATISTICS
(
KPI_DATE timestamp NOT NULL,
KPI string(100) NOT NULL,
KPI_ID string(40),
KPI_TYPE string(100),
KPI_VALUE integer,
KPI_VALUE_UOM string(20),
ENTITY_ID string (40) NOT NULL,
ENTITY_NAME  string (255),
SOURCE_NAME string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND    string (1),
KPI_STATS_ID string (40) NOT NULL,
LEVEL1_ID	string(40)	,
LEVEL1_NAME	string(255)	,
LEVEL1_TYPE	string(100)	,
LEVEL2_ID	string(40)	,
LEVEL2_NAME	string(255)	,
LEVEL2_TYPE	string(100)	,
LEVEL3_ID	string(40)	,
LEVEL3_NAME	string(255)	,
LEVEL3_TYPE	string(100)	,
LEVEL4_ID	string(40)	,
LEVEL4_NAME	string(255)	,
LEVEL4_TYPE	string(100)	,
LEVEL5_ID	string(40)	,
LEVEL5_NAME	string(255)	,
LEVEL5_TYPE	string(100)	,
LEVEL6_ID	string(40)	NOT NULL,
LEVEL6_NAME	string(255)	,
LEVEL6_TYPE	string(100)	,
CONSTRAINT PK_KPI_STATS PRIMARY KEY (KPI_STATS_ID))
OPTIONS (UPDATABLE 'FALSE',WI_KPI_STATISTICS.IMPLEMENTED 'TRUE')
AS
SELECT KPI_DATE, KPI, NULL, 'Count', KPI_VALUE, NULL, ENTITY_ID,  ENTITY_NAME, 'DSWIM', NULL, NULL, 
NOW(), 'DSWIM', 'Y', UUID(),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
LEVEL6_ID,NULL,NULL
FROM
(
SELECT PARSETIMESTAMP((MONTH(OPEN_DATE) || '/01/' || YEAR(OPEN_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss') AS KPI_DATE,
'Open Anomalies' AS KPI, COUNT(ANOMALY_DETAILS_ID) AS KPI_VALUE, ENTITY_ID,  ENTITY_NAME , LEVEL6_ID 
FROM PDMTx.ANOMALY_DETAILS 
WHERE CLOSE_DATE IS NULL 
GROUP BY ENTITY_NAME, PARSETIMESTAMP((MONTH(OPEN_DATE) || '/01/' || YEAR(OPEN_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss'),  ENTITY_ID, LEVEL6_ID
UNION ALL 
SELECT PARSETIMESTAMP((MONTH(IF_START_DATE) || '/01/' || YEAR(IF_START_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss') AS KPI_DATE,
'%RCFA Completed' AS KPI, COUNT(WBE_IF_ID) AS KPI_VALUE, ENTITY_ID,  ENTITY_NAME, LEVEL6_ID  
FROM PDMTx.WBE_IMPAIR_FAILURE 
WHERE IF_RCFA_REQ_IND = 'Y' AND IF_RCFA_REPORT_DATE IS NOT NULL
GROUP BY ENTITY_NAME, PARSETIMESTAMP((MONTH(IF_START_DATE) || '/01/' || YEAR(IF_START_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss'),  ENTITY_ID, LEVEL6_ID
UNION ALL 
SELECT PARSETIMESTAMP((MONTH(DEV_START_DATE) || '/01/' || YEAR(DEV_START_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss') AS KPI_DATE,
'Deviation' AS KPI, COUNT(DEVIATION_ID) AS KPI_VALUE, ENTITY_ID,  ENTITY_NAME, LEVEL6_ID  
FROM PDMTx.DEVIATION
GROUP BY ENTITY_NAME, PARSETIMESTAMP((MONTH(DEV_START_DATE) || '/01/' || YEAR(DEV_START_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss'),  ENTITY_ID, LEVEL6_ID
UNION ALL 
SELECT PARSETIMESTAMP((MONTH(IF_START_DATE) || '/01/' || YEAR(IF_START_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss') AS KPI_DATE,
'Failure' AS KPI, COUNT(WBE_IF_ID) AS KPI_VALUE, ENTITY_ID,  ENTITY_NAME, LEVEL6_ID
FROM PDMTx.WBE_IMPAIR_FAILURE 
WHERE IF_TYPE = 'FAILURE'
GROUP BY ENTITY_NAME, PARSETIMESTAMP((MONTH(IF_START_DATE) || '/01/' || YEAR(IF_START_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss'),  ENTITY_ID, LEVEL6_ID
UNION ALL 
SELECT PARSETIMESTAMP((MONTH(IF_START_DATE) || '/01/' || YEAR(IF_START_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss') AS KPI_DATE,
'Impairment' AS KPI, COUNT(WBE_IF_ID) AS KPI_VALUE, ENTITY_ID,  ENTITY_NAME,LEVEL6_ID
FROM PDMTx.WBE_IMPAIR_FAILURE 
WHERE IF_TYPE = 'IMPAIRMENT'
GROUP BY ENTITY_NAME, PARSETIMESTAMP((MONTH(IF_START_DATE) || '/01/' || YEAR(IF_START_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss'),  
ENTITY_ID, LEVEL6_ID
UNION ALL
SELECT PARSETIMESTAMP((MONTH(BE_TEST_DATE) || '/01/' || YEAR(BE_TEST_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss') AS KPI_DATE,
'Overdue' AS KPI, COUNT(BE_TEST_ID) AS KPI_VALUE, ENTITY_ID,  ENTITY_NAME,LEVEL6_ID
FROM PDMTx.BARRIER_ENV_TEST_HISTORY
WHERE BE_NEXT_TEST_DATE < NOW()
GROUP BY ENTITY_NAME, PARSETIMESTAMP((MONTH(BE_TEST_DATE) || '/01/' || YEAR(BE_TEST_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss'),  
ENTITY_ID, LEVEL6_ID
UNION ALL 
SELECT PARSETIMESTAMP((MONTH(BE_TEST_DATE) || '/01/' || YEAR(BE_TEST_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss') AS KPI_DATE,
'Failed Tests' AS KPI, COUNT(BARRIER_EQUIP_TEST_ID) AS KPI_VALUE, ENTITY_ID,  ENTITY_NAME,LEVEL6_ID
FROM PDMTx.BARRIER_EQUIP_TEST_DETAILS
WHERE BE_TEST_RESULT IN ('Fail', 'Partially Fail')
GROUP BY ENTITY_NAME, PARSETIMESTAMP((MONTH(BE_TEST_DATE) || '/01/' || YEAR(BE_TEST_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss'),  
ENTITY_ID, LEVEL6_ID
UNION ALL 
SELECT PARSETIMESTAMP((MONTH(IF_START_DATE) || '/01/' || YEAR(IF_START_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss') AS KPI_DATE,
'SCP' AS KPI, COUNT(WBE_IF_ID) AS KPI_VALUE, ENTITY_ID,  ENTITY_NAME,LEVEL6_ID
FROM PDMTx.WBE_IMPAIR_FAILURE 
WHERE IF_TYPE IN ('IMPAIRMENT', 'FAILURE') AND IF_CONSEQUENCE IN ('SCP A', 'SCP B') AND IF_END_DATE IS NULL AND IF_CLOSE_IND = 'N'
GROUP BY ENTITY_NAME, PARSETIMESTAMP((MONTH(IF_START_DATE) || '/01/' || YEAR(IF_START_DATE) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss'),  
ENTITY_ID, LEVEL6_ID
)T
;

CREATE VIEW ASSET_WI_KPI_STATS
(
KPI_DATE timestamp,
KPI string(100) NOT NULL,
KPI_ID string(40),
KPI_TYPE string(100),
KPI_VALUE integer,
KPI_VALUE_UOM string(20),
SOURCE_NAME string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND    string (1),
ASSET_KPI_STATS_ID string (40) NOT NULL,
LEVEL1_ID	string(40)	,
LEVEL1_NAME	string(255)	,
LEVEL1_TYPE	string(100)	,
LEVEL2_ID	string(40)	,
LEVEL2_NAME	string(255)	,
LEVEL2_TYPE	string(100)	,
LEVEL3_ID	string(40)	,
LEVEL3_NAME	string(255)	,
LEVEL3_TYPE	string(100)	,
LEVEL4_ID	string(40)	,
LEVEL4_NAME	string(255)	,
LEVEL4_TYPE	string(100)	,
LEVEL5_ID	string(40)	,
LEVEL5_NAME	string(255)	,
LEVEL5_TYPE	string(100)	,
LEVEL6_ID	string(40)	NOT NULL,
LEVEL6_NAME	string(255)	,
LEVEL6_TYPE	string(100)	,
CONSTRAINT PK_ASSET_KPI_STATS PRIMARY KEY (ASSET_KPI_STATS_ID))
OPTIONS (UPDATABLE 'FALSE',ASSET_WI_KPI_STATS.IMPLEMENTED 'TRUE')
AS
SELECT KPI_DATE, KPI, NULL, 'Well Count', COUNT_NUM, NULL, 'DSWIM', NULL, NULL, NOW(), 'DSWIM',
'Y', UUID(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
T.LEVEL6_ID, T.LEVEL6_NAME, T.LEVEL6_TYPE
FROM
(
SELECT KPI_DATE, KPI, COUNT(DISTINCT ENTITY_NAME) COUNT_NUM,  
WI.LEVEL6_ID, A.PREFERRED_NAME AS LEVEL6_NAME, AT.AREA_TYPE AS LEVEL6_TYPE 
FROM PDMTx.WI_KPI_STATISTICS WI
INNER JOIN PPDMSrc.WELL_AREA WA ON (WI.ENTITY_ID = WA.WELL_ID AND WA.ACTIVE_IND = 'Y')
INNER JOIN PPDMSrc.AREA A ON WA.AREA_ID = A.AREA_ID
LEFT OUTER JOIN PPDMSrc.R_AREA_TYPE AT ON A.AREA_TYPE = AT.R_AREA_TYPE_ID
GROUP BY KPI, KPI_DATE, WI.LEVEL6_ID, A.PREFERRED_NAME, AT.AREA_TYPE
UNION ALL 
SELECT PARSETIMESTAMP((MONTH(CASE WHEN WI.ROW_CHANGED_DATE IS NOT NULL THEN WI.ROW_CHANGED_DATE ELSE WI.ROW_CREATED_DATE END) || '/01/' 
|| YEAR(CASE WHEN WI.ROW_CHANGED_DATE IS NOT NULL THEN WI.ROW_CHANGED_DATE ELSE WI.ROW_CREATED_DATE END) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss') AS KPI_DATE,
WIS.WI_STATUS AS KPI, COUNT(WI.ENTITY_ID) COUNT_NUM, WI.LEVEL6_ID, WI.LEVEL6_NAME, WI.LEVEL6_TYPE
 FROM PDMExtSrc.R_WI_STATUS WIS
 RIGHT OUTER JOIN PDMTx.WI_STATUS WI ON WIS.WI_STATUS_ID = WI.R_WI_STATUS_ID
 WHERE WIS.WI_STATUS_ID IS NOT NULL
 GROUP BY WIS.WI_STATUS,PARSETIMESTAMP((MONTH(CASE WHEN WI.ROW_CHANGED_DATE IS NOT NULL THEN WI.ROW_CHANGED_DATE ELSE WI.ROW_CREATED_DATE END) || '/01/' 
|| YEAR(CASE WHEN WI.ROW_CHANGED_DATE IS NOT NULL THEN WI.ROW_CHANGED_DATE ELSE WI.ROW_CREATED_DATE END) || ' 00:00:00'), 'MM/dd/yyyy hh:mm:ss'),
WI.LEVEL6_ID, WI.LEVEL6_NAME, WI.LEVEL6_TYPE
 )T
;

CREATE VIEW INJECTION_VOLUME
(
VOLUME_DATE timestamp NOT NULL,
PERIOD_TYPE string(100) NOT NULL,
GAS       bigdecimal   (15,4),
GAS_POT     bigdecimal   (15,4),
GAS_UOM   string (20),
PROD_WATER   bigdecimal   (15,4),
PROD_WATER_POT      bigdecimal   (15,4),
WATER_UOM string (20),
SEA_WATER   bigdecimal   (15,4),
SEA_WATER_POT      bigdecimal   (15,4),
MISCIBLE_GAS       bigdecimal   (15,4),
MISC_GAS_POT     bigdecimal   (15,4),
DISPOSAL_FLUID   bigdecimal   (15,4),
DISP_FLUID_POT      bigdecimal   (15,4),
CUT_RE_INJECTION   bigdecimal   (15,4),
CUT_RE_INJ_POT      bigdecimal   (15,4),
CUT_RE_INJ_UOM	string(20),
ENTITY_ID string (100) NOT NULL,
ENTITY_NAME  string (255),
NETWORK_ID string (40),
NETWORK_NAME string (255),
SOURCE_NAME string (100),
ROW_CHANGED_BY    string (100),
ROW_CHANGED_DATE  timestamp,
ROW_CREATED_DATE  timestamp,
ROW_CREATED_BY  string (100),
ACTIVE_IND    string (1),
VOL_ID   string (40) NOT NULL,
LEVEL1_ID string (40),
LEVEL1_NAME  string (255),
LEVEL1_TYPE   string (100),
LEVEL2_ID string (40),
LEVEL2_NAME  string (255),
LEVEL2_TYPE   string (100),
LEVEL3_ID string (40),
LEVEL3_NAME  string (255),
LEVEL3_TYPE   string (100),
LEVEL4_ID string (40),
LEVEL4_NAME  string (255),
LEVEL4_TYPE   string (100),
LEVEL5_ID string (40),
LEVEL5_NAME  string (255),
LEVEL5_TYPE   string (100),
LEVEL6_ID string (40),
LEVEL6_NAME  string (255),
LEVEL6_TYPE   string (100),
CONSTRAINT PK_INJ_VOLUME PRIMARY KEY (VOL_ID))
OPTIONS (UPDATABLE 'FALSE',INJECTION_VOLUME.IMPLEMENTED 'TRUE')
AS
(SELECT 
 PVSA.VOLUME_DATE, cast(RPT.R_PERIOD_TYPE AS   string) AS  PERIOD_TYPE,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string)= 'Gas') THEN PVSA.VOLUME END) AS  GAS,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string)= 'Gas') THEN PVSA.POTENTIAL_VOLUME END) AS  GAS_POT, 
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string)= 'Gas' THEN cast(U.UOM AS   string) END) AS  GAS_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) = 'Produced Water') THEN PVSA.VOLUME END) AS  WATER,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) = 'Produced Water') THEN PVSA.POTENTIAL_VOLUME END) AS  WATER_POT, 
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string)= 'Water' THEN cast(U.UOM AS   string) END)  AS  WATER_UOM,
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) = 'Sea Water') THEN PVSA.VOLUME END),
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) = 'Sea Water') THEN PVSA.POTENTIAL_VOLUME END),
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) = 'Miscible Gas') THEN PVSA.VOLUME END),
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) = 'Miscible Gas') THEN PVSA.POTENTIAL_VOLUME END),
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) = 'Disposal Fluid') THEN PVSA.VOLUME END),
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) = 'Disposal Fluid') THEN PVSA.POTENTIAL_VOLUME END),
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) = 'Cutting Reinjection') THEN PVSA.VOLUME END),
SUM(CASE WHEN (cast(PT.PRODUCT_NAME AS   string) = 'Cutting Reinjection') THEN PVSA.POTENTIAL_VOLUME END),
MAX(CASE WHEN cast(PT.PRODUCT_NAME AS   string) = 'Cutting Reinjection' THEN cast(U.UOM AS   string) END)  AS  WATER_UOM,
PD.ENTITY_ID,cast(PD.ENTITY_NAME as string),cast(PVSA.DELIVERY_NETWORK_ID AS   string) AS  NETWORK_ID,CAST(DN.LONG_NAME AS string) AS  NETWORK_NAME,
MAX(cast(RS.SOURCE_NAME AS   string)) AS  SOURCE,MAX(CAST(PVSA.ROW_CHANGED_BY AS string)),
MAX(PVSA.ROW_CHANGED_DATE),MAX(PVSA.ROW_CREATED_DATE),MAX(CAST(PVSA.ROW_CREATED_BY AS   string)),
CAST(PVSA.ACTIVE_IND AS   string),UUID() AS  VOL_ID,NULL AS  LEVEL1_ID,NULL AS  LEVEL1_NAME,
NULL AS  LEVEL1_TYPE,NULL AS  LEVEL2_ID,NULL AS  LEVEL2_NAME,NULL AS  LEVEL2_TYPE,NULL AS  LEVEL3_ID,
NULL AS  LEVEL3_NAME,NULL AS  LEVEL3_TYPE,NULL AS  LEVEL4_ID,NULL AS  LEVEL4_NAME,NULL AS  LEVEL4_TYPE,
NULL AS  LEVEL5_ID,NULL AS  LEVEL5_NAME,NULL AS  LEVEL5_TYPE,CAST(PD.AREA_ID AS STRING) AS  LEVEL6_ID,
NULL AS  LEVEL6_NAME,NULL AS  LEVEL6_TYPE
FROM PPDMSrc.PDEN_VOL_SUMMARY_ALLOCATED AS  PVSA 
 LEFT JOIN PPDMSrc.PDEN_PERIOD AS  PP ON PP.PDEN_PERIOD_ID = PVSA.PDEN_PERIOD_ID
 LEFT JOIN PPDMSrc.R_PERIOD_TYPE AS  RPT ON RPT.R_PERIOD_TYPE_ID = PP.PERIOD_TYPE
 INNER JOIN PPDMSrc.PRODUCT AS  PT ON PT.PRODUCT_ID = PVSA.PRODUCT_ID
 LEFT JOIN PPDMSrc.R_ACTIVITY_TYPE AS  RAT ON RAT.R_ACTIVITY_TYPE_ID = PVSA.ACTIVITY_TYPE
 LEFT OUTER JOIN (SELECT PD.PDEN_ID,PD.WELL_ID AS  ENTITY_ID,W.WELL_NAME AS  ENTITY_NAME,WA.AREA_ID 
 FROM PPDMSrc.PDEN_WELL PD 
 INNER JOIN PPDMSrc.WELL W ON W.WELL_ID = PD.WELL_ID
 INNER JOIN PPDMSrc.WELL_AREA WA ON W.WELL_ID = WA.WELL_ID
 WHERE cast(W.ACTIVE_IND AS string) = 'Y' AND cast(WA.ACTIVE_IND AS string) = 'Y'
 UNION ALL 
 SELECT PF.PDEN_ID,PF.FACILITY_ID AS  ENTITY_ID,F.FACILITY_NAME AS  ENTITY_NAME,FA.AREA_ID 
 FROM PPDMSrc.PDEN_FACILITY PF 
 INNER JOIN PPDMSrc.FACILITY F ON F.FACILITY_ID = PF.FACILITY_ID
 INNER JOIN PPDMSrc.FACILITY_AREA FA ON F.FACILITY_ID = FA.FACILITY_ID
 WHERE cast(F.ACTIVE_IND AS string) = 'Y' AND cast(FA.ACTIVE_IND AS string) = 'Y'
 UNION ALL 
 SELECT PWC.PDEN_ID,PWC.WELL_COMPLETION_ID AS ENTITY_ID, WC.WELL_COMPLETION AS ENTITY_NAME, WA.AREA_ID
 FROM PPDMSrc.PDEN_WELL_COMPLETION PWC
 INNER JOIN PPDMSrc.WELL_COMPLETION WC ON PWC.WELL_COMPLETION_ID = WC.WELL_COMPLETION_ID
 LEFT OUTER JOIN (SELECT WX.WELL_ID,WX.ACTIVE_IND,WX.WELL_ID2,W.WELL_NAME
    FROM PPDMSrc.WELL_XREF AS  WX  
    INNER JOIN PPDMSrc.WELL AS  W ON WX.WELL_ID2 = W.WELL_ID AND cast(W.ACTIVE_IND AS   string)= 'Y' 
    INNER JOIN PPDMSrc.R_WELL_XREF_TYPE AS  WXT ON WX.R_WELL_XREF_TYPE_ID = WXT.R_WELL_XREF_TYPE_ID
    WHERE cast(WXT.XREF_TYPE as string)= 'WellboreToWell') WX ON WC.WELL_ID = WX.WELL_ID AND cast(WX.ACTIVE_IND AS  string) = 'Y'
 INNER JOIN PPDMSrc.WELL_AREA WA ON WX.WELL_ID2 = WA.WELL_ID) PD ON PD.PDEN_ID = PVSA.PDEN_ID
 LEFT OUTER JOIN PPDMSrc.DELIVERY_NETWORK AS  DN ON DN.DELIVERY_NETWORK_ID = PVSA.DELIVERY_NETWORK_ID
  LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON PVSA.SOURCE = RS.SOURCE_ID
 LEFT OUTER JOIN (SELECT U.UOM_ID,U.UOM,ROW_NUMBER() OVER (PARTITION BY cast(U.UOM AS string) ORDER BY U.ROW_CREATED_DATE DESC) ROWNUM
 FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U
 LEFT OUTER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
 WHERE cast(S.UOM_SYSTEM AS   string)= 'English') U ON (PVSA.VOLUME_UOM = U.UOM_ID AND U.ROWNUM = 1)
 WHERE DN.ACTIVE_IND <> 'N' AND RAT.R_ACTIVITY_TYPE = 'Injected'
 GROUP BY PVSA.VOLUME_DATE,cast(RPT.R_PERIOD_TYPE as string),PD.ENTITY_ID,cast(PD.ENTITY_NAME as string),PVSA.DELIVERY_NETWORK_ID,
 cast(DN.LONG_NAME as string),CAST(PD.AREA_ID AS STRING), cast(PVSA.ACTIVE_IND as string)
);

CREATE VIEW HSE_CATALOG_SUMMARY(
HSE_SUMMARY_ID string (40),
HSE_DATE timestamp,
NUM_LTA integer,
NUM_TA integer,
NUM_DWRA integer,
NUM_HW bigdecimal(10,4),
ENTITY_ID string (40),
ENTITY_NAME  string (255) ,
ENTITY_TYPE  string (100),
AREA_ID string (40),
AREA_NAME  string (255) ,
AREA_TYPE  string (100),
ACTIVE_IND string (1),
SOURCE_NAME string (100),
ROW_CHANGED_DATE timestamp,
ROW_CHANGED_BY  string (100),
ROW_CREATED_DATE timestamp,
ROW_CREATED_BY string (100),
CONSTRAINT PK_HSE_CATALOG_SUMMARY PRIMARY KEY (HSE_SUMMARY_ID)
)OPTIONS (UPDATABLE 'FALSE',HSE_CATALOG_SUMMARY.IMPLEMENTED 'TRUE')
AS
(
SELECT HSE_SUMMARY_ID,HSE_DATE,NUM_LTA,NUM_TA,NUM_DWRA,NUM_HW,
ENTITY_ID,ENTITY_NAME,ENTITY_TYPE,
AREA_ID,AREA_NAME,AREA_TYPE,ACTIVE_IND,SOURCE_NAME,
ROW_CHANGED_DATE,ROW_CHANGED_BY,ROW_CREATED_DATE,ROW_CREATED_BY 
FROM PDMExtSrc.HSE_CATALOG_SUMMARY
);

CREATE VIEW POOL_RESERVE_SUMMARY(
	RESERVES_SUMMARY_ID string (40),
	POOL_ID string (40),
	POOL_NAME string (225),
	EFFECTIVE_DATE timestamp,
	EXPIRY_DATE timestamp,
	LATITUDE bigdecimal(10,4),
	LONGITUDE bigdecimal(10,4),
	OIL_RESERVE bigdecimal(15,4),
	GAS_RESERVE bigdecimal(15,4),
	UNRECOVERABLE_OIL bigdecimal(15,4),
	UNRECOVERABLE_GAS bigdecimal(15,4),
	OIL_UOM string (20),
	GAS_UOM string (20),
	COUNTRY string (100),
	STATE string (100),
	CITY string (100),
	RESERVE_ESTIMATOR string (100),
	REMARK string (50),
	ACTIVE_IND string (1),
	SOURCE_NAME string (50),
	ROW_CHANGED_DATE timestamp,
	ROW_CHANGED_BY  string (100),
	ROW_CREATED_DATE timestamp,
	ROW_CREATED_BY string (100),
CONSTRAINT PK_RESERVES_SUMMARY PRIMARY KEY (RESERVES_SUMMARY_ID)
)OPTIONS (UPDATABLE 'FALSE',POOL_RESERVE_SUMMARY.IMPLEMENTED 'TRUE')
AS
(
SELECT RESERVES_SUMMARY_ID,POOL_ID,POOL_NAME,EFFECTIVE_DATE,EXPIRY_DATE,LATITUDE,LONGITUDE,
OIL_RESERVE,GAS_RESERVE,UNRECOVERABLE_OIL,UNRECOVERABLE_GAS,OIL_UOM,GAS_UOM,COUNTRY,
STATE,CITY,RESERVE_ESTIMATOR,REMARK,ACTIVE_IND,SOURCE,ROW_CHANGED_DATE,ROW_CHANGED_BY,ROW_CREATED_DATE,
ROW_CREATED_BY FROM PDMExtSrc.RESERVES_SUMMARY
);

CREATE VIEW TANK_BATTERY_SUMMARY
(
 PROD_DATE	timestamp,
 PR_PROD_NAME	string	(100),
 PR_PROD_VOLUME	bigdecimal	(15,4),
 SEC_PROD_NAME	string	(100),
 SEC_PROD_VOLUME	bigdecimal	(15,4),
 PR_PROD_UOM	string	(20),
 SEC_PROD_UOM	string	(20),
 CAPACITY bigdecimal	(15,4),
 SPARE_CAPACITY bigdecimal	(15,4),
 TANK_ID string(40),
 TANK_NAME string(100) NOT NULL,
 ENTITY_ID	string	(40) NOT NULL, 
 ENTITY_NAME	string	(255),
 NETWORK_ID	string	(40), 
 NETWORK_NAME	string	(100),
 NETWORK_EQUIP_ID	string	(40),
 NETWORK_EQUIP_NAME	string	(100),
 NETWORK_VERSION	integer,
 NW_EFFECTIVE_DATE timestamp,
 NW_EXPIRY_DATE timestamp,
 SOURCE_NAME	string	(100),
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string	(100),
 TANK_BAT_SUM_ID string	(40)	NOT NULL,
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
CONSTRAINT PK_TANK_BAT_S PRIMARY KEY (TANK_BAT_SUM_ID))
OPTIONS (UPDATABLE 'FALSE', TANK_BATTERY_SUMMARY.IMPLEMENTED 'TRUE')
AS
 (
 select 
PDFM.MEASUREMENT_DATE,
P.PRODUCT_NAME,
PDFM.PRODUCTION_VOLUME,
null,
PDFM.WATER_VOLUME,
U.UOM,
null,
TS.CAPACITY,
null,
EQ.EQUIPMENT_ID,
null,
FC.FACILITY_ID,
null,
DNV.DELIVERY_NETWORK_ID AS NETWORK_ID,
DN.LONG_NAME AS NETWORK_DESCRIPTION,
DNV.DELIVERY_NETWORK_ID AS NETWORK_ID,
DN.LONG_NAME AS NETWORK_DESCRIPTION,
cast(DNV.SEQ_NO as integer) AS NW_VERSION_NUMBER,
DNV.EFFECTIVE_DATE AS NW_EFFECTIVE_DATE,
DNV.EXPIRY_DATE AS NW_EXPIRY_DATE,
null,
PDFM.ROW_CHANGED_BY,
PDFM.ROW_CHANGED_DATE,
PDFM.ROW_CREATED_DATE,
PDFM.ROW_CREATED_BY,
PDFM.PDEN_FLOW_MEASUREMENT_ID AS FLOW_ID,
null,
null,
null,
null,
null,
null,
null,
null,
null,
null,
null,
null,
null,
null,
null,
null,
null,
null
FROM 	PPDMSrc.DELIVERY_NETWORK AS DN
		INNER JOIN PPDMSrc.DELIVERY_NETWORK_VERSION AS DNV ON DN.DELIVERY_NETWORK_ID = DNV.DELIVERY_NETWORK_ID
		INNER JOIN PPDMSrc.DELIVERY_SYSTEM_COMPOSITION AS DVSC on DNV.DELIVERY_NETWORK_VERSION_ID = DVSC.DELIVERY_NETWORK_VERSION_ID
		INNER JOIN PPDMSrc.PDEN_FACILITY AS PDF on DVSC.PDEN_ID = PDF.PDEN_ID
		INNER JOIN PPDMSrc.FACILITY AS FC on PDF.FACILITY_ID = FC.FACILITY_ID
		INNER JOIN PPDMSrc.R_FACILITY_TYPE FT ON FC.FACILITY_TYPE_ID=FT.FACILITY_TYPE_ID AND FT.FACILITY_TYPE='TankBattery'
		INNER JOIN PPDMSrc.FACILITY_EQUIPMENT AS FCEQ on FC.FACILITY_ID = FCEQ.FACILITY_ID
		INNER JOIN PPDMSrc.EQUIPMENT AS EQ on FCEQ.EQUIPMENT_ID = EQ.EQUIPMENT_ID
		INNER JOIN PPDMSrc.R_CAT_EQUIP_SUB_TYPE AS CEST ON EQ.EQUIPMENT_SUB_TYPE=CEST.CAT_EQUIP_SUB_TYPE_ID AND CEST.CAT_EQUIP_SUB_TYPE IN ('TANK','Tank')
		INNER JOIN PPDMSrc.PDEN_EQUIPMENT AS PDE on DVSC.PDEN_ID = PDE.PDEN_ID AND EQ.EQUIPMENT_ID = PDE.EQUIPMENT_ID AND DNV.DELIVERY_NETWORK_VERSION_ID = PDE.DELIVERY_NETWORK_VERSION_ID
		INNER JOIN PPDMSrc.PDEN_FLOW_MEASUREMENT AS PDFM ON PDE.PDEN_EQUIPMENT_ID = PDFM.PDEN_EQUIPMENT_ID
		INNER JOIN PPDMSrc.PRODUCT AS P on PDFM.PRODUCT_ID = P.PRODUCT_ID
		LEFT outer JOIN PPDMSrc.TANK_STRAP AS TS on EQ.EQUIPMENT_ID = TS.EQUIPMENT_ID
		LEFT outer JOIN (SELECT U.UOM_ID,U.UOM,ROW_NUMBER() OVER (PARTITION BY U.UOM  ORDER BY U.ROW_CREATED_DATE DESC) ROWNUM
				FROM PPDMSrc.PPDM_UNIT_OF_MEASURE U
				LEFT OUTER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM S ON U.UOM_SYSTEM_ID = S.UOM_SYSTEM_ID
				WHERE S.UOM_SYSTEM  = 'English') U ON (PDFM.PRODUCTION_VOLUME_OUOM = U.UOM_ID AND U.ROWNUM = 1)
				WHERE 	DNV.ACTIVE_IND = 'Y' and DVSC.ACTIVE_IND = 'Y' and FC.ACTIVE_IND = 'Y' and PDF.ACTIVE_IND = 'Y' AND PDE.ACTIVE_IND = 'Y' AND PDFM.ACTIVE_IND = 'Y'
		and FCEQ.ACTIVE_IND = 'Y' and EQ.ACTIVE_IND = 'Y' AND FT.ACTIVE_IND='Y' AND CEST.ACTIVE_IND='Y'
 
 );

 CREATE VIEW INVENTORY_SALES
(
EVENT_DATE	timestamp,
EVENT_EFF_DATE timestamp,
EVENT_EXP_DATE timestamp,
PRODUCT_ID	string	(40),
 PRODUCT_NAME	string	(100),
 BEGINNING_VOLUME	bigdecimal	(15,4),
 ENDING_VOLUME	bigdecimal	(15,4),
 VOLUME_UOM	string	(20),
 BEGINNING_MEASURE	bigdecimal	(15,4),
 ENDING_MEASURE bigdecimal	(15,4),
MEASURE_UOM	string	(20),
 BEGINNING_TEMP	bigdecimal	(15,4),
 ENDING_TEMP bigdecimal	(15,4),
OBSERVED_TEMP bigdecimal	(15,4),
 TEMP_UOM	string	(20),
GRAVITY bigdecimal	(15,4),
CORRECTED_GRAVITY bigdecimal	(15,4),
CORRECTED_VOLUME bigdecimal	(15,4),
ADJ_GROSS_VOLUME bigdecimal	(15,4),
GROSS_STD_VOLUME bigdecimal	(15,4),
SHRINK_FACTOR bigdecimal	(15,4),
VOLUME_QUALITY bigdecimal	(15,4),
CORRECTED_VOL_QUALITY bigdecimal	(15,4),
BSW bigdecimal	(15,4),
FW bigdecimal	(15,4),
EW bigdecimal	(15,4),
 NET_VOLUME_METHOD string(100),
 GRAVITY_INPUT string(100),
 TICKET_NUMBER string(100),
 SEAL_ON string(100),
 SEAL_OFF string(100),
 BARCODE string(100),
 PURCHASED_BY string(100),
 HAUL_TYPE string(100),
 ENTITY_ID	string	(40) NOT NULL, 
 ENTITY_NAME	string	(255),
  RECV_ENTITY_ID	string	(40) , 
 RECV_ENTITY_NAME	string	(255),
 EQUIPMENT_ID	string	(40) NOT NULL,
 EQUIPMENT_NAME	string	(100),
 DISPOSITION_ID	string	(40),
 DISPOSITION	string	(100),
 MEASUREMENT_SYSTEM	string	(100),
 PERIOD_ID	string	(10),
 PRESSURE bigdecimal	(15,4),
 LMF bigdecimal	(15,4),
 CPL bigdecimal	(15,4),
 CTL bigdecimal	(15,4),
 BEGINNING_VCF bigdecimal	(15,4),
 ENDING_VCF bigdecimal	(15,4),
 PURCHASER_VOLUME bigdecimal	(15,4),
 PURCHASER_NET_VOLUME bigdecimal	(15,4),
 PRICE bigdecimal	(15,4),
 NET_VOLUME bigdecimal	(15,4),
 GROSS_BARRELS_HAULED bigdecimal	(15,4),
 RUN_VOLUME bigdecimal	(15,4),
 OIL_PRICE_PER_UNIT bigdecimal	(15,4),
 HEAT_CONTENT bigdecimal	(15,4),
 CORRECTED_HEAT_CONTENT bigdecimal	(15,4),
 PRESSURE_UOM	string	(20),
 TRANSPORTED_BY	string	(100),
 DOWNSTREAM_IND	string	(10),
 HEAT_CONT_UOM	string	(10),
 SOURCE_NAME	string	(100),
 REMARK string(2000),
 ROW_CHANGED_BY	string	(100),
 ROW_CHANGED_DATE	timestamp,
 ROW_CREATED_DATE	timestamp,
 ROW_CREATED_BY	string	(100),
 PURCHASE_STATEMENT_TYPE string (200),
 INV_SALES_ID string	(40)	NOT NULL,
 LEVEL1_ID	string	(40),
 LEVEL1_NAME	string	(255),
 LEVEL1_TYPE	string	(100),
 LEVEL2_ID	string	(40),
 LEVEL2_NAME	string	(255),
 LEVEL2_TYPE	string	(100),
 LEVEL3_ID	string	(40),
 LEVEL3_NAME	string	(255),
 LEVEL3_TYPE	string	(100),
 LEVEL4_ID	string	(40),
 LEVEL4_NAME	string	(255),
 LEVEL4_TYPE	string	(100),
 LEVEL5_ID	string	(40),
 LEVEL5_NAME	string	(255),
 LEVEL5_TYPE	string	(100),
 LEVEL6_ID	string	(40),
 LEVEL6_NAME	string	(255),
 LEVEL6_TYPE 	string	(100),
 REVENUE bigdecimal(15,4),
CONSTRAINT PK_INV_SALES PRIMARY KEY (INV_SALES_ID))
OPTIONS (UPDATABLE 'FALSE', INVENTORY_SALES.IMPLEMENTED 'TRUE')
AS
 (
  SELECT pvd.EVENT_DATE, pvd.EFFECTIVE_DATE, pvd.EXPIRY_DATE,	
 pvd.PRODUCT_ID,
 CASE WHEN PS.R_PURCHASE_STATEMENT_TYPE = 'GAS_PURCHASER_STATEMENT' THEN 'Gas' ELSE P.LONG_NAME END AS PRODUCT_NAME,	
pvd.BEGINNING_VOLUME, pvd.ENDING_VOLUME, EU.UOM,
pvd.BEGINNING_MEASURE, pvd.ENDING_MEASURE, EMU.UOM,
pvd.BEGINNING_TEMPERATURE, pvd.ENDING_TEMPERATURE,	pvd.OBSERVED_TEMPERATURE, ETU.UOM,
pvd.GRAVITY, pvd.CORRECTED_GRAVITY,
pvd.CORRECTED_VOLUME, pvd.ADJUSTED_GROSS_VOLUME, pvd.GROSS_STANDARD_VOLUME,
pvd.SHRINK_FACTOR,			
pvd.VOLUME_QUALITY, pvd.CORRECTED_VOLUME_QUALITY,
pvd.BSW, pvd.FW, pvd.EW,
NVM.R_NET_VOLUME_METHOD,			  
GIT.R_GRAVITY_INPUT_TYPE,
pvd.TICKET_NUMBER,
pvd.SEAL_ON, pvd.SEAL_OFF,
pvd.BARCODE,
ba1.BA_NAME AS PURCHASER_NAME,
ht.LONG_NAME as HAUL_TYPE,
PF.FACILITY_ID, PF.FACILITY_NAME,				  
PW.FACILITY_ID RFACILITY_ID, PW.FACILITY_NAME AS RFACILITY_NAME,				  
pvd.EQUIPMENT_ID, e.EQUIPMENT_NAME AS EQUIPMENT_NAME,				  
pvd.ACTIVITY_TYPE AS DISPOSITION_ID,  CASE WHEN PS.R_PURCHASE_STATEMENT_TYPE = 'GAS_PURCHASER_STATEMENT' THEN 'Sold' ELSE D.R_ACTIVITY_TYPE END AS DISPOSITION,
MS.UOM_SYSTEM, 				  
PT.R_PERIOD_TYPE,				  
pvd.PRESSURE, pvd.LMF, pvd.CPL, pvd.CTL, 
pvd.BEGINNING_VCF, pvd.ENDING_VCF, 
pvd.PURCHASER_VOLUME, pvd.PURCHASER_NET_VOLUME,
pvd.PRICE,
pvd.NET_VOLUME, pvd.VOLUME AS GROSS_BARRELS_HAULED,
pvd.RUN_VOLUME, pvd.OIL_PRICE_PER_UNIT,	
pvd.heat_content, pvd.corrected_heat_content, PU.UOM,
ba2.BA_NAME AS TRANSPORTER_NAME, 
pvdc.IS_FROM_UPSTREAM_TO_DOWNSTREAM IS_FROM_UPSTREAM_TO_DOWNSTREAM,
HU.UOM,
RS.SOURCE_NAME, pvd.REMARK,  
pvd.ROW_CHANGED_BY,    pvd.ROW_CHANGED_DATE, pvd.ROW_CREATED_DATE, pvd.ROW_CREATED_BY,    
PS.R_PURCHASE_STATEMENT_TYPE,
 pvd.PDEN_VOL_DISPOSITION_ID, 
 NULL, NULL, NULL, 
 NULL, NULL, NULL,
 NULL, NULL, NULL,
 NULL, NULL, NULL,
 NULL, NULL, NULL,
 WA.AREA_ID, NULL, NULL, (PURCHASER_VOLUME * PRICE) AS REVENUE
            FROM PPDMSrc.PDEN_VOL_DISPOSITION pvd
            INNER JOIN PPDMSrc.EQUIPMENT e ON pvd.EQUIPMENT_ID = e.EQUIPMENT_ID
            LEFT JOIN PPDMSrc.BUSINESS_ASSOCIATE ba1 ON pvd.BUSINESS_ASSOCIATE_PURCHASER = ba1.BUSINESS_ASSOCIATE_ID
            LEFT JOIN PPDMSrc.BUSINESS_ASSOCIATE ba2 ON pvd.BUSINESS_ASSOCIATE = ba2.BUSINESS_ASSOCIATE_ID
            LEFT OUTER JOIN PPDMSrc.R_ACTIVITY_TYPE AS D ON D.R_ACTIVITY_TYPE_ID = pvd.ACTIVITY_TYPE 
            LEFT JOIN PPDMSrc.PDEN_VOL_DISPOSITION_COMPONENT pvdc ON pvd.PDEN_VOL_DISPOSITION_ID = pvdc.PDEN_VOL_DISPOSITION_ID AND pvdc.ACTIVE_IND IN ('1', 'Y', 'y', 'T', 't')
            INNER JOIN PPDMSrc.R_HAUL_TYPE ht ON ht.R_HAUL_TYPE_ID = pvd.R_HAUL_TYPE_ID
            LEFT OUTER JOIN PPDMSrc.PRODUCT P ON pvd.PRODUCT_ID = P.PRODUCT_ID
			LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE EU ON pvd.ENDING_VOLUME_OUOM = EU.UOM_ID
			LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE EMU ON pvd.ENDING_MEASURE_OUOM = EMU.UOM_ID
			LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE ETU ON pvd.ENDING_TEMPERATURE_OUOM = ETU.UOM_ID
			LEFT OUTER JOIN PPDMSrc.R_NET_VOLUME_METHOD NVM ON pvd.R_NET_VOLUME_METHOD_ID = NVM.R_NET_VOLUME_METHOD_ID
			LEFT OUTER JOIN PPDMSrc.R_GRAVITY_INPUT_TYPE GIT ON pvd.R_GRAVITY_INPUT_TYPE_ID = GIT.R_GRAVITY_INPUT_TYPE_ID
			LEFT OUTER JOIN (SELECT PF.PDEN_ID, F.FACILITY_ID, F.FACILITY_NAME FROM PPDMSrc.PDEN_FACILITY PF 
				INNER JOIN PPDMSrc.FACILITY F ON PF.FACILITY_ID = F.FACILITY_ID
				WHERE F.ACTIVE_IND = 'Y')PF ON pvd.PDEN_ID = PF.PDEN_ID
			LEFT OUTER JOIN (SELECT PF.PDEN_ID, F.FACILITY_ID, F.FACILITY_NAME FROM PPDMSrc.PDEN_FACILITY PF 
				INNER JOIN PPDMSrc.FACILITY F ON PF.FACILITY_ID = F.FACILITY_ID
				WHERE F.ACTIVE_IND = 'Y')PW ON pvd.RECEIVING_PDEN_ID = PW.PDEN_ID
			LEFT OUTER JOIN PPDMSrc.PPDM_MEASUREMENT_SYSTEM MS ON pvd.MEASUREMENT_SYSTEM_ID = MS.UOM_SYSTEM_ID
			LEFT OUTER JOIN PPDMSrc.R_PERIOD_TYPE PT ON pvd.PERIOD_TYPE = PT.R_PERIOD_TYPE_ID
			LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE HU ON pvd.heat_content_ouom = HU.UOM_ID
			LEFT OUTER JOIN PPDMSrc.R_PURCHASE_STATEMENT_TYPE PS ON pvd.PURCHASE_STATEMENT_TYPE = PS.R_PURCHASE_STATEMENT_TYPE_ID
			LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON pvd.SOURCE = RS.SOURCE_ID
			LEFT OUTER JOIN PPDMSrc.PPDM_UNIT_OF_MEASURE PU ON pvd.PRESSURE_OUOM = PU.UOM_ID
			LEFT OUTER JOIN PPDMSrc.FACILITY_AREA WA ON PW.FACILITY_ID = WA.FACILITY_ID
			WHERE pvd.ACTIVE_IND = 'Y'
 );
 
 CREATE VIEW ENTITY_STATUS
(
ENTITY_STATUS_ID  string (40) NOT NULL,
ENTITY_NAME  string (255),
STATUS_DATE timestamp,  
SEFFECTIVE_DATE timestamp,  
SEXPIRY_DATE timestamp,  
ENTITY_STATUS  string (100),
ES_SHORT_NAME  string (100),
ENTITY_STATUS_TYPE  string (100),
ES_TYPE_SHORT_NAME  string (100), 
SOURCE_NAME  string (100),
ROW_CHANGED_BY  string (100),   
ROW_CHANGED_DATE timestamp,   
ROW_CREATED_DATE timestamp,   
ROW_CREATED_BY  string (100),
ACTIVE_IND  string (1),
ENTITY_ID   string (40) NOT NULL,
ENTITY_TYPE string(20),
CONSTRAINT PK_ENTITY_STATUS PRIMARY KEY (ENTITY_STATUS))
OPTIONS (UPDATABLE 'FALSE',ENTITY_STATUS.IMPLEMENTED 'TRUE')
AS
(
select WS.WELL_STATUS_ID AS STATUS_ID,
 W.WELL_NAME AS ENAME,WS.STATUS_DATE, WS.EFFECTIVE_DATE, WS.EXPIRY_DATE,
 WT.STATUS, WT.SHORT_NAME, ST.STATUS_TYPE, ST.SHORT_NAME,
 RS.SOURCE_NAME,
 WS.ROW_CHANGED_BY, WS.ROW_CHANGED_DATE,
 WS.ROW_CREATED_DATE, WS.ROW_CREATED_BY,
WS.ACTIVE_IND, WS.WELL_ID AS EID, 'Well' AS ETYPE
 from PPDMSrc.WELL_STATUS WS
INNER JOIN PPDMSrc.R_WELL_STATUS WT ON WS.R_WELL_STATUS_ID = WT.R_WELL_STATUS_ID
INNER JOIN PPDMSrc.R_WELL_STATUS_TYPE ST ON WT.R_WELL_STATUS_TYPE_ID = ST.R_WELL_STATUS_TYPE_ID
INNER JOIN PPDMSrc.WELL W ON WS.WELL_ID = W.WELL_ID
LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON WS.SOURCE = RS.SOURCE_ID
WHERE WS.ACTIVE_IND = 'Y' AND W.ACTIVE_IND = 'Y' AND WT.ACTIVE_IND = 'Y'
UNION ALL 
select FS.FACILITY_STATUS_ID  AS STATUS_ID, F.FACILITY_NAME AS ENAME,
FS.STATUS_DATE, FS.EFFECTIVE_DATE, FS.EXPIRY_DATE,
FT.STATUS, FT.SHORT_NAME, ST.STATUS_TYPE, ST.SHORT_NAME,
RS.SOURCE_NAME,
 FS.ROW_CHANGED_BY, FS.ROW_CHANGED_DATE,
 FS.ROW_CREATED_DATE, FS.ROW_CREATED_BY,
 FS.ACTIVE_IND, F.FACILITY_ID AS EID, 'Facility' AS ETYPE
 from PPDMSrc.FACILITY_STATUS FS
INNER JOIN PPDMSrc.R_FACILITY_STATUS FT ON FS.R_FACILITY_STATUS_ID = FT.R_FACILITY_STATUS_ID
INNER JOIN PPDMSrc.R_FACILITY_STATUS_TYPE ST ON FT.R_FACILITY_STATUS_TYPE_ID = ST.R_FACILITY_STATUS_TYPE_ID
INNER JOIN PPDMSrc.FACILITY F ON FS.FACILITY_ID = F.FACILITY_ID
LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON FS.SOURCE = RS.SOURCE_ID
WHERE FS.ACTIVE_IND = 'Y' AND F.ACTIVE_IND = 'Y' AND FT.ACTIVE_IND = 'Y'
UNION ALL 
select P.PDEN_ID AS STATUS_ID,
 W.WELL_NAME AS ENAME,P.CURRENT_STATUS_DATE, P.EFFECTIVE_DATE, P.EXPIRY_DATE,
 PM.PRODUCTION_METHOD, PM.SHORT_NAME, 'ProductionMethod' AS STATUS_TYPE, 'Production Method' SHORT_NAME,
 RS.SOURCE_NAME,
 P.ROW_CHANGED_BY, P.ROW_CHANGED_DATE,
 P.ROW_CREATED_DATE, P.ROW_CREATED_BY,
P.ACTIVE_IND, W.WELL_ID AS EID, 'Well' AS ETYPE
 from PPDMSrc.PDEN P
INNER JOIN PPDMSrc.R_PRODUCTION_METHOD PM ON P.PRODUCTION_METHOD = PM.R_PRODUCTION_METHOD_ID
INNER JOIN PPDMSrc.PDEN_WELL PW ON P.PDEN_ID = PW.PDEN_ID
INNER JOIN PPDMSrc.WELL W ON PW.WELL_ID = W.WELL_ID
LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON P.SOURCE = RS.SOURCE_ID
WHERE P.ACTIVE_IND = 'Y' AND PW.ACTIVE_IND = 'Y' AND W.ACTIVE_IND = 'Y'
);

CREATE VIEW R_EQUIP_SPEC
(
SPEC_TYPE_ID string(40) NOT NULL,
SPEC_TYPE string(2000) not null,
ABBREVIATION string(100),
ACTIVE_IND string(1),
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
LONG_NAME string(100),
PROPERTY_SET_ID string(40),
REMARKS string(2000),
SHORT_NAME string(100),
SOURCE_NAME string(250),
ROW_CHANGED_BY string(100),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(100),
ROW_CREATED_DATE timestamp,
SPEC_CODE string(40),
CONSTRAINT PK_R_EQUIP_SPEC PRIMARY KEY (SPEC_TYPE_ID))
OPTIONS (UPDATABLE 'FALSE',R_EQUIP_SPEC.IMPLEMENTED 'TRUE')
AS(
SELECT SPEC_TYPE,SPEC_TYPE_VAL,ABBREVIATION,ACTIVE_IND,EFFECTIVE_DATE,EXPIRY_DATE,
LONG_NAME,NULL AS PROPERTY_SET_ID,REMARK,SHORT_NAME,SOURCE_NAME,ROW_CHANGED_BY,ROW_CHANGED_DATE,
ROW_CREATED_BY,ROW_CREATED_DATE ,SPEC_CODE
FROM PDMExtSrc.R_EQUIP_SPEC_CODE 
);

CREATE VIEW BUSINESS_ASSOCIATE
(
BUSINESS_ASSOCIATE_ID string(40) NOT NULL,
BUSINESS_ASSOCIATE string(100) not null,
ACTIVE_IND string(1),
BA_ABBREVIATION string(20),
BA_CATEGORY string(100),
BA_CODE string(20),
BA_SHORT_NAME string(30),
BA_TYPE string(100) not null,
CREDIT_CHECK_DATE timestamp,
CREDIT_CHECK_IND string(1),
CREDIT_CHECK_SOURCE string(40),
CREDIT_RATING string(20),
CREDIT_RATING_SOURCE string(40),
CURRENT_STATUS string(20),
EFFECTIVE_DATE timestamp,
EXPIRY_DATE timestamp,
FIRST_NAME string(255),
LAST_NAME string(255),
MIDDLE_INITIAL string(10),
REMARKS string(2000),
SERVICE_PERIOD string(240),
SOURCE_NAME string(100),
ROW_CHANGED_BY string(255),
ROW_CHANGED_DATE timestamp,
ROW_CREATED_BY string(255),
ROW_CREATED_DATE timestamp,
CONSTRAINT PK_BUSINESS_ASSOCIATE PRIMARY KEY (BUSINESS_ASSOCIATE_ID))
OPTIONS (UPDATABLE 'FALSE',BUSINESS_ASSOCIATE.IMPLEMENTED 'TRUE')
AS(

SELECT BUSINESS_ASSOCIATE_ID,BUSINESS_ASSOCIATE,BA.ACTIVE_IND,BA_ABBREVIATION,RBAC.BA_CATEGORY,BA_CODE,BA_SHORT_NAME,RBT.BA_TYPE,
CREDIT_CHECK_DATE,CREDIT_CHECK_IND,CREDIT_CHECK_SOURCE,CREDIT_RATING,CREDIT_RATING_SOURCE,RBS.BA_STATUS AS CURRENT_STATUS,BA.EFFECTIVE_DATE,
BA.EXPIRY_DATE,FIRST_NAME,LAST_NAME,MIDDLE_INITIAL,BA.REMARK as REMARKS,SERVICE_PERIOD,RS.SOURCE_NAME AS SOURCE_NAME,
BA.ROW_CHANGED_BY,BA.ROW_CHANGED_DATE,BA.ROW_CREATED_BY,BA.ROW_CREATED_DATE
 FROM PPDMSrc.BUSINESS_ASSOCIATE BA
 INNER JOIN PPDMSrc.R_BA_CATEGORY RBAC ON RBAC.BA_CATEGORY_ID=BA.BA_CATEGORY
 LEFT OUTER JOIN PPDMSrc.R_SOURCE RS ON RS.SOURCE_ID= BA.SOURCE
 INNER JOIN PPDMSrc.R_BA_TYPE RBT ON RBT.BA_TYPE_ID=BA.BA_TYPE
 INNER JOIN PPDMSrc.R_BA_STATUS RBS ON RBS.BA_STATUS_ID=BA.CURRENT_STATUS
);

CREATE PROCEDURE ds_WELL_COMMENTS(sp_custom_error_message string(4000), xml_sp_params string(999999)) RETURNS (OP string(4000)) AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_WELL_COMMENTS.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_WELL_COMMENTS.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.DEL_REMARK_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DEL_REMARK_IND');
	DECLARE string VARIABLES.WELL_REMARK_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK_ID');
	DECLARE string VARIABLES.WELL_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.WELL_COMPLETION_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WELL_COMPLETION_ID');
	DECLARE string VARIABLES.REMARK_DATE_VAR = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK_DATE');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK');
	DECLARE string VARIABLES.ATTACHMENT_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ATTACHMENT_IND');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.CreatedDate = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.IDVal = null;
	DECLARE TIMESTAMP VARIABLES.REMARK_DATE = null;
	DECLARE string VARIABLES.SP_USER_TEMP = null;
	IF((VARIABLES.DEL_REMARK_IND IS NOT NULL) AND (VARIABLES.DEL_REMARK_IND <> '') AND (UPPER(VARIABLES.DEL_REMARK_IND) = 'Y'))
	BEGIN
		IF((VARIABLES.WELL_COMPLETION_ID IS NOT NULL) AND (VARIABLES.WELL_COMPLETION_ID <> ''))
		BEGIN
			UPDATE PDMExtSrc.WELL_COMPLETION_REMARK SET ACTIVE_IND = 'N' 
			WHERE cast(PDMExtSrc.WELL_COMPLETION_REMARK.WELL_COMPLETION_REMARK_ID AS string) = VARIABLES.WELL_REMARK_ID;		
		END
		ELSE
		BEGIN
			UPDATE PDMExtSrc.WELL_REMARK SET ACTIVE_IND = 'N' 
			WHERE cast(PDMExtSrc.WELL_REMARK.WELL_REMARK_ID AS string) = VARIABLES.WELL_REMARK_ID;
		END
		SELECT 'Success' AS OP;
	END
	ELSE
	BEGIN
		IF((VARIABLES.REMARK_DATE_VAR IS NOT NULL) AND (VARIABLES.REMARK_DATE_VAR <> ''))
		BEGIN
			VARIABLES.REMARK_DATE = PARSETIMESTAMP(VARIABLES.REMARK_DATE_VAR, 'MM/dd/yyyy');
		END
		IF((VARIABLES.WELL_REMARK_ID IS NOT NULL) AND (VARIABLES.WELL_REMARK_ID <> ''))
		BEGIN
			IF((VARIABLES.WELL_COMPLETION_ID IS NOT NULL) AND (VARIABLES.WELL_COMPLETION_ID <> ''))
			BEGIN
				VARIABLES.SP_USER_TEMP = (SELECT cast(PDMExtSrc.WELL_COMPLETION_REMARK.ROW_CREATED_BY AS string) FROM PDMExtSrc.WELL_COMPLETION_REMARK WHERE cast(PDMExtSrc.WELL_COMPLETION_REMARK.WELL_COMPLETION_REMARK_ID AS string) = VARIABLES.WELL_REMARK_ID);
				IF((VARIABLES.SP_USER IS NOT NULL) AND (VARIABLES.SP_USER <> '') AND (VARIABLES.SP_USER = VARIABLES.SP_USER_TEMP))
				BEGIN
					UPDATE PDMExtSrc.WELL_COMPLETION_REMARK SET REMARKS = VARIABLES.REMARK, REMARK_DATE = VARIABLES.REMARK_DATE, 
					ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.CreatedDate , ATTACHMENT_IND = VARIABLES.ATTACHMENT_IND
					WHERE cast(PDMExtSrc.WELL_COMPLETION_REMARK.WELL_COMPLETION_REMARK_ID AS string) = VARIABLES.WELL_REMARK_ID;
					SELECT 'Success' AS OP;
				END
				ELSE
				BEGIN
					SELECT 'User Permission Error' AS OP;
				END			
			END
			ELSE
			BEGIN
				IF((VARIABLES.WELL_ID IS NOT NULL) AND (VARIABLES.WELL_ID <> ''))
				BEGIN
					VARIABLES.SP_USER_TEMP = (SELECT cast(PDMExtSrc.WELL_REMARK.ROW_CREATED_BY AS string) FROM PDMExtSrc.WELL_REMARK 
					WHERE cast(PDMExtSrc.WELL_REMARK.WELL_REMARK_ID AS string) = VARIABLES.WELL_REMARK_ID);
					IF((VARIABLES.SP_USER IS NOT NULL) AND (VARIABLES.SP_USER <> '') AND (VARIABLES.SP_USER = VARIABLES.SP_USER_TEMP))
					BEGIN
						UPDATE PDMExtSrc.WELL_REMARK SET REMARKS = VARIABLES.REMARK, REMARK_DATE = VARIABLES.REMARK_DATE, 
						ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.CreatedDate, ATTACHMENT_IND = VARIABLES.ATTACHMENT_IND 
						WHERE cast(PDMExtSrc.WELL_REMARK.WELL_REMARK_ID AS string) = VARIABLES.WELL_REMARK_ID;
						SELECT 'Success' AS OP;
					END
					ELSE
					BEGIN
						SELECT 'User Permission Error' AS OP;
					END
				END
			END
		END
		ELSE
		BEGIN
			VARIABLES.WELL_REMARK_ID = (SELECT UUID());
			IF((VARIABLES.WELL_COMPLETION_ID IS NOT NULL) AND (VARIABLES.WELL_COMPLETION_ID <> ''))
			BEGIN
				INSERT INTO PDMExtSrc.WELL_COMPLETION_REMARK (PDMExtSrc.WELL_COMPLETION_REMARK.WELL_COMPLETION_REMARK_ID, PDMExtSrc.WELL_COMPLETION_REMARK.WELL_COMPLETION_ID, 
				PDMExtSrc.WELL_COMPLETION_REMARK.ACTIVE_IND, PDMExtSrc.WELL_COMPLETION_REMARK.REMARK_DATE, PDMExtSrc.WELL_COMPLETION_REMARK.REMARKS, PDMExtSrc.WELL_COMPLETION_REMARK.ROW_CREATED_BY, PDMExtSrc.WELL_COMPLETION_REMARK.ROW_CREATED_DATE, 
				PDMExtSrc.WELL_COMPLETION_REMARK.ROW_CHANGED_BY, PDMExtSrc.WELL_COMPLETION_REMARK.ROW_CHANGED_DATE, 
				PDMExtSrc.WELL_COMPLETION_REMARK.SOURCE_NAME, PDMExtSrc.WELL_COMPLETION_REMARK.ATTACHMENT_IND) VALUES (VARIABLES.WELL_REMARK_ID, VARIABLES.WELL_COMPLETION_ID, 'Y', VARIABLES.REMARK_DATE, 
				VARIABLES.REMARK, VARIABLES.SP_USER, VARIABLES.CreatedDate, VARIABLES.SP_USER, VARIABLES.CreatedDate, 'DSPM',
				VARIABLES.ATTACHMENT_IND);
			END
			ELSE
			BEGIN
				IF((VARIABLES.WELL_ID IS NOT NULL) AND (VARIABLES.WELL_ID <> ''))
				BEGIN
					INSERT INTO PDMExtSrc.WELL_REMARK (PDMExtSrc.WELL_REMARK.WELL_REMARK_ID, PDMExtSrc.WELL_REMARK.WELL_ID, 
					PDMExtSrc.WELL_REMARK.ACTIVE_IND, PDMExtSrc.WELL_REMARK.REMARK_DATE, PDMExtSrc.WELL_REMARK.REMARKS, 
					PDMExtSrc.WELL_REMARK.ROW_CREATED_BY, PDMExtSrc.WELL_REMARK.ROW_CREATED_DATE, PDMExtSrc.WELL_REMARK.ROW_CHANGED_BY, 
					PDMExtSrc.WELL_REMARK.ROW_CHANGED_DATE, PDMExtSrc.WELL_REMARK.SOURCE_NAME, PDMExtSrc.WELL_REMARK.ATTACHMENT_IND) VALUES (VARIABLES.WELL_REMARK_ID, VARIABLES.WELL_ID, 'Y', 
					VARIABLES.REMARK_DATE, VARIABLES.REMARK, VARIABLES.SP_USER, VARIABLES.CreatedDate, VARIABLES.SP_USER, 
					VARIABLES.CreatedDate, 'DSPM',VARIABLES.ATTACHMENT_IND);
				END
			END
			SELECT 'Success' AS OP;
		END
		
		SELECT * INTO #tempSrcDocs FROM XMLTABLE('/Parameters/DOCUMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS SOURCE_DOCUMENT STRING PATH '@SOURCE_DOCUMENT', 
		DOCUMENT_TITLE STRING PATH '@DOCUMENT_TITLE', DOCUMENT_FULL_PATH STRING PATH '@DOCUMENT_FULL_PATH', DEL_IND STRING PATH '@DEL_IND',
		WELL_COMPLETION_DOCUMENT_ID STRING PATH '@DOCUMENT_ID',
		DOCUMENT_TYPE STRING PATH '@DOCUMENT_TYPE') AS SRC_DOCS;
		LOOP ON (SELECT #tempSrcDocs.WELL_COMPLETION_DOCUMENT_ID FROM #tempSrcDocs WHERE #tempSrcDocs.DEL_IND = 'Y') AS srcDocsDelCursor
		BEGIN
			UPDATE PDMExtSrc.SOURCE_DOCUMENT SET PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND = 'N',
			PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_BY = VARIABLES.SP_USER,
			PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_DATE = VARIABLES.CreatedDate
				WHERE PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID = srcDocsDelCursor.WELL_COMPLETION_DOCUMENT_ID;			
		END
		LOOP ON (SELECT #tempSrcDocs.SOURCE_DOCUMENT, #tempSrcDocs.DOCUMENT_TITLE,#tempSrcDocs.DOCUMENT_FULL_PATH,
		#tempSrcDocs.WELL_COMPLETION_DOCUMENT_ID, #tempSrcDocs.DOCUMENT_TYPE FROM #tempSrcDocs
					WHERE (#tempSrcDocs.DEL_IND = 'N' OR #tempSrcDocs.DEL_IND IS NULL
						OR #tempSrcDocs.DEL_IND = '') AND #tempSrcDocs.WELL_COMPLETION_DOCUMENT_ID IS NOT NULL) AS srcDocsUpdCursor
		BEGIN
			UPDATE PDMExtSrc.SOURCE_DOCUMENT SET PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TITLE = srcDocsUpdCursor.DOCUMENT_TITLE,
			PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT = srcDocsUpdCursor.SOURCE_DOCUMENT,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH = srcDocsUpdCursor.DOCUMENT_FULL_PATH,
			PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND = 'Y', PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_BY = VARIABLES.SP_USER,
			PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_DATE = VARIABLES.CreatedDate,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TYPE = srcDocsUpdCursor.DOCUMENT_TYPE
				WHERE PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID = srcDocsUpdCursor.WELL_COMPLETION_DOCUMENT_ID;
		END
		DECLARE string VARIABLES.SOURCE_DOCUMENT_ID;
		LOOP ON (SELECT #tempSrcDocs.SOURCE_DOCUMENT, #tempSrcDocs.DOCUMENT_TITLE, 
		#tempSrcDocs.DOCUMENT_FULL_PATH, #tempSrcDocs.WELL_COMPLETION_DOCUMENT_ID,
		#tempSrcDocs.DOCUMENT_TYPE
		FROM #tempSrcDocs
					WHERE (#tempSrcDocs.DEL_IND = 'N' OR #tempSrcDocs.DEL_IND IS NULL OR #tempSrcDocs.DEL_IND = '') 
					AND (#tempSrcDocs.WELL_COMPLETION_DOCUMENT_ID IS NULL OR #tempSrcDocs.WELL_COMPLETION_DOCUMENT_ID = '')) AS srcDocsInsCursor
		BEGIN
			VARIABLES.SOURCE_DOCUMENT_ID = (SELECT UUID());
			INSERT INTO PDMExtSrc.SOURCE_DOCUMENT(PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID,PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID,
			PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND, PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH, PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TITLE,PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_BY,
			PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_DATE,PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TYPE)
			VALUES (VARIABLES.SOURCE_DOCUMENT_ID,VARIABLES.WELL_REMARK_ID,'Y',srcDocsInsCursor.DOCUMENT_FULL_PATH,
			srcDocsInsCursor.SOURCE_DOCUMENT,srcDocsInsCursor.DOCUMENT_TITLE,VARIABLES.SP_USER,
			VARIABLES.CreatedDate,srcDocsInsCursor.DOCUMENT_TYPE);
		END

		IF((SELECT COUNT(1) FROM PDMExtSrc.SOURCE_DOCUMENT WHERE PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID = VARIABLES.WELL_REMARK_ID 
					AND PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND = 'Y') > 0)
		BEGIN
			IF((VARIABLES.WELL_COMPLETION_ID IS NOT NULL) AND (VARIABLES.WELL_COMPLETION_ID <> ''))
			BEGIN
				UPDATE PDMExtSrc.WELL_COMPLETION_REMARK SET ATTACHMENT_IND = 'Y' WHERE WELL_COMPLETION_REMARK_ID = VARIABLES.WELL_REMARK_ID;
			END
			ELSE
				UPDATE PDMExtSrc.WELL_REMARK SET ATTACHMENT_IND = 'Y' WHERE WELL_REMARK_ID = VARIABLES.WELL_REMARK_ID;
			BEGIN
			END
		END
		ELSE
		BEGIN
			IF((VARIABLES.WELL_COMPLETION_ID IS NOT NULL) AND (VARIABLES.WELL_COMPLETION_ID <> ''))
			BEGIN
				UPDATE PDMExtSrc.WELL_COMPLETION_REMARK SET ATTACHMENT_IND = 'N' WHERE WELL_COMPLETION_REMARK_ID = VARIABLES.WELL_REMARK_ID;
			END
			ELSE
			BEGIN
				UPDATE PDMExtSrc.WELL_REMARK SET ATTACHMENT_IND = 'N' WHERE WELL_REMARK_ID = VARIABLES.WELL_REMARK_ID;
			END
		END	
		SELECT 'Success' AS OP;
	END	
END;

CREATE PROCEDURE ds_WELL_TEST_APPROVAL(sp_custom_error_message string(4000), xml_sp_params string(999999)) RETURNS (OP string(4000)) AS
BEGIN
DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_WELL_TEST_APPROVAL.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_WELL_TEST_APPROVAL.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.IS_DETAILS_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IS_DETAILS_IND');
	DECLARE string VARIABLES.IS_CALCULATE_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IS_CALCULATE_IND');
	DECLARE string VARIABLES.OBJECT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'OBJECT_ID');
	DECLARE string VARIABLES.ENTITY_NAME = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_NAME');
	DECLARE TIMESTAMP VARIABLES.PARAM_DATE = PARSETIMESTAMP((SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PARAM_DATE'), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.OIL = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'OIL');
	DECLARE string VARIABLES.GAS = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GAS');
	DECLARE string VARIABLES.WATER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WATER');
	DECLARE string VARIABLES.VALID_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL  AND #tempXML.ValueRes <> '' THEN #tempXML.ValueRes ELSE 'P' END FROM #tempXML WHERE #tempXML.Name = 'VALID_IND');
	DECLARE string VARIABLES.FLOWING_PRESSURE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'FLOW_PRESS');
	DECLARE string VARIABLES.FLOWING_PRESSURE_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'FLOW_PRESS_UOM');
	DECLARE string VARIABLES.WATER_CUT = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WC');
	DECLARE string VARIABLES.WC_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WC_UOM');
	DECLARE string VARIABLES.GOR = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GOR');
	DECLARE string VARIABLES.GOR_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GOR_UOM');
	DECLARE string VARIABLES.GAUGE_PRESSURE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GAUGE_PRESS');
	DECLARE string VARIABLES.GAUGE_PRESSURE_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GAUGE_PRESS_UOM');
	DECLARE string VARIABLES.GAUGE_DEPTH = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GAUGE_DEPTH');
	DECLARE string VARIABLES.GAUGE_DEPTH_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GAUGE_DEPTH_UOM');
	DECLARE string VARIABLES.CH_INLET_PRESSURE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CHOKE_INLET_PRESS');
	DECLARE string VARIABLES.CHOKE_INLET_PRESS_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CHOKE_INLET_PRESS_UOM');
	DECLARE string VARIABLES.CH_INLET_TEMPERATURE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CHOKE_INLET_TEMP');
	DECLARE string VARIABLES.CHOKE_INLET_TEMP_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CHOKE_INLET_TEMP_UOM');
	DECLARE string VARIABLES.CH_OUTLET_PRESSURE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CHOKE_OUTLET_PRESS');
	DECLARE string VARIABLES.CHOKE_OUTLET_PRESS_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CHOKE_OUTLET_PRESS_UOM');
	DECLARE string VARIABLES.CHOKE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CHOKE');
	DECLARE string VARIABLES.CHOKE_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CHOKE_UOM');
	DECLARE string VARIABLES.CHOKE_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CHOKE_IND');
	DECLARE string VARIABLES.CHP = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CHP');
	DECLARE string VARIABLES.IPR = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IPR');
	DECLARE string VARIABLES.VLP = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'VLP');
	DECLARE string VARIABLES.IPR_VLP = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IPR_VLP');
	DECLARE string VARIABLES.THT = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'TUBING_TEMPERATURE');
	DECLARE string VARIABLES.THT_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'TUBING_TEMP_UOM');
	DECLARE string VARIABLES.THP = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'TUBING_PRESSURE');
	DECLARE string VARIABLES.THP_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'TUBING_PRESS_UOM');
	DECLARE string VARIABLES.BHP = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BHP');
	DECLARE string VARIABLES.BHP_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BHP_UOM');
	DECLARE string VARIABLES.WHP = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WHP');
	DECLARE string VARIABLES.WHP_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WHP_UOM');
	DECLARE string VARIABLES.WHT = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WHT');
	DECLARE string VARIABLES.WHT_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WHT_UOM');
	DECLARE string VARIABLES.TT = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'TUBING_TEMPERATURE');
	DECLARE string VARIABLES.TT_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'TUBING_TEMP_UOM');	
	DECLARE string VARIABLES.WGR = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WGR');
	DECLARE string VARIABLES.WGR_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WGR_UOM');
	DECLARE string VARIABLES.CGR = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CGR');
	DECLARE string VARIABLES.CGR_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CGR_OUOM');
	DECLARE string VARIABLES.GLR = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GLR');
	DECLARE string VARIABLES.GLR_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GLR_UOM');
	DECLARE string VARIABLES.LIQUID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'QLIQUID');
	DECLARE string VARIABLES.LIQUID_OUOM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'QLIQUID_UOM');
	DECLARE string VARIABLES.FLUID_TYPE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'FLUID_TYPE');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.CREATEDDATE = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.ACTIVE_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ACTIVE_IND');
	DECLARE BIGDECIMAL VARIABLES.OIL_DEC = null;
	IF((VARIABLES.OIL IS NOT NULL) AND (VARIABLES.OIL <> ''))
	BEGIN
		VARIABLES.OIL_DEC = CONVERT(VARIABLES.OIL, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.GAS_DEC = null;
	IF((VARIABLES.GAS IS NOT NULL) AND (VARIABLES.GAS <> ''))
	BEGIN
		VARIABLES.GAS_DEC = CONVERT(VARIABLES.GAS, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.WATER_DEC = null;
	IF((VARIABLES.WATER IS NOT NULL) AND (VARIABLES.WATER <> ''))
	BEGIN
		VARIABLES.WATER_DEC = CONVERT(VARIABLES.WATER, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.FLOWING_PRESSURE_DEC = null;
	IF((VARIABLES.FLOWING_PRESSURE IS NOT NULL) AND (VARIABLES.FLOWING_PRESSURE <> ''))
	BEGIN
		VARIABLES.FLOWING_PRESSURE_DEC = CONVERT(VARIABLES.FLOWING_PRESSURE, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.WATER_CUT_DEC = null;
	IF((VARIABLES.WATER_CUT IS NOT NULL) AND (VARIABLES.WATER_CUT <> ''))
	BEGIN
		VARIABLES.WATER_CUT_DEC = CONVERT(VARIABLES.WATER_CUT, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.GOR_DEC = null;
	IF((VARIABLES.GOR IS NOT NULL) AND (VARIABLES.GOR <> ''))
	BEGIN
		VARIABLES.GOR_DEC = CONVERT(VARIABLES.GOR, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.GAUGE_PRESSURE_DEC = null;
	IF((VARIABLES.GAUGE_PRESSURE IS NOT NULL) AND (VARIABLES.GAUGE_PRESSURE <> ''))
	BEGIN
		VARIABLES.GAUGE_PRESSURE_DEC = CONVERT(VARIABLES.GAUGE_PRESSURE, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.GAUGE_DEPTH_DEC = null;
	IF((VARIABLES.GAUGE_DEPTH IS NOT NULL) AND (VARIABLES.GAUGE_DEPTH <> ''))
	BEGIN
		VARIABLES.GAUGE_DEPTH_DEC = CONVERT(VARIABLES.GAUGE_DEPTH, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.CH_INLET_PRESSURE_DEC = null;
	IF((VARIABLES.CH_INLET_PRESSURE IS NOT NULL) AND (VARIABLES.CH_INLET_PRESSURE <> ''))
	BEGIN
		VARIABLES.CH_INLET_PRESSURE_DEC = CONVERT(VARIABLES.CH_INLET_PRESSURE, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.CH_INLET_TEMPERATURE_DEC = null;
	IF((VARIABLES.CH_INLET_TEMPERATURE IS NOT NULL) AND (VARIABLES.CH_INLET_TEMPERATURE <> ''))
	BEGIN
		VARIABLES.CH_INLET_TEMPERATURE_DEC = CONVERT(VARIABLES.CH_INLET_TEMPERATURE, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.CH_OUTLET_PRESSURE_DEC = null;
	IF((VARIABLES.CH_OUTLET_PRESSURE IS NOT NULL) AND (VARIABLES.CH_OUTLET_PRESSURE <> ''))
	BEGIN
		VARIABLES.CH_OUTLET_PRESSURE_DEC = CONVERT(VARIABLES.CH_OUTLET_PRESSURE, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.CHOKE_DEC = null;
	IF((VARIABLES.CHOKE IS NOT NULL) AND (VARIABLES.CHOKE <> ''))
	BEGIN
		VARIABLES.CHOKE_DEC = CONVERT(VARIABLES.CHOKE, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.THT_DEC = null;
	IF((VARIABLES.THT IS NOT NULL) AND (VARIABLES.THT <> ''))
	BEGIN
		VARIABLES.THT_DEC = CONVERT(VARIABLES.THT, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.THP_DEC = null;
	IF((VARIABLES.THP IS NOT NULL) AND (VARIABLES.THP <> ''))
	BEGIN
		VARIABLES.THP_DEC = CONVERT(VARIABLES.THP, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.BHP_DEC = null;
	IF((VARIABLES.BHP IS NOT NULL) AND (VARIABLES.BHP <> ''))
	BEGIN
		VARIABLES.BHP_DEC = CONVERT(VARIABLES.BHP, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.LIQUID_DEC = null;
	IF((VARIABLES.LIQUID IS NOT NULL) AND (VARIABLES.LIQUID <> ''))
	BEGIN
		VARIABLES.LIQUID_DEC = CONVERT(VARIABLES.LIQUID, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.WGR_DEC = null;
	IF((VARIABLES.WGR IS NOT NULL) AND (VARIABLES.WGR <> ''))
	BEGIN
		VARIABLES.WGR_DEC = CONVERT(VARIABLES.WGR, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.CGR_DEC = null;
	IF((VARIABLES.CGR IS NOT NULL) AND (VARIABLES.CGR <> ''))
	BEGIN
		VARIABLES.CGR_DEC = CONVERT(VARIABLES.CGR, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.GLR_DEC = null;
	IF((VARIABLES.GLR IS NOT NULL) AND (VARIABLES.GLR <> ''))
	BEGIN
		VARIABLES.GLR_DEC = CONVERT(VARIABLES.GLR, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.WHP_DEC = null;
	IF((VARIABLES.WHP IS NOT NULL) AND (VARIABLES.WHP <> ''))
	BEGIN
		VARIABLES.WHP_DEC = CONVERT(VARIABLES.WHP, BIGDECIMAL);
	END
	DECLARE BIGDECIMAL VARIABLES.WHT_DEC = null;
	IF((VARIABLES.WHT IS NOT NULL) AND (VARIABLES.WHT <> ''))
	BEGIN
		VARIABLES.WHT_DEC = CONVERT(VARIABLES.WHT, BIGDECIMAL);
	END
	
	DECLARE BIGDECIMAL VARIABLES.TT_DEC = null;
	IF((VARIABLES.TT IS NOT NULL) AND (VARIABLES.TT <> ''))
	BEGIN
		VARIABLES.TT_DEC = CONVERT(VARIABLES.TT, BIGDECIMAL);
	END	

	DECLARE string VARIABLES.PK_ID = (SELECT UUID());
	DECLARE string VARIABLES.WT_FLOW_MEAS_ID = null;
	DECLARE integer VARIABLES.ROWOP = null;
	IF(UPPER(VARIABLES.IS_DETAILS_IND) = 'Y')
	BEGIN
		IF((SELECT COUNT(1) FROM PDMExtSrc.WELL_TEST_PARAMETERS 
		WHERE cast(PDMExtSrc.WELL_TEST_PARAMETERS.OBJECT_ID AS string) = VARIABLES.OBJECT_ID) > 0)
		BEGIN
			UPDATE PDMExtSrc.WELL_TEST_PARAMETERS SET VALID_IND = VARIABLES.VALID_IND, ROW_CHANGED_DATE = VARIABLES.CREATEDDATE, 
			ROW_CHANGED_BY = VARIABLES.SP_USER WHERE cast(PDMExtSrc.WELL_TEST_PARAMETERS.OBJECT_ID AS string) = VARIABLES.OBJECT_ID;
		END
		ELSE
		BEGIN
			INSERT INTO PDMExtSrc.WELL_TEST_PARAMETERS (PDMExtSrc.WELL_TEST_PARAMETERS.PARAM_ID, PDMExtSrc.WELL_TEST_PARAMETERS.OBJECT_ID, 
			PDMExtSrc.WELL_TEST_PARAMETERS.PARAM_DATE, PDMExtSrc.WELL_TEST_PARAMETERS.ROW_CREATED_DATE, 
			PDMExtSrc.WELL_TEST_PARAMETERS.ROW_CREATED_BY, PDMExtSrc.WELL_TEST_PARAMETERS.VALID_IND) VALUES (VARIABLES.PK_ID, 
			VARIABLES.OBJECT_ID, VARIABLES.PARAM_DATE, VARIABLES.CREATEDDATE, VARIABLES.SP_USER, VARIABLES.VALID_IND);
		END
	END
	ELSE
	BEGIN
		IF((SELECT COUNT(1) FROM PDMExtSrc.WELL_TEST_PARAMETERS WHERE cast(PDMExtSrc.WELL_TEST_PARAMETERS.OBJECT_ID AS string) = VARIABLES.OBJECT_ID) > 0)
		BEGIN
			UPDATE PDMExtSrc.WELL_TEST_PARAMETERS SET VALID_IND = VARIABLES.VALID_IND, ROW_CHANGED_DATE = VARIABLES.CREATEDDATE, 
			ROW_CHANGED_BY = VARIABLES.SP_USER WHERE cast(PDMExtSrc.WELL_TEST_PARAMETERS.OBJECT_ID AS string) = VARIABLES.OBJECT_ID;
		END
		ELSE
		BEGIN
			INSERT INTO PDMExtSrc.WELL_TEST_PARAMETERS (PDMExtSrc.WELL_TEST_PARAMETERS.PARAM_ID, 
			PDMExtSrc.WELL_TEST_PARAMETERS.OBJECT_ID, PDMExtSrc.WELL_TEST_PARAMETERS.PARAM_DATE, 
			PDMExtSrc.WELL_TEST_PARAMETERS.ROW_CREATED_DATE, PDMExtSrc.WELL_TEST_PARAMETERS.ROW_CREATED_BY, 
			PDMExtSrc.WELL_TEST_PARAMETERS.VALID_IND) VALUES (VARIABLES.PK_ID, VARIABLES.OBJECT_ID, VARIABLES.PARAM_DATE, 
			VARIABLES.CREATEDDATE, VARIABLES.SP_USER, VARIABLES.VALID_IND);
		END
		IF((SELECT COUNT(1) FROM PDMExtSrc.WELL_TEST_FLOW_MEAS 
		WHERE (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_ID AS string) = VARIABLES.OBJECT_ID) 
		AND (PDMExtSrc.WELL_TEST_FLOW_MEAS.PRODUCT_ID = 'Oil')) > 0)
		BEGIN
			UPDATE PDMExtSrc.WELL_TEST_FLOW_MEAS SET MEASUREMENT_VOLUME = VARIABLES.OIL_DEC, ROW_CHANGED_DATE = VARIABLES.CREATEDDATE, 
			ROW_CHANGED_BY = VARIABLES.SP_USER WHERE (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_ID AS string) = VARIABLES.OBJECT_ID) 
			AND (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.PRODUCT_ID AS string) = 'Oil');
			VARIABLES.WT_FLOW_MEAS_ID = (SELECT cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_FLOW_MEAS_ID AS string) 
			FROM PDMExtSrc.WELL_TEST_FLOW_MEAS WHERE (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_ID AS string) = VARIABLES.OBJECT_ID) 
			AND (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.PRODUCT_ID AS string) = 'Oil'));
		END
		ELSE
		BEGIN
			VARIABLES.PK_ID = (SELECT UUID());
			INSERT INTO PDMExtSrc.WELL_TEST_FLOW_MEAS (PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_FLOW_MEAS_ID, 
			PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_ID, PDMExtSrc.WELL_TEST_FLOW_MEAS.ACTIVE_IND, 
			PDMExtSrc.WELL_TEST_FLOW_MEAS.PRODUCT_ID, PDMExtSrc.WELL_TEST_FLOW_MEAS.MEASUREMENT_VOLUME, 
			PDMExtSrc.WELL_TEST_FLOW_MEAS.MEASUREMENT_VOLUME_OUOM, PDMExtSrc.WELL_TEST_FLOW_MEAS.ROW_CREATED_DATE, 
			PDMExtSrc.WELL_TEST_FLOW_MEAS.ROW_CREATED_BY, PDMExtSrc.WELL_TEST_FLOW_MEAS.SOURCE_NAME) VALUES (VARIABLES.PK_ID, 
			VARIABLES.OBJECT_ID, 'Y', 'Oil', VARIABLES.OIL_DEC, 'bbl', 
			VARIABLES.CREATEDDATE, VARIABLES.SP_USER, 'DSPM');
		END
		IF((SELECT COUNT(1) FROM PDMExtSrc.WELL_TEST_FLOW_MEAS 
		WHERE (PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_ID = VARIABLES.OBJECT_ID) 
		AND (PDMExtSrc.WELL_TEST_FLOW_MEAS.PRODUCT_ID = 'Water')) > 0)
		BEGIN
			UPDATE PDMExtSrc.WELL_TEST_FLOW_MEAS SET MEASUREMENT_VOLUME = VARIABLES.WATER_DEC, 
			ROW_CHANGED_DATE = VARIABLES.CREATEDDATE, ROW_CHANGED_BY = VARIABLES.SP_USER 
			WHERE (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_ID AS string) = VARIABLES.OBJECT_ID) 
			AND (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.PRODUCT_ID AS string) = 'Water');
			VARIABLES.WT_FLOW_MEAS_ID = (SELECT cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_FLOW_MEAS_ID AS string) 
			FROM PDMExtSrc.WELL_TEST_FLOW_MEAS WHERE (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_ID AS string) = VARIABLES.OBJECT_ID) 
			AND (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.PRODUCT_ID AS string) = 'Water'));
		END
		ELSE
		BEGIN
			VARIABLES.PK_ID = (SELECT UUID());
			INSERT INTO PDMExtSrc.WELL_TEST_FLOW_MEAS (PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_FLOW_MEAS_ID, 
			PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_ID, PDMExtSrc.WELL_TEST_FLOW_MEAS.ACTIVE_IND, 
			PDMExtSrc.WELL_TEST_FLOW_MEAS.PRODUCT_ID, PDMExtSrc.WELL_TEST_FLOW_MEAS.MEASUREMENT_VOLUME, 
			PDMExtSrc.WELL_TEST_FLOW_MEAS.MEASUREMENT_VOLUME_OUOM, PDMExtSrc.WELL_TEST_FLOW_MEAS.ROW_CREATED_DATE, 
			PDMExtSrc.WELL_TEST_FLOW_MEAS.ROW_CREATED_BY, PDMExtSrc.WELL_TEST_FLOW_MEAS.SOURCE_NAME) VALUES (VARIABLES.PK_ID, 
			VARIABLES.OBJECT_ID, 'Y', 'Water', VARIABLES.WATER_DEC, 'bbl', 
			VARIABLES.CREATEDDATE, VARIABLES.SP_USER, 'DSPM');
		END
		IF((SELECT COUNT(1) FROM PDMExtSrc.WELL_TEST_FLOW_MEAS 
		WHERE (PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_ID = VARIABLES.OBJECT_ID) 
		AND (PDMExtSrc.WELL_TEST_FLOW_MEAS.PRODUCT_ID = 'Gas')) > 0)
		BEGIN
			UPDATE PDMExtSrc.WELL_TEST_FLOW_MEAS SET MEASUREMENT_VOLUME = VARIABLES.GAS_DEC, 
			ROW_CHANGED_DATE = VARIABLES.CREATEDDATE, ROW_CHANGED_BY = VARIABLES.SP_USER 
			WHERE (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_ID AS string) = VARIABLES.OBJECT_ID) 
			AND (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.PRODUCT_ID AS string) = 'Gas');
			VARIABLES.WT_FLOW_MEAS_ID = (SELECT cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_FLOW_MEAS_ID AS string) 
			FROM PDMExtSrc.WELL_TEST_FLOW_MEAS WHERE (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_ID AS string) = VARIABLES.OBJECT_ID) 
			AND (cast(PDMExtSrc.WELL_TEST_FLOW_MEAS.PRODUCT_ID AS string) = 'Gas'));
		END
		ELSE
		BEGIN
			VARIABLES.PK_ID = (SELECT UUID());
			INSERT INTO PDMExtSrc.WELL_TEST_FLOW_MEAS (PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_FLOW_MEAS_ID, 
			PDMExtSrc.WELL_TEST_FLOW_MEAS.WELL_TEST_ID, PDMExtSrc.WELL_TEST_FLOW_MEAS.ACTIVE_IND, 
			PDMExtSrc.WELL_TEST_FLOW_MEAS.PRODUCT_ID, PDMExtSrc.WELL_TEST_FLOW_MEAS.MEASUREMENT_VOLUME, 
			PDMExtSrc.WELL_TEST_FLOW_MEAS.MEASUREMENT_VOLUME_OUOM, PDMExtSrc.WELL_TEST_FLOW_MEAS.ROW_CREATED_DATE, 
			PDMExtSrc.WELL_TEST_FLOW_MEAS.ROW_CREATED_BY, PDMExtSrc.WELL_TEST_FLOW_MEAS.SOURCE_NAME) VALUES (VARIABLES.PK_ID, 
			VARIABLES.OBJECT_ID, 'Y', 'Gas', VARIABLES.GAS_DEC, 'mcf', 
			VARIABLES.CREATEDDATE, VARIABLES.SP_USER, 'DSPM');
		END
	END
	IF(UPPER(VARIABLES.IS_CALCULATE_IND) = 'Y')
	BEGIN
		UPDATE PDMExtSrc.WELL_TEST_PARAMETERS SET FLOWING_PRESSURE = VARIABLES.FLOWING_PRESSURE_DEC, 
		FLOWING_PRESSURE_OUOM = 'psi', WATERCUT = VARIABLES.WATER_CUT_DEC, 
		WC_OUOM = 'bbl/bbl', GOR = VARIABLES.GOR_DEC, GOR_OUOM = 'mcf/bbl', 
		MEAS_GAUGE_PRESSURE = VARIABLES.GAUGE_PRESSURE_DEC, MEAS_GAUGE_PRESSURE_OUOM = 'psi', 
		MEAS_GAUGE_DEPTH = VARIABLES.GAUGE_DEPTH_DEC, MEAS_GAUGE_DEPTH_OUOM = 'ft', 
		CHOKE_INLET_PRESSURE = VARIABLES.CH_INLET_PRESSURE_DEC, CHOKE_INLET_PRESS_OUOM = 'psi', 
		CHOKE_INLET_TEMPERATURE = VARIABLES.CH_INLET_TEMPERATURE_DEC, CHOKE_INLET_TEMP_OUOM = 'degF',
		CHOKE_OUTLET_PRESSURE = VARIABLES.CH_OUTLET_PRESSURE_DEC, CHOKE_OUTLET_PRESS_OUOM = 'psi',
		CHOKE = VARIABLES.CHOKE_DEC, CHOKE_OUOM = 'ft', CHP = VARIABLES.CHP, IPR_VLP = VARIABLES.IPR_VLP, 
		IPR = VARIABLES.IPR, VLP = VARIABLES.VLP, CHOKE_IND = VARIABLES.CHOKE_IND, THT = VARIABLES.THT_DEC, 
		THT_OUOM = 'degF', THP = VARIABLES.THP_DEC, THP_OUOM = 'psi', QLIQUID = VARIABLES.LIQUID_DEC,
		QLIQUID_OUOM = 'bbl', INTAKE_PRESSURE = VARIABLES.BHP_DEC, ENTITY_NAME = VARIABLES.ENTITY_NAME, 
		BHP = VARIABLES.BHP_DEC, BHP_OUOM = 'bbl', WHP = VARIABLES.WHP_DEC, WHP_OUOM = 'bbl', 
		WHT = VARIABLES.WHT_DEC, GLR = VARIABLES.GLR_DEC, GLR_OUOM = 'mcf/bbl', WGR = VARIABLES.WGR_DEC, 
		WGR_OUOM = 'bbl/mcf', CGR = VARIABLES.CGR_DEC, CGR_OUOM = 'mcf/mcf', 
		TT = VARIABLES.TT_DEC,TT_UOM = 'degF',
		FLUID_TYPE = VARIABLES.FLUID_TYPE, ROW_CHANGED_DATE = VARIABLES.CREATEDDATE, ROW_CHANGED_BY = VARIABLES.SP_USER 
		WHERE cast(PDMExtSrc.WELL_TEST_PARAMETERS.OBJECT_ID AS string) = VARIABLES.OBJECT_ID;
	END
	SELECT 'Success' AS OP;
END;

CREATE PROCEDURE ds_SAVE_ALARM_REMARK(sp_custom_error_message string(4000), xml_sp_params string(999999)) RETURNS (OP string(4000)) AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_ALARM_REMARK.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_ALARM_REMARK.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.ALARM_REMARK_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ALARM_REMARK_ID');
	DECLARE string VARIABLES.ASSERT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.ALARM_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ALARM_ID');
	DECLARE string VARIABLES.EVENT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'EVENT_ID');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.CreatedDate = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.ACTIVE_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ACTIVE_IND');
	DECLARE string VARIABLES.IDVal = (SELECT UUID());
	IF(VARIABLES.ALARM_REMARK_ID IS NULL OR VARIABLES.ALARM_REMARK_ID = '')
	BEGIN
		INSERT INTO PDMExtSrc.ALARM_REMARK (PDMExtSrc.ALARM_REMARK.ALARM_REMARK_ID, PDMExtSrc.ALARM_REMARK.ASSERT_ID, PDMExtSrc.ALARM_REMARK.REMARKS, PDMExtSrc.ALARM_REMARK.ACTIVE_IND, PDMExtSrc.ALARM_REMARK.EVENT_ID, PDMExtSrc.ALARM_REMARK.ROW_CREATED_BY, PDMExtSrc.ALARM_REMARK.ROW_CREATED_DATE, PDMExtSrc.ALARM_REMARK.REMARK_DATE, PDMExtSrc.ALARM_REMARK.ROW_CHANGED_BY, PDMExtSrc.ALARM_REMARK.ROW_CHANGED_DATE) VALUES (VARIABLES.IDVal, VARIABLES.ASSERT_ID, VARIABLES.REMARK, 'Y', VARIABLES.EVENT_ID, VARIABLES.SP_USER, VARIABLES.CreatedDate, VARIABLES.CreatedDate, VARIABLES.SP_USER, VARIABLES.CreatedDate);
		SELECT 'Success' AS OP;
	END
	ELSE
	BEGIN
		IF(EXISTS (SELECT cast(PDMExtSrc.ALARM_REMARK.ALARM_REMARK_ID AS string) FROM PDMExtSrc.ALARM_REMARK WHERE (cast(PDMExtSrc.ALARM_REMARK.ALARM_REMARK_ID AS string) = VARIABLES.ALARM_REMARK_ID) AND (UPPER(cast(PDMExtSrc.ALARM_REMARK.ROW_CREATED_BY AS string)) = UPPER(VARIABLES.SP_USER))))
		BEGIN
			UPDATE PDMExtSrc.ALARM_REMARK SET REMARKS = VARIABLES.REMARK, ACTIVE_IND = VARIABLES.ACTIVE_IND, ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.CreatedDate, REMARK_DATE = VARIABLES.CreatedDate WHERE cast(PDMExtSrc.ALARM_REMARK.ALARM_REMARK_ID AS string) = VARIABLES.ALARM_REMARK_ID;
			SELECT 'Success' AS OP;
		END
		ELSE
		BEGIN
			SELECT 'User Permission Error' AS OP;
		END
	END
END;

CREATE PROCEDURE ds_PATTERN_MGMT(sp_custom_error_message string(4000), xml_sp_params string(999999)) RETURNS (OP string(4000)) AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_PATTERN_MGMT.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_PATTERN_MGMT.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.IS_DELETE_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IS_DELETE_IND');
	DECLARE string VARIABLES.PATTERN_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PATTERN_ID');
	DECLARE string VARIABLES.PATTERN_NAME = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PATTERN_NAME');
	DECLARE string VARIABLES.PATTERN_DESC = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PATTERN_DESC');
	DECLARE string VARIABLES.GROUP_NAME = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GROUP_NAME');
	DECLARE string VARIABLES.IS_PRIVATE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PRIVATE_IND');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.CREATEDDATE = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.GROUP_TYPE = '';
	DECLARE string VARIABLES.GROUP_ID = '';
	DECLARE string VARIABLES.UNIQUE_ID = '';
	DECLARE BIGDECIMAL VARIABLES.ALLOC_FACTOR = null;
	DECLARE integer VARIABLES.NUM_WELLS = null;
	DECLARE integer VARIABLES.ITEM_COUNT = null;
	DECLARE string VARIABLES.OLD_GROUP_ID = '';
	DECLARE string VARIABLES.PATTERN_TYPE = (SELECT cast(PDMExtSrc.R_PATTERN_TYPE.R_PATTERN_TYPE_ID AS string) FROM PDMExtSrc.R_PATTERN_TYPE WHERE UPPER(cast(PDMExtSrc.R_PATTERN_TYPE.PATTERN_TYPE AS string)) = 'PATTERN');
	IF((VARIABLES.IS_DELETE_IND IS NOT NULL) AND (VARIABLES.IS_DELETE_IND = 'Y'))
	BEGIN
		UPDATE PDMExtSrc.PATTERN SET ACTIVE_IND = 'N' WHERE UPPER(cast(PDMExtSrc.PATTERN.PATTERN_ID AS string)) = UPPER(VARIABLES.PATTERN_ID);
		UPDATE PDMExtSrc.PATTERN_CONTAIN SET ACTIVE_IND = 'N' WHERE UPPER(cast(PDMExtSrc.PATTERN_CONTAIN.CONTAINED_PATTERN AS string)) = UPPER(VARIABLES.PATTERN_ID);
		UPDATE PDMExtSrc.ASSET_PATTERN SET ALLOC_FACTOR = null, ALLOC_FACTOR_CALC = null, ACTIVE_IND = 'N' WHERE cast(PDMExtSrc.ASSET_PATTERN.PATTERN_ID AS string) = VARIABLES.PATTERN_ID;
		VARIABLES.GROUP_ID = (SELECT cast(AC.CONTAINING_PATTERN AS string) FROM PDMExtSrc.PATTERN_CONTAIN AS AC WHERE UPPER(cast(AC.CONTAINED_PATTERN AS string)) = UPPER(VARIABLES.PATTERN_ID));
		LOOP ON (SELECT PDMExtSrc.ASSET_PATTERN.ASSET_ID FROM PDMExtSrc.ASSET_PATTERN WHERE cast(PDMExtSrc.ASSET_PATTERN.PATTERN_ID AS string) = VARIABLES.PATTERN_ID) AS delWells
		BEGIN
			VARIABLES.NUM_WELLS = (SELECT COUNT(DISTINCT cast(WA.PATTERN_ID AS string)) FROM (PDMExtSrc.ASSET_PATTERN AS WA 
								INNER JOIN PDMExtSrc.PATTERN_CONTAIN AS AC ON UPPER(cast(WA.PATTERN_ID AS string)) = UPPER(cast(AC.CONTAINED_PATTERN AS string))) 
								INNER JOIN PDMExtSrc.PATTERN AS A ON cast(AC.CONTAINED_PATTERN AS string) = cast(A.PATTERN_ID AS string) 
								WHERE (UPPER(cast(WA.ASSET_ID AS string)) = UPPER(cast(delWells.ASSET_ID AS string))) 
								AND (cast(WA.ACTIVE_IND AS string) = 'Y') AND (UPPER(cast(AC.CONTAINING_PATTERN AS string)) = UPPER(VARIABLES.GROUP_ID)));
			IF(VARIABLES.NUM_WELLS > 0)
			BEGIN
				VARIABLES.ALLOC_FACTOR = CONVERT((1 / CONVERT(VARIABLES.NUM_WELLS, BIGDECIMAL)), BIGDECIMAL);
			END
			LOOP ON (SELECT WA.ASSET_PATTERN_ID FROM PDMExtSrc.ASSET_PATTERN AS WA INNER JOIN PDMExtSrc.PATTERN_CONTAIN AS AC ON UPPER(cast(WA.PATTERN_ID AS string)) = UPPER(cast(AC.CONTAINED_PATTERN AS string)) WHERE (UPPER(cast(WA.ASSET_ID AS string)) = UPPER(cast(delWells.ASSET_ID AS string))) AND (cast(WA.ACTIVE_IND AS string) = 'Y') AND (UPPER(cast(AC.CONTAINING_PATTERN AS string)) = UPPER(VARIABLES.GROUP_ID))) AS updWells
			BEGIN
				UPDATE PDMExtSrc.ASSET_PATTERN SET ALLOC_FACTOR = VARIABLES.ALLOC_FACTOR WHERE UPPER(cast(PDMExtSrc.ASSET_PATTERN.ASSET_PATTERN_ID AS string)) = UPPER(cast(updWells.ASSET_PATTERN_ID AS string));
			END
		END
	END
	ELSE
	BEGIN
		SELECT * INTO #tempWELLS FROM XMLTABLE('/Parameters/WELLS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS WELL_ID STRING PATH '@WELL_ID', ALLOC_FACTOR STRING PATH '@ALLOC_FACTOR', IS_MISSING_WELL STRING PATH '@IS_MISSING_WELL') AS W;
		IF((VARIABLES.GROUP_NAME IS NOT NULL) AND (VARIABLES.GROUP_NAME <> ''))
		BEGIN
			VARIABLES.GROUP_TYPE = (SELECT cast(PDMExtSrc.R_PATTERN_TYPE.R_PATTERN_TYPE_ID AS string) FROM PDMExtSrc.R_PATTERN_TYPE WHERE UPPER(cast(PDMExtSrc.R_PATTERN_TYPE.PATTERN_TYPE AS string)) = 'GROUP');
			VARIABLES.ITEM_COUNT = (SELECT COUNT(1) FROM PDMExtSrc.PATTERN AS A WHERE (UPPER(cast(A.PREFERRED_NAME AS string)) = UPPER(VARIABLES.GROUP_NAME)) AND (UPPER(cast(A.PATTERN_TYPE AS string)) = UPPER(VARIABLES.GROUP_TYPE)));
			IF(VARIABLES.ITEM_COUNT <= 0)
			BEGIN
				VARIABLES.GROUP_ID = (SELECT UUID());
				INSERT INTO PDMExtSrc.PATTERN (PDMExtSrc.PATTERN.PATTERN_ID, PDMExtSrc.PATTERN.PREFERRED_NAME, PDMExtSrc.PATTERN.PATTERN_TYPE, PDMExtSrc.PATTERN.SOURCE_NAME, PDMExtSrc.PATTERN.ACTIVE_IND, PDMExtSrc.PATTERN.ROW_CREATED_DATE, PDMExtSrc.PATTERN.ROW_CREATED_BY) VALUES (VARIABLES.GROUP_ID, VARIABLES.GROUP_NAME, VARIABLES.GROUP_TYPE, 'DSPS', 'Y', VARIABLES.CREATEDDATE, VARIABLES.SP_USER);
			END
			ELSE
			BEGIN
				VARIABLES.GROUP_ID = (SELECT cast(A.PATTERN_ID AS string) FROM PDMExtSrc.PATTERN AS A WHERE (UPPER(cast(A.PREFERRED_NAME AS string)) = UPPER(VARIABLES.GROUP_NAME)) AND (UPPER(cast(A.PATTERN_TYPE AS string)) = UPPER(VARIABLES.GROUP_TYPE)));
			END
			IF((VARIABLES.PATTERN_ID IS NOT NULL) AND (VARIABLES.PATTERN_ID <> ''))
			BEGIN
				DECLARE integer VARIABLES.MISSING_ITEM_COUNT = 0;
				VARIABLES.MISSING_ITEM_COUNT = (SELECT COUNT(DISTINCT cast(WA.ASSET_ID AS string)) FROM PDMExtSrc.ASSET_PATTERN AS WA WHERE (UPPER(cast(WA.PATTERN_ID AS string)) = UPPER(VARIABLES.PATTERN_ID)) AND (cast(WA.ACTIVE_IND AS string) = 'Y') AND (cast(WA.ASSET_ID AS string) NOT IN (SELECT cast(WA1.ASSET_ID AS string) FROM PDMExtSrc.ASSET_PATTERN AS WA1 WHERE (UPPER(cast(WA1.PATTERN_ID AS string)) = UPPER(VARIABLES.PATTERN_ID)) AND (cast(WA1.ACTIVE_IND AS string) = 'Y') INTERSECT SELECT T.WELL_ID FROM #tempWELLS AS T)));
				IF(VARIABLES.MISSING_ITEM_COUNT > 0)
				BEGIN
					INSERT INTO #tempWELLS (#tempWELLS.WELL_ID, #tempWELLS.IS_MISSING_WELL) SELECT DISTINCT cast(WA.ASSET_ID AS string), 'YES' FROM PDMExtSrc.ASSET_PATTERN AS WA WHERE (UPPER(cast(WA.PATTERN_ID AS string)) = UPPER(VARIABLES.PATTERN_ID)) AND (cast(WA.ACTIVE_IND AS string) = 'Y') AND (cast(WA.ASSET_ID AS string) NOT IN (SELECT cast(WA1.ASSET_ID AS string) FROM PDMExtSrc.ASSET_PATTERN AS WA1 WHERE (UPPER(cast(WA1.PATTERN_ID AS string)) = UPPER(VARIABLES.PATTERN_ID)) AND (cast(WA1.ACTIVE_IND AS string) = 'Y') INTERSECT SELECT T.WELL_ID FROM #tempWELLS AS T));
				END
				UPDATE PDMExtSrc.PATTERN SET PREFERRED_NAME = VARIABLES.PATTERN_NAME, REMARKS = VARIABLES.PATTERN_DESC, ROW_CHANGED_DATE = VARIABLES.CREATEDDATE, ROW_CHANGED_BY = VARIABLES.SP_USER, IS_PRIVATE = VARIABLES.IS_PRIVATE WHERE UPPER(cast(PDMExtSrc.PATTERN.PATTERN_ID AS string)) = UPPER(VARIABLES.PATTERN_ID);
				UPDATE PDMExtSrc.ASSET_PATTERN SET ALLOC_FACTOR = null, ALLOC_FACTOR_CALC = null, ACTIVE_IND = 'N' WHERE cast(PDMExtSrc.ASSET_PATTERN.PATTERN_ID AS string) = VARIABLES.PATTERN_ID;
			END
			ELSE
			BEGIN
				IF((VARIABLES.PATTERN_NAME IS NOT NULL) AND (VARIABLES.PATTERN_NAME <> ''))
				BEGIN
					VARIABLES.PATTERN_ID = (SELECT UUID());
					VARIABLES.ITEM_COUNT = (SELECT COUNT(1) FROM PDMExtSrc.PATTERN AS A INNER JOIN PDMExtSrc.PATTERN_CONTAIN AS AC ON cast(A.PATTERN_ID AS string) = cast(AC.CONTAINING_PATTERN AS string) WHERE (cast(AC.CONTAINING_PATTERN AS string) = VARIABLES.GROUP_ID) AND (cast(AC.ACTIVE_IND AS string) = 'N') AND (UPPER(cast(A.PREFERRED_NAME AS string)) = UPPER(VARIABLES.PATTERN_NAME)));
					IF(VARIABLES.ITEM_COUNT <= 0)
					BEGIN
						INSERT INTO PDMExtSrc.PATTERN (PDMExtSrc.PATTERN.PATTERN_ID, PDMExtSrc.PATTERN.PREFERRED_NAME, PDMExtSrc.PATTERN.PATTERN_TYPE, PDMExtSrc.PATTERN.ACTIVE_IND, PDMExtSrc.PATTERN.SOURCE_NAME, PDMExtSrc.PATTERN.ROW_CREATED_DATE, PDMExtSrc.PATTERN.ROW_CREATED_BY, PDMExtSrc.PATTERN.REMARKS, PDMExtSrc.PATTERN.IS_PRIVATE) VALUES (VARIABLES.PATTERN_ID, VARIABLES.PATTERN_NAME, VARIABLES.PATTERN_TYPE, 'Y', 'DSPS', VARIABLES.CREATEDDATE, VARIABLES.SP_USER, VARIABLES.PATTERN_DESC, VARIABLES.IS_PRIVATE);
					END
					ELSE
					BEGIN
						VARIABLES.PATTERN_ID = (SELECT cast(A.PATTERN_ID AS string) FROM PDMExtSrc.PATTERN AS A INNER JOIN PDMExtSrc.PATTERN_CONTAIN AS AC ON cast(A.PATTERN_ID AS string) = cast(AC.CONTAINING_PATTERN AS string) WHERE (cast(AC.CONTAINING_PATTERN AS string) = VARIABLES.GROUP_ID) AND (cast(AC.ACTIVE_IND AS string) = 'N') AND (UPPER(cast(A.PREFERRED_NAME AS string)) = UPPER(VARIABLES.PATTERN_NAME)));
						UPDATE PDMExtSrc.PATTERN SET ACTIVE_IND = 'Y' WHERE UPPER(cast(PDMExtSrc.PATTERN.PATTERN_ID AS string)) = UPPER(VARIABLES.PATTERN_ID);
						UPDATE PDMExtSrc.PATTERN_CONTAIN SET ACTIVE_IND = 'Y' WHERE UPPER(cast(PDMExtSrc.PATTERN_CONTAIN.CONTAINING_PATTERN AS string)) = UPPER(VARIABLES.PATTERN_ID);
					END
				END
			END
			VARIABLES.ITEM_COUNT = (SELECT COUNT(1) FROM PDMExtSrc.PATTERN_CONTAIN WHERE UPPER(cast(PDMExtSrc.PATTERN_CONTAIN.CONTAINED_PATTERN AS string)) = UPPER(VARIABLES.PATTERN_ID));
			IF((VARIABLES.PATTERN_ID IS NOT NULL) AND (VARIABLES.PATTERN_ID <> '') AND (VARIABLES.ITEM_COUNT <= 0))
			BEGIN
				VARIABLES.UNIQUE_ID = (SELECT UUID());
				INSERT INTO PDMExtSrc.PATTERN_CONTAIN (PDMExtSrc.PATTERN_CONTAIN.PATTERN_CONTAIN_ID, PDMExtSrc.PATTERN_CONTAIN.CONTAINING_PATTERN, PDMExtSrc.PATTERN_CONTAIN.CONTAINING_PATTERN_TYPE, PDMExtSrc.PATTERN_CONTAIN.CONTAINED_PATTERN, PDMExtSrc.PATTERN_CONTAIN.CONTAINED_PATTERN_TYPE, PDMExtSrc.PATTERN_CONTAIN.CONTAIN_TYPE, PDMExtSrc.PATTERN_CONTAIN.ACTIVE_IND, PDMExtSrc.PATTERN_CONTAIN.SOURCE_NAME, PDMExtSrc.PATTERN_CONTAIN.ROW_CREATED_DATE, PDMExtSrc.PATTERN_CONTAIN.ROW_CREATED_BY) VALUES (VARIABLES.UNIQUE_ID, VARIABLES.GROUP_ID, VARIABLES.GROUP_TYPE, VARIABLES.PATTERN_ID, VARIABLES.PATTERN_TYPE, 'INSIDE', 'Y', 'DSPS', VARIABLES.CREATEDDATE, VARIABLES.SP_USER);
			END
			ELSE
			BEGIN
				DECLARE string VARIABLES.CHECK_GROUP_ID = (SELECT cast(PDMExtSrc.PATTERN_CONTAIN.CONTAINING_PATTERN AS string) FROM PDMExtSrc.PATTERN_CONTAIN WHERE UPPER(cast(PDMExtSrc.PATTERN_CONTAIN.CONTAINED_PATTERN AS string)) = UPPER(VARIABLES.PATTERN_ID));
				IF(UPPER(VARIABLES.CHECK_GROUP_ID) <> UPPER(VARIABLES.GROUP_ID))
				BEGIN
					VARIABLES.OLD_GROUP_ID = VARIABLES.CHECK_GROUP_ID;
				END
				UPDATE PDMExtSrc.PATTERN_CONTAIN SET CONTAINING_PATTERN = VARIABLES.GROUP_ID, ROW_CHANGED_DATE = VARIABLES.CREATEDDATE, ROW_CHANGED_BY = VARIABLES.SP_USER WHERE UPPER(cast(PDMExtSrc.PATTERN_CONTAIN.CONTAINED_PATTERN AS string)) = UPPER(VARIABLES.PATTERN_ID);
			END
		END
		LOOP ON (SELECT #tempWELLS.WELL_ID, #tempWELLS.ALLOC_FACTOR, #tempWELLS.IS_MISSING_WELL FROM #tempWELLS) AS wells
		BEGIN
			DECLARE BIGDECIMAL VARIABLES.ALLOC_FACTOR_CALC_DEC = null;
			IF((wells.ALLOC_FACTOR IS NOT NULL) AND (wells.ALLOC_FACTOR <> ''))
			BEGIN
				VARIABLES.ALLOC_FACTOR_CALC_DEC = CONVERT(wells.ALLOC_FACTOR, BIGDECIMAL);
			END
			IF((wells.WELL_ID IS NOT NULL) AND (wells.WELL_ID <> '') AND (VARIABLES.PATTERN_ID IS NOT NULL) AND (VARIABLES.PATTERN_ID <> ''))
			BEGIN
				VARIABLES.ITEM_COUNT = (SELECT COUNT(1) FROM PDMExtSrc.ASSET_PATTERN WHERE (UPPER(cast(PDMExtSrc.ASSET_PATTERN.ASSET_ID AS string)) = UPPER(cast(wells.WELL_ID AS string))) AND (UPPER(cast(PDMExtSrc.ASSET_PATTERN.PATTERN_ID AS string)) = UPPER(VARIABLES.PATTERN_ID)));
				IF(wells.IS_MISSING_WELL <> 'YES')
				BEGIN
					UPDATE PDMExtSrc.ASSET_PATTERN SET ACTIVE_IND = 'Y' WHERE (UPPER(cast(PDMExtSrc.ASSET_PATTERN.ASSET_ID AS string)) = UPPER(cast(wells.WELL_ID AS string))) AND (UPPER(cast(PDMExtSrc.ASSET_PATTERN.PATTERN_ID AS string)) = UPPER(VARIABLES.PATTERN_ID));
				END
				VARIABLES.NUM_WELLS = (SELECT COUNT(DISTINCT cast(WA.PATTERN_ID AS string)) 
				FROM (PDMExtSrc.ASSET_PATTERN AS WA 
				INNER JOIN PDMExtSrc.PATTERN_CONTAIN AS AC ON UPPER(cast(WA.PATTERN_ID AS string)) = UPPER(cast(AC.CONTAINED_PATTERN AS string))) 
				INNER JOIN PDMExtSrc.PATTERN AS A ON cast(AC.CONTAINED_PATTERN AS string) = cast(A.PATTERN_ID AS string) 
				WHERE (UPPER(cast(WA.ASSET_ID AS string)) = UPPER(cast(wells.WELL_ID AS string))) AND (cast(WA.ACTIVE_IND AS string) = 'Y') 
				AND (UPPER(cast(AC.CONTAINING_PATTERN AS string)) = UPPER(VARIABLES.GROUP_ID)));
				VARIABLES.ALLOC_FACTOR = 1;
				IF(VARIABLES.ITEM_COUNT > 0)
				BEGIN
					IF(VARIABLES.NUM_WELLS > 0)
					BEGIN
						VARIABLES.ALLOC_FACTOR = CONVERT((1 / CONVERT(VARIABLES.NUM_WELLS, BIGDECIMAL)), BIGDECIMAL);
					END
					IF(wells.IS_MISSING_WELL <> 'YES')
					BEGIN
						UPDATE PDMExtSrc.ASSET_PATTERN SET ALLOC_FACTOR = VARIABLES.ALLOC_FACTOR, ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.CREATEDDATE, ACTIVE_IND = 'Y', ALLOC_FACTOR_CALC = VARIABLES.ALLOC_FACTOR_CALC_DEC WHERE (UPPER(cast(PDMExtSrc.ASSET_PATTERN.ASSET_ID AS string)) = UPPER(cast(wells.WELL_ID AS string))) AND (UPPER(cast(PDMExtSrc.ASSET_PATTERN.PATTERN_ID AS string)) = UPPER(VARIABLES.PATTERN_ID));
					END
					LOOP ON (SELECT WA.ASSET_PATTERN_ID FROM PDMExtSrc.ASSET_PATTERN AS WA INNER JOIN PDMExtSrc.PATTERN_CONTAIN AS AC ON UPPER(cast(WA.PATTERN_ID AS string)) = UPPER(cast(AC.CONTAINED_PATTERN AS string)) WHERE (UPPER(cast(WA.ASSET_ID AS string)) = UPPER(cast(wells.WELL_ID AS string))) AND (cast(WA.ACTIVE_IND AS string) = 'Y') AND (UPPER(cast(AC.CONTAINING_PATTERN AS string)) = UPPER(VARIABLES.GROUP_ID))) AS updWells
					BEGIN
						UPDATE PDMExtSrc.ASSET_PATTERN SET ALLOC_FACTOR = VARIABLES.ALLOC_FACTOR, ROW_CHANGED_DATE = VARIABLES.CREATEDDATE WHERE UPPER(cast(PDMExtSrc.ASSET_PATTERN.ASSET_PATTERN_ID AS string)) = UPPER(cast(updWells.ASSET_PATTERN_ID AS string));
					END
					IF((VARIABLES.OLD_GROUP_ID IS NOT NULL) AND (VARIABLES.OLD_GROUP_ID <> ''))
					BEGIN
						DECLARE integer VARIABLES.OLD_NUM_WELLS = (SELECT COUNT(DISTINCT cast(WA.PATTERN_ID AS string)) 
							FROM (PDMExtSrc.ASSET_PATTERN AS WA 
							INNER JOIN PDMExtSrc.PATTERN_CONTAIN AS AC ON UPPER(cast(WA.PATTERN_ID AS string)) = UPPER(cast(AC.CONTAINED_PATTERN AS string))) 
							INNER JOIN PDMExtSrc.PATTERN AS A ON cast(AC.CONTAINED_PATTERN AS string) = cast(A.PATTERN_ID AS string) 
							WHERE (UPPER(cast(WA.ASSET_ID AS string)) = UPPER(cast(wells.WELL_ID AS string))) AND (cast(WA.ACTIVE_IND AS string) = 'Y') AND (UPPER(cast(AC.CONTAINING_PATTERN AS string)) = UPPER(VARIABLES.OLD_GROUP_ID)));
						DECLARE BIGDECIMAL VARIABLES.OLD_ALLOC_FACTOR = 1;
						IF(VARIABLES.OLD_NUM_WELLS > 0)
						BEGIN
							VARIABLES.OLD_ALLOC_FACTOR = CONVERT((1 / CONVERT(VARIABLES.OLD_NUM_WELLS, BIGDECIMAL)), BIGDECIMAL);
						END
						LOOP ON (SELECT WA.ASSET_PATTERN_ID FROM PDMExtSrc.ASSET_PATTERN AS WA INNER JOIN PDMExtSrc.PATTERN_CONTAIN AS AC ON UPPER(cast(WA.PATTERN_ID AS string)) = UPPER(cast(AC.CONTAINED_PATTERN AS string)) WHERE (UPPER(cast(WA.ASSET_ID AS string)) = UPPER(cast(wells.WELL_ID AS string))) AND (cast(WA.ACTIVE_IND AS string) = 'Y') AND (UPPER(cast(AC.CONTAINING_PATTERN AS string)) = UPPER(VARIABLES.OLD_GROUP_ID))) AS oldUpdWells
						BEGIN
							UPDATE PDMExtSrc.ASSET_PATTERN SET ALLOC_FACTOR = VARIABLES.OLD_ALLOC_FACTOR, ROW_CHANGED_DATE = VARIABLES.CREATEDDATE WHERE UPPER(cast(PDMExtSrc.ASSET_PATTERN.ASSET_PATTERN_ID AS string)) = UPPER(cast(oldUpdWells.ASSET_PATTERN_ID AS string));
						END
					END
				END
				ELSE
				BEGIN
					IF(VARIABLES.NUM_WELLS > 0)
					BEGIN
						VARIABLES.ALLOC_FACTOR = CONVERT((1 / CONVERT((VARIABLES.NUM_WELLS + 1), BIGDECIMAL)), BIGDECIMAL);
					END
					VARIABLES.UNIQUE_ID = (SELECT UUID());
					INSERT INTO PDMExtSrc.ASSET_PATTERN (PDMExtSrc.ASSET_PATTERN.ASSET_PATTERN_ID, PDMExtSrc.ASSET_PATTERN.ASSET_ID, PDMExtSrc.ASSET_PATTERN.PATTERN_ID, PDMExtSrc.ASSET_PATTERN.SOURCE_NAME, PDMExtSrc.ASSET_PATTERN.ACTIVE_IND, PDMExtSrc.ASSET_PATTERN.ROW_CREATED_DATE, PDMExtSrc.ASSET_PATTERN.ROW_CREATED_BY, PDMExtSrc.ASSET_PATTERN.ALLOC_FACTOR, PDMExtSrc.ASSET_PATTERN.ALLOC_FACTOR_CALC) VALUES (VARIABLES.UNIQUE_ID, wells.WELL_ID, VARIABLES.PATTERN_ID, 'DSPS', 'Y', VARIABLES.CREATEDDATE, VARIABLES.SP_USER, VARIABLES.ALLOC_FACTOR, VARIABLES.ALLOC_FACTOR_CALC_DEC);
					LOOP ON (SELECT WA.ASSET_PATTERN_ID FROM PDMExtSrc.ASSET_PATTERN AS WA INNER JOIN PDMExtSrc.PATTERN_CONTAIN AS AC ON UPPER(cast(WA.PATTERN_ID AS string)) = UPPER(cast(AC.CONTAINED_PATTERN AS string)) WHERE (UPPER(cast(WA.ASSET_ID AS string)) = UPPER(cast(wells.WELL_ID AS string))) AND (cast(WA.ACTIVE_IND AS string) = 'Y') AND (UPPER(cast(AC.CONTAINING_PATTERN AS string)) = UPPER(VARIABLES.GROUP_ID))) AS updWells
					BEGIN
						UPDATE PDMExtSrc.ASSET_PATTERN SET ALLOC_FACTOR = VARIABLES.ALLOC_FACTOR WHERE UPPER(cast(PDMExtSrc.ASSET_PATTERN.ASSET_PATTERN_ID AS string)) = UPPER(cast(updWells.ASSET_PATTERN_ID AS string));
					END
				END
			END
		END
	END
	SELECT VARIABLES.PATTERN_ID AS OP;
END;

CREATE PROCEDURE ds_SAVE_GROUP(sp_custom_error_message string(4000), xml_sp_params string(999999)) RETURNS (OP string(4000)) AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_GROUP.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_GROUP.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.GROUP_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GROUP_ID');
	DECLARE string VARIABLES.GROUP_NAME = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GROUP_NAME');
	DECLARE string VARIABLES.GROUP_DESCRIPTION = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'GROUP_DESCRIPTION');
	DECLARE string VARIABLES.ROW_CHANGED_BY = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ROW_CHANGED_BY');
	DECLARE timestamp VARIABLES.ROW_CHANGED_DATE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN CAST(#tempXML.ValueRes as timestamp) ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ROW_CHANGED_DATE');
	DECLARE string VARIABLES.ROW_CREATED_BY = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ROW_CREATED_BY');
	DECLARE timestamp VARIABLES.ROW_CREATED_DATE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN CAST(#tempXML.ValueRes as timestamp) ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ROW_CREATED_DATE');
	DECLARE string VARIABLES.ASSET_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE 'W' END FROM #tempXML WHERE #tempXML.Name = 'ASSET_IND');
	
	IF((SELECT COUNT(1) FROM PDMExtSrc.GROUPS WHERE GROUP_NAME = VARIABLES.GROUP_NAME) > 0 )
	BEGIN
		VARIABLES.GROUP_ID = (SELECT GROUP_ID FROM PDMExtSrc.GROUPS WHERE GROUP_NAME = VARIABLES.GROUP_NAME);
		UPDATE PDMExtSrc.GROUPS SET GROUP_DESCRIPTION = VARIABLES.GROUP_DESCRIPTION, ROW_CHANGED_BY = VARIABLES.ROW_CHANGED_BY, ROW_CHANGED_DATE = VARIABLES.ROW_CHANGED_DATE
		WHERE GROUP_ID = VARIABLES.GROUP_ID;
		DELETE FROM PDMExtSrc.GROUP_ASSETS WHERE GROUP_ID = VARIABLES.GROUP_ID;
	END
	ELSE
	BEGIN
		INSERT INTO PDMExtSrc.GROUPS (PDMExtSrc.GROUPS.GROUP_ID, PDMExtSrc.GROUPS.GROUP_NAME, PDMExtSrc.GROUPS.GROUP_DESCRIPTION, PDMExtSrc.GROUPS.ROW_CHANGED_BY, PDMExtSrc.GROUPS.ROW_CHANGED_DATE, PDMExtSrc.GROUPS.ROW_CREATED_BY, PDMExtSrc.GROUPS.ROW_CREATED_DATE) 
							VALUES (VARIABLES.GROUP_ID, VARIABLES.GROUP_NAME, VARIABLES.GROUP_DESCRIPTION, VARIABLES.ROW_CHANGED_BY, VARIABLES.ROW_CHANGED_DATE, VARIABLES.ROW_CREATED_BY, VARIABLES.ROW_CREATED_DATE);
	
	END

	INSERT INTO PDMExtSrc.GROUP_ASSETS (PDMExtSrc.GROUP_ASSETS.GROUP_ASSETS_ID, PDMExtSrc.GROUP_ASSETS.GROUP_ID, PDMExtSrc.GROUP_ASSETS.ASSET_ID, PDMExtSrc.GROUP_ASSETS.ASSET_IND, PDMExtSrc.GROUP_ASSETS.ACTIVE_IND, PDMExtSrc.GROUP_ASSETS.ROW_CHANGED_BY, PDMExtSrc.GROUP_ASSETS.ROW_CHANGED_DATE, PDMExtSrc.GROUP_ASSETS.ROW_CREATED_BY, PDMExtSrc.GROUP_ASSETS.ROW_CREATED_DATE)
	SELECT UUID(),VARIABLES.GROUP_ID, #tempXML.Name, VARIABLES.ASSET_IND, 'Y', VARIABLES.ROW_CHANGED_BY, VARIABLES.ROW_CHANGED_DATE, VARIABLES.ROW_CREATED_BY, VARIABLES.ROW_CREATED_DATE from #tempXML WHERE #tempXML.ValueRes = 'WELL' AND #tempXML.Name IS NOT NULL;

	SELECT 'success' AS OP;
END;

CREATE PROCEDURE ds_SAVE_ANNOTATION(sp_custom_error_message string(4000), xml_sp_params string(999999)) RETURNS (OP string(4000)) AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_ANNOTATION.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_ANNOTATION.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.ANNOTATION_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANNOTATION_ID');
	DECLARE string VARIABLES.ENTITY_TYPE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_TYPE');
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.EQUIPMENT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'EQUIPMENT_ID');
	DECLARE string VARIABLES.PRODUCT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PRODUCT_ID');
	DECLARE string VARIABLES.PERIOD_TYPE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PERIOD_TYPE');
	DECLARE string VARIABLES.R_CONTEXT_TYPE_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'R_CONTEXT_TYPE_ID');
	DECLARE string VARIABLES.R_CONTEXT_TYPE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CONTEXT_TYPE');
	DECLARE string VARIABLES.DATE_ANNOTATED_FOR = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DATE_ANNOTATED_FOR');
	DECLARE string VARIABLES.EFFECTIVE_DATE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'EFFECTIVE_DATE');
	DECLARE string VARIABLES.ANNOTATED_COLUMN = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANNOTATED_COLUMN');
	DECLARE string VARIABLES.ANNOTATION_DETAILS = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANNOTATION_DETAILS');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.DATE_ANNOTATED_FOR_TIMESTAMP = null;
	DECLARE TIMESTAMP VARIABLES.EFFECTIVE_DATE_TIMESTAMP = null;
	DECLARE string VARIABLES.R_CONTEXT_TYPE_ID_NULL;
	DECLARE string VARIABLES.ANNOTATION_ID_NULL;
	DECLARE string VARIABLES.ANNOTATED_ENTITY_ID = null;

	IF(VARIABLES.DATE_ANNOTATED_FOR IS NOT NULL)
	BEGIN
		VARIABLES.DATE_ANNOTATED_FOR_TIMESTAMP = parsetimestamp(VARIABLES.DATE_ANNOTATED_FOR, 'MM/dd/yyyy HH:mm:ss');
	END
	
	IF(VARIABLES.EFFECTIVE_DATE IS NOT NULL)
	BEGIN
		VARIABLES.EFFECTIVE_DATE_TIMESTAMP = parsetimestamp(VARIABLES.EFFECTIVE_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	
	IF(VARIABLES.R_CONTEXT_TYPE_ID IS NULL OR VARIABLES.R_CONTEXT_TYPE_ID = '')
	BEGIN
		VARIABLES.R_CONTEXT_TYPE_ID = (SELECT PDMExtSrc.R_ANNOTATION_CONTEXT_TYPE.R_CONTEXT_TYPE_ID 
		FROM PDMExtSrc.R_ANNOTATION_CONTEXT_TYPE WHERE UPPER(PDMExtSrc.R_ANNOTATION_CONTEXT_TYPE.R_CONTEXT_TYPE) = UPPER(VARIABLES.R_CONTEXT_TYPE));
	END

	VARIABLES.R_CONTEXT_TYPE_ID_NULL = (SELECT PDMExtSrc.R_ANNOTATION_CONTEXT_TYPE.R_CONTEXT_TYPE_ID 
		FROM PDMExtSrc.R_ANNOTATION_CONTEXT_TYPE WHERE UPPER(PDMExtSrc.R_ANNOTATION_CONTEXT_TYPE.R_CONTEXT_TYPE) = 'NULL');
		
	IF(VARIABLES.ANNOTATION_ID IS NOT NULL AND VARIABLES.ANNOTATION_ID <> '')
	BEGIN
		UPDATE PDMExtSrc.ANNOTATION SET ANNOTATION_DETAILS = VARIABLES.ANNOTATION_DETAILS, EFFECTIVE_DATE = VARIABLES.EFFECTIVE_DATE_TIMESTAMP, 
		SOURCE_NAME = 'DSWIM', ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.now 
		WHERE PDMExtSrc.ANNOTATION.ANNOTATION_ID = VARIABLES.ANNOTATION_ID;
	END
	ELSE
	BEGIN
		VARIABLES.ANNOTATED_ENTITY_ID = (SELECT PDMExtSrc.ANNOTATED_ENTITY.ANNOTATED_ENTITY_ID FROM PDMExtSrc.ANNOTATED_ENTITY 
		WHERE (NVL(PDMExtSrc.ANNOTATED_ENTITY.ENTITY_TYPE, 'NULL') = NVL(VARIABLES.ENTITY_TYPE, 'NULL')) 
		AND (NVL(PDMExtSrc.ANNOTATED_ENTITY.ENTITY_ID, 'NULL') = NVL(VARIABLES.ENTITY_ID, 'NULL')) 
		AND (NVL(PDMExtSrc.ANNOTATED_ENTITY.EQUIPMENT_ID, 'NULL') = NVL(VARIABLES.EQUIPMENT_ID, 'NULL')) 
		AND (NVL(PDMExtSrc.ANNOTATED_ENTITY.PRODUCT_ID, 'NULL') = NVL(VARIABLES.PRODUCT_ID, 'NULL')) 
		AND (NVL(PDMExtSrc.ANNOTATED_ENTITY.PERIOD_TYPE, 'NULL') = NVL(VARIABLES.PERIOD_TYPE, 'NULL')));
		
		IF(VARIABLES.ANNOTATED_ENTITY_ID IS NULL OR VARIABLES.ANNOTATED_ENTITY_ID = '')
		BEGIN
			VARIABLES.ANNOTATED_ENTITY_ID = (SELECT UUID());
			INSERT INTO PDMExtSrc.ANNOTATED_ENTITY (PDMExtSrc.ANNOTATED_ENTITY.ANNOTATED_ENTITY_ID, 
			PDMExtSrc.ANNOTATED_ENTITY.ENTITY_TYPE, PDMExtSrc.ANNOTATED_ENTITY.ENTITY_ID, PDMExtSrc.ANNOTATED_ENTITY.EQUIPMENT_ID, 
			PDMExtSrc.ANNOTATED_ENTITY.PRODUCT_ID, 		
			PDMExtSrc.ANNOTATED_ENTITY.PERIOD_TYPE, PDMExtSrc.ANNOTATED_ENTITY.ACTIVE_IND, PDMExtSrc.ANNOTATED_ENTITY.SOURCE_NAME, 
			PDMExtSrc.ANNOTATED_ENTITY.ROW_CREATED_BY, 
			PDMExtSrc.ANNOTATED_ENTITY.ROW_CREATED_DATE) VALUES (VARIABLES.ANNOTATED_ENTITY_ID, VARIABLES.ENTITY_TYPE, VARIABLES.ENTITY_ID, 
			VARIABLES.EQUIPMENT_ID, VARIABLES.PRODUCT_ID, VARIABLES.PERIOD_TYPE, 'Y', 'DSWIM', VARIABLES.SP_USER, VARIABLES.now);
		END
		
		VARIABLES.ANNOTATION_ID = (SELECT UUID());
		INSERT INTO PDMExtSrc.ANNOTATION (PDMExtSrc.ANNOTATION.ANNOTATION_ID, PDMExtSrc.ANNOTATION.ANNOTATED_ENTITY_ID, 
		PDMExtSrc.ANNOTATION.R_CONTEXT_TYPE_ID, PDMExtSrc.ANNOTATION.DATE_ANNOTATED_FOR, PDMExtSrc.ANNOTATION.ANNOTATED_COLUMN, 
		PDMExtSrc.ANNOTATION.ANNOTATION_DETAILS, PDMExtSrc.ANNOTATION.EFFECTIVE_DATE, PDMExtSrc.ANNOTATION.SOURCE_NAME, 
		PDMExtSrc.ANNOTATION.ACTIVE_IND, PDMExtSrc.ANNOTATION.ROW_CREATED_BY, PDMExtSrc.ANNOTATION.ROW_CREATED_DATE) 
		VALUES (VARIABLES.ANNOTATION_ID, VARIABLES.ANNOTATED_ENTITY_ID, VARIABLES.R_CONTEXT_TYPE_ID, VARIABLES.DATE_ANNOTATED_FOR_TIMESTAMP, 
		VARIABLES.ANNOTATED_COLUMN, VARIABLES.ANNOTATION_DETAILS, VARIABLES.EFFECTIVE_DATE_TIMESTAMP, 'DSWIM', 'Y', 
		VARIABLES.SP_USER, VARIABLES.now);
		
		IF((SELECT COUNT(1) FROM PDMExtSrc.ANNOTATION WHERE (PDMExtSrc.ANNOTATION.ANNOTATED_ENTITY_ID = NVL(VARIABLES.ANNOTATED_ENTITY_ID, '')) 
		AND (PDMExtSrc.ANNOTATION.R_CONTEXT_TYPE_ID = VARIABLES.R_CONTEXT_TYPE_ID_NULL) 
		AND (NVL(PDMExtSrc.ANNOTATION.DATE_ANNOTATED_FOR, 'NULL') = NVL(VARIABLES.DATE_ANNOTATED_FOR_TIMESTAMP, 'NULL'))) <= 0)
		BEGIN
			VARIABLES.ANNOTATION_ID_NULL = (SELECT UUID());
			INSERT INTO PDMExtSrc.ANNOTATION (PDMExtSrc.ANNOTATION.ANNOTATION_ID, PDMExtSrc.ANNOTATION.ANNOTATED_ENTITY_ID, 
			PDMExtSrc.ANNOTATION.R_CONTEXT_TYPE_ID, PDMExtSrc.ANNOTATION.DATE_ANNOTATED_FOR, PDMExtSrc.ANNOTATION.ANNOTATED_COLUMN, 
			PDMExtSrc.ANNOTATION.ANNOTATION_DETAILS, PDMExtSrc.ANNOTATION.EFFECTIVE_DATE, PDMExtSrc.ANNOTATION.SOURCE_NAME, 
			PDMExtSrc.ANNOTATION.ACTIVE_IND, PDMExtSrc.ANNOTATION.ROW_CREATED_BY, PDMExtSrc.ANNOTATION.ROW_CREATED_DATE)			
			VALUES (VARIABLES.ANNOTATION_ID_NULL, VARIABLES.ANNOTATED_ENTITY_ID, VARIABLES.R_CONTEXT_TYPE_ID_NULL, VARIABLES.DATE_ANNOTATED_FOR_TIMESTAMP, 
			null, null, VARIABLES.EFFECTIVE_DATE_TIMESTAMP, 'DSWIM','Y', VARIABLES.SP_USER, VARIABLES.now);
		END
	END
	SELECT 'Success' AS OP;
END;

CREATE PROCEDURE ds_DELETE_ANNOTATION(sp_custom_error_message string(4000), xml_sp_params string(999999)) RETURNS (OP string(4000)) AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_DELETE_ANNOTATION.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_DELETE_ANNOTATION.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.ANNOTATION_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANNOTATION_ID');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.SOURCE_ID;
	DECLARE varchar VARIABLES.Operation_Type = 'Delete';
	VARIABLES.SOURCE_ID = 'DSPM';
	UPDATE PDMExtSrc.ANNOTATION SET ACTIVE_IND = 'N', SOURCE_NAME = null, ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.now 
	WHERE PDMExtSrc.ANNOTATION.ANNOTATION_ID = VARIABLES.ANNOTATION_ID;
	SELECT 'Success' AS OP;
END

CREATE PROCEDURE ds_SAVE_ESTIMATION(sp_custom_error_message string(4000), xml_sp_params string(999999)) RETURNS (OP string(4000)) AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_ESTIMATION.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_ESTIMATION.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.PDEN_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PDEN_ID');
	DECLARE string VARIABLES.ENTITY_NAME = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_NAME');
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.ESTIMATION_METHOD = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ESTIMATION_METHOD');
	DECLARE string VARIABLES.EFFECTIVE_DATE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'EFFECTIVE_DATE');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.CREATEDDATE = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.EFFECTIVE_DATE_TIMESTAMP = null;
	IF(VARIABLES.EFFECTIVE_DATE IS NOT NULL)
	BEGIN
		VARIABLES.EFFECTIVE_DATE_TIMESTAMP = parsetimestamp(VARIABLES.EFFECTIVE_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	IF((SELECT COUNT(1) FROM PDMExtSrc.ENTITY_ESTIMATION WHERE PDMExtSrc.ENTITY_ESTIMATION.ENTITY_ID = VARIABLES.ENTITY_ID) > 0)
	BEGIN
		UPDATE PDMExtSrc.ENTITY_ESTIMATION SET ESTIMATION_METHOD = VARIABLES.ESTIMATION_METHOD, 
		EFFECTIVE_DATE = VARIABLES.EFFECTIVE_DATE_TIMESTAMP, ROW_CHANGED_BY = VARIABLES.SP_USER, 
		ROW_CHANGED_DATE = VARIABLES.CREATEDDATE WHERE PDMExtSrc.ENTITY_ESTIMATION.ENTITY_ID = VARIABLES.ENTITY_ID;
	END
	ELSE
	BEGIN
		DECLARE string VARIABLES.ENTITY_ESTIMATION_ID = (SELECT UUID());
		INSERT INTO PDMExtSrc.ENTITY_ESTIMATION (PDMExtSrc.ENTITY_ESTIMATION.ENTITY_ESTIMATION_ID, 
		PDMExtSrc.ENTITY_ESTIMATION.PDEN_ID, PDMExtSrc.ENTITY_ESTIMATION.ENTITY_NAME, PDMExtSrc.ENTITY_ESTIMATION.ENTITY_ID,
		PDMExtSrc.ENTITY_ESTIMATION.ESTIMATION_METHOD, PDMExtSrc.ENTITY_ESTIMATION.EFFECTIVE_DATE, 
		PDMExtSrc.ENTITY_ESTIMATION.ACTIVE_IND, PDMExtSrc.ENTITY_ESTIMATION.SOURCE_NAME, 
		PDMExtSrc.ENTITY_ESTIMATION.ROW_CREATED_DATE, PDMExtSrc.ENTITY_ESTIMATION.ROW_CREATED_BY) VALUES (VARIABLES.ENTITY_ESTIMATION_ID, VARIABLES.PDEN_ID, VARIABLES.ENTITY_NAME, 
		VARIABLES.ENTITY_ID, VARIABLES.ESTIMATION_METHOD, VARIABLES.EFFECTIVE_DATE_TIMESTAMP, 'Y', 'DSPM', 
		VARIABLES.CREATEDDATE, VARIABLES.SP_USER);
	END
	SELECT 'Success' AS OP;
END;

CREATE PROCEDURE ds_SAVE_FORECAST_CASES(sp_custom_error_message string(4000), 
xml_sp_params string(999999)) RETURNS (OP string(4000)) AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_FORECAST_CASES.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_FORECAST_CASES.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.FORECAST_CASE_NAME = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'FORECAST_CASE_NAME');
	DECLARE string VARIABLES.FORECAST_CASE_ACCESS = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'FORECAST_CASE_ACCESS');
	DECLARE string VARIABLES.FORECAST_CASE_DESCRIPTION = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'FORECAST_CASE_DESCRIPTION');
	DECLARE string VARIABLES.FORECAST_CASE_CONTENT = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'FORECAST_CASE_CONTENT');
	DECLARE string VARIABLES.FORECAST_CASE_INPUT = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'FORECAST_INPUT');
	DECLARE string VARIABLES.FORECAST_CASE_OUTPUT = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'FORECAST_OUTPUT');
	DECLARE string VARIABLES.FORECAST_BATCH_NAME = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'FORECAST_BATCH_NAME');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.CreatedDate = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.IDVal = (SELECT UUID());

	INSERT INTO PDMExtSrc.FORECAST_CASES (PDMExtSrc.FORECAST_CASES.FORECAST_CASE_ID, PDMExtSrc.FORECAST_CASES.FORECAST_CASE_NAME, 
	PDMExtSrc.FORECAST_CASES.FORECAST_CASE_DESCRIPTION, PDMExtSrc.FORECAST_CASES.FORECAST_CASE_ACCESS, 
	PDMExtSrc.FORECAST_CASES.FORECAST_CASE_CONTENT, 
	PDMExtSrc.FORECAST_CASES.ROW_CREATED_BY, PDMExtSrc.FORECAST_CASES.ROW_CREATED_DATE,PDMExtSrc.FORECAST_CASES.FORECAST_INPUT,
	PDMExtSrc.FORECAST_CASES.FORECAST_OUTPUT,PDMExtSrc.FORECAST_CASES.FORECAST_BATCH_NAME) VALUES (VARIABLES.IDVal, VARIABLES.FORECAST_CASE_NAME, VARIABLES.FORECAST_CASE_DESCRIPTION, 
	VARIABLES.FORECAST_CASE_ACCESS, VARIABLES.FORECAST_CASE_CONTENT, VARIABLES.SP_USER, VARIABLES.CreatedDate,  
	VARIABLES.FORECAST_CASE_INPUT, VARIABLES.FORECAST_CASE_OUTPUT,VARIABLES.FORECAST_BATCH_NAME);
		SELECT 'Success' AS OP;
END;

CREATE PROCEDURE ds_FACILITY_COMMENTS(sp_custom_error_message string(4000), xml_sp_params string(999999)) RETURNS (OP string(4000)) AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_FACILITY_COMMENTS.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_FACILITY_COMMENTS.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.DEL_REMARK_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DEL_REMARK_IND');
	DECLARE string VARIABLES.FACILITY_REMARK_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK_ID');
	DECLARE string VARIABLES.FACILITY_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.REMARK_DATE_VAR = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK_DATE');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK');
	DECLARE string VARIABLES.ATTACHMENT_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ATTACHMENT_IND');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.CreatedDate = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.REMARK_DATE = null;
	DECLARE string VARIABLES.SP_USER_TEMP = null;
	IF((VARIABLES.DEL_REMARK_IND IS NOT NULL) AND (VARIABLES.DEL_REMARK_IND <> '') AND (UPPER(VARIABLES.DEL_REMARK_IND) = 'Y'))
	BEGIN
		UPDATE PDMExtSrc.FACILITY_REMARK SET ACTIVE_IND = 'N' WHERE cast(PDMExtSrc.FACILITY_REMARK.FACILITY_REMARK_ID AS string) = VARIABLES.FACILITY_REMARK_ID;
		SELECT 'Success' AS OP;
	END	
	ELSE
	BEGIN
		IF((VARIABLES.REMARK_DATE_VAR IS NOT NULL) AND (VARIABLES.REMARK_DATE_VAR <> ''))
		BEGIN
			VARIABLES.REMARK_DATE = PARSETIMESTAMP(VARIABLES.REMARK_DATE_VAR, 'MM/dd/yyyy');
		END
		IF((VARIABLES.FACILITY_REMARK_ID IS NOT NULL) AND (VARIABLES.FACILITY_REMARK_ID <> ''))
		BEGIN
			IF((VARIABLES.FACILITY_ID IS NOT NULL) AND (VARIABLES.FACILITY_ID <> ''))
			BEGIN
				VARIABLES.SP_USER_TEMP = (SELECT cast(PDMExtSrc.FACILITY_REMARK.ROW_CREATED_BY AS string) FROM PDMExtSrc.FACILITY_REMARK WHERE cast(PDMExtSrc.FACILITY_REMARK.FACILITY_REMARK_ID AS string) = VARIABLES.FACILITY_REMARK_ID);
				IF((VARIABLES.SP_USER IS NOT NULL) AND (VARIABLES.SP_USER <> '') AND (VARIABLES.SP_USER = VARIABLES.SP_USER_TEMP))
				BEGIN
					UPDATE PDMExtSrc.FACILITY_REMARK SET REMARKS = VARIABLES.REMARK, REMARK_DATE = VARIABLES.REMARK_DATE, 
					ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.CreatedDate , ATTACHMENT_IND = VARIABLES.ATTACHMENT_IND
					WHERE cast(PDMExtSrc.FACILITY_REMARK.FACILITY_REMARK_ID AS string) = VARIABLES.FACILITY_REMARK_ID;
					SELECT 'Success' AS OP;
				END
				ELSE
				BEGIN
					SELECT 'User Permission Error' AS OP;
				END
			END
		END
		ELSE
		BEGIN
			VARIABLES.FACILITY_REMARK_ID = (SELECT UUID());
			IF((VARIABLES.FACILITY_ID IS NOT NULL) AND (VARIABLES.FACILITY_ID <> ''))
			BEGIN
				INSERT INTO PDMExtSrc.FACILITY_REMARK (PDMExtSrc.FACILITY_REMARK.FACILITY_REMARK_ID, PDMExtSrc.FACILITY_REMARK.FACILITY_ID, 
				PDMExtSrc.FACILITY_REMARK.ACTIVE_IND, PDMExtSrc.FACILITY_REMARK.REMARK_DATE, PDMExtSrc.FACILITY_REMARK.REMARKS, 
				PDMExtSrc.FACILITY_REMARK.ROW_CREATED_BY, PDMExtSrc.FACILITY_REMARK.ROW_CREATED_DATE, PDMExtSrc.FACILITY_REMARK.ROW_CHANGED_BY, 
				PDMExtSrc.FACILITY_REMARK.ROW_CHANGED_DATE, PDMExtSrc.FACILITY_REMARK.SOURCE_NAME, PDMExtSrc.FACILITY_REMARK.ATTACHMENT_IND) VALUES 
				(VARIABLES.FACILITY_REMARK_ID, VARIABLES.FACILITY_ID, 'Y',
				VARIABLES.REMARK_DATE, VARIABLES.REMARK, VARIABLES.SP_USER, VARIABLES.CreatedDate, VARIABLES.SP_USER, 
				VARIABLES.CreatedDate, 'DSPM',VARIABLES.ATTACHMENT_IND);
			END
			SELECT 'Success' AS OP;
		END
		
		SELECT * INTO #tempSrcDocs FROM XMLTABLE('/Parameters/DOCUMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS SOURCE_DOCUMENT STRING PATH '@SOURCE_DOCUMENT', 
		DOCUMENT_TITLE STRING PATH '@DOCUMENT_TITLE', DOCUMENT_FULL_PATH STRING PATH '@DOCUMENT_FULL_PATH', DEL_IND STRING PATH '@DEL_IND',
		FACILITY_DOCUMENT_ID STRING PATH '@DOCUMENT_ID', DOCUMENT_TYPE STRING PATH '@DOCUMENT_TYPE') AS SRC_DOCS;
		LOOP ON (SELECT #tempSrcDocs.FACILITY_DOCUMENT_ID FROM #tempSrcDocs WHERE #tempSrcDocs.DEL_IND = 'Y') AS srcDocsDelCursor
		BEGIN
			UPDATE PDMExtSrc.SOURCE_DOCUMENT SET PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND = 'N',
			PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_BY = VARIABLES.SP_USER,
			PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_DATE = VARIABLES.CreatedDate
				WHERE PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID = srcDocsDelCursor.FACILITY_DOCUMENT_ID;
		END
		LOOP ON (SELECT #tempSrcDocs.SOURCE_DOCUMENT, #tempSrcDocs.DOCUMENT_TITLE,#tempSrcDocs.DOCUMENT_FULL_PATH, 
		#tempSrcDocs.FACILITY_DOCUMENT_ID,#tempSrcDocs.DOCUMENT_TYPE FROM #tempSrcDocs
					WHERE (#tempSrcDocs.DEL_IND = 'N' OR #tempSrcDocs.DEL_IND IS NULL
						OR #tempSrcDocs.DEL_IND = '') AND #tempSrcDocs.FACILITY_DOCUMENT_ID IS NOT NULL) AS srcDocsUpdCursor
		BEGIN
			UPDATE PDMExtSrc.SOURCE_DOCUMENT SET PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TITLE = srcDocsUpdCursor.DOCUMENT_TITLE,
			PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT = srcDocsUpdCursor.SOURCE_DOCUMENT,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH = srcDocsUpdCursor.DOCUMENT_FULL_PATH,
			PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND = 'Y', PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_BY = VARIABLES.SP_USER,
			PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_DATE = VARIABLES.CreatedDate,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TYPE = srcDocsUpdCursor.DOCUMENT_TYPE
				WHERE PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID = srcDocsUpdCursor.FACILITY_DOCUMENT_ID;
		END
		DECLARE string VARIABLES.SOURCE_DOCUMENT_ID;
		LOOP ON (SELECT #tempSrcDocs.SOURCE_DOCUMENT, #tempSrcDocs.DOCUMENT_TITLE, 
		#tempSrcDocs.DOCUMENT_FULL_PATH, #tempSrcDocs.FACILITY_DOCUMENT_ID,#tempSrcDocs.DOCUMENT_TYPE
		FROM #tempSrcDocs
					WHERE (#tempSrcDocs.DEL_IND = 'N' OR #tempSrcDocs.DEL_IND IS NULL OR #tempSrcDocs.DEL_IND = '') 
					AND (#tempSrcDocs.FACILITY_DOCUMENT_ID IS NULL OR #tempSrcDocs.FACILITY_DOCUMENT_ID = '')) AS srcDocsInsCursor
		BEGIN
			VARIABLES.SOURCE_DOCUMENT_ID = (SELECT UUID());
			INSERT INTO PDMExtSrc.SOURCE_DOCUMENT(PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID,PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID,
			PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND, PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH, PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TITLE,PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_BY,
			PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_DATE,PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TYPE)
			VALUES (VARIABLES.SOURCE_DOCUMENT_ID,VARIABLES.FACILITY_REMARK_ID,'Y',srcDocsInsCursor.DOCUMENT_FULL_PATH,
			srcDocsInsCursor.SOURCE_DOCUMENT,srcDocsInsCursor.DOCUMENT_TITLE,VARIABLES.SP_USER, 
			VARIABLES.CreatedDate,srcDocsInsCursor.DOCUMENT_TYPE);
		END	
		
		IF((SELECT COUNT(1) FROM PDMExtSrc.SOURCE_DOCUMENT WHERE PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID = VARIABLES.FACILITY_REMARK_ID 
					AND PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND = 'Y') > 0)
		BEGIN
			UPDATE PDMExtSrc.FACILITY_REMARK SET ATTACHMENT_IND = 'Y' WHERE FACILITY_REMARK_ID = VARIABLES.FACILITY_REMARK_ID;
		END
		ELSE
		BEGIN
			UPDATE PDMExtSrc.FACILITY_REMARK SET ATTACHMENT_IND = 'N' WHERE FACILITY_REMARK_ID = VARIABLES.FACILITY_REMARK_ID;
		END			
	END	
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_RISK_RANK (IN xml_sp_params string(99999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(4000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_RISK_RANK.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_RISK_RANK.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.Y_VALUE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SEVERITY');
	DECLARE string VARIABLES.X_VALUE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'LIKELIHOOD');
	DECLARE string VARIABLES.ROW_CHANGED_DATE = (SELECT #tempXML.ValueRes FROM #tempXML WHERE #tempXML.Name = 'ROW_CHANGED_DATE');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK');
	DECLARE string VARIABLES.PROCESS_MATRIX_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'RISK_RANK_ID');
	DECLARE string VARIABLES.ROW_CHANGED_BY = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.Changed_date = parsetimestamp(VARIABLES.ROW_CHANGED_DATE, 'MM/dd/yyyy HH:mm:ss');
	DECLARE string VARIABLES.IDVal = (SELECT UUID());
	DECLARE string VARIABLES.SOURCE_ID;
	DECLARE string VARIABLES.SEVERITY_TYPE;
	DECLARE decimal VARIABLES.WEIGHTAGE_FACTOR;
	VARIABLES.SOURCE_ID = (SELECT PPDMSrc.R_SOURCE.SOURCE_ID FROM PPDMSrc.R_SOURCE WHERE PPDMSrc.R_SOURCE.SOURCE_NAME = 'DSWIM');
	VARIABLES.SEVERITY_TYPE = (SELECT PDMExtSrc.PROCESS_MATRIX.SEVERITY_TYPE FROM PDMExtSrc.PROCESS_MATRIX WHERE (PDMExtSrc.PROCESS_MATRIX.ENTITY_ID IS NULL) AND (PDMExtSrc.PROCESS_MATRIX.Y_VALUE = VARIABLES.Y_VALUE) AND (PDMExtSrc.PROCESS_MATRIX.X_VALUE = VARIABLES.X_VALUE));
	VARIABLES.WEIGHTAGE_FACTOR = (SELECT PDMExtSrc.PROCESS_MATRIX.WEIGHTAGE_FACTOR FROM PDMExtSrc.PROCESS_MATRIX WHERE (PDMExtSrc.PROCESS_MATRIX.ENTITY_ID IS NULL) AND (PDMExtSrc.PROCESS_MATRIX.Y_VALUE = VARIABLES.Y_VALUE) AND (PDMExtSrc.PROCESS_MATRIX.X_VALUE = VARIABLES.X_VALUE));
	IF(VARIABLES.ENTITY_ID IS NOT NULL)
	BEGIN
		IF(EXISTS (SELECT PDMExtSrc.PROCESS_MATRIX.ENTITY_ID FROM PDMExtSrc.PROCESS_MATRIX WHERE PDMExtSrc.PROCESS_MATRIX.ENTITY_ID = VARIABLES.ENTITY_ID))
		BEGIN
			UPDATE PDMExtSrc.PROCESS_MATRIX SET WEIGHTAGE_FACTOR = VARIABLES.WEIGHTAGE_FACTOR, Y_VALUE = VARIABLES.Y_VALUE, X_VALUE = VARIABLES.X_VALUE, SEVERITY_TYPE = VARIABLES.SEVERITY_TYPE, REMARK = VARIABLES.REMARK, ROW_CHANGED_DATE = VARIABLES.Changed_date, ROW_CHANGED_BY = VARIABLES.ROW_CHANGED_BY WHERE PDMExtSrc.PROCESS_MATRIX.ENTITY_ID = VARIABLES.ENTITY_ID;
		END
		ELSE
		BEGIN
			DECLARE string VARIABLES.Process_Matrix_NewId = (SELECT UUID());
			INSERT INTO PDMExtSrc.PROCESS_MATRIX (PDMExtSrc.PROCESS_MATRIX.PROCESS_MATRIX_ID, PDMExtSrc.PROCESS_MATRIX.WEIGHTAGE_FACTOR, 
			PDMExtSrc.PROCESS_MATRIX.Y_VALUE, PDMExtSrc.PROCESS_MATRIX.X_VALUE, PDMExtSrc.PROCESS_MATRIX.SEVERITY_TYPE, PDMExtSrc.PROCESS_MATRIX.REMARK, 
			PDMExtSrc.PROCESS_MATRIX.SOURCE_ID, PDMExtSrc.PROCESS_MATRIX.ROW_CREATED_BY, PDMExtSrc.PROCESS_MATRIX.ROW_CREATED_DATE, 
			PDMExtSrc.PROCESS_MATRIX.ROW_CHANGED_BY, PDMExtSrc.PROCESS_MATRIX.ROW_CHANGED_DATE, PDMExtSrc.PROCESS_MATRIX.ENTITY_ID, 
			PDMExtSrc.PROCESS_MATRIX.ACTIVE_IND) VALUES (VARIABLES.Process_Matrix_NewId, VARIABLES.WEIGHTAGE_FACTOR, VARIABLES.Y_VALUE, VARIABLES.X_VALUE, 
			VARIABLES.SEVERITY_TYPE, VARIABLES.REMARK, VARIABLES.SOURCE_ID, VARIABLES.ROW_CHANGED_BY, VARIABLES.Changed_date, VARIABLES.ROW_CHANGED_BY, VARIABLES.Changed_date, VARIABLES.ENTITY_ID, 'Y');
		END
		INSERT INTO PDMExtSrc.PROCESS_MATRIX_AUDIT (PDMExtSrc.PROCESS_MATRIX_AUDIT.PROCESS_MATRIX_AUDIT_ID, PDMExtSrc.PROCESS_MATRIX_AUDIT.ENTITY_ID, 
		PDMExtSrc.PROCESS_MATRIX_AUDIT.Y_VALUE, PDMExtSrc.PROCESS_MATRIX_AUDIT.X_VALUE, PDMExtSrc.PROCESS_MATRIX_AUDIT.WEIGHTAGE_FACTOR, 
		PDMExtSrc.PROCESS_MATRIX_AUDIT.REMARK, PDMExtSrc.PROCESS_MATRIX_AUDIT.ACTIVE_IND, PDMExtSrc.PROCESS_MATRIX_AUDIT.ROW_CHANGED_DATE, 
		PDMExtSrc.PROCESS_MATRIX_AUDIT.ROW_CHANGED_BY, PDMExtSrc.PROCESS_MATRIX_AUDIT.ROW_CREATED_DATE, PDMExtSrc.PROCESS_MATRIX_AUDIT.ROW_CREATED_BY,
		PDMExtSrc.PROCESS_MATRIX_AUDIT.SOURCE_ID) VALUES (VARIABLES.IDVal, 
		VARIABLES.ENTITY_ID, VARIABLES.Y_VALUE, VARIABLES.X_VALUE, VARIABLES.WEIGHTAGE_FACTOR, VARIABLES.REMARK, 'Y', VARIABLES.Changed_date, 
		VARIABLES.ROW_CHANGED_BY, VARIABLES.Changed_date, VARIABLES.ROW_CHANGED_BY,VARIABLES.SOURCE_ID);
	END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_OPERATING_LIMITS (IN xml_sp_params string(99999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(4000) OPTIONS(CASE_SENSITIVE 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_OPERATING_LIMITS.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_OPERATING_LIMITS.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.entity_id = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.equipment_id = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANNULUS_ID');
	DECLARE string VARIABLES.entity_name = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_NAME');
	DECLARE string VARIABLES.equipment_name = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANNULUS_NAME');	
	DECLARE string VARIABLES.sp_user = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.source_id;
	VARIABLES.source_id = (SELECT PPDMSrc.R_SOURCE.SOURCE_ID FROM PPDMSrc.R_SOURCE WHERE PPDMSrc.R_SOURCE.SOURCE_NAME = 'DSWIM');
	
	DECLARE string VARIABLES.oprType = '';
	DECLARE string VARIABLES.oprDetailType = '';
	DECLARE string VARIABLES.primaryKey = '';
	
	DECLARE string VARIABLES.oprLimit_ind = 'N';
	DECLARE bigdecimal VARIABLES.UNOL;
	DECLARE bigdecimal VARIABLES.LNOL;
	DECLARE bigdecimal VARIABLES.USOL;
	DECLARE bigdecimal VARIABLES.LSOL;
	DECLARE bigdecimal VARIABLES.USDL;
	DECLARE bigdecimal VARIABLES.LSDL;
	DECLARE bigdecimal VARIABLES.BurstPressure;
	DECLARE bigdecimal VARIABLES.CollapsePressure;
	DECLARE bigdecimal VARIABLES.ShoeRating;

	LOOP ON (SELECT X.OPR_DETAIL_TYPE_ID, 
	CASE WHEN (X.OPR_DETAIL_VALUE IS NOT NULL) AND (X.OPR_DETAIL_VALUE <> '') THEN CONVERT(X.OPR_DETAIL_VALUE, BIGDECIMAL) ELSE null END AS OPR_DETAIL_VALUE, 
	CASE WHEN (X.OPR_DETAIL_MAX_VALUE IS NOT NULL) AND (X.OPR_DETAIL_MAX_VALUE <> '') AND (X.OPR_DETAIL_MAX_VALUE <> 'null') THEN CONVERT(X.OPR_DETAIL_MAX_VALUE,
	BIGDECIMAL) ELSE null END AS OPR_DETAIL_MAX_VALUE, CASE WHEN (X.OPR_DETAIL_MIN_VALUE IS NOT NULL) AND (X.OPR_DETAIL_MIN_VALUE <> '') 
	AND (X.OPR_DETAIL_MIN_VALUE <> 'null') THEN CONVERT(X.OPR_DETAIL_MIN_VALUE, BIGDECIMAL) ELSE null END AS OPR_DETAIL_MIN_VALUE, 'Y' AS ACTIVE_IND, 
	VARIABLES.source_id AS SOURCE, VARIABLES.sp_user AS ROW_CHANGED_BY, VARIABLES.now AS ROW_CHANGED_DATE, VARIABLES.sp_user AS ROW_CREATED_BY, 
	VARIABLES.now AS ROW_CREATED_DATE FROM XMLTABLE('/Parameters/OperatingLimitsAndParameter/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS TYPE string PATH '@TYPE', 
	OPR_DETAIL_TYPE_ID string PATH '@OPR_DETAIL_TYPE_ID', OPR_DETAIL_VALUE string PATH '@OPR_DETAIL_VALUE', OPR_DETAIL_MAX_VALUE string PATH '@OPR_DETAIL_MAX_VALUE',
	OPR_DETAIL_MIN_VALUE string PATH '@OPR_DETAIL_MIN_VALUE') AS X WHERE ((X.OPR_DETAIL_VALUE IS NOT NULL) AND (X.OPR_DETAIL_VALUE <> '')) 
	OR ((X.OPR_DETAIL_MAX_VALUE IS NOT NULL) AND (X.OPR_DETAIL_MAX_VALUE <> '') AND (X.OPR_DETAIL_MAX_VALUE <> 'null')) 
	OR ((X.OPR_DETAIL_MIN_VALUE IS NOT NULL) AND (X.OPR_DETAIL_MIN_VALUE <> '') AND (X.OPR_DETAIL_MIN_VALUE <> 'null'))) AS curEQMETERDETAIL
	BEGIN
		IF((SELECT COUNT(1) FROM PDMExtSrc.EQ_METER_OPERATION_DETAIL WHERE PDMExtSrc.EQ_METER_OPERATION_DETAIL.EQUIPMENT_ID = VARIABLES.equipment_id AND 
		PDMExtSrc.EQ_METER_OPERATION_DETAIL.ENTITY_ID = VARIABLES.entity_id 
		AND PDMExtSrc.EQ_METER_OPERATION_DETAIL.OPR_DETAIL_TYPE_ID = curEQMETERDETAIL.OPR_DETAIL_TYPE_ID) < 1)
		BEGIN
		VARIABLES.primaryKey = (SELECT UUID());
		INSERT INTO PDMExtSrc.EQ_METER_OPERATION_DETAIL(EQUIPMENT_ID,ENTITY_ID,OPR_DETAIL_TYPE_ID,OPR_DETAIL_VALUE,OPR_DETAIL_MAX_VALUE,
		OPR_DETAIL_MIN_VALUE,EFFECTIVE_DATE,ROW_CREATED_DATE,ROW_CREATED_BY,ACTIVE_IND,SOURCE_NAME,EQ_METER_OPERATION_DETAIL_ID) 
		VALUES(VARIABLES.equipment_id, VARIABLES.entity_id,curEQMETERDETAIL.OPR_DETAIL_TYPE_ID,curEQMETERDETAIL.OPR_DETAIL_VALUE,
		curEQMETERDETAIL.OPR_DETAIL_MAX_VALUE, curEQMETERDETAIL.OPR_DETAIL_MIN_VALUE, VARIABLES.now, VARIABLES.now, VARIABLES.sp_user, 'Y',
		'DSWIM',VARIABLES.primaryKey);
		END
		ELSE
		BEGIN
		UPDATE PDMExtSrc.EQ_METER_OPERATION_DETAIL SET OPR_DETAIL_VALUE = curEQMETERDETAIL.OPR_DETAIL_VALUE, 
		OPR_DETAIL_MAX_VALUE = curEQMETERDETAIL.OPR_DETAIL_MAX_VALUE, OPR_DETAIL_MIN_VALUE = curEQMETERDETAIL.OPR_DETAIL_MIN_VALUE,
		EFFECTIVE_DATE = VARIABLES.now,
		ROW_CHANGED_DATE = VARIABLES.now, ROW_CHANGED_BY = VARIABLES.sp_user 
		WHERE PDMExtSrc.EQ_METER_OPERATION_DETAIL.EQUIPMENT_ID = VARIABLES.equipment_id AND 
		PDMExtSrc.EQ_METER_OPERATION_DETAIL.ENTITY_ID = VARIABLES.entity_id 
		AND PDMExtSrc.EQ_METER_OPERATION_DETAIL.OPR_DETAIL_TYPE_ID = curEQMETERDETAIL.OPR_DETAIL_TYPE_ID;
		END
		VARIABLES.oprType = (SELECT OPR_TYPE FROM PDMExtSrc.R_OPR_DETAIL_TYPE ODT 
		INNER JOIN PDMExtSrc.R_OPR_TYPE OT ON ODT.OPR_TYPE_ID = OT.OPR_TYPE_ID
		WHERE ODT.OPR_DETAIL_TYPE_ID = curEQMETERDETAIL.OPR_DETAIL_TYPE_ID);
		
		IF(VARIABLES.oprType = 'Operating Parameter Limits')
		BEGIN
			UPDATE PDMExtSrc.OPERATING_PARAM_AUDIT SET EXPIRY_DATE = VARIABLES.now, 
			PDMExtSrc.OPERATING_PARAM_AUDIT.ROW_CHANGED_DATE = VARIABLES.now, 
			PDMExtSrc.OPERATING_PARAM_AUDIT.ROW_CHANGED_BY = VARIABLES.sp_user
			WHERE PDMExtSrc.OPERATING_PARAM_AUDIT.EQUIPMENT_ID = VARIABLES.equipment_id AND 
			PDMExtSrc.OPERATING_PARAM_AUDIT.ENTITY_ID = VARIABLES.entity_id 
			AND PDMExtSrc.OPERATING_PARAM_AUDIT.OPR_DETAIL_TYPE_ID = curEQMETERDETAIL.OPR_DETAIL_TYPE_ID
			AND PDMExtSrc.OPERATING_PARAM_AUDIT.EXPIRY_DATE IS NULL;
			
			VARIABLES.primaryKey = (SELECT UUID());
			INSERT INTO PDMExtSrc.OPERATING_PARAM_AUDIT(OPR_PARAM_AUDIT_ID,EQUIPMENT_ID,EQUIPMENT_NAME,EQUIPMENT_PARENT_ID,OPR_DETAIL_TYPE_ID,PARAM_MIN_VALUE,
				PARAM_MAX_VALUE,PARAM_VALUE,ENTITY_NAME, ENTITY_ID,EFFECTIVE_DATE, ACTIVE_IND,SOURCE_NAME, ROW_CREATED_BY,
				ROW_CREATED_DATE) 
			VALUES
			(VARIABLES.primaryKey, VARIABLES.equipment_id, VARIABLES.equipment_name, VARIABLES.equipment_id, curEQMETERDETAIL.OPR_DETAIL_TYPE_ID,
			curEQMETERDETAIL.OPR_DETAIL_MIN_VALUE, curEQMETERDETAIL.OPR_DETAIL_MAX_VALUE, curEQMETERDETAIL.OPR_DETAIL_VALUE,
			VARIABLES.entity_name, VARIABLES.entity_id,VARIABLES.now,'Y','DSWIM',VARIABLES.sp_user,VARIABLES.now
			);
		END
		ELSE IF (VARIABLES.oprType = 'Operating Limits')
		BEGIN
			VARIABLES.oprLimit_ind = 'Y';
			
			VARIABLES.oprDetailType = (SELECT OPR_DETAIL_TYPE FROM PDMExtSrc.R_OPR_DETAIL_TYPE ODT 
								WHERE ODT.OPR_DETAIL_TYPE_ID = curEQMETERDETAIL.OPR_DETAIL_TYPE_ID);
			
			IF(VARIABLES.oprDetailType = 'Normal Operating Limit')
			BEGIN
				VARIABLES.UNOL = curEQMETERDETAIL.OPR_DETAIL_MAX_VALUE;
				VARIABLES.LNOL = curEQMETERDETAIL.OPR_DETAIL_MIN_VALUE;
			END
			ELSE IF(VARIABLES.oprDetailType = 'Safe Operating Limit')
			BEGIN
				VARIABLES.USOL = curEQMETERDETAIL.OPR_DETAIL_MAX_VALUE;
				VARIABLES.LSOL = curEQMETERDETAIL.OPR_DETAIL_MIN_VALUE;
			END
			ELSE IF(VARIABLES.oprDetailType = 'Safe Design Limit')
			BEGIN
				VARIABLES.USDL = curEQMETERDETAIL.OPR_DETAIL_MAX_VALUE;
				VARIABLES.LSDL = curEQMETERDETAIL.OPR_DETAIL_MIN_VALUE;
			END			
			ELSE IF(VARIABLES.oprDetailType = 'Burst Pressure')
			BEGIN
				VARIABLES.BurstPressure = curEQMETERDETAIL.OPR_DETAIL_VALUE;
			END
			ELSE IF(VARIABLES.oprDetailType = 'Collapse Pressure')
			BEGIN
				VARIABLES.CollapsePressure = curEQMETERDETAIL.OPR_DETAIL_VALUE;
			END
			ELSE IF(VARIABLES.oprDetailType = 'Shoe Rating')
			BEGIN
				VARIABLES.ShoeRating = curEQMETERDETAIL.OPR_DETAIL_VALUE;
			END			
		END
	END
	
	IF(VARIABLES.oprLimit_ind = 'Y')
	BEGIN
		UPDATE PDMExtSrc.OPERATING_LIMITS_AUDIT SET EXPIRY_DATE = VARIABLES.now, 
					PDMExtSrc.OPERATING_LIMITS_AUDIT.ROW_CHANGED_DATE = VARIABLES.now, 
					PDMExtSrc.OPERATING_LIMITS_AUDIT.ROW_CHANGED_BY = VARIABLES.sp_user
					WHERE PDMExtSrc.OPERATING_LIMITS_AUDIT.EQUIPMENT_ID = VARIABLES.equipment_id AND 
					PDMExtSrc.OPERATING_LIMITS_AUDIT.ENTITY_ID = VARIABLES.entity_id AND PDMExtSrc.OPERATING_LIMITS_AUDIT.EXPIRY_DATE IS NULL;	
		
		VARIABLES.primaryKey = (SELECT UUID());		
		
		INSERT INTO PDMExtSrc.OPERATING_LIMITS_AUDIT(OPR_LIMIT_AUD_ID,EQUIPMENT_ID,EQUIPMENT_NAME,LNOL,UNOL,LSDL,USDL,LSOL,BURST_PRESSURE,COLLAPSE_PRESSURE,
			SHOE_RATING,PRESSURE_UOM, ENTITY_NAME, ENTITY_ID, EFFECTIVE_DATE, ACTIVE_IND, SOURCE_NAME, ROW_CREATED_BY, ROW_CREATED_DATE, USOL)
		VALUES
		(VARIABLES.primaryKey, VARIABLES.equipment_id,VARIABLES.equipment_name,VARIABLES.LNOL,VARIABLES.UNOL,VARIABLES.LSDL,
		VARIABLES.USDL,VARIABLES.LSOL,VARIABLES.BurstPressure,VARIABLES.CollapsePressure,VARIABLES.ShoeRating,'psi',
		VARIABLES.entity_name,VARIABLES.entity_id,VARIABLES.now, 'Y', 'DSWIM', VARIABLES.sp_user,VARIABLES.now, VARIABLES.USOL);
	END
	
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_ANOMALY_HISTORY (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(NATIVE_TYPE 'string', CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_ANOMALY_HISTORY.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_ANOMALY_HISTORY.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.ANOMALY_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANOMALY_ID');
	DECLARE string VARIABLES.ANOMALY_TYPE_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANOMALY_TYPE_ID');
	DECLARE string VARIABLES.ANOMALY_DESC = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANOMALY_DESC');
	DECLARE string VARIABLES.OPEN_DATE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'OPEN_DATE');
	DECLARE string VARIABLES.OBSERVED_DATE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'OBSERVED_DATE');
	DECLARE string VARIABLES.ANOMALY_PLAN = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANOMALY_PLAN');
	DECLARE string VARIABLES.CLOSE_DATE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CLOSE_DATE');
	DECLARE string VARIABLES.COORDINATED_BY = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'COORDINATOR');
	DECLARE string VARIABLES.ANOMALY_CONCLUSION_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANOMALY_CONCLUSION_ID');
	DECLARE string VARIABLES.ANOMALY_EVAL_PRIOR_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANOMALY_EVAL_PRIOR_ID');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.primaryKey = '';
	
	DECLARE TIMESTAMP VARIABLES.Open_Date_Timestamp = null;
	DECLARE TIMESTAMP VARIABLES.Observed_Date_Timestamp = null;
	DECLARE TIMESTAMP VARIABLES.Close_Date_Timestamp = null;	
	
	IF(VARIABLES.OPEN_DATE IS NOT NULL)
	BEGIN
		VARIABLES.Open_Date_Timestamp = parsetimestamp(VARIABLES.OPEN_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	IF(VARIABLES.OBSERVED_DATE IS NOT NULL)
	BEGIN
		VARIABLES.Observed_Date_Timestamp = parsetimestamp(VARIABLES.OBSERVED_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	IF(VARIABLES.CLOSE_DATE IS NOT NULL)
	BEGIN
		VARIABLES.Close_Date_Timestamp = parsetimestamp(VARIABLES.CLOSE_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	
	IF(VARIABLES.ANOMALY_ID IS NOT NULL AND VARIABLES.ANOMALY_ID <> '')
	BEGIN
		UPDATE PDMExtSrc.ANOMALY SET ANOMALY_TYPE_ID = VARIABLES.ANOMALY_TYPE_ID, COORDINATED_BY = VARIABLES.COORDINATED_BY,
		OPEN_DATE = VARIABLES.Open_Date_Timestamp,CLOSE_DATE = VARIABLES.Close_Date_Timestamp,ANOMALY_DESC = VARIABLES.ANOMALY_DESC,
		ANOMALY_PLAN = VARIABLES.ANOMALY_PLAN,OBSERVED_DATE = VARIABLES.Observed_Date_Timestamp,ANOMALY_CONCLUSION_ID = VARIABLES.ANOMALY_CONCLUSION_ID,
		ANOMALY_EVAL_PRIOR_ID = VARIABLES.ANOMALY_EVAL_PRIOR_ID,ROW_CHANGED_DATE = VARIABLES.now,
		ROW_CHANGED_BY = VARIABLES.SP_USER
			WHERE PDMExtSrc.ANOMALY.ANOMALY_ID = VARIABLES.ANOMALY_ID;
	END
	ELSE
	BEGIN
		VARIABLES.primaryKey = (SELECT UUID());
		INSERT INTO PDMExtSrc.ANOMALY(ANOMALY_TYPE_ID,COORDINATED_BY,OPEN_DATE,CLOSE_DATE,ANOMALY_DESC,ANOMALY_PLAN,ANOMALY_SYS_ID,OBSERVED_DATE,ANOMALY_CONCLUSION_ID,
		ANOMALY_EVAL_PRIOR_ID,ROW_CREATED_DATE,ROW_CREATED_BY,ACTIVE_IND,SOURCE_NAME,ENTITY_ID,ANOMALY_ID)
		VALUES(VARIABLES.ANOMALY_TYPE_ID,VARIABLES.COORDINATED_BY,VARIABLES.Open_Date_Timestamp,VARIABLES.Close_Date_Timestamp,VARIABLES.ANOMALY_DESC,VARIABLES.ANOMALY_PLAN,
		VARIABLES.primaryKey,VARIABLES.Observed_Date_Timestamp,VARIABLES.ANOMALY_CONCLUSION_ID,VARIABLES.ANOMALY_EVAL_PRIOR_ID,VARIABLES.now,VARIABLES.SP_USER,
		'Y','DSWIM',VARIABLES.ENTITY_ID,VARIABLES.primaryKey);
	END	
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_PLANNED_ACTIONS (IN xml_sp_params string(99999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(4000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_PLANNED_ACTIONS.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_PLANNED_ACTIONS.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;

	DECLARE string VARIABLES.entity_id = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.planned_actions_id = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PA_PLAN_ID');
	DECLARE string VARIABLES.actionGroup = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PA_GROUP_ID');
	DECLARE string VARIABLES.plannedActions = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PA_DESC');
	DECLARE string VARIABLES.severity = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PA_PRIORITY_ID');
	DECLARE string VARIABLES.sp_user = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');

	IF(VARIABLES.planned_actions_id IS NOT NULL)
	BEGIN
		UPDATE PDMExtSrc.PROJECT_PLAN SET R_ACTION_GROUP_ID = VARIABLES.actionGroup, REMARKS = VARIABLES.plannedActions, R_PRIORITY_ID = VARIABLES.severity, 
		 ROW_CHANGED_BY = VARIABLES.sp_user, ROW_CHANGED_DATE = VARIABLES.now 
		WHERE PDMExtSrc.PROJECT_PLAN.PROJECT_PLAN_ID = VARIABLES.planned_actions_id;
	END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_FAILURE_IMPAIREMENT (IN xml_sp_params string(99999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(4000) OPTIONS(NATIVE_TYPE 'string', CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_FAILURE_IMPAIREMENT.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_FAILURE_IMPAIREMENT.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.WBE_IF_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WBE_IF_ID');
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.IF_TYPE_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_TYPE_ID');
	DECLARE string VARIABLES.IF_DESC = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_DESC');
	DECLARE string VARIABLES.IF_EQUIP_SUB_TYPE_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_EQUIP_SUB_TYPE_ID');
	DECLARE string VARIABLES.IF_EQUIP_DESC = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_EQUIP_DESC');
	DECLARE string VARIABLES.IF_CAUSE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_CAUSE');
	DECLARE string VARIABLES.IF_EQUIP_INSTALL_DATE = (SELECT #tempXML.ValueRes FROM #tempXML WHERE #tempXML.Name = 'IF_EQUIP_INSTALL_DATE');
	DECLARE string VARIABLES.IF_START_DATE = (SELECT #tempXML.ValueRes FROM #tempXML WHERE #tempXML.Name = 'IF_START_DATE');
	DECLARE string VARIABLES.IF_CLOSE_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_CLOSE_IND');
	DECLARE string VARIABLES.IF_END_DATE = (SELECT #tempXML.ValueRes FROM #tempXML WHERE #tempXML.Name = 'IF_END_DATE');
	DECLARE string VARIABLES.IF_RCFA_REQ_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_RCFA_REQ_IND');
	DECLARE string VARIABLES.IF_RCFA_REPORT_DATE = (SELECT #tempXML.ValueRes FROM #tempXML WHERE #tempXML.Name = 'IF_RCFA_REPORT_DATE');
	DECLARE string VARIABLES.IF_RCFA_LOCATION = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_RCFA_LOCATION');
	DECLARE string VARIABLES.IF_MOC_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_MOC_IND');
	DECLARE string VARIABLES.IF_MOC_DATE = (SELECT #tempXML.ValueRes FROM #tempXML WHERE #tempXML.Name = 'IF_MOC_DATE');
	DECLARE string VARIABLES.IF_MOC_REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_MOC_REMARK');
	DECLARE string VARIABLES.IF_MOC_EXPIRY_DATE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_MOC_EXPIRY_DATE');
	DECLARE string VARIABLES.IF_CONSEQUENCE_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_CONSEQUENCE_ID');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE string VARIABLES.IF_LINK_MOC_RECORD = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_LINK_MOC_RECORD');
	DECLARE string VARIABLES.IF_CONSEQUENCE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_CONSEQUENCE');
	DECLARE string VARIABLES.IF_REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'IF_REMARK');
	
	DECLARE TIMESTAMP VARIABLES.EQUIP_INSTALL_DATE_TEMP = parsetimestamp(VARIABLES.IF_EQUIP_INSTALL_DATE, 'MM/dd/yyyy HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.START_DATE_TEMP = parsetimestamp(VARIABLES.IF_START_DATE, 'MM/dd/yyyy HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.END_DATE_TEMP = parsetimestamp(VARIABLES.IF_END_DATE, 'MM/dd/yyyy HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.REPORTED_DATE_TEMP = parsetimestamp(VARIABLES.IF_RCFA_REPORT_DATE, 'MM/dd/yyyy HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.MOC_DATE_TEMP = parsetimestamp(VARIABLES.IF_MOC_DATE, 'MM/dd/yyyy HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.MOC_END_DATE_TEMP = parsetimestamp(VARIABLES.IF_MOC_EXPIRY_DATE, 'MM/dd/yyyy HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.NOW_TEMP = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE varchar VARIABLES.primayKey = (SELECT UUID());

	IF(VARIABLES.WBE_IF_ID IS NOT NULL AND VARIABLES.WBE_IF_ID <> '')
	BEGIN
		UPDATE PDMExtSrc.WI_FAILURE_IMPAIRMENT SET FAILURE_IMPAIR_TYPE_ID = VARIABLES.IF_TYPE_ID, IF_DESCRIPTION = VARIABLES.IF_DESC, 
		IF_CAUSE = VARIABLES.IF_CAUSE, IF_REMARKS = VARIABLES.IF_REMARK, IF_CONSEQ_ID = VARIABLES.IF_CONSEQUENCE_ID,
		EQUIP_SUB_TYPE_ID = VARIABLES.IF_EQUIP_SUB_TYPE_ID, EQUIP_DESCRIPTION = VARIABLES.IF_EQUIP_DESC, WBE_INSTALL_DATE = VARIABLES.EQUIP_INSTALL_DATE_TEMP,
		IF_START_DATE = VARIABLES.START_DATE_TEMP, IF_END_DATE = VARIABLES.END_DATE_TEMP, RCFA_IND = VARIABLES.IF_RCFA_REQ_IND,
		RCFA_REPORT_DATE = VARIABLES.REPORTED_DATE_TEMP, MOC_IND = VARIABLES.IF_MOC_IND, RCFA_LOCATION = VARIABLES.IF_RCFA_LOCATION,
		MOC_DATE = VARIABLES.MOC_DATE_TEMP, MOC_REMARKS = VARIABLES.IF_MOC_REMARK,
		MOC_LOCATION = VARIABLES.IF_LINK_MOC_RECORD, MOC_END_DATE = VARIABLES.MOC_END_DATE_TEMP,
		ROW_CHANGED_DATE = VARIABLES.NOW_TEMP, ROW_CHANGED_BY = VARIABLES.SP_USER, SOURCE_NAME = 'DSWIM', 
		ENTITY_ID = VARIABLES.ENTITY_ID WHERE WI_FAILURE_IMPAIR_ID = VARIABLES.WBE_IF_ID;
	END
	ELSE
	BEGIN
		INSERT INTO PDMExtSrc.WI_FAILURE_IMPAIRMENT(WI_FAILURE_IMPAIR_ID,FAILURE_IMPAIR_TYPE_ID, IF_DESCRIPTION, IF_CAUSE, IF_REMARKS,
		IF_CONSEQ_ID,EQUIP_SUB_TYPE_ID, EQUIP_DESCRIPTION, WBE_INSTALL_DATE,
		IF_START_DATE, IF_END_DATE, RCFA_IND, RCFA_REPORT_DATE, MOC_IND, RCFA_LOCATION, MOC_DATE, MOC_REMARKS,
		MOC_LOCATION, MOC_END_DATE,ROW_CREATED_DATE, ROW_CREATED_BY, ACTIVE_IND, SOURCE_NAME, ENTITY_ID) VALUES
		(
			VARIABLES.primayKey,VARIABLES.IF_TYPE_ID,VARIABLES.IF_DESC,VARIABLES.IF_CAUSE,VARIABLES.IF_REMARK,
			VARIABLES.IF_CONSEQUENCE_ID, VARIABLES.IF_EQUIP_SUB_TYPE_ID, VARIABLES.IF_EQUIP_DESC, VARIABLES.EQUIP_INSTALL_DATE_TEMP,
			VARIABLES.START_DATE_TEMP, VARIABLES.END_DATE_TEMP, VARIABLES.IF_RCFA_REQ_IND, VARIABLES.REPORTED_DATE_TEMP,
			VARIABLES.IF_MOC_IND, VARIABLES.IF_RCFA_LOCATION, VARIABLES.MOC_DATE_TEMP, VARIABLES.IF_MOC_REMARK,
			VARIABLES.IF_LINK_MOC_RECORD, VARIABLES.MOC_END_DATE_TEMP, VARIABLES.NOW_TEMP, VARIABLES.SP_USER,
			'Y', 'DSWIM',VARIABLES.ENTITY_ID
		);
	END

	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_BARRIER_TEST_FREQUENCY (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_BARRIER_TEST_FREQUENCY.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_BARRIER_TEST_FREQUENCY.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.BET_FREQ_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BET_FREQ_ID');
	DECLARE string VARIABLES.TEST_TYPE_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_TEST_TYPE_ID');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE string VARIABLES.ROW_CHANGED_DATE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ROW_CHANGED_DATE');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK');
	DECLARE string VARIABLES.FREQUENCY_INTERVAL = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BET_FREQ_INTERVAL');

	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');

	DECLARE BIGDECIMAL VARIABLES.Frequency_Interval_Decimal = null;
	IF(VARIABLES.FREQUENCY_INTERVAL IS NOT NULL)
	BEGIN
		VARIABLES.Frequency_Interval_Decimal = CONVERT(VARIABLES.FREQUENCY_INTERVAL, BIGDECIMAL);
	END
	DECLARE varchar VARIABLES.primaryKey = (SELECT UUID());
	IF(VARIABLES.BET_FREQ_ID IS NULL OR VARIABLES.BET_FREQ_ID = '')
	BEGIN
		IF((SELECT COUNT(1) FROM PDMExtSrc.BE_TEST_FREQUENCY WHERE (PDMExtSrc.BE_TEST_FREQUENCY.ENTITY_ID = VARIABLES.ENTITY_ID) 
			AND (PDMExtSrc.BE_TEST_FREQUENCY.BE_TEST_TYPE_ID = VARIABLES.TEST_TYPE_ID) AND (PDMExtSrc.BE_TEST_FREQUENCY.ACTIVE_IND = 'Y')) = 0)
		BEGIN			
			INSERT INTO PDMExtSrc.BE_TEST_FREQUENCY (PDMExtSrc.BE_TEST_FREQUENCY.BE_TEST_FREQUENCY_ID, PDMExtSrc.BE_TEST_FREQUENCY.ENTITY_ID,
			PDMExtSrc.BE_TEST_FREQUENCY.BE_TEST_TYPE_ID, PDMExtSrc.BE_TEST_FREQUENCY.ACTIVE_IND, 
			PDMExtSrc.BE_TEST_FREQUENCY.BE_TEST_FREQUENCY, PDMExtSrc.BE_TEST_FREQUENCY.FREQUENCY_UOM, 
			PDMExtSrc.BE_TEST_FREQUENCY.REMARKS, PDMExtSrc.BE_TEST_FREQUENCY.SOURCE_NAME, 
			PDMExtSrc.BE_TEST_FREQUENCY.ROW_CREATED_BY, PDMExtSrc.BE_TEST_FREQUENCY.ROW_CREATED_DATE) VALUES (VARIABLES.primaryKey, 
			VARIABLES.ENTITY_ID, VARIABLES.TEST_TYPE_ID, 'Y', VARIABLES.Frequency_Interval_Decimal, 'Months', VARIABLES.REMARK, 'DSWIM',
			VARIABLES.SP_USER, VARIABLES.now);
			
			DECLARE varchar VARIABLES.INSERTED_BET_AUD_FREQ_ID = (SELECT UUID());
			INSERT INTO PDMExtSrc.BE_TEST_FREQ_AUDIT (PDMExtSrc.BE_TEST_FREQ_AUDIT.BE_TEST_FREQ_AUD_ID,
			PDMExtSrc.BE_TEST_FREQ_AUDIT.BE_TEST_FREQUENCY_ID, PDMExtSrc.BE_TEST_FREQ_AUDIT.ENTITY_ID,
			PDMExtSrc.BE_TEST_FREQ_AUDIT.BE_TEST_TYPE_ID, PDMExtSrc.BE_TEST_FREQ_AUDIT.ACTIVE_IND, 
			PDMExtSrc.BE_TEST_FREQ_AUDIT.BE_TEST_FREQUENCY, PDMExtSrc.BE_TEST_FREQ_AUDIT.FREQUENCY_UOM, 
			PDMExtSrc.BE_TEST_FREQ_AUDIT.REMARKS, PDMExtSrc.BE_TEST_FREQ_AUDIT.SOURCE_NAME, 
			PDMExtSrc.BE_TEST_FREQ_AUDIT.ROW_CREATED_BY, PDMExtSrc.BE_TEST_FREQ_AUDIT.ROW_CREATED_DATE) VALUES (VARIABLES.INSERTED_BET_AUD_FREQ_ID,
			VARIABLES.primaryKey, 
			VARIABLES.ENTITY_ID, VARIABLES.TEST_TYPE_ID, 'Y', VARIABLES.Frequency_Interval_Decimal, 'Months', VARIABLES.REMARK, 'DSWIM',
			VARIABLES.SP_USER, VARIABLES.now);
			
			SELECT 'Success' AS OP;
		END
		ELSE
		BEGIN
			SELECT 'A Frequency for the Test Type already exists.' AS OP;
		END
	END
	ELSE
	BEGIN
		IF((SELECT COUNT(1) FROM PDMExtSrc.BE_TEST_FREQUENCY WHERE (PDMExtSrc.BE_TEST_FREQUENCY.ENTITY_ID = VARIABLES.ENTITY_ID) 
		AND (PDMExtSrc.BE_TEST_FREQUENCY.BE_TEST_TYPE_ID = VARIABLES.TEST_TYPE_ID) 
		AND (PDMExtSrc.BE_TEST_FREQUENCY.BE_TEST_FREQUENCY_ID <> VARIABLES.BET_FREQ_ID) AND (PDMExtSrc.BE_TEST_FREQUENCY.ACTIVE_IND = 'Y')) = 0)
		BEGIN
			UPDATE PDMExtSrc.BE_TEST_FREQUENCY SET REMARKS = VARIABLES.REMARK, BE_TEST_TYPE_ID = VARIABLES.TEST_TYPE_ID, ROW_CHANGED_BY = VARIABLES.SP_USER, 
			ROW_CHANGED_DATE = VARIABLES.now, BE_TEST_FREQUENCY = VARIABLES.Frequency_Interval_Decimal 
			WHERE BE_TEST_FREQUENCY_ID = VARIABLES.BET_FREQ_ID;	
			
			INSERT INTO PDMExtSrc.BE_TEST_FREQ_AUDIT (PDMExtSrc.BE_TEST_FREQ_AUDIT.BE_TEST_FREQ_AUD_ID,
			PDMExtSrc.BE_TEST_FREQ_AUDIT.BE_TEST_FREQUENCY_ID, PDMExtSrc.BE_TEST_FREQ_AUDIT.ENTITY_ID,
			PDMExtSrc.BE_TEST_FREQ_AUDIT.BE_TEST_TYPE_ID, PDMExtSrc.BE_TEST_FREQ_AUDIT.ACTIVE_IND, 
			PDMExtSrc.BE_TEST_FREQ_AUDIT.BE_TEST_FREQUENCY, PDMExtSrc.BE_TEST_FREQ_AUDIT.FREQUENCY_UOM, 
			PDMExtSrc.BE_TEST_FREQ_AUDIT.REMARKS, PDMExtSrc.BE_TEST_FREQ_AUDIT.SOURCE_NAME, 
			PDMExtSrc.BE_TEST_FREQ_AUDIT.ROW_CREATED_BY, PDMExtSrc.BE_TEST_FREQ_AUDIT.ROW_CREATED_DATE) VALUES (VARIABLES.primaryKey,
			VARIABLES.BET_FREQ_ID, 
			VARIABLES.ENTITY_ID, VARIABLES.TEST_TYPE_ID, 'Y', VARIABLES.Frequency_Interval_Decimal, 'Months', VARIABLES.REMARK, 'DSWIM',
			VARIABLES.SP_USER, VARIABLES.now);	
			SELECT 'Success' AS OP;
		END
		ELSE
		BEGIN
			SELECT 'A Frequency for the Test Type already exists.' AS OP;
		END
	END
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_BARRIER_TEST_HISTORY (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_BARRIER_TEST_HISTORY.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_BARRIER_TEST_HISTORY.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	SELECT * INTO #tempdocXML FROM (SELECT * FROM XMLTABLE('/Parameters/DOCUMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS DOCUMENT_TITLE string PATH '@WPH_DOC_TITLE', SOURCE_DOCUMENT string PATH '@WPH_DOC_PATH', DOCUMENT_TYPE string PATH '@WPH_DOC_TYPE') AS Y) AS y;
	
	SELECT * INTO #tempDeleteDocXML FROM (SELECT * FROM XMLTABLE('/Parameters/DELETEDDOCUMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS SOURCE_DOCUMENT_ID varchar PATH '@SOURCE_DOCUMENT_ID', DOCUMENT_TITLE string PATH '@WPH_DOC_TITLE', SOURCE_DOCUMENT string PATH '@WPH_DOC_PATH') AS Y) AS z;
	SELECT * INTO #tempEditDocXML FROM (SELECT * FROM XMLTABLE('/Parameters/EDITDOCUMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS SOURCE_DOCUMENT_ID varchar PATH '@WPH_DOC_ID', DOCUMENT_TITLE string PATH '@WPH_DOC_TITLE', SOURCE_DOCUMENT string PATH '@WPH_DOC_PATH') AS Y) AS z;
	
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE string VARIABLES.NEXT_TEST_DATE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_NEXT_TEST_DATE');
	DECLARE string VARIABLES.BE_TEST_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_TEST_ID');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_REMARK');
	DECLARE string VARIABLES.RESET_IND = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_RESET_FREQ_STATUS');
	DECLARE string VARIABLES.TEST_DATE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_TEST_DATE');
	DECLARE string VARIABLES.TEST_RESULT_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_TEST_RESULT_ID');
	DECLARE string VARIABLES.TEST_TYPE_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_TEST_TYPE_ID');
	DECLARE string VARIABLES.BE_PRESSURE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_PRESSURE');
	
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.Next_Test_Date_Timestamp = null;
	DECLARE TIMESTAMP VARIABLES.Test_Date_Timestamp = null;
	DECLARE BIGDECIMAL VARIABLES.BE_Pressure_Decimal = null;
	DECLARE TIMESTAMP VARIABLES.NOW_DATE = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');

	IF(VARIABLES.NEXT_TEST_DATE IS NOT NULL)
	BEGIN
		VARIABLES.Next_Test_Date_Timestamp = parsetimestamp(VARIABLES.NEXT_TEST_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	IF(VARIABLES.TEST_DATE IS NOT NULL)
	BEGIN
		VARIABLES.Test_Date_Timestamp = parsetimestamp(VARIABLES.TEST_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	IF(VARIABLES.BE_PRESSURE IS NOT NULL)
	BEGIN
		VARIABLES.BE_Pressure_Decimal = CONVERT(VARIABLES.BE_PRESSURE, BIGDECIMAL);
	END
	
	DECLARE string VARIABLES.BE_TEST_FREQ_ID = (SELECT BE_TEST_FREQUENCY_ID FROM PDMExtSrc.BE_TEST_FREQUENCY WHERE BE_TEST_TYPE_ID = VARIABLES.TEST_TYPE_ID LIMIT 1);
	
	IF(VARIABLES.BE_TEST_ID IS NULL)
	BEGIN
		VARIABLES.BE_TEST_ID = (SELECT UUID());

		INSERT INTO PDMExtSrc.BE_ENV_TEST (PDMExtSrc.BE_ENV_TEST.BE_TEST_ID, PDMExtSrc.BE_ENV_TEST.ENTITY_ID,PDMExtSrc.BE_ENV_TEST.ACTIVE_IND, 
		PDMExtSrc.BE_ENV_TEST.TEST_DATE, PDMExtSrc.BE_ENV_TEST.TEST_RESULT_ID, PDMExtSrc.BE_ENV_TEST.TEST_PRESSURE, 
		PDMExtSrc.BE_ENV_TEST.TEST_PRESS_UOM, PDMExtSrc.BE_ENV_TEST.ROW_CREATED_BY, PDMExtSrc.BE_ENV_TEST.ROW_CREATED_DATE, 
		PDMExtSrc.BE_ENV_TEST.RESET_IND, 
		PDMExtSrc.BE_ENV_TEST.TEST_TYPE_ID, 
		PDMExtSrc.BE_ENV_TEST.BE_TEST_FREQ_ID, 
		PDMExtSrc.BE_ENV_TEST.REMARKS, PDMExtSrc.BE_ENV_TEST.SOURCE_NAME) VALUES (VARIABLES.BE_TEST_ID, 
		VARIABLES.ENTITY_ID, 'Y', VARIABLES.Test_Date_Timestamp, 
		VARIABLES.TEST_RESULT_ID, VARIABLES.BE_Pressure_Decimal, 'psi', VARIABLES.SP_USER, VARIABLES.now, 
		VARIABLES.RESET_IND, VARIABLES.TEST_TYPE_ID, VARIABLES.BE_TEST_FREQ_ID,
		VARIABLES.REMARK, 'DSWIM');
		
		LOOP ON (SELECT #tempdocXML.SOURCE_DOCUMENT,#tempdocXML.DOCUMENT_TITLE,#tempDocXML.DOCUMENT_TYPE FROM #tempdocXML) AS barDocCursor
		BEGIN
		DECLARE varchar VARIABLES.BarDOCIDVal = (SELECT UUID());
		IF((SELECT COUNT(1) FROM PDMExtSrc.SOURCE_DOCUMENT WHERE PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID = VARIABLES.BE_TEST_ID) > 0)
		BEGIN
			UPDATE PDMExtSrc.SOURCE_DOCUMENT SET  
			PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_BY = VARIABLES.SP_USER, PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_DATE = VARIABLES.now,
			PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT = barDocCursor.SOURCE_DOCUMENT,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH = barDocCursor.SOURCE_DOCUMENT	,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TITLE = barDocCursor.DOCUMENT_TITLE
			WHERE 
			PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID= VARIABLES.BE_TEST_ID;			
		END
		ELSE
		BEGIN
			INSERT INTO PDMExtSrc.SOURCE_DOCUMENT (PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID, PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT,PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID, PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND,  PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TYPE,
			PDMExtSrc.SOURCE_DOCUMENT.SOURCE_NAME, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_BY, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_DATE, DOC_CATEGORY,DOC_SUB_CATEGORY,
			ENTITY_ID,PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH,PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TITLE)
			VALUES (VARIABLES.BarDOCIDVal, barDocCursor.SOURCE_DOCUMENT,VARIABLES.BE_TEST_ID, 'Y', 'attachment', 'DSWIM', VARIABLES.SP_USER, VARIABLES.now,'Well Files','WellBarrier',
			VARIABLES.ENTITY_ID,barDocCursor.SOURCE_DOCUMENT,barDocCursor.DOCUMENT_TITLE);
		END
		END
	END
	ELSE
	BEGIN
		UPDATE PDMExtSrc.BE_ENV_TEST SET REMARKS = VARIABLES.REMARK, ENTITY_ID = VARIABLES.ENTITY_ID, ROW_CHANGED_BY = VARIABLES.SP_USER, 
		ROW_CHANGED_DATE = VARIABLES.now, TEST_PRESSURE = VARIABLES.BE_Pressure_Decimal, TEST_DATE = VARIABLES.Test_Date_Timestamp, 
		BE_TEST_FREQ_ID = VARIABLES.BE_TEST_FREQ_ID, 
		TEST_TYPE_ID = VARIABLES.TEST_TYPE_ID,
		TEST_RESULT_ID = VARIABLES.TEST_RESULT_ID, RESET_IND = VARIABLES.RESET_IND, 
		SOURCE_NAME = 'DSWIM' WHERE PDMExtSrc.BE_ENV_TEST.BE_TEST_ID = VARIABLES.BE_TEST_ID;
		
		LOOP ON (SELECT #tempdocXML.SOURCE_DOCUMENT,#tempdocXML.DOCUMENT_TITLE,#tempDocXML.DOCUMENT_TYPE FROM #tempdocXML) AS barDocCursor
		BEGIN
		DECLARE varchar VARIABLES.BarDOCIDVal = (SELECT UUID());
		IF((SELECT COUNT(1) FROM PDMExtSrc.SOURCE_DOCUMENT WHERE PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID = VARIABLES.BE_TEST_ID) > 0)
		BEGIN
			UPDATE PDMExtSrc.SOURCE_DOCUMENT SET  
			PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_BY = VARIABLES.SP_USER, PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_DATE = VARIABLES.now,
			PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT = barDocCursor.SOURCE_DOCUMENT,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH = barDocCursor.SOURCE_DOCUMENT,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TITLE = barDocCursor.DOCUMENT_TITLE			
			WHERE 
			PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID= VARIABLES.BE_TEST_ID;			
		END
		ELSE
		BEGIN
			INSERT INTO PDMExtSrc.SOURCE_DOCUMENT (PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID, PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT,PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID, PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND,  PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TYPE,
			PDMExtSrc.SOURCE_DOCUMENT.SOURCE_NAME, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_BY, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_DATE, DOC_CATEGORY,DOC_SUB_CATEGORY,
			ENTITY_ID,PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH,PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TITLE)
			VALUES (VARIABLES.BarDOCIDVal, barDocCursor.SOURCE_DOCUMENT,VARIABLES.BE_TEST_ID, 'Y', 'attachment', 'DSWIM', VARIABLES.SP_USER, VARIABLES.now,'Well Files','WellBarrier',
			VARIABLES.ENTITY_ID,barDocCursor.SOURCE_DOCUMENT,barDocCursor.DOCUMENT_TITLE);
		END
		END
	END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_WELLHEAD_NOTES (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_WELLHEAD_NOTES.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_WELLHEAD_NOTES.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.TREE_WH_NOTE_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'TREE_WH_NOTE_ID');
	DECLARE string VARIABLES.WELL_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.ROW_CHANGED_DATE = (SELECT #tempXML.ValueRes FROM #tempXML WHERE #tempXML.Name = 'ROW_CHANGED_DATE');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.Changed_date = parsetimestamp(VARIABLES.ROW_CHANGED_DATE, 'MM/dd/yyyy HH:mm:ss');
	DECLARE string VARIABLES.IDVal = (SELECT UUID());
	IF(VARIABLES.TREE_WH_NOTE_ID IS NULL)
	BEGIN
		INSERT INTO PDMExtSrc.WELL_REMARK (PDMExtSrc.WELL_REMARK.WELL_REMARK_ID, PDMExtSrc.WELL_REMARK.WELL_ID, PDMExtSrc.WELL_REMARK.REMARKS, PDMExtSrc.WELL_REMARK.ACTIVE_IND, PDMExtSrc.WELL_REMARK.REMARK_TYPE_ID, PDMExtSrc.WELL_REMARK.ROW_CREATED_BY, 
		PDMExtSrc.WELL_REMARK.ROW_CREATED_DATE, PDMExtSrc.WELL_REMARK.REMARK_DATE) VALUES (VARIABLES.IDVal, VARIABLES.WELL_ID, VARIABLES.REMARK, 'Y',
		(SELECT PDMExtSrc.R_REMARK_TYPE.R_REMARK_TYPE_ID FROM PDMExtSrc.R_REMARK_TYPE WHERE PDMExtSrc.R_REMARK_TYPE.R_REMARK_TYPE = 'Wellhead Notes'), VARIABLES.SP_USER, VARIABLES.Changed_date, VARIABLES.Changed_date);
	END
	ELSE
	BEGIN
		UPDATE PDMExtSrc.WELL_REMARK SET REMARKS = VARIABLES.REMARK, ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.Changed_date, REMARK_DATE = VARIABLES.Changed_date
		WHERE PDMExtSrc.WELL_REMARK.WELL_REMARK_ID = VARIABLES.TREE_WH_NOTE_ID;
	END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_WELL_INTEGRITY_COMMENTS (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_WELL_INTEGRITY_COMMENTS.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_WELL_INTEGRITY_COMMENTS.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.WI_COMMENTS_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WI_COMMENTS_ID');
	DECLARE string VARIABLES.WELL_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.REMARK_DATE = (SELECT #tempXML.ValueRes FROM #tempXML WHERE #tempXML.Name = 'REMARK_DATE');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK');
	DECLARE string VARIABLES.DISPLAY_IND = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) THEN (CASE WHEN #tempXML.ValueRes = 'Y' THEN 'N' ELSE 'Y' END) ELSE NULL END FROM #tempXML WHERE #tempXML.Name = 'HIDE_IND');
	DECLARE string VARIABLES.ANNOTATION_IND = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANNOTATION_IND');
	DECLARE TIMESTAMP VARIABLES.Remark_Date_Timestamp = parsetimestamp(VARIABLES.REMARK_DATE, 'MM/dd/yyyy HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.IDVal = (SELECT UUID());
	IF(VARIABLES.WI_COMMENTS_ID IS NULL)
	BEGIN
		DECLARE string VARIABLES.REMARK_TYPE_ID;
		VARIABLES.REMARK_TYPE_ID = (SELECT PDMExtSrc.R_REMARK_TYPE.R_REMARK_TYPE_ID FROM PDMExtSrc.R_REMARK_TYPE WHERE PDMExtSrc.R_REMARK_TYPE.R_REMARK_TYPE = 'Well Integrity Comments');
		INSERT INTO PDMExtSrc.WELL_REMARK (PDMExtSrc.WELL_REMARK.WELL_REMARK_ID, PDMExtSrc.WELL_REMARK.WELL_ID, PDMExtSrc.WELL_REMARK.REMARK_DATE, PDMExtSrc.WELL_REMARK.REMARKS, PDMExtSrc.WELL_REMARK.ACTIVE_IND, 
		PDMExtSrc.WELL_REMARK.DISPLAY_IND,
		PDMExtSrc.WELL_REMARK.ANNOTATION_IND, 
		PDMExtSrc.WELL_REMARK.REMARK_TYPE_ID, PDMExtSrc.WELL_REMARK.ROW_CREATED_BY, PDMExtSrc.WELL_REMARK.ROW_CREATED_DATE)
		VALUES (VARIABLES.IDVal, VARIABLES.WELL_ID, VARIABLES.Remark_Date_Timestamp, VARIABLES.REMARK,'Y', VARIABLES.DISPLAY_IND, VARIABLES.ANNOTATION_IND, VARIABLES.REMARK_TYPE_ID, VARIABLES.SP_USER, VARIABLES.now);
	END
	ELSE
	BEGIN
		UPDATE PDMExtSrc.WELL_REMARK SET REMARK_DATE = VARIABLES.Remark_Date_Timestamp, ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.now, REMARKS = VARIABLES.REMARK, DISPLAY_IND = VARIABLES.DISPLAY_IND, 
		ANNOTATION_IND = VARIABLES.ANNOTATION_IND WHERE PDMExtSrc.WELL_REMARK.WELL_REMARK_ID = VARIABLES.WI_COMMENTS_ID;
	END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_TREE_NOTES (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_TREE_NOTES.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_TREE_NOTES.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.TREE_WH_NOTE_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'TREE_WH_NOTE_ID');
	DECLARE string VARIABLES.WELL_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.ROW_CHANGED_DATE = (SELECT #tempXML.ValueRes FROM #tempXML WHERE #tempXML.Name = 'ROW_CHANGED_DATE');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE varchar VARIABLES.IDVal = (SELECT UUID());
	DECLARE TIMESTAMP VARIABLES.Row_Changed_Date_Timestamp = null;
	IF(VARIABLES.ROW_CHANGED_DATE IS NOT NULL)
	BEGIN
		VARIABLES.Row_Changed_Date_Timestamp = parsetimestamp(VARIABLES.ROW_CHANGED_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	IF(VARIABLES.TREE_WH_NOTE_ID IS NULL)
	BEGIN
		DECLARE string VARIABLES.REMARK_TYPE_ID;
		VARIABLES.REMARK_TYPE_ID = (SELECT PDMExtSrc.R_REMARK_TYPE.R_REMARK_TYPE_ID FROM PDMExtSrc.R_REMARK_TYPE WHERE PDMExtSrc.R_REMARK_TYPE.R_REMARK_TYPE = 'Tree Notes');
		INSERT INTO PDMExtSrc.WELL_REMARK (PDMExtSrc.WELL_REMARK.WELL_REMARK_ID, PDMExtSrc.WELL_REMARK.WELL_ID, PDMExtSrc.WELL_REMARK.REMARKS, PDMExtSrc.WELL_REMARK.ACTIVE_IND, PDMExtSrc.WELL_REMARK.REMARK_TYPE_ID, PDMExtSrc.WELL_REMARK.ROW_CREATED_BY, 
		PDMExtSrc.WELL_REMARK.ROW_CREATED_DATE, PDMExtSrc.WELL_REMARK.ROW_CHANGED_BY, PDMExtSrc.WELL_REMARK.ROW_CHANGED_DATE, PDMExtSrc.WELL_REMARK.REMARK_DATE) VALUES (VARIABLES.IDVal, VARIABLES.WELL_ID, VARIABLES.REMARK, 'Y',
		VARIABLES.REMARK_TYPE_ID, VARIABLES.SP_USER, VARIABLES.Row_Changed_Date_Timestamp, VARIABLES.SP_USER, VARIABLES.Row_Changed_Date_Timestamp, VARIABLES.Row_Changed_Date_Timestamp);
	END
	ELSE
	BEGIN
		UPDATE PDMExtSrc.WELL_REMARK SET REMARKS = VARIABLES.REMARK, ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.Row_Changed_Date_Timestamp, REMARK_DATE = VARIABLES.Row_Changed_Date_Timestamp 
		WHERE PDMExtSrc.WELL_REMARK.WELL_REMARK_ID = VARIABLES.TREE_WH_NOTE_ID;
	END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_PRESSURE_MGMT_EVENT (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(4000) OPTIONS(NATIVE_TYPE 'string', CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_PRESSURE_MGMT_EVENT.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_PRESSURE_MGMT_EVENT.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/INCIDENT/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.entity_id = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.pm_event_id = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PM_EVENT_ID');
	DECLARE string VARIABLES.pm_event_type_id = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PM_EVENT_TYPE_ID');
	DECLARE string VARIABLES.event_date = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PM_EVENT_DATE');
	DECLARE string VARIABLES.equipment_id = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANNULUS_ID');
	DECLARE biginteger VARIABLES.event_duration = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN CONVERT(#tempXML.ValueRes, biginteger) ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PM_EVENT_DURATION');
	DECLARE string VARIABLES.operator_name = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'OPERATOR_NAME');
	DECLARE string VARIABLES.remark = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PM_EVENT_REMARK');
	DECLARE string VARIABLES.rec_ind = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PM_EVENT_REC_CHART_IND');
	DECLARE string VARIABLES.volume = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PM_EVENT_VOLUME');
	DECLARE string VARIABLES.sample_ind = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SAMPLE_TAKEN_IND');
	DECLARE string VARIABLES.fluid_gravity = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'FLUID_GRAVITY');
	DECLARE string VARIABLES.fluid_other = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'FLUID_OTHER');
	DECLARE string VARIABLES.sp_user = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.Event_Date_Timestamp = null;
	DECLARE BIGDECIMAL VARIABLES.Event_Duration_Decimal = null;
	DECLARE BIGDECIMAL VARIABLES.Event_Volume_Decimal = null;
	DECLARE BIGDECIMAL VARIABLES.Fluid_Gravity_Decimal = null;
	DECLARE string VARIABLES.eq_measurement_id = null;
	DECLARE string VARIABLES.pm_event_sample_id = null;
	
	IF(VARIABLES.event_date IS NOT NULL)
	BEGIN
		VARIABLES.Event_Date_Timestamp = parsetimestamp(VARIABLES.event_date, 'MM/dd/yyyy HH:mm:ss');
	END
	IF(VARIABLES.event_duration IS NOT NULL AND VARIABLES.event_duration <> '')
	BEGIN
		VARIABLES.Event_Duration_Decimal = CONVERT(VARIABLES.event_duration, BIGDECIMAL);
	END
	IF(VARIABLES.volume IS NOT NULL AND VARIABLES.volume <> '')
	BEGIN
		VARIABLES.Event_Volume_Decimal = CONVERT(VARIABLES.volume, BIGDECIMAL);
	END
	IF(VARIABLES.fluid_gravity IS NOT NULL AND VARIABLES.fluid_gravity <> '')
	BEGIN
		VARIABLES.Fluid_Gravity_Decimal = CONVERT(VARIABLES.fluid_gravity, BIGDECIMAL);
	END	

	IF((VARIABLES.pm_event_id IS NULL) OR (VARIABLES.pm_event_id = ''))
	BEGIN
		VARIABLES.pm_event_id = (SELECT UUID());
		
		INSERT INTO PDMExtSrc.PM_EVENT (PM_EVENT_ID, R_PM_EVENT_TYPE_ID, EQUIPMENT_ID, EVENT_DURATION, EVENT_DURATION_UOM,
		VOLUME, VOLUME_UOM, SAMPLE_IND, OPERATOR_NAME, RECORD_IND, REMARK, FLUID_GRAVITY, FLUID_OTHER, ACTIVE_IND,
		SOURCE_NAME, ROW_CREATED_DATE, ROW_CREATED_BY, ENTITY_ID, EVENT_DATE) VALUES (VARIABLES.pm_event_id, 
		VARIABLES.pm_event_type_id, VARIABLES.equipment_id, VARIABLES.Event_Duration_Decimal, 'min', VARIABLES.Event_Volume_Decimal, 'bbl', VARIABLES.sample_ind, VARIABLES.operator_name, VARIABLES.rec_ind, VARIABLES.remark, VARIABLES.Fluid_Gravity_Decimal,VARIABLES.fluid_other, 
		'Y','DSWIM',  VARIABLES.now, VARIABLES.sp_user, VARIABLES.entity_id, VARIABLES.Event_Date_Timestamp);

		LOOP ON (SELECT parsetimestamp(X.MEASUREMENT_DATE, 'MM/dd/yyyy HH:mm:ss') AS MEASUREMENT_DATE, CASE WHEN (X.DATA_VALUE IS NOT NULL) AND (X.DATA_VALUE <> '') THEN CONVERT(X.DATA_VALUE, BIGDECIMAL) ELSE null END AS MEASUREMENT, X.PM_EVENT_MEAS_POINT_ID, X.EQUIPMENT_ID FROM XMLTABLE('/Parameters/MEASUREMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS MEASUREMENT_DATE string PATH '@MEASUREMENT_DATE', PM_EVENT_MEAS_POINT_ID string PATH '@PM_EVENT_MEAS_POINT_ID', EQUIPMENT_ID string PATH '@EQUIPMENT_ID', DATA_VALUE string PATH '@PM_EVENT_MEASUREMENT') AS X WHERE (X.DATA_VALUE <> '') AND (NOT (EXISTS (SELECT * FROM PDMExtSrc.EQ_MEASUREMENT AS pm WHERE (pm.EQUIPMENT_ID = X.EQUIPMENT_ID) AND (pm.R_MEASUREMENT_POINT_ID = X.PM_EVENT_MEAS_POINT_ID) AND (parsetimestamp(pm.MEASUREMENT_DATE, 'yyyy-MM-dd HH:mm:ss') = parsetimestamp(X.MEASUREMENT_DATE, 'MM/dd/yyyy HH:mm:ss')))))) AS curPM4
		BEGIN
			VARIABLES.eq_measurement_id = (SELECT UUID());
			INSERT INTO PDMExtSrc.EQ_MEASUREMENT (EQ_MEASUREMENT_ID, ACTIVE_IND, SOURCE_NAME, ROW_CREATED_BY, ROW_CREATED_DATE, MEASUREMENT_DATE, MEASUREMENT_VALUE, R_MEASUREMENT_POINT_ID, EQUIPMENT_ID, ENTITY_ID, OBJECT_ID) VALUES (VARIABLES.eq_measurement_id, 'Y', 'DSWIM', VARIABLES.sp_user, VARIABLES.now, curPM4.MEASUREMENT_DATE, curPM4.MEASUREMENT, curPM4.PM_EVENT_MEAS_POINT_ID, curPM4.EQUIPMENT_ID, VARIABLES.entity_id, VARIABLES.pm_event_id);
		END
		
		LOOP ON (SELECT SGA.R_SAMPLE_FLUID_ID FROM XMLTABLE('/Parameters/FLUID_GRAVITY/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS R_SAMPLE_FLUID_ID STRING PATH '@R_SAMPLE_FLUID_ID') AS SGA) AS curFluid
			BEGIN
				IF(curFluid.R_SAMPLE_FLUID_ID IS NOT NULL AND curFluid.R_SAMPLE_FLUID_ID <> '')
				BEGIN
				VARIABLES.pm_event_sample_id = (SELECT UUID());
			INSERT INTO PDMExtSrc.PM_EVENT_SAMPLE (PM_EVENT_SAMPLE_ID, SOURCE_NAME, ACTIVE_IND, R_SAMPLE_FLUID_ID,
	ROW_CREATED_BY, ROW_CREATED_DATE, PM_EVENT_ID) VALUES (VARIABLES.pm_event_sample_id, 'DSWIM', 'Y', curFluid.R_SAMPLE_FLUID_ID,  VARIABLES.sp_user, VARIABLES.now, VARIABLES.pm_event_id);
				END
			END
	END
	ELSE
	BEGIN
		UPDATE PDMExtSrc.PM_EVENT SET R_PM_EVENT_TYPE_ID = VARIABLES.pm_event_type_id, EVENT_DATE = VARIABLES.Event_Date_Timestamp, EVENT_DURATION = VARIABLES.Event_Duration_Decimal, VOLUME = VARIABLES.Event_Volume_Decimal, SAMPLE_IND = VARIABLES.sample_ind, OPERATOR_NAME = VARIABLES.operator_name, FLUID_GRAVITY = VARIABLES.Fluid_Gravity_Decimal, FLUID_OTHER = VARIABLES.fluid_other, REMARK = VARIABLES.remark, RECORD_IND = VARIABLES.rec_ind, ROW_CHANGED_BY = VARIABLES.sp_user, ROW_CHANGED_DATE = VARIABLES.now, EQUIPMENT_ID = VARIABLES.equipment_id WHERE PM_EVENT_ID = VARIABLES.pm_event_id;
		
		DELETE FROM PDMExtSrc.EQ_MEASUREMENT WHERE OBJECT_ID = VARIABLES.pm_event_id;
		
		LOOP ON (SELECT parsetimestamp(X.MEASUREMENT_DATE, 'MM/dd/yyyy HH:mm:ss') AS MEASUREMENT_DATE, CASE WHEN (X.DATA_VALUE IS NOT NULL) AND (X.DATA_VALUE <> '') THEN CONVERT(X.DATA_VALUE, BIGDECIMAL) ELSE null END AS MEASUREMENT, X.PM_EVENT_MEAS_POINT_ID, X.EQUIPMENT_ID FROM XMLTABLE('/Parameters/MEASUREMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS MEASUREMENT_DATE string PATH '@MEASUREMENT_DATE', PM_EVENT_MEAS_POINT_ID string PATH '@PM_EVENT_MEAS_POINT_ID', EQUIPMENT_ID string PATH '@EQUIPMENT_ID', DATA_VALUE string PATH '@PM_EVENT_MEASUREMENT') AS X WHERE (X.DATA_VALUE <> '') AND (NOT (EXISTS (SELECT * FROM PDMExtSrc.EQ_MEASUREMENT AS pm WHERE (pm.EQUIPMENT_ID = X.EQUIPMENT_ID) AND (pm.R_MEASUREMENT_POINT_ID = X.PM_EVENT_MEAS_POINT_ID) AND (parsetimestamp(pm.MEASUREMENT_DATE, 'yyyy-MM-dd HH:mm:ss') = parsetimestamp(X.MEASUREMENT_DATE, 'MM/dd/yyyy HH:mm:ss')) AND pm.ACTIVE_IND = 'Y')))) AS curPM5
		BEGIN
			VARIABLES.eq_measurement_id = (SELECT UUID());
			INSERT INTO PDMExtSrc.EQ_MEASUREMENT (EQ_MEASUREMENT_ID, ACTIVE_IND, SOURCE_NAME, ROW_CREATED_BY, ROW_CREATED_DATE, MEASUREMENT_DATE, MEASUREMENT_VALUE, R_MEASUREMENT_POINT_ID, EQUIPMENT_ID, ENTITY_ID, OBJECT_ID) VALUES (VARIABLES.eq_measurement_id, 'Y', 'DSWIM', VARIABLES.sp_user, VARIABLES.now, curPM5.MEASUREMENT_DATE, curPM5.MEASUREMENT, curPM5.PM_EVENT_MEAS_POINT_ID, curPM5.EQUIPMENT_ID, VARIABLES.entity_id, VARIABLES.pm_event_id);			
		END
		
		DELETE FROM PDMExtSrc.PM_EVENT_SAMPLE WHERE PM_EVENT_ID = VARIABLES.pm_event_id;

		LOOP ON (SELECT SGA.R_SAMPLE_FLUID_ID FROM XMLTABLE('/Parameters/FLUID_GRAVITY/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS R_SAMPLE_FLUID_ID STRING PATH '@FLUID_TYPE_ID') AS SGA) AS curFluid
		BEGIN
			IF(curFluid.R_SAMPLE_FLUID_ID IS NOT NULL AND curFluid.R_SAMPLE_FLUID_ID <> '')
			BEGIN
			VARIABLES.pm_event_sample_id = (SELECT UUID());
		INSERT INTO PDMExtSrc.PM_EVENT_SAMPLE (PM_EVENT_SAMPLE_ID, SOURCE_NAME, ACTIVE_IND, R_SAMPLE_FLUID_ID,
ROW_CREATED_BY, ROW_CREATED_DATE, PM_EVENT_ID) VALUES (VARIABLES.pm_event_sample_id, 'DSWIM', 'Y', curFluid.R_SAMPLE_FLUID_ID,  VARIABLES.sp_user, VARIABLES.now, VARIABLES.pm_event_id);
			END
		END
		
	DECLARE string VARIABLES.source_document_id = '';
	SELECT * INTO #tempSrcDocs FROM XMLTABLE('/Parameters/DOCUMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS DOC_PATH STRING PATH '@PE_DOC_PATH', DOC_TITLE STRING PATH '@PE_DOC_TITLE', DOC_TYPE STRING PATH '@PE_DOC_TYPE') AS SRC_DOCS;
	
	IF((SELECT COUNT(1) FROM #tempSrcDocs) > 0)
	BEGIN		
		LOOP ON (SELECT #tempSrcDocs.DOC_PATH, #tempSrcDocs.DOC_TITLE, #tempSrcDocs.DOC_TYPE FROM #tempSrcDocs) AS srcDocsCursor
		BEGIN
			VARIABLES.source_document_id = (SELECT UUID());
			
			INSERT INTO PDMExtSrc.SOURCE_DOCUMENT (PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID, PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT, PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND,  PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TYPE, PDMExtSrc.SOURCE_DOCUMENT.SOURCE_NAME, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_BY, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_DATE, DOC_SUB_CATEGORY, DOC_CATEGORY, ENTITY_ID, REMARKS, PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TITLE, PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID)
		VALUES (VARIABLES.source_document_id, srcDocsCursor.DOC_PATH, 'Y', srcDocsCursor.DOC_TYPE, 'DSWIM', VARIABLES.SP_USER, VARIABLES.now, 'Pressure Incident', 'Pressure Incident', VARIABLES.entity_id,VARIABLES.remark, srcDocsCursor.DOC_TITLE,
		VARIABLES.pm_event_id);
		END
	END
	
	SELECT * INTO #tempDelSrcDocs FROM XMLTABLE('/Parameters/DELETEDDOCUMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS SOURCE_DOCUMENT_ID varchar PATH '@PE_DOC_ID') AS DEL_SRC_DOCS;
	IF((SELECT COUNT(1) FROM #tempDelSrcDocs) > 0)
	BEGIN
		LOOP ON (SELECT #tempDelSrcDocs.SOURCE_DOCUMENT_ID FROM #tempDelSrcDocs) AS delSrcDocsCursor
		BEGIN
			UPDATE PDMExtSrc.SOURCE_DOCUMENT SET ACTIVE_IND = 'N', ROW_CHANGED_DATE = VARIABLES.now, ROW_CHANGED_BY = VARIABLES.sp_user WHERE PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID = delSrcDocsCursor.SOURCE_DOCUMENT_ID;
		END
	END
	
	SELECT * INTO #tempEditDocXML FROM (SELECT * FROM XMLTABLE('/Parameters/EDITDOCUMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS SOURCE_DOCUMENT_ID varchar PATH '@PE_DOC_ID', DOC_TITLE string PATH '@PE_DOC_TITLE', DOC_PATH string PATH '@PE_DOC_PATH') AS Y) AS z;
	IF((SELECT COUNT(1) FROM #tempEditDocXML) > 0)
	BEGIN
		LOOP ON (SELECT #tempEditDocXML.DOC_TITLE, #tempEditDocXML.SOURCE_DOCUMENT_ID, #tempEditDocXML.DOC_PATH FROM #tempEditDocXML) AS curDocuments
		BEGIN
			UPDATE PDMExtSrc.SOURCE_DOCUMENT SET DOCUMENT_TITLE = curDocuments.DOC_TITLE, SOURCE_DOCUMENT = curDocuments.DOC_PATH, ROW_CHANGED_DATE = VARIABLES.now, ROW_CHANGED_BY = VARIABLES.sp_user WHERE SOURCE_DOCUMENT_ID = curDocuments.SOURCE_DOCUMENT_ID;
		END
	END	
	END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_BARRIER_EQUIPMENT (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_BARRIER_EQUIPMENT.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_BARRIER_EQUIPMENT.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.DELETE_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DELETE_IND');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE string VARIABLES.EQUIPMENT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BARRIER_EQUIP_ID');
	DECLARE string VARIABLES.BEQUIP_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BARRIER_EQUIP_NAME');
	DECLARE string VARIABLES.WELL_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.OPERATING_PRESSURE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_OPERATING_PRESSURE');
	DECLARE string VARIABLES.REGULATION = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_REGULATION');
	DECLARE string VARIABLES.SCE_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_SCE_IND');
	DECLARE string VARIABLES.BARRIER_ENVELOPE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BARRIER_ENVELOPE');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_REMARK');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	
	DECLARE BIGDECIMAL VARIABLES.OP_Decimal = null;
	IF((VARIABLES.DELETE_IND IS NOT NULL) AND (VARIABLES.DELETE_IND = 'Y'))
	BEGIN
		SELECT * INTO #tempBARRIER FROM XMLTABLE('/Parameters/BARRIER_EQUIPMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) 
		COLUMNS BARRIER_EQUIP_ID STRING PATH '@BARRIER_EQUIP_ID') AS E;
		
		LOOP ON (SELECT #tempBARRIER.BARRIER_EQUIP_ID FROM #tempBARRIER) AS equip
		BEGIN
			UPDATE PDMExtSrc.BARRIER_EQUIP_INVENTORY SET ACTIVE_IND = 'N',
			ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.now
			WHERE BARRIER_EQUIP_ID = equip.BARRIER_EQUIP_ID;
		END
	END
	ELSE
	BEGIN		
		IF(VARIABLES.OPERATING_PRESSURE IS NOT NULL)
		BEGIN
			VARIABLES.OP_Decimal = CONVERT(VARIABLES.OPERATING_PRESSURE, BIGDECIMAL);
		END	
		IF(VARIABLES.EQUIPMENT_ID IS NOT NULL AND VARIABLES.EQUIPMENT_ID <> '')
			BEGIN
				UPDATE PDMExtSrc.BARRIER_EQUIP_INVENTORY SET PDMExtSrc.BARRIER_EQUIP_INVENTORY.BE_REGULATION = VARIABLES.REGULATION,
				PDMExtSrc.BARRIER_EQUIP_INVENTORY.BE_SCE_IND = VARIABLES.SCE_IND,				
				PDMExtSrc.BARRIER_EQUIP_INVENTORY.BE_OPERATING_PRESSURE = VARIABLES.OP_Decimal,
				PDMExtSrc.BARRIER_EQUIP_INVENTORY.BARRIER_ENVELOPE=VARIABLES.BARRIER_ENVELOPE,				
				PDMExtSrc.BARRIER_EQUIP_INVENTORY.BE_REMARK=VARIABLES.REMARK,PDMExtSrc.BARRIER_EQUIP_INVENTORY.ROW_CHANGED_DATE=VARIABLES.now,
				PDMExtSrc.BARRIER_EQUIP_INVENTORY.ROW_CHANGED_BY=VARIABLES.SP_USER,
				PDMExtSrc.BARRIER_EQUIP_INVENTORY.ACTIVE_IND = 'Y'
				WHERE BARRIER_EQUIP_ID = VARIABLES.EQUIPMENT_ID AND ENTITY_ID = VARIABLES.WELL_ID; --AND ACTIVE_IND = 'Y';
			END
		ELSE
			BEGIN
				IF((SELECT COUNT(1) FROM PDMExtSrc.BARRIER_EQUIP_INVENTORY WHERE
					BARRIER_EQUIP_ID = VARIABLES.BEQUIP_ID AND ENTITY_ID = VARIABLES.WELL_ID) > 0)
				BEGIN
					UPDATE PDMExtSrc.BARRIER_EQUIP_INVENTORY SET PDMExtSrc.BARRIER_EQUIP_INVENTORY.BE_REGULATION = VARIABLES.REGULATION,
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.BE_SCE_IND = VARIABLES.SCE_IND,				
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.BE_OPERATING_PRESSURE = VARIABLES.OP_Decimal,
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.BARRIER_ENVELOPE=VARIABLES.BARRIER_ENVELOPE,				
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.BE_REMARK=VARIABLES.REMARK,PDMExtSrc.BARRIER_EQUIP_INVENTORY.ROW_CHANGED_DATE=VARIABLES.now,
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.ROW_CHANGED_BY=VARIABLES.SP_USER,
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.ACTIVE_IND = 'Y'
					WHERE BARRIER_EQUIP_ID = VARIABLES.BEQUIP_ID AND ENTITY_ID = VARIABLES.WELL_ID;
				END
				ELSE
				BEGIN
					
					INSERT INTO PDMExtSrc.BARRIER_EQUIP_INVENTORY				
					(PDMExtSrc.BARRIER_EQUIP_INVENTORY.ENTITY_ID,PDMExtSrc.BARRIER_EQUIP_INVENTORY.BARRIER_EQUIP_ID,
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.BE_REGULATION,PDMExtSrc.BARRIER_EQUIP_INVENTORY.BE_SCE_IND,
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.BE_OPERATING_PRESSURE,PDMExtSrc.BARRIER_EQUIP_INVENTORY.PRESSURE_UOM,
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.BARRIER_ENVELOPE,				
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.BE_REMARK,PDMExtSrc.BARRIER_EQUIP_INVENTORY.ROW_CREATED_DATE,
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.ROW_CREATED_BY, PDMExtSrc.BARRIER_EQUIP_INVENTORY.ACTIVE_IND, 
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.SOURCE_NAME)
					VALUES 				
					(VARIABLES.WELL_ID,VARIABLES.BEQUIP_ID,VARIABLES.REGULATION ,VARIABLES.SCE_IND,VARIABLES.OP_Decimal ,'psi',
					VARIABLES.BARRIER_ENVELOPE,VARIABLES.REMARK,VARIABLES.now,VARIABLES.SP_USER, 'Y','DSWIM');
				END
			END
		END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_DHSV_EQUIPMENT (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_DHSV_EQUIPMENT.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_DHSV_EQUIPMENT.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	
	DECLARE string VARIABLES.EQUIPMENT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSV_EQUIP_ID');
	DECLARE string VARIABLES.WELL_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');

	DECLARE string VARIABLES.OPERATING_PRESSURE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSVE_OPR_PRESSURE');
	DECLARE string VARIABLES.REGULATION = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSVE_REGULATION');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSVE_REMARK');
	DECLARE string VARIABLES.DHSVE_INSTALL_DATE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSVE_INSTALL_DATE');
	DECLARE string VARIABLES.DHSVE_NIPPLE_PROFILE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSVE_NIPPLE_PROFILE');
	DECLARE string VARIABLES.DHSVE_NIPPLE_SIZE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSVE_NIPPLE_SIZE');
	DECLARE string VARIABLES.DHSV_SER_NUM = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSV_SER_NUM');
	DECLARE string VARIABLES.DHSVE_VALVE_MODEL = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSVE_VALVE_MODEL');
	DECLARE string VARIABLES.DHSVE_VALVE_SIZE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSVE_VALVE_SIZE');
	DECLARE string VARIABLES.ENTITY_NAME = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_NAME');
	DECLARE string VARIABLES.DHSVE_CONTROL_SYS_TYPE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSVE_CONTROL_SYS_TYPE');
	DECLARE string VARIABLES.DHSVE_VALVE_TYPE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSVE_VALVE_TYPE');
	DECLARE string VARIABLES.DHSVE_VALVE_MANUFACTURER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSVE_VALVE_MANUFACTURER');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.INSTALL_DATE = PARSETIMESTAMP(VARIABLES.DHSVE_INSTALL_DATE,'MM/dd/yyyy HH:mm:ss');
	DECLARE BIGDECIMAL VARIABLES.Operating_Pressure_Decimal = null;
	DECLARE BIGDECIMAL VARIABLES.NIPPLE_SIZE = null;
	DECLARE BIGDECIMAL VARIABLES.VALVE_SIZE = null;
	DECLARE string VARIABLES.EQUIP_ID = (SELECT UUID());
	DECLARE string VARIABLES.WELL_EQUIP_ID = (SELECT UUID());
	
	IF((VARIABLES.OPERATING_PRESSURE IS NOT NULL) AND (VARIABLES.OPERATING_PRESSURE <> ''))
	BEGIN
		VARIABLES.Operating_Pressure_Decimal = CONVERT(VARIABLES.OPERATING_PRESSURE, BIGDECIMAL);
	END
	
	IF((VARIABLES.DHSVE_NIPPLE_SIZE IS NOT NULL) AND (VARIABLES.DHSVE_NIPPLE_SIZE <> ''))
	BEGIN
		VARIABLES.NIPPLE_SIZE = CONVERT(VARIABLES.DHSVE_NIPPLE_SIZE, BIGDECIMAL);
	END
	
	IF((VARIABLES.DHSVE_VALVE_SIZE IS NOT NULL) AND (VARIABLES.DHSVE_VALVE_SIZE <> ''))
	BEGIN
		VARIABLES.VALVE_SIZE = CONVERT(VARIABLES.DHSVE_VALVE_SIZE, BIGDECIMAL);
	END
	
	IF(VARIABLES.EQUIPMENT_ID IS NOT NULL AND VARIABLES.EQUIPMENT_ID <> '')
	BEGIN
		UPDATE PDMExtSrc.DHSV_EQUIP_INVENTORY SET DHSVE_OPR_PRESSURE = VARIABLES.Operating_Pressure_Decimal, DHSVE_REGULATION = VARIABLES.REGULATION, DHSVE_REMARK = VARIABLES.REMARK,
		ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.now,DHSVE_VALVE_SIZE= VARIABLES.VALVE_SIZE
		WHERE DHSV_EQUIP_ID = VARIABLES.EQUIPMENT_ID AND ENTITY_ID = VARIABLES.WELL_ID; 
	END
	ELSE
	BEGIN
		
		IF((SELECT COUNT(1) FROM PDMExtSrc.EQUIPMENT WHERE EQUIPMENT_ID = VARIABLES.EQUIPMENT_ID) = 0)
		BEGIN
		INSERT INTO PDMExtSrc.EQUIPMENT(PDMExtSrc.EQUIPMENT.EQUIPMENT_ID,PDMExtSrc.EQUIPMENT.EQUIPMENT_NAME,PDMExtSrc.EQUIPMENT.REMARK,PDMExtSrc.EQUIPMENT.EFFECTIVE_DATE,
		PDMExtSrc.EQUIPMENT.EXPIRY_DATE,PDMExtSrc.EQUIPMENT.SOURCE_NAME,PDMExtSrc.EQUIPMENT.ROW_CREATED_BY,PDMExtSrc.EQUIPMENT.ROW_CREATED_DATE,PDMExtSrc.EQUIPMENT.ACTIVE_IND,PDMExtSrc.EQUIPMENT.TAG_NUMBER) VALUES(VARIABLES.EQUIP_ID,'DHSV'||VARIABLES.DHSV_SER_NUM,VARIABLES.REMARK,
		VARIABLES.INSTALL_DATE,NULL,'DSWIM',VARIABLES.SP_USER,VARIABLES.now,'Y',VARIABLES.DHSV_SER_NUM);
		END 
		ELSE
		BEGIN
		UPDATE PDMExtSrc.EQUIPMENT SET  REMARK = VARIABLES.REMARK,
		ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.now
		WHERE EQUIPMENT_ID = VARIABLES.EQUIPMENT_ID ; 
		END
		
		IF((SELECT COUNT(1) FROM PDMExtSrc.WELL_EQUIPMENT WHERE EQUIPMENT_ID = VARIABLES.EQUIPMENT_ID AND ENTITY_ID= VARIABLES.WELL_ID) = 0)
		BEGIN
		INSERT INTO PDMExtSrc.WELL_EQUIPMENT(PDMExtSrc.WELL_EQUIPMENT.WELL_EQUIPMENT_ID,PDMExtSrc.WELL_EQUIPMENT.EQUIPMENT_ID,PDMExtSrc.WELL_EQUIPMENT.WELL_EQUIP_NAME,PDMExtSrc.WELL_EQUIPMENT.EQUIPMENT_NAME,
		PDMExtSrc.WELL_EQUIPMENT.ACTIVE_IND,PDMExtSrc.WELL_EQUIPMENT.REMARK,PDMExtSrc.WELL_EQUIPMENT.EFFECTIVE_DATE,PDMExtSrc.WELL_EQUIPMENT.EXPIRY_DATE,PDMExtSrc.WELL_EQUIPMENT.SOURCE_NAME,
		PDMExtSrc.WELL_EQUIPMENT.ROW_CREATED_BY,PDMExtSrc.WELL_EQUIPMENT.ROW_CREATED_DATE,PDMExtSrc.WELL_EQUIPMENT.ENTITY_ID,PDMExtSrc.WELL_EQUIPMENT.ENTITY_NAME) 
		VALUES(VARIABLES.WELL_EQUIP_ID,VARIABLES.EQUIP_ID,'DHSV'||VARIABLES.DHSV_SER_NUM,'DHSV'||VARIABLES.DHSV_SER_NUM,'Y',VARIABLES.REMARK,VARIABLES.INSTALL_DATE,NULL,'DSWIM',VARIABLES.SP_USER,VARIABLES.now,VARIABLES.WELL_ID,VARIABLES.ENTITY_NAME);
		END
		ELSE
		BEGIN
		UPDATE PDMExtSrc.WELL_EQUIPMENT SET 
		ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.now
		WHERE EQUIPMENT_ID = VARIABLES.EQUIPMENT_ID AND ENTITY_ID = VARIABLES.WELL_ID; 
		END
		
		INSERT INTO PDMExtSrc.DHSV_EQUIP_INVENTORY (PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSV_EQUIP_ID,PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSVE_INSTALL_DATE,PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSVE_NIPPLE_PROFILE,
		PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSVE_NIPPLE_SIZE,PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSVE_VALVE_MANUFACTURER,PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSVE_CONTROL_SYS_TYPE
		,PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSVE_VALVE_TYPE,PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSVE_VALVE_SIZE,PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSVE_OPR_PRESSURE,PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSVE_REGULATION,
		PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSVE_REMARK,PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSVE_VALVE_MODEL,PDMExtSrc.DHSV_EQUIP_INVENTORY.DHSV_EQUIP_NAME,PDMExtSrc.DHSV_EQUIP_INVENTORY.ENTITY_ID,
		PDMExtSrc.DHSV_EQUIP_INVENTORY.ENTITY_NAME,PDMExtSrc.DHSV_EQUIP_INVENTORY.ROW_CREATED_BY,PDMExtSrc.DHSV_EQUIP_INVENTORY.ROW_CREATED_DATE,PDMExtSrc.DHSV_EQUIP_INVENTORY.PDMExtSrc.DHSV_EQUIP_INVENTORY.ACTIVE_IND,PDMExtSrc.DHSV_EQUIP_INVENTORY.SOURCE_NAME)
		VALUES(VARIABLES.EQUIP_ID,VARIABLES.INSTALL_DATE,VARIABLES.DHSVE_NIPPLE_PROFILE,VARIABLES.NIPPLE_SIZE,VARIABLES.DHSVE_VALVE_MANUFACTURER,VARIABLES.DHSVE_CONTROL_SYS_TYPE,
		VARIABLES.DHSVE_VALVE_TYPE,VARIABLES.VALVE_SIZE,VARIABLES.Operating_Pressure_Decimal,VARIABLES.REGULATION,VARIABLES.REMARK,VARIABLES.DHSVE_VALVE_MODEL,'DHSV'||VARIABLES.DHSV_SER_NUM,VARIABLES.WELL_ID,
		VARIABLES.ENTITY_NAME,VARIABLES.SP_USER,VARIABLES.now,'Y','DSWIM');
	END 
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_WELL_SCHEMATIC (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_WELL_SCHEMATIC.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_WELL_SCHEMATIC.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.WELL_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE string VARIABLES.ROW_CHANGED_DATE = (SELECT #tempXML.ValueRes FROM #tempXML WHERE #tempXML.Name = 'ROW_CHANGED_DATE');
	DECLARE string VARIABLES.DOC_PATH = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WS_DOC_PATH');
	DECLARE string VARIABLES.ITEM_SUB_CATEGORY = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WS_DOC_SUB_CATEGORY');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REMARK');
	DECLARE string VARIABLES.SOURCE_DOCUMENT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WS_DOC_ID');
	DECLARE TIMESTAMP VARIABLES.Changed_Date = parsetimestamp(VARIABLES.ROW_CHANGED_DATE, 'MM/dd/yyyy HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	
	IF(VARIABLES.SOURCE_DOCUMENT_ID IS NOT NULL AND VARIABLES.SOURCE_DOCUMENT_ID <> '')
	BEGIN
		UPDATE PDMExtSrc.SOURCE_DOCUMENT SET REMARKS = VARIABLES.REMARK, 
		ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.Changed_Date,
		SOURCE_DOCUMENT = VARIABLES.DOC_PATH WHERE PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID = VARIABLES.SOURCE_DOCUMENT_ID ;
	END
	ELSE
	BEGIN
		INSERT INTO PDMExtSrc.SOURCE_DOCUMENT (PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID, PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT, PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND,  PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TYPE,
		PDMExtSrc.SOURCE_DOCUMENT.SOURCE_NAME, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_BY, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_DATE, DOC_SUB_CATEGORY, DOC_CATEGORY,
		ENTITY_ID, REMARKS)
		VALUES (VARIABLES.SOURCE_DOCUMENT_ID, VARIABLES.DOC_PATH, 'Y', 'Link', 'DSWIM', VARIABLES.SP_USER, VARIABLES.now, VARIABLES.ITEM_SUB_CATEGORY, 'WellSchematics',
		VARIABLES.WELL_ID,VARIABLES.REMARK);	
	END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_WELL_CLASSIFICATION (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(4000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_WELL_CLASSIFICATION.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_WELL_CLASSIFICATION.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.STATUS_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'R_WI_STATUS_ID');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	
	DECLARE string VARIABLES.ENTITY_NAME = '';
	DECLARE string VARIABLES.WI_STATUS = '';
	DECLARE string VARIABLES.primaryKey = '';
	
	IF(VARIABLES.STATUS_ID IS NOT NULL AND VARIABLES.STATUS_ID <> '')
	BEGIN
		VARIABLES.WI_STATUS = (SELECT WI_STATUS FROM PDMTx.R_WI_STATUS WHERE WI_STATUS_ID = VARIABLES.STATUS_ID); 
	END

	IF((SELECT COUNT(1) FROM PDMExtSrc.WELL WHERE WELL_ID = VARIABLES.ENTITY_ID) = 0)
	BEGIN
		INSERT INTO PDMExtSrc.WELL (WELL_ID, R_WI_STATUS_ID, WI_STATUS,  SOURCE_NAME, ACTIVE_IND, ROW_CREATED_BY, ROW_CREATED_DATE) 
		VALUES (VARIABLES.ENTITY_ID, VARIABLES.STATUS_ID, VARIABLES.WI_STATUS, 'DSWIM', 'Y', VARIABLES.SP_USER, VARIABLES.now);
	END
	ELSE
	BEGIN
		UPDATE PDMExtSrc.WELL SET R_WI_STATUS_ID = VARIABLES.STATUS_ID, WI_STATUS = VARIABLES.WI_STATUS, 
		ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.now WHERE WELL_ID = VARIABLES.ENTITY_ID;
	END
 
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_DEVIATION (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_DEVIATION.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_DEVIATION.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.DEV_TYPE_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DEVIATION_TYPE_ID');
	DECLARE string VARIABLES.COMMUNICATION_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DEV_COMMN_TYPE_ID');
	DECLARE string VARIABLES.START_DATE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DEV_START_DATE');
	DECLARE string VARIABLES.END_DATE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DEV_END_DATE');
	DECLARE string VARIABLES.EXCLUDE_IND = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND ((#tempXML.ValueRes = 'True') OR (#tempXML.ValueRes = 'Y')) THEN 'Y' ELSE 'N' END FROM #tempXML WHERE #tempXML.Name = 'EXCL_MISS_ANN_REPORT_IND');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DEV_REMARK');
	DECLARE string VARIABLES.DEVIATION_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DEVIATION_ID');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.Start_Date_Timestamp = null;
	DECLARE TIMESTAMP VARIABLES.End_Date_Timestamp = null;
	
	IF(VARIABLES.START_DATE IS NOT NULL)
	BEGIN
		VARIABLES.Start_Date_Timestamp = parsetimestamp(VARIABLES.START_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	IF(VARIABLES.END_DATE IS NOT NULL)
	BEGIN
		VARIABLES.End_Date_Timestamp = parsetimestamp(VARIABLES.END_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	
	IF(VARIABLES.DEVIATION_ID IS NOT NULL AND VARIABLES.DEVIATION_ID <> '')
	BEGIN
		UPDATE PDMExtSrc.DEVIATION SET R_DEVIATION_TYPE_ID = VARIABLES.DEV_TYPE_ID, R_DEVIATION_CLASS_ID = VARIABLES.COMMUNICATION_ID, START_DATE = VARIABLES.Start_Date_Timestamp, END_DATE = VARIABLES.End_Date_Timestamp, EXCLUDE_IND = VARIABLES.EXCLUDE_IND, ROW_CHANGED_BY = VARIABLES.SP_USER, REMARK = VARIABLES.REMARK, ROW_CHANGED_DATE = VARIABLES.now WHERE DEVIATION_ID = VARIABLES.DEVIATION_ID;
	END
	ELSE
	BEGIN
		DECLARE string VARIABLES.primaryKey = (SELECT UUID());
		INSERT INTO PDMExtSrc.DEVIATION (DEVIATION_ID, ENTITY_ID, R_DEVIATION_TYPE_ID, R_DEVIATION_CLASS_ID, START_DATE, END_DATE, EXCLUDE_IND, 
		SOURCE_NAME, REMARK, ACTIVE_IND, ROW_CREATED_DATE, ROW_CREATED_BY) VALUES (VARIABLES.primaryKey, VARIABLES.ENTITY_ID, VARIABLES.DEV_TYPE_ID, VARIABLES.COMMUNICATION_ID, VARIABLES.Start_Date_Timestamp, VARIABLES.End_Date_Timestamp, VARIABLES.EXCLUDE_IND, 'DSWIM', VARIABLES.REMARK, 'Y',  VARIABLES.now, VARIABLES.SP_USER);		
	END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_REGULATORY_DEPARTURE (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_REGULATORY_DEPARTURE.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_REGULATORY_DEPARTURE.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.DESCRIPTION = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REG_DEPT_DESC');
	DECLARE string VARIABLES.START_DATE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SUBMISSION_DATE');
	DECLARE string VARIABLES.APPROVAL_DATE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'APPROVAL_DATE');
	DECLARE string VARIABLES.EXPIRY_DATE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'EXPIRY_DATE');
	DECLARE string VARIABLES.PRESSURE_LIMIT = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'PRESSURE_LIMIT');
	DECLARE string VARIABLES.DAYS_ACTIVE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'LEAD_TIME');
	DECLARE string VARIABLES.RESOLVED_IND = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND ((#tempXML.ValueRes = 'Yes') OR (#tempXML.ValueRes = 'Y')) THEN 'Y' ELSE 'N' END FROM #tempXML WHERE #tempXML.Name = 'RESOLVED_IND');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REG_DEPT_REMARK');
	DECLARE string VARIABLES.DEPARTURE_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'REG_DEPT_ID');
	DECLARE string VARIABLES.ANNULUS_NAME = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ANNULUS_NAME');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	
	DECLARE TIMESTAMP VARIABLES.Start_Date_Timestamp = null;
	DECLARE TIMESTAMP VARIABLES.Approval_Date_Timestamp = null;
	DECLARE TIMESTAMP VARIABLES.Expiry_Date_Timestamp = null;
	IF(VARIABLES.START_DATE IS NOT NULL)
	BEGIN
		VARIABLES.Start_Date_Timestamp = parsetimestamp(VARIABLES.START_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	IF(VARIABLES.APPROVAL_DATE IS NOT NULL)
	BEGIN
		VARIABLES.Approval_Date_Timestamp = parsetimestamp(VARIABLES.APPROVAL_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	IF(VARIABLES.EXPIRY_DATE IS NOT NULL)
	BEGIN
		VARIABLES.Expiry_Date_Timestamp = parsetimestamp(VARIABLES.EXPIRY_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	
	DECLARE BIGDECIMAL VARIABLES.PressureLimit = null;
	IF(VARIABLES.PRESSURE_LIMIT IS NOT NULL)
	BEGIN
		VARIABLES.PressureLimit = CONVERT(VARIABLES.PRESSURE_LIMIT, BIGDECIMAL);
	END	
	
	IF(VARIABLES.DEPARTURE_ID IS NULL OR VARIABLES.DEPARTURE_ID = '')
	BEGIN
		DECLARE varchar VARIABLES.primaryKey = (SELECT UUID());
		INSERT INTO PDMExtSrc.DEPARTURE (DEPARTURE_ID, ENTITY_ID, SUBMISSION_DATE, APPROVAL_DATE, EXPIRY_DATE, PRESSURE_LIMIT, 
		R_DEP_RESOLVE_ID, REMARK, ACTIVE_IND, DEPARTURE_DESC, SOURCE_NAME, ROW_CREATED_DATE, ROW_CREATED_BY,
		EQUIPMENT_NAME) VALUES (VARIABLES.primaryKey, VARIABLES.ENTITY_ID, VARIABLES.Start_Date_Timestamp, VARIABLES.Approval_Date_Timestamp, VARIABLES.Expiry_Date_Timestamp, VARIABLES.PressureLimit, VARIABLES.RESOLVED_IND, VARIABLES.REMARK, 'Y', VARIABLES.DESCRIPTION, 'DSWIM',  VARIABLES.now, VARIABLES.SP_USER, VARIABLES.ANNULUS_NAME);
	END
	ELSE
	BEGIN
		UPDATE PDMExtSrc.DEPARTURE SET SUBMISSION_DATE = VARIABLES.Start_Date_Timestamp, APPROVAL_DATE = VARIABLES.Approval_Date_Timestamp, EXPIRY_DATE = VARIABLES.Expiry_Date_Timestamp, PRESSURE_LIMIT = VARIABLES.PressureLimit, R_DEP_RESOLVE_ID = VARIABLES.RESOLVED_IND, REMARK = VARIABLES.REMARK,  ROW_CHANGED_DATE = VARIABLES.now, DEPARTURE_DESC = VARIABLES.DESCRIPTION, ROW_CHANGED_BY = VARIABLES.SP_USER, EQUIPMENT_NAME = VARIABLES.ANNULUS_NAME WHERE DEPARTURE_ID = VARIABLES.DEPARTURE_ID;
	END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_EVALUATION (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) 
			RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_EVALUATION.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_EVALUATION.sp_custom_error_message;
	
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE NULL END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.START_DATE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE NULL END FROM #tempXML WHERE #tempXML.Name = 'EVAL_START_DATE');
	DECLARE string VARIABLES.END_DATE = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE NULL END FROM #tempXML WHERE #tempXML.Name = 'EVAL_END_DATE');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE NULL END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE NULL END FROM #tempXML WHERE #tempXML.Name = 'EVAL_REMARK');
	DECLARE string VARIABLES.EVAL_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE NULL END FROM #tempXML WHERE #tempXML.Name = 'EVAL_ID');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.Start_Date_Timestamp = null;
	DECLARE TIMESTAMP VARIABLES.End_Date_Timestamp = null;

	IF(VARIABLES.START_DATE IS NOT NULL AND VARIABLES.START_DATE <> '')
	BEGIN
		VARIABLES.Start_Date_Timestamp = parsetimestamp(VARIABLES.START_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	IF(VARIABLES.END_DATE IS NOT NULL AND VARIABLES.END_DATE <> '')
	BEGIN
		VARIABLES.End_Date_Timestamp = parsetimestamp(VARIABLES.END_DATE, 'MM/dd/yyyy HH:mm:ss');
	END
	
	IF(VARIABLES.EVAL_ID IS NOT NULL AND VARIABLES.EVAL_ID <> '')
	BEGIN
		UPDATE PDMExtSrc.EVALUATION SET EVAL_START_DATE = VARIABLES.Start_Date_Timestamp, 
		EVAL_END_DATE = VARIABLES.End_Date_Timestamp, ROW_CHANGED_BY = VARIABLES.SP_USER, 
		EVAL_REMARK = VARIABLES.REMARK, ROW_CHANGED_DATE = VARIABLES.now WHERE EVAL_ID = VARIABLES.EVAL_ID;
	END
	ELSE
	BEGIN
		VARIABLES.EVAL_ID = (SELECT UUID());
		INSERT INTO PDMExtSrc.EVALUATION (EVAL_ID, ENTITY_ID, EVAL_START_DATE, EVAL_END_DATE, EVAL_REMARK, ACTIVE_IND, 
		SOURCE_NAME, ROW_CREATED_BY, ROW_CREATED_DATE) VALUES (VARIABLES.EVAL_ID, VARIABLES.ENTITY_ID, VARIABLES.Start_Date_Timestamp, 
		VARIABLES.End_Date_Timestamp,  VARIABLES.REMARK, 'Y', 'DSWIM', VARIABLES.SP_USER, VARIABLES.now);		
	END
	
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_WELL_INTEGRITY_STATUS (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(4000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_WELL_INTEGRITY_STATUS.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_WELL_INTEGRITY_STATUS.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.WELL_NAME = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WELL_NAME');
	DECLARE string VARIABLES.INJECTION_FLUID_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'INJECTION_TYPE_ID');
	DECLARE string VARIABLES.UWI = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'UWI');
	DECLARE string VARIABLES.PRODUCTION_STATUS_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WELL_TYPE_ID');
	DECLARE string VARIABLES.PRODUCTION_METHOD_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ARTIFICIAL_LIFT_ID');
	DECLARE string VARIABLES.DHSV = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DHSV');
	DECLARE string VARIABLES.REMARK = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WIE_NOTE');
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN (#tempXML.ValueRes IS NOT NULL) AND (#tempXML.ValueRes <> '') THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	IF(EXISTS (SELECT PDMExtSrc.WELL.WELL_ID FROM PDMExtSrc.WELL WHERE PDMExtSrc.WELL.WELL_ID = VARIABLES.ENTITY_ID))
	BEGIN
		UPDATE PDMExtSrc.WELL SET DHSV = VARIABLES.DHSV, INJECTION_TYPE_ID = VARIABLES.INJECTION_FLUID_ID, SOURCE_NAME = 'DSWIM', ROW_CHANGED_DATE = VARIABLES.now, ROW_CHANGED_BY = VARIABLES.SP_USER ,
		PRODUCTION_STATUS_ID= VARIABLES.PRODUCTION_STATUS_ID,PRODUCTION_METHOD_ID= VARIABLES.PRODUCTION_METHOD_ID,WIE_NOTE= VARIABLES.REMARK
		WHERE PDMExtSrc.WELL.WELL_ID = VARIABLES.ENTITY_ID;
	END
	ELSE
	BEGIN
		INSERT INTO PDMExtSrc.WELL (PDMExtSrc.WELL.WELL_ID, PDMExtSrc.WELL.UWI, PDMExtSrc.WELL.ACTIVE_IND,PDMExtSrc.WELL.SOURCE_NAME, PDMExtSrc.WELL.WELL_NAME, PDMExtSrc.WELL.ROW_CREATED_BY,
		PDMExtSrc.WELL.ROW_CREATED_DATE, PDMExtSrc.WELL.ROW_CHANGED_BY, PDMExtSrc.WELL.ROW_CHANGED_DATE, PDMExtSrc.WELL.DHSV, PDMExtSrc.WELL.INJECTION_TYPE_ID,PDMExtSrc.WELL.PRODUCTION_STATUS_ID,
		PDMExtSrc.WELL.PRODUCTION_METHOD_ID,PDMExtSrc.WELL.WIE_NOTE) VALUES (VARIABLES.ENTITY_ID, VARIABLES.UWI, 'Y',
		'DSWIM', VARIABLES.WELL_NAME, VARIABLES.SP_USER, VARIABLES.now, VARIABLES.SP_USER, VARIABLES.now, VARIABLES.DHSV, VARIABLES.INJECTION_FLUID_ID,VARIABLES.PRODUCTION_STATUS_ID,VARIABLES.PRODUCTION_METHOD_ID
		,VARIABLES.REMARK);
	END
	
	IF(VARIABLES.REMARK IS NOT NULL AND VARIABLES.REMARK<> ' ')
	BEGIN
		DECLARE varchar VARIABLES.INSERTED_WELL_REMARK_ID = (SELECT UUID());
		INSERT INTO PDMExtSrc.WELL_REMARK (PDMExtSrc.WELL_REMARK.WELL_REMARK_ID, PDMExtSrc.WELL_REMARK.WELL_ID, 
PDMExtSrc.WELL_REMARK.SOURCE_NAME,PDMExtSrc.WELL_REMARK.REMARK_TYPE, PDMExtSrc.WELL_REMARK.REMARK_TYPE_ID, PDMExtSrc.WELL_REMARK.ACTIVE_IND, 
		PDMExtSrc.WELL_REMARK.REMARKS, PDMExtSrc.WELL_REMARK.REMARK_DATE, PDMExtSrc.WELL_REMARK.ROW_CREATED_BY, 
		PDMExtSrc.WELL_REMARK.ROW_CREATED_DATE, PDMExtSrc.WELL_REMARK.ROW_CHANGED_BY, PDMExtSrc.WELL_REMARK.ROW_CHANGED_DATE)
		VALUES (VARIABLES.INSERTED_WELL_REMARK_ID, VARIABLES.ENTITY_ID, 'DSWIM', 'WellIntegrity Engineer Note',
		(SELECT PDMExtSrc.R_REMARK_TYPE.R_REMARK_TYPE_ID FROM PDMExtSrc.R_REMARK_TYPE WHERE PDMExtSrc.R_REMARK_TYPE.R_REMARK_TYPE = 'WellIntegrity Engineer Note'), 
		'Y', VARIABLES.REMARK, VARIABLES.now, VARIABLES.SP_USER, VARIABLES.now, VARIABLES.SP_USER, VARIABLES.now);
	END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_WELL_PHOTOS (IN sp_custom_error_message string(4000), IN xml_sp_params string(999999)) 
	RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_WELL_PHOTOS.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_WELL_PHOTOS.sp_custom_error_message;
	
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) 
	COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	SELECT * INTO #tempdocXML FROM (SELECT * FROM XMLTABLE('/Parameters/DOCUMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) 
	COLUMNS DOCUMENT_TITLE string PATH '@WPH_DOC_TITLE', SOURCE_DOCUMENT string PATH '@WPH_DOC_PATH', DOCUMENT_TYPE string PATH '@WPH_DOC_TYPE') AS Y) AS y;
	SELECT * INTO #tempDeleteDocXML FROM (SELECT * FROM XMLTABLE('/Parameters/DELETEDDOCUMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) 
	COLUMNS SOURCE_DOCUMENT_ID varchar PATH '@WPH_DOC_ID', DOCUMENT_TITLE string PATH '@WPH_DOC_TITLE', SOURCE_DOCUMENT string PATH '@WPH_DOC_PATH') AS Y) AS z;
	SELECT * INTO #tempEditDocXML FROM (SELECT * FROM XMLTABLE('/Parameters/EDITDOCUMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) 
	COLUMNS SOURCE_DOCUMENT_ID varchar PATH '@WPH_DOC_ID', DOCUMENT_TITLE string PATH '@WPH_DOC_TITLE', SOURCE_DOCUMENT string PATH '@WPH_DOC_PATH') AS Y) AS z;
	
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML 
	WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE TIMESTAMP VARIABLES.NOW_DATE = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML 
	WHERE #tempXML.Name = 'SP_USER');
	DECLARE string VARIABLES.WELL_AUDIT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML 
	WHERE #tempXML.Name = 'WP_CATEGORY');
	DECLARE string VARIABLES.DOCUMENT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML 
	WHERE #tempXML.Name = 'WPH_DOC_ID');

	DECLARE varchar VARIABLES.SOURCE_DOCUMENT_ID = '';
	
	IF((SELECT COUNT(1) FROM #tempEditDocXML) > 0)
	BEGIN
		LOOP ON (SELECT #tempEditDocXML.DOCUMENT_TITLE, #tempEditDocXML.SOURCE_DOCUMENT_ID, #tempEditDocXML.SOURCE_DOCUMENT FROM #tempEditDocXML) AS curDocuments
		BEGIN
			IF(curDocuments.SOURCE_DOCUMENT <> '')
			BEGIN
				UPDATE PDMExtSrc.SOURCE_DOCUMENT SET DOCUMENT_TITLE = curDocuments.DOCUMENT_TITLE, 
				SOURCE_DOCUMENT = curDocuments.SOURCE_DOCUMENT, ROW_CHANGED_DATE = VARIABLES.NOW_DATE, 
				ROW_CHANGED_BY = VARIABLES.SP_USER,DOC_CATEGORY='Well Photos',OBJECT_ID= VARIABLES.WELL_AUDIT_ID
				WHERE PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID = curDocuments.SOURCE_DOCUMENT_ID;
			END
		END
	END
	
	ELSE
	BEGIN

	UPDATE PDMExtSrc.SOURCE_DOCUMENT SET  ROW_CHANGED_DATE = VARIABLES.NOW_DATE, 
	ROW_CHANGED_BY = VARIABLES.SP_USER,DOC_CATEGORY='Well Photos',OBJECT_ID= VARIABLES.WELL_AUDIT_ID
	WHERE PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID = VARIABLES.DOCUMENT_ID;
	END
	
	IF((SELECT COUNT(1) FROM #tempdocXML) > 0)
	BEGIN
		LOOP ON (SELECT #tempdocXML.DOCUMENT_TITLE, #tempdocXML.SOURCE_DOCUMENT, #tempdocXML.DOCUMENT_TYPE FROM #tempdocXML) AS curDocuments
		BEGIN
			VARIABLES.SOURCE_DOCUMENT_ID = (SELECT UUID());

			INSERT INTO PDMExtSrc.SOURCE_DOCUMENT (SOURCE_DOCUMENT_ID, SOURCE_DOCUMENT, ACTIVE_IND, 
			DOCUMENT_TITLE, DOCUMENT_TYPE, SOURCE_NAME, ROW_CREATED_BY, ROW_CREATED_DATE, 
			DOC_CATEGORY, DOC_SUB_CATEGORY, ENTITY_ID,OBJECT_ID) VALUES (VARIABLES.SOURCE_DOCUMENT_ID, curDocuments.SOURCE_DOCUMENT, 'Y', 
			curDocuments.DOCUMENT_TITLE, curDocuments.DOCUMENT_TYPE, 'DSWIM',  VARIABLES.SP_USER, VARIABLES.NOW_DATE,
			'Well Photos', 'Well Photos',VARIABLES.ENTITY_ID,VARIABLES.WELL_AUDIT_ID);
		END
	END

	
	IF((SELECT COUNT(1) FROM #tempDeleteDocXML) > 0)
	BEGIN
		LOOP ON (SELECT #tempDeleteDocXML.SOURCE_DOCUMENT_ID FROM #tempDeleteDocXML) AS curDelDocuments
		BEGIN
			UPDATE PDMExtSrc.SOURCE_DOCUMENT SET ACTIVE_IND = 'N', ROW_CHANGED_DATE = VARIABLES.NOW_DATE, ROW_CHANGED_BY = VARIABLES.SP_USER 
			WHERE PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID =  curDelDocuments.SOURCE_DOCUMENT_ID;
		END
	END
	SELECT 'success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_WELL_HISTORY (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_WELL_HISTORY.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_WELL_HISTORY.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.WELL_NAME = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WELL_NAME');
	DECLARE string VARIABLES.WELL_HISTORY = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WELL_HISTORY');
	DECLARE string VARIABLES.ENTITY_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE string VARIABLES.UWI = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'UWI');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE varchar VARIABLES.IDVal = (SELECT UUID());
	IF(VARIABLES.ENTITY_ID IS NOT NULL)
	BEGIN
		UPDATE PDMExtSrc.WELL SET WELL_HISTORY = VARIABLES.WELL_HISTORY, ROW_CHANGED_DATE = VARIABLES.now, ROW_CHANGED_BY = VARIABLES.SP_USER WHERE PDMExtSrc.WELL.WELL_ID = VARIABLES.ENTITY_ID;
	END
	ELSE
	BEGIN
		INSERT INTO PDMExtSrc.WELL (PDMExtSrc.WELL.WELL_ID, PDMExtSrc.WELL.UWI, PDMExtSrc.WELL.ACTIVE_IND,PDMExtSrc.WELL.SOURCE_NAME, PDMExtSrc.WELL.WELL_NAME, PDMExtSrc.WELL.ROW_CREATED_BY, 
		PDMExtSrc.WELL.ROW_CREATED_DATE, PDMExtSrc.WELL.ROW_CHANGED_BY, PDMExtSrc.WELL.ROW_CHANGED_DATE, PDMExtSrc.WELL.WELL_HISTORY) VALUES (VARIABLES.ENTITY_ID, VARIABLES.UWI, 'Y','DSWIM',
		VARIABLES.WELL_NAME, VARIABLES.SP_USER, VARIABLES.now, VARIABLES.SP_USER, VARIABLES.now, VARIABLES.WELL_HISTORY);
	END
	SELECT 'Success' AS OP;
END;

CREATE VIRTUAL PROCEDURE ds_SAVE_BARRIER_ENVELOPE (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_BARRIER_ENVELOPE.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_BARRIER_ENVELOPE.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.SP_USER = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SP_USER');
	DECLARE string VARIABLES.ENVELOPE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BARRIER_ENVELOPE');
	DECLARE string VARIABLES.BE_IND = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'BE_IND');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.WELL_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');

	SELECT * INTO #tempEquipments FROM XMLTABLE('/Parameters/BARRIER_EQUIPMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) 
	COLUMNS EQUIPMENT_ID STRING PATH '@EQUIPMENT_ID') AS EQUIPMENTS;
	LOOP ON (SELECT #tempEquipments.EQUIPMENT_ID FROM #tempEquipments) AS equipmentsCursor
	BEGIN
		IF((VARIABLES.BE_IND IS NOT NULL) AND (VARIABLES.BE_IND = 'Y'))
		BEGIN
		IF((SELECT COUNT(1) FROM PDMExtSrc.BARRIER_EQUIP_INVENTORY WHERE BARRIER_EQUIP_ID = equipmentsCursor.EQUIPMENT_ID AND ENTITY_ID= VARIABLES.WELL_ID) > 0 )
		BEGIN
			UPDATE PDMExtSrc.BARRIER_EQUIP_INVENTORY SET 
							PDMExtSrc.BARRIER_EQUIP_INVENTORY.BARRIER_ENVELOPE = VARIABLES.ENVELOPE,
							PDMExtSrc.BARRIER_EQUIP_INVENTORY.ROW_CHANGED_DATE=VARIABLES.now,
							PDMExtSrc.BARRIER_EQUIP_INVENTORY.ROW_CHANGED_BY=VARIABLES.SP_USER,
							PDMExtSrc.BARRIER_EQUIP_INVENTORY.ACTIVE_IND = 'Y'
							WHERE BARRIER_EQUIP_ID = equipmentsCursor.EQUIPMENT_ID ;--AND ACTIVE_IND = 'Y';
		END
		ELSE
		BEGIN
		INSERT INTO PDMExtSrc.BARRIER_EQUIP_INVENTORY				
					(PDMExtSrc.BARRIER_EQUIP_INVENTORY.ENTITY_ID,PDMExtSrc.BARRIER_EQUIP_INVENTORY.BARRIER_EQUIP_ID,PDMExtSrc.BARRIER_EQUIP_INVENTORY.BARRIER_ENVELOPE,PDMExtSrc.BARRIER_EQUIP_INVENTORY.ROW_CREATED_DATE,
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.ROW_CREATED_BY, PDMExtSrc.BARRIER_EQUIP_INVENTORY.ACTIVE_IND, 
					PDMExtSrc.BARRIER_EQUIP_INVENTORY.SOURCE_NAME)
					VALUES 				
					(VARIABLES.WELL_ID,equipmentsCursor.EQUIPMENT_ID,VARIABLES.ENVELOPE,VARIABLES.now,VARIABLES.SP_USER, 'Y','DSWIM');
		END
		END
		ELSE
		BEGIN
		SELECT * INTO #tempBARRIER FROM XMLTABLE('/Parameters/BARRIER_EQUIPMENTS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) 
		COLUMNS BARRIER_EQUIP_ID STRING PATH '@EQUIPMENT_ID') AS E;
		
		LOOP ON (SELECT #tempBARRIER.BARRIER_EQUIP_ID FROM #tempBARRIER) AS equip
		BEGIN
			UPDATE PDMExtSrc.BARRIER_EQUIP_INVENTORY SET ACTIVE_IND = 'N',
			ROW_CHANGED_BY = VARIABLES.SP_USER, ROW_CHANGED_DATE = VARIABLES.now
			WHERE BARRIER_EQUIP_ID = equip.BARRIER_EQUIP_ID;
		END
	END
	END
	SELECT 'Success' AS OP;
	END;

CREATE VIRTUAL PROCEDURE ds_SAVE_WELLHEAD_AUDIT (IN xml_sp_params string(999999), IN sp_custom_error_message string(4000)) RETURNS TABLE (OP string(1000) OPTIONS(CASE_SENSITIVE 'FALSE', SIGNED 'FALSE'))
	AS
BEGIN	
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_SAVE_WELLHEAD_AUDIT.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_SAVE_WELLHEAD_AUDIT.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.SOURCE_DOCUMENT = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SOURCE_DOCUMENT');
	DECLARE string VARIABLES.CLIENT_REPRESENTATIVE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CLIENT_REPRESENTATIVE');
	DECLARE string VARIABLES.AUDITED_BY = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'AUDITED_BY');
	DECLARE string VARIABLES.AUDIT_DATE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'AUDIT_DATE');
	DECLARE string VARIABLES.AUDIT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'AUDIT_ID');
	DECLARE string VARIABLES.SOURCE_DOCUMENT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WS_DOC_ID');
	DECLARE string VARIABLES.DOCUMENT_TITLE = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'DOC_TITLE');
	DECLARE string VARIABLES.CASE_DOCUMENT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'CASE_DOC_ID');
	DECLARE string VARIABLES.SCENARIO = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'SCENARIO');
	DECLARE string VARIABLES.WELL_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE TIMESTAMP VARIABLES.now = PARSETIMESTAMP(now(), 'yyyy-MM-dd HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.Changed_Date = parsetimestamp(VARIABLES.AUDIT_DATE, 'MM/dd/yyyy HH:mm:ss');
	DECLARE string VARIABLES.WELL_AUDIT_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'WELL_AUDIT_ID');
	DECLARE string VARIABLES.AUDIT_DATE_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'AUDIT_DATE_ID');
	DECLARE string VARIABLES.IDVal = (SELECT UUID());
	DECLARE string VARIABLES.DOCIDVal = (SELECT UUID());
	DECLARE string VARIABLES.SECIDVal = (SELECT UUID());
	DECLARE string VARIABLES.scIDVal = (SELECT UUID());
	
		
	IF(VARIABLES.WELL_AUDIT_ID IS NOT NULL AND VARIABLES.WELL_AUDIT_ID <> '')
	BEGIN
		VARIABLES.IDVal = VARIABLES.WELL_AUDIT_ID;
		UPDATE PDMExtSrc.WELL_AUDIT SET PDMExtSrc.WELL_AUDIT.CLIENT_REPRESENTATIVE = VARIABLES.CLIENT_REPRESENTATIVE,
											 PDMExtSrc.WELL_AUDIT.AUDITED_BY = VARIABLES.AUDITED_BY,
											PDMExtSrc.WELL_AUDIT.AUDIT_DATE = VARIABLES.Changed_Date,
											PDMExtSrc.WELL_AUDIT.AUDIT_ID = VARIABLES.AUDIT_ID,
											PDMExtSrc.WELL_AUDIT.ROW_CHANGED_BY= VARIABLES.AUDITED_BY,
											PDMExtSrc.WELL_AUDIT.ROW_CHANGED_DATE = VARIABLES.Changed_Date	WHERE PDMExtSrc.WELL_AUDIT.WELL_AUDIT_ID = VARIABLES.WELL_AUDIT_ID;
												
	END
	ELSE
	BEGIN
	INSERT INTO PDMExtSrc.WELL_AUDIT (PDMExtSrc.WELL_AUDIT.WELL_ID,PDMExtSrc.WELL_AUDIT.WELL_AUDIT_ID,PDMExtSrc.WELL_AUDIT.SOURCE_NAME,PDMExtSrc.WELL_AUDIT.ACTIVE_IND,
	PDMExtSrc.WELL_AUDIT.AUDIT_DATE,PDMExtSrc.WELL_AUDIT.ROW_CREATED_BY,PDMExtSrc.WELL_AUDIT.ROW_CREATED_DATE,PDMExtSrc.WELL_AUDIT.AUDITED_BY,
	PDMExtSrc.WELL_AUDIT.CLIENT_REPRESENTATIVE,PDMExtSrc.WELL_AUDIT.AUDIT_ID) VALUES (VARIABLES.WELL_ID,VARIABLES.IDVal,'DSWIM','Y',VARIABLES.Changed_Date,VARIABLES.AUDITED_BY,VARIABLES.now,VARIABLES.AUDITED_BY,
	VARIABLES.CLIENT_REPRESENTATIVE,VARIABLES.AUDIT_ID);
	END
	IF(VARIABLES.WELL_AUDIT_ID IS NOT NULL AND VARIABLES.WELL_AUDIT_ID<>'')
		BEGIN
		IF((SELECT COUNT(1) FROM PDMExtSrc.SOURCE_DOCUMENT WHERE PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID = VARIABLES.WELL_AUDIT_ID) > 0)
		BEGIN
			UPDATE PDMExtSrc.SOURCE_DOCUMENT SET  
			PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_BY = VARIABLES.AUDITED_BY, PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_DATE = VARIABLES.Changed_Date,
			PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT = VARIABLES.SOURCE_DOCUMENT,PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TITLE= VARIABLES.DOCUMENT_TITLE,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH = VARIABLES.SOURCE_DOCUMENT
			WHERE PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID = VARIABLES.WELL_AUDIT_ID ;
		END
		ELSE
		BEGIN
			INSERT INTO PDMExtSrc.SOURCE_DOCUMENT (PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID, PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT,PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TITLE, PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND,  PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TYPE,
			PDMExtSrc.SOURCE_DOCUMENT.SOURCE_NAME, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_BY, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_DATE, DOC_CATEGORY,DOC_SUB_CATEGORY,
			ENTITY_ID,PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH)
			VALUES (VARIABLES.DOCIDVal,VARIABLES.SOURCE_DOCUMENT,VARIABLES.IDVal,VARIABLES.DOCUMENT_TITLE, 'Y', 'attachment', 'DSWIM', VARIABLES.AUDITED_BY, VARIABLES.now,'Well Audit','Well Audit Score',
			VARIABLES.WELL_ID,VARIABLES.SOURCE_DOCUMENT);
		END
		END	
		ELSE
		BEGIN
			INSERT INTO PDMExtSrc.SOURCE_DOCUMENT (PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID, PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT,PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID,
			PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TITLE, PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND,  PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TYPE,
			PDMExtSrc.SOURCE_DOCUMENT.SOURCE_NAME, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_BY, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_DATE, DOC_CATEGORY,DOC_SUB_CATEGORY,
			ENTITY_ID,PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH)
			VALUES (VARIABLES.DOCIDVal,VARIABLES.SOURCE_DOCUMENT,VARIABLES.IDVal,VARIABLES.DOCUMENT_TITLE, 'Y', 'attachment', 'DSWIM', VARIABLES.AUDITED_BY, VARIABLES.now,'Well Audit','Well Audit Score',
			VARIABLES.WELL_ID,VARIABLES.SOURCE_DOCUMENT);
		END	

	SELECT * INTO #tempRisk FROM (SELECT * FROM XMLTABLE('/Parameters/RISK_ACCESS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) 
	COLUMNS AUDIT_SCORE_ID string PATH '@AUDIT_SCORE_ID', NUM_CRITICAL string PATH '@NUM_CRITICAL', NUM_MAJOR string PATH '@NUM_MAJOR',NUM_MINOR string PATH '@NUM_MINOR') AS Y) AS z;
	DECLARE varchar VARIABLES.riskIDVal = '';
	LOOP ON (SELECT #tempRisk.AUDIT_SCORE_ID,#tempRisk.NUM_CRITICAL,#tempRisk.NUM_MAJOR,#tempRisk.NUM_MINOR FROM #tempRisk) AS riskCursor
	BEGIN
		VARIABLES.riskIDVal = (SELECT UUID());
		IF((VARIABLES.WELL_AUDIT_ID IS NOT NULL AND VARIABLES.WELL_AUDIT_ID <> ''))
		BEGIN
			UPDATE PDMExtSrc.WELL_AUDIT_SCORE SET 
							PDMExtSrc.WELL_AUDIT_SCORE.NUM_CRITICAL = CASE WHEN (riskCursor.NUM_CRITICAL IS NOT NULL AND riskCursor.NUM_CRITICAL <> '') THEN CAST(riskCursor.NUM_CRITICAL as integer) ELSE NULL END,
							PDMExtSrc.WELL_AUDIT_SCORE.NUM_MAJOR = CASE WHEN (riskCursor.NUM_CRITICAL IS NOT NULL AND riskCursor.NUM_MAJOR <> '') THEN CAST(riskCursor.NUM_MAJOR as integer) ELSE NULL END,
							PDMExtSrc.WELL_AUDIT_SCORE.NUM_MINOR = CASE WHEN (riskCursor.NUM_CRITICAL IS NOT NULL AND riskCursor.NUM_MINOR <> '') THEN CAST(riskCursor.NUM_MINOR as integer) ELSE NULL END,
							PDMExtSrc.WELL_AUDIT_SCORE.ROW_CHANGED_BY = VARIABLES.AUDITED_BY,
							PDMExtSrc.WELL_AUDIT_SCORE.ROW_CHANGED_DATE= VARIABLES.Changed_Date
							WHERE PDMExtSrc.WELL_AUDIT_SCORE.WELL_AUDIT_ID = VARIABLES.WELL_AUDIT_ID AND PDMExtSrc.WELL_AUDIT_SCORE.AUDIT_SCORE_ID = riskCursor.AUDIT_SCORE_ID AND ACTIVE_IND = 'Y';
		END
		ELSE
		BEGIN
			INSERT INTO PDMExtSrc.WELL_AUDIT_SCORE(PDMExtSrc.WELL_AUDIT_SCORE.WELL_AUDIT_SCORE_ID,PDMExtSrc.WELL_AUDIT_SCORE.WELL_AUDIT_ID,AUDIT_SCORE_ID,PDMExtSrc.WELL_AUDIT_SCORE.SOURCE,
			PDMExtSrc.WELL_AUDIT_SCORE.ACTIVE_IND,PDMExtSrc.WELL_AUDIT_SCORE.ROW_CREATED_BY,PDMExtSrc.WELL_AUDIT_SCORE.ROW_CREATED_DATE,PDMExtSrc.WELL_AUDIT_SCORE.NUM_CRITICAL,
			PDMExtSrc.WELL_AUDIT_SCORE.NUM_MAJOR,PDMExtSrc.WELL_AUDIT_SCORE.NUM_MINOR) VALUES (VARIABLES.riskIDVal,VARIABLES.IDVal,riskCursor.AUDIT_SCORE_ID,'DSWIM','Y',VARIABLES.AUDITED_BY,VARIABLES.Changed_Date,CASE WHEN (riskCursor.NUM_CRITICAL <> '') THEN CAST(riskCursor.NUM_CRITICAL as integer) ELSE NULL END,
			CASE WHEN (riskCursor.NUM_MAJOR <> '') THEN CAST(riskCursor.NUM_MAJOR as integer) ELSE NULL END,
								CASE WHEN (riskCursor.NUM_MINOR <> '') THEN CAST(riskCursor.NUM_MINOR as integer) ELSE NULL END);
		END		
	END
	
	
	
	SELECT * INTO #tempCaseDoc FROM (SELECT * FROM XMLTABLE('/Parameters/CASE_DETAILS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) 
	COLUMNS CASE_DOCUMENT_ID varchar PATH '@CASE_DOCUMENT_ID', SOURCE_DOCUMENT varchar PATH '@SOURCE_DOCUMENT',CASE_NAME varchar PATH '@WA_CASE_NAME',AUDIT_CASE_ID varchar PATH '@WA_CASE_ID',CASE_DETAILS varchar PATH '@WA_CASE_DETAILS')AS Y)AS Z;
	LOOP ON (SELECT #tempCaseDoc.CASE_DOCUMENT_ID,#tempCaseDoc.SOURCE_DOCUMENT,#tempCaseDoc.CASE_NAME,#tempCaseDoc.AUDIT_CASE_ID,#tempCaseDoc.CASE_DETAILS FROM #tempCaseDoc) AS caseDocCursor
		
	BEGIN
	DECLARE varchar VARIABLES.CASEDOCIDVal = (SELECT UUID());
	DECLARE varchar VARIABLES.CASEIDVal = (SELECT UUID());
	IF(VARIABLES.WELL_AUDIT_ID IS NOT NULL AND VARIABLES.WELL_AUDIT_ID <> '' AND (caseDocCursor.AUDIT_CASE_ID IS NOT NULL AND caseDocCursor.AUDIT_CASE_ID <> '')) 	
	BEGIN
		UPDATE PDMExtSrc.AUDIT_CASE SET
		PDMExtSrc.AUDIT_CASE.CASE_NAME= caseDocCursor.CASE_NAME,PDMExtSrc.AUDIT_CASE.ROW_CHANGED_BY= VARIABLES.AUDITED_BY,PDMExtSrc.AUDIT_CASE.ROW_CHANGED_DATE= VARIABLES.Changed_Date,
		PDMExtSrc.AUDIT_CASE.CASE_DETAILS= caseDocCursor.CASE_DETAILS,
		PDMExtSrc.AUDIT_CASE.CASE_FORMAT = RIGHT(caseDocCursor.SOURCE_DOCUMENT,3) WHERE PDMExtSrc.AUDIT_CASE.AUDIT_CASE_ID= caseDocCursor.AUDIT_CASE_ID;	
		
		IF((SELECT COUNT(1) FROM PDMExtSrc.SOURCE_DOCUMENT WHERE PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID = caseDocCursor.AUDIT_CASE_ID) > 0)
		BEGIN
		UPDATE PDMExtSrc.SOURCE_DOCUMENT SET  
		PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_BY = VARIABLES.AUDITED_BY, PDMExtSrc.SOURCE_DOCUMENT.ROW_CHANGED_DATE = VARIABLES.Changed_Date,
		PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT = caseDocCursor.SOURCE_DOCUMENT,
		PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH = caseDocCursor.SOURCE_DOCUMENT	WHERE 
		 PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID= caseDocCursor.AUDIT_CASE_ID
		;
		END
		ELSE
		BEGIN
		IF(caseDocCursor.SOURCE_DOCUMENT IS NOT NULL AND caseDocCursor.SOURCE_DOCUMENT <>'')
		BEGIN
		INSERT INTO PDMExtSrc.SOURCE_DOCUMENT (PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID, PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT,PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID, PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND,  PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TYPE,
		PDMExtSrc.SOURCE_DOCUMENT.SOURCE_NAME, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_BY, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_DATE, DOC_CATEGORY,DOC_SUB_CATEGORY,
		ENTITY_ID,PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH)
		VALUES (VARIABLES.CASEDOCIDVal, caseDocCursor.SOURCE_DOCUMENT,caseDocCursor.AUDIT_CASE_ID, 'Y', 'attachment', 'DSWIM', VARIABLES.AUDITED_BY, VARIABLES.now,'Well Audit','Well Case Score',
		VARIABLES.WELL_ID,caseDocCursor.SOURCE_DOCUMENT);
		END
END		

	END
	ELSE
	BEGIN
		INSERT INTO PDMExtSrc.AUDIT_CASE(PDMExtSrc.AUDIT_CASE.AUDIT_CASE_ID,PDMExtSrc.AUDIT_CASE.WELL_AUDIT_ID,PDMExtSrc.AUDIT_CASE.CASE_NAME,PDMExtSrc.AUDIT_CASE.SOURCE,PDMExtSrc.AUDIT_CASE.ACTIVE_IND,
		PDMExtSrc.AUDIT_CASE.ROW_CREATED_BY,PDMExtSrc.AUDIT_CASE.ROW_CREATED_DATE,PDMExtSrc.AUDIT_CASE.CASE_DETAILS,PDMExtSrc.AUDIT_CASE.CASE_FORMAT) VALUES (VARIABLES.CASEIDVal,VARIABLES.IDVal,caseDocCursor.CASE_NAME,'DSWIM','Y',VARIABLES.AUDITED_BY,VARIABLES.Changed_Date,
		caseDocCursor.CASE_DETAILS,RIGHT(caseDocCursor.SOURCE_DOCUMENT,3));
		IF(caseDocCursor.SOURCE_DOCUMENT IS NOT NULL AND caseDocCursor.SOURCE_DOCUMENT <>'')
		BEGIN
		INSERT INTO PDMExtSrc.SOURCE_DOCUMENT (PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT_ID, PDMExtSrc.SOURCE_DOCUMENT.SOURCE_DOCUMENT,PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID, PDMExtSrc.SOURCE_DOCUMENT.ACTIVE_IND,  PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_TYPE,
		PDMExtSrc.SOURCE_DOCUMENT.SOURCE_NAME, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_BY, PDMExtSrc.SOURCE_DOCUMENT.ROW_CREATED_DATE, DOC_CATEGORY,DOC_SUB_CATEGORY,
		ENTITY_ID,PDMExtSrc.SOURCE_DOCUMENT.DOCUMENT_FULL_PATH)
		VALUES (VARIABLES.CASEDOCIDVal, caseDocCursor.SOURCE_DOCUMENT,VARIABLES.CASEIDVal, 'Y', 'attachment', 'DSWIM', VARIABLES.AUDITED_BY, VARIABLES.now,'Well Audit','Well Case Score',
		VARIABLES.WELL_ID,caseDocCursor.SOURCE_DOCUMENT);
		END
	END 
	END
	SELECT * INTO #tempDeleteCaseDocXML FROM (SELECT * FROM XMLTABLE('/Parameters/CASE_DETAILS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) 
	COLUMNS AUDIT_CASE_ID varchar PATH '@WA_CASE_ID', CASE_NAME string PATH '@CASE_NAME', SOURCE_DOCUMENT string PATH '@SOURCE_DOCUMENT',DELETE_IND string PATH '@DELETE_IND') AS Y) AS z;
	
	IF((SELECT COUNT(1) FROM #tempDeleteCaseDocXML) > 0)
	BEGIN
		LOOP ON (SELECT #tempDeleteCaseDocXML.AUDIT_CASE_ID,#tempDeleteCaseDocXML.DELETE_IND FROM #tempDeleteCaseDocXML) AS curDelCaseDocuments
		BEGIN
		IF(curDelCaseDocuments.DELETE_IND ='true')
		BEGIN
			UPDATE PDMExtSrc.SOURCE_DOCUMENT SET ACTIVE_IND = 'N', ROW_CHANGED_DATE = VARIABLES.Changed_Date, ROW_CHANGED_BY = VARIABLES.AUDITED_BY 
			WHERE PDMExtSrc.SOURCE_DOCUMENT.OBJECT_ID =  curDelCaseDocuments.AUDIT_CASE_ID;
			
			UPDATE PDMExtSrc.AUDIT_CASE SET ACTIVE_IND = 'N', ROW_CHANGED_DATE = VARIABLES.Changed_Date, ROW_CHANGED_BY = VARIABLES.AUDITED_BY 
			WHERE PDMExtSrc.AUDIT_CASE.AUDIT_CASE_ID= curDelCaseDocuments.AUDIT_CASE_ID;
		END
		END
	END 
	
	
	SELECT * INTO #tempRecommendation FROM (SELECT * FROM XMLTABLE('/Parameters/RECOMMONDATIONS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) 
	COLUMNS RECOMMENDATION varchar PATH '@RECOMMENDATION',AUDIT_RECOMMEND_ID string PATH '@WA_RECOMMENDATION_ID')AS Y)AS Z;
	DECLARE string VARIABLES.recIDVal ='';
	LOOP ON (SELECT #tempRecommendation.RECOMMENDATION,#tempRecommendation.AUDIT_RECOMMEND_ID FROM #tempRecommendation) AS recommendationCursor
	BEGIN
	 VARIABLES.recIDVal = (SELECT UUID());
	IF((VARIABLES.WELL_AUDIT_ID IS NOT NULL AND VARIABLES.WELL_AUDIT_ID <> '') AND( recommendationCursor.AUDIT_RECOMMEND_ID IS NOT NULL AND recommendationCursor.AUDIT_RECOMMEND_ID <> ''))
	
	BEGIN
		UPDATE PDMExtSrc.AUDIT_RECOMMENDATIONS SET PDMExtSrc.AUDIT_RECOMMENDATIONS.RECOMMENDATION = recommendationCursor.RECOMMENDATION,
											PDMExtSrc.AUDIT_RECOMMENDATIONS.ROW_CHANGED_BY= VARIABLES.AUDITED_BY,
											PDMExtSrc.AUDIT_RECOMMENDATIONS.ROW_CHANGED_DATE = VARIABLES.Changed_Date	WHERE  PDMExtSrc.AUDIT_RECOMMENDATIONS.AUDIT_RECOMMEND_ID= recommendationCursor.AUDIT_RECOMMEND_ID;
											
	END
	ELSE
	
	BEGIN
	INSERT INTO PDMExtSrc.AUDIT_RECOMMENDATIONS (PDMExtSrc.AUDIT_RECOMMENDATIONS.AUDIT_RECOMMEND_ID,PDMExtSrc.AUDIT_RECOMMENDATIONS.WELL_AUDIT_ID,PDMExtSrc.AUDIT_RECOMMENDATIONS.RECOMMENDATION,
	PDMExtSrc.AUDIT_RECOMMENDATIONS.SOURCE,PDMExtSrc.AUDIT_RECOMMENDATIONS.ACTIVE_IND,PDMExtSrc.AUDIT_RECOMMENDATIONS.ROW_CREATED_BY,PDMExtSrc.AUDIT_RECOMMENDATIONS.ROW_CREATED_DATE)
	VALUES (VARIABLES.recIDVal,VARIABLES.IDVal,recommendationCursor.RECOMMENDATION,'DSWIM','Y',VARIABLES.AUDITED_BY,VARIABLES.Changed_Date);
	
	END
	END
	
	SELECT * INTO #tempDeleteRecommXML FROM (SELECT * FROM XMLTABLE('/Parameters/RECOMMONDATIONS/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) 
	COLUMNS AUDIT_RECOMMEND_ID varchar PATH '@WA_RECOMMENDATION_ID', DELETE_IND string PATH '@DELETE_IND') AS Y) AS z;
	
	IF((SELECT COUNT(1) FROM #tempDeleteRecommXML) > 0)
	BEGIN
		LOOP ON (SELECT #tempDeleteRecommXML.AUDIT_RECOMMEND_ID,#tempDeleteRecommXML.DELETE_IND FROM #tempDeleteRecommXML) AS curDelRecom
		BEGIN
		IF(curDelRecom.DELETE_IND ='true')
		BEGIN
			UPDATE PDMExtSrc.AUDIT_RECOMMENDATIONS SET ACTIVE_IND = 'N', ROW_CHANGED_DATE = VARIABLES.Changed_Date, ROW_CHANGED_BY = VARIABLES.AUDITED_BY 
			WHERE PDMExtSrc.AUDIT_RECOMMENDATIONS.AUDIT_RECOMMEND_ID =  curDelRecom.AUDIT_RECOMMEND_ID;
		END
		END
	
END

	IF(VARIABLES.WELL_AUDIT_ID IS NOT NULL AND VARIABLES.WELL_AUDIT_ID <> '')
	BEGIN
		UPDATE PDMExtSrc.AUDIT_CASE_SCENARIO SET
		PDMExtSrc.AUDIT_CASE_SCENARIO.SCENARIO = VARIABLES.SCENARIO,
		PDMExtSrc.AUDIT_CASE_SCENARIO.ROW_CHANGED_BY = VARIABLES.AUDITED_BY, PDMExtSrc.AUDIT_CASE_SCENARIO.ROW_CHANGED_DATE = VARIABLES.Changed_Date
		WHERE PDMExtSrc.AUDIT_CASE_SCENARIO.WELL_AUDIT_ID= VARIABLES.WELL_AUDIT_ID;
	END
	ELSE
	BEGIN
		INSERT INTO PDMExtSrc.AUDIT_CASE_SCENARIO (PDMExtSrc.AUDIT_CASE_SCENARIO.AUDIT_CASE_SCENARIO_ID,PDMExtSrc.AUDIT_CASE_SCENARIO.AUDIT_CASE_ID,PDMExtSrc.AUDIT_CASE_SCENARIO.SCENARIO,PDMExtSrc.AUDIT_CASE_SCENARIO.SOURCE,
	PDMExtSrc.AUDIT_CASE_SCENARIO.ACTIVE_IND,PDMExtSrc.AUDIT_CASE_SCENARIO.ROW_CREATED_BY,PDMExtSrc.AUDIT_CASE_SCENARIO.ROW_CHANGED_DATE,PDMExtSrc.AUDIT_CASE_SCENARIO.WELL_AUDIT_ID) VALUES (VARIABLES.scIDVal,VARIABLES.SECIDVal,VARIABLES.SCENARIO,'DSWIM',
	'Y',VARIABLES.AUDITED_BY,VARIABLES.Changed_Date,VARIABLES.IDVal);
	END
	SELECT 'SUCCESS' AS OP;
END;

CREATE VIRTUAL FUNCTION ds_CORRELATION_UDF (OUT OP double RESULT, IN sigmaX double, IN sigmaY double, IN sigmaXX double, IN sigmaYY double, IN sigmaXY double, IN countVal double)
 OPTIONS("FUNCTION-CATEGORY" 'GetCorrCoeffFactor', JAVA_CLASS 'com.lgc.dsds.dsp.udfs.DSPCommonFunctions', JAVA_METHOD 'GetCorrCoeffFactor')

CREATE VIRTUAL PROCEDURE ds_CORRELATION (IN xml_sp_params string(999999), IN sp_custom_error_message string(1000)) RETURNS TABLE (OP double OPTIONS(CASE_SENSITIVE 'FALSE'))
	AS
BEGIN
	DECLARE string VARIABLES.xml_sp_params = PDMTx.ds_CORRELATION.xml_sp_params;
	DECLARE string VARIABLES.sp_custom_error_message = PDMTx.ds_CORRELATION.sp_custom_error_message;
	SELECT * INTO #tempXML FROM (SELECT * FROM XMLTABLE('/Parameters/Parameter' PASSING convert(VARIABLES.xml_sp_params, xml) COLUMNS Name string PATH '@Name', ValueRes string PATH '@Value') AS Y) AS x;
	DECLARE string VARIABLES.WELL_ID = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'ENTITY_ID');
	DECLARE TIMESTAMP VARIABLES.START_DATE = PARSETIMESTAMP((SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'START_DATE'), 'yyyy-MM-dd HH:mm:ss');
	DECLARE TIMESTAMP VARIABLES.END_DATE = PARSETIMESTAMP((SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'END_DATE'), 'yyyy-MM-dd HH:mm:ss');
	DECLARE string VARIABLES.MEASUREMENT_POINT_1 = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'MEASUREMENT_POINT_1');
	DECLARE string VARIABLES.MEASUREMENT_POINT_2 = (SELECT CASE WHEN #tempXML.ValueRes IS NOT NULL THEN #tempXML.ValueRes ELSE null END FROM #tempXML WHERE #tempXML.Name = 'MEASUREMENT_POINT_2');
	DECLARE double VARIABLES.x = 0.0;
	DECLARE double VARIABLES.y = 0.0;
	DECLARE double VARIABLES.sigmaX = 0.0;
	DECLARE double VARIABLES.sigmaY = 0.0;
	DECLARE double VARIABLES.sigmaXY = 0.0;
	DECLARE double VARIABLES.sigmaXX = 0.0;
	DECLARE double VARIABLES.sigmaYY = 0.0;
	DECLARE double VARIABLES.countVal = 0.0;
	LOOP ON (SELECT T.MEASUREMENT_DATE, MAX(T.MP1) AS MP1, MAX(T.MP2) AS MP2 FROM (SELECT EM.MEASUREMENT_DATE, AVG(CASE WHEN RMP.R_MEASUREMENT_POINT = VARIABLES.MEASUREMENT_POINT_1 THEN EM.MEASUREMENT_VALUE ELSE 0 END) AS MP1, AVG(CASE WHEN RMP.R_MEASUREMENT_POINT = VARIABLES.MEASUREMENT_POINT_2 THEN EM.MEASUREMENT_VALUE ELSE 0 END) AS MP2 FROM PDMExtSrc.EQ_MEASUREMENT EM INNER JOIN PPDMSrc.R_MEASUREMENT_POINT RMP ON RMP.R_MEASUREMENT_POINT_ID=EM.R_MEASUREMENT_POINT_ID WHERE (EM.ENTITY_ID = VARIABLES.WELL_ID) AND ((EM.MEASUREMENT_DATE >= VARIABLES.START_DATE) AND (EM.MEASUREMENT_DATE <= VARIABLES.END_DATE)) AND (RMP.R_MEASUREMENT_POINT IN (VARIABLES.MEASUREMENT_POINT_1, VARIABLES.MEASUREMENT_POINT_2)) AND (EM.MEASUREMENT_VALUE > 0) GROUP BY EM.MEASUREMENT_DATE, RMP.R_MEASUREMENT_POINT) AS T GROUP BY T.MEASUREMENT_DATE) AS curMeasurement
	BEGIN
		VARIABLES.countVal = (VARIABLES.countVal + 1);
		VARIABLES.x = cast(curMeasurement.MP1 AS double);
		VARIABLES.y = cast(curMeasurement.MP2 AS double);
		VARIABLES.sigmaX = (VARIABLES.sigmaX + VARIABLES.x);
		VARIABLES.sigmaY = (VARIABLES.sigmaY + VARIABLES.y);
		VARIABLES.sigmaXY = (VARIABLES.sigmaXY + (VARIABLES.x * VARIABLES.y));
		VARIABLES.sigmaXX = (VARIABLES.sigmaXX + (VARIABLES.x * VARIABLES.x));
		VARIABLES.sigmaYY = (VARIABLES.sigmaYY + (VARIABLES.y * VARIABLES.y));
	END
	IF(VARIABLES.countVal > 0)
	BEGIN
	IF(((VARIABLES.sigmaXX - VARIABLES.countVal * VARIABLES.x * VARIABLES.x) * (VARIABLES.sigmaYY - VARIABLES.countVal * VARIABLES.y * VARIABLES.y))>0)
	BEGIN
		SELECT PDMTx.ds_CORRELATION_UDF(VARIABLES.sigmaX, VARIABLES.sigmaY, VARIABLES.sigmaXX, VARIABLES.sigmaYY, VARIABLES.sigmaXY, VARIABLES.countVal) AS OP;
	END
	END 
	ELSE
	BEGIN
		SELECT cast(0.0 AS double) AS OP;
	END
END;
CREATE VIEW BARRIER_EQUIP_TEST
(
	BARRIER_EQUIP_TEST_ID STRING NOT NULL,
	UWI STRING  ,
	EQUIPMENT_ID STRING NOT NULL,
	TEST_DATE TIMESTAMP  ,
	BARRIER_EQUIP_TEST_TYPE_ID STRING NOT NULL,
	SEVERITY_ID STRING  ,
	ACTIVE_IND STRING(1)  ,
	EFFECTIVE_DATE TIMESTAMP  ,
	EXPIRY_DATE TIMESTAMP  ,
	SOURCE STRING ,
	ROW_CHANGED_BY STRING(30)  ,
	ROW_CHANGED_DATE TIMESTAMP  ,
	ROW_CREATED_BY string(30)  ,
	ROW_CREATED_DATE timestamp  ,
	ROW_QUALITY string  ,
	TEST_GROUP string(50),
	  CONSTRAINT PK_BARRIER_EQUIP_TEST PRIMARY KEY (BARRIER_EQUIP_TEST_ID))
OPTIONS (UPDATABLE 'FALSE', BARRIER_EQUIP_TEST.IMPLEMENTED 'TRUE')
AS
SELECT 
    BARRIER_EQUIP_TEST_ID  ,
	UWI,
	EQUIPMENT_ID  ,
	TEST_DATE    ,
	BARRIER_EQUIP_TEST_TYPE_ID  ,
	SEVERITY_ID  ,
	ACTIVE_IND    ,
	EFFECTIVE_DATE    ,
	EXPIRY_DATE    ,
	SOURCE   ,
	ROW_CHANGED_BY  ,
	ROW_CHANGED_DATE   ,
	ROW_CREATED_BY   ,
	ROW_CREATED_DATE    ,
	ROW_QUALITY ,
	TEST_GROUP   
FROM PPDMSrc.BARRIER_EQUIP_TEST;
CREATE VIEW BARRIER_EQUIP_TEST_MEAS
(
	BARRIER_EQUIP_TEST_MEAS_ID string(100)
      ,BARRIER_EQUIP_TEST_ID string(100)
      ,MEASUREMENT_POINT_ID string(100)
      ,"VALUE" string(100)
      ,ACTIVE_IND string(100)
      ,EFFECTIVE_DATE timestamp
      ,EXPIRY_DATE timestamp
      ,SOURCE string(100)
      ,ROW_CHANGED_BY string(100)
      ,ROW_CHANGED_DATE timestamp
      ,ROW_CREATED_BY string(100)
      ,ROW_CREATED_DATE timestamp
      ,ROW_QUALITY string(100)
	  ,CONSTRAINT PK_BARRIER_EQUIP_TEST_MEAS PRIMARY KEY (BARRIER_EQUIP_TEST_MEAS_ID))
OPTIONS (UPDATABLE 'FALSE', BARRIER_EQUIP_TEST_MEAS.IMPLEMENTED 'TRUE')
AS
SELECT  
BARRIER_EQUIP_TEST_MEAS_ID
      ,BARRIER_EQUIP_TEST_ID
      ,MEASUREMENT_POINT_ID
      ,"VALUE"
      ,ACTIVE_IND
      ,EFFECTIVE_DATE
      ,EXPIRY_DATE
      ,SOURCE
      ,ROW_CHANGED_BY
      ,ROW_CHANGED_DATE
      ,ROW_CREATED_BY
      ,ROW_CREATED_DATE
      ,ROW_QUALITY
  FROM  PPDMSrc.BARRIER_EQUIP_TEST_MEAS;
  
CREATE VIEW CAT_EQUIPMENT( ID STRING(50)
,CAT_EQUIPMENT_ID STRING(50) 
,CAT_EQUIPMENT STRING(50) 
,ACTIVE_IND STRING(50) 
,CAT_EQUIP_GROUP STRING(50) 
,CAT_EQUIP_SUB_TYPE STRING(50) 
,EFFECTIVE_DATE timestamp  
,EQUIPMENT_NAME STRING(50) 
,EXPIRY_DATE timestamp  
,INSTALL_LOC_TYPE STRING(50) 
,MANUFACTURER STRING(50) 
,MODEL_NUM STRING(50) 
,REMARK STRING(50) 
,SOURCE STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY STRING(50) 
,CONSTRAINT PK_CAT_EQUIPMENT PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',CAT_EQUIPMENT.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,CAT_EQUIPMENT_ID
,CAT_EQUIPMENT
,ACTIVE_IND
,CAT_EQUIP_GROUP
,CAT_EQUIP_SUB_TYPE
,EFFECTIVE_DATE
,EQUIPMENT_NAME
,EXPIRY_DATE
,INSTALL_LOC_TYPE
,MANUFACTURER
,MODEL_NUM
,REMARK
,SOURCE
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY
 FROM PPDMSrc.CAT_EQUIPMENT;

CREATE VIEW EQUIPMENT_SPEC( ID STRING(50)
,EQUIPMENT_SPEC_ID STRING(50) 
,EQUIPMENT_ID STRING(50) 
,EQUIPMENT_SPEC STRING(50) 
,EQUIPMENT_SPEC_SET_ID STRING(50) 
,ACTIVE_IND STRING(50) 
,AVERAGE_VALUE bigdecimal
,AVERAGE_VALUE_OUOM STRING(50) 
,AVERAGE_VALUE_UOM STRING(50) 
,COST bigdecimal
,CURRENCY_CONVERSION bigdecimal
,CURRENCY_OUOM STRING(50) 
,CURRENCY_UOM STRING(50) 
,DATE_FORMAT_DESC STRING(50) 
,EFFECTIVE_DATE timestamp  
,EQUIP_MAINT_ID STRING(50) 
,EXPIRY_DATE timestamp  
,MAX_DATE timestamp  
,MAX_VALUE bigdecimal
,MAX_VALUE_OUOM STRING(50) 
,MAX_VALUE_UOM STRING(50) 
,MIN_DATE timestamp  
,MIN_VALUE bigdecimal
,MIN_VALUE_OUOM STRING(50) 
,MIN_VALUE_UOM STRING(50) 
,REFERENCE_VALUE bigdecimal
,REFERENCE_VALUE_OUOM STRING(50) 
,REFERENCE_VALUE_TYPE STRING(50) 
,REFERENCE_VALUE_UOM STRING(50) 
,REMARK STRING(50) 
,SOURCE STRING(50) 
,SPEC_CODE STRING(50) 
,SPEC_DESC STRING(50) 
,SPEC_TYPE STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY STRING(50) 
,CONSTRAINT PK_EQUIPMENT_SPEC PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',EQUIPMENT_SPEC.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,EQUIPMENT_SPEC_ID
,EQUIPMENT_ID
,EQUIPMENT_SPEC
,EQUIPMENT_SPEC_SET_ID
,ACTIVE_IND
,AVERAGE_VALUE
,AVERAGE_VALUE_OUOM
,AVERAGE_VALUE_UOM
,COST
,CURRENCY_CONVERSION
,CURRENCY_OUOM
,CURRENCY_UOM
,DATE_FORMAT_DESC
,EFFECTIVE_DATE
,EQUIP_MAINT_ID
,EXPIRY_DATE
,MAX_DATE
,MAX_VALUE
,MAX_VALUE_OUOM
,MAX_VALUE_UOM
,MIN_DATE
,MIN_VALUE
,MIN_VALUE_OUOM
,MIN_VALUE_UOM
,REFERENCE_VALUE
,REFERENCE_VALUE_OUOM
,REFERENCE_VALUE_TYPE
,REFERENCE_VALUE_UOM
,REMARK
,SOURCE
,SPEC_CODE
,SPEC_DESC
,SPEC_TYPE
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY
 FROM PPDMSrc.EQUIPMENT_SPEC;

CREATE VIEW PPDM_MEASUREMENT_SYSTEM( ID STRING(50)
,UOM_SYSTEM_ID STRING(50) 
,UOM_SYSTEM STRING(50) 
,ACTIVE_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EXPIRY_DATE timestamp  
,REMARK STRING(50) 
,SOURCE STRING(50) 
,SOURCE_DOCUMENT_ID STRING(50) 
,UNIT_SYSTEM_FULL_NAME STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY_ID STRING(50) 
,PREDEFINED_SYSTEM BOOLEAN
,CONSTRAINT PK_PPDM_MEASUREMENT_SYSTEM PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',PPDM_MEASUREMENT_SYSTEM.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,UOM_SYSTEM_ID
,UOM_SYSTEM
,ACTIVE_IND
,EFFECTIVE_DATE
,EXPIRY_DATE
,REMARK
,SOURCE
,SOURCE_DOCUMENT_ID
,UNIT_SYSTEM_FULL_NAME
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY_ID
,PREDEFINED_SYSTEM
 FROM PPDMSrc.PPDM_MEASUREMENT_SYSTEM;
CREATE VIEW PPDM_QUANTITY( ID STRING(50)
,QUANTITY_TYPE_ID STRING(50) 
,QUANTITY_TYPE STRING(50) 
,ACTIVE_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EXPIRY_DATE timestamp  
,FULL_NAME STRING(50) 
,GROUP_NAME STRING(50) 
,REMARK STRING(50) 
,SHORT_NAME STRING(50) 
,SOURCE STRING(50) 
,SOURCE_DOCUMENT_ID STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY_ID STRING(50) 
,CONSTRAINT PK_PPDM_QUANTITY PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',PPDM_QUANTITY.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,QUANTITY_TYPE_ID
,QUANTITY_TYPE
,ACTIVE_IND
,EFFECTIVE_DATE
,EXPIRY_DATE
,FULL_NAME
,GROUP_NAME
,REMARK
,SHORT_NAME
,SOURCE
,SOURCE_DOCUMENT_ID
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY_ID
 FROM PPDMSrc.PPDM_QUANTITY;
 CREATE VIEW R_BARRIER_EQUIP_TEST_TYPE( ID STRING(50)
,BARRIER_EQUIP_TEST_TYPE_ID STRING(50) 
,BARRIER_EQUIP_TEST_TYPE STRING(50) 
,ABBREVIATION STRING(50) 
,LONG_NAME STRING(50) 
,REMARK STRING(50) 
,SHORT_NAME STRING(50) 
,SORT_ORDER integer
,ACTIVE_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EXPIRY_DATE timestamp  
,SOURCE STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY STRING(50) 
,CONSTRAINT PK_R_BARRIER_EQUIP_TEST_TYPE PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',R_BARRIER_EQUIP_TEST_TYPE.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,BARRIER_EQUIP_TEST_TYPE_ID
,BARRIER_EQUIP_TEST_TYPE
,ABBREVIATION
,LONG_NAME
,REMARK
,SHORT_NAME
,SORT_ORDER
,ACTIVE_IND
,EFFECTIVE_DATE
,EXPIRY_DATE
,SOURCE
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY
 FROM PPDMSrc.R_BARRIER_EQUIP_TEST_TYPE;
 CREATE VIEW R_BARRIER_EQUIP_TEST_MEAS_PT( ID STRING(50)
,R_MEASUREMENT_POINT_ID STRING(50) 
,R_MEASUREMENT_POINT STRING(50) 
,QUANTITY_TYPE_ID STRING(50) 
,ABBREVIATION STRING(50) 
,LONG_NAME STRING(50) 
,REMARK STRING(50) 
,SHORT_NAME STRING(50) 
,SORT_ORDER integer
,ACTIVE_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EXPIRY_DATE timestamp  
,SOURCE STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY STRING(50) 
,CONSTRAINT PK_R_BARRIER_EQUIP_TEST_MEAS_PT PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',R_BARRIER_EQUIP_TEST_MEAS_PT.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,R_MEASUREMENT_POINT_ID
,R_MEASUREMENT_POINT
,QUANTITY_TYPE_ID
,ABBREVIATION
,LONG_NAME
,REMARK
,SHORT_NAME
,SORT_ORDER
,ACTIVE_IND
,EFFECTIVE_DATE
,EXPIRY_DATE
,SOURCE
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY
 FROM PPDMSrc.R_BARRIER_EQUIP_TEST_MEAS_PT;
 CREATE VIEW R_CAT_EQUIP_GROUP( 
	ID STRING(50)
,CAT_EQUIP_GROUP_ID STRING(100) 
,CAT_EQUIP_GROUP STRING(50) 
,ABBREVIATION STRING(50) 
,ACTIVE_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EXPIRY_DATE timestamp  
,LONG_NAME STRING(50) 
,REMARK STRING(50) 
,SHORT_NAME STRING(50) 
,SOURCE STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY STRING(50) 
,CONSTRAINT PK_R_CAT_EQUIP_GROUP PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',R_CAT_EQUIP_GROUP.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,CAT_EQUIP_GROUP_ID
,CAT_EQUIP_GROUP
,ABBREVIATION
,ACTIVE_IND
,EFFECTIVE_DATE
,EXPIRY_DATE
,LONG_NAME
,REMARK
,SHORT_NAME
,SOURCE
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY
 FROM PPDMSrc.R_CAT_EQUIP_GROUP;
 CREATE VIEW R_CAT_EQUIP_SUB_TYPE( ID STRING(50)
,CAT_EQUIP_SUB_TYPE_ID STRING(50) 
,CAT_EQUIP_SUB_TYPE STRING(50) 
,CAT_EQUIP_TYPE STRING(50) 
,SERIAL_NUM_IND STRING(50) 
,ABBREVIATION STRING(50) 
,ACTIVE_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EXPIRY_DATE timestamp  
,ICON blob  
,IMAGE blob  
,LONG_NAME STRING(50) 
,REMARK STRING(50) 
,SHORT_NAME STRING(50) 
,SOURCE STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY STRING(50) 
,OP_PARAM_IND STRING(50) 
,CONTEXT_SPEC_IND STRING(50) 
,ALLOCATION_MEASUREMENT_POINT_ID STRING(50) 
,ALLOC_MEAS_POINT_ID STRING(50) 
,ORDER_BY bigdecimal
,CONSTRAINT PK_R_CAT_EQUIP_SUB_TYPE PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',R_CAT_EQUIP_SUB_TYPE.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,CAT_EQUIP_SUB_TYPE_ID
,CAT_EQUIP_SUB_TYPE
,CAT_EQUIP_TYPE
,SERIAL_NUM_IND
,ABBREVIATION
,ACTIVE_IND
,EFFECTIVE_DATE
,EXPIRY_DATE
,ICON
,IMAGE
,LONG_NAME
,REMARK
,SHORT_NAME
,SOURCE
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY
,OP_PARAM_IND
,CONTEXT_SPEC_IND
,ALLOCATION_MEASUREMENT_POINT_ID
,ALLOC_MEAS_POINT_ID
,ORDER_BY
 FROM PPDMSrc.R_CAT_EQUIP_SUB_TYPE;
 CREATE VIEW R_CAT_EQUIP_TYPE( ID STRING(50)
,CAT_EQUIP_TYPE_ID STRING(50) 
,CAT_EQUIP_TYPE STRING(50) 
,ABBREVIATION STRING(50) 
,ACTIVE_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EXPIRY_DATE timestamp  
,LONG_NAME STRING(50) 
,REMARK STRING(50) 
,SHORT_NAME STRING(50) 
,SOURCE STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY STRING(50) 
,CAT_EQUIP_TYPE_GROUP STRING(50) 
,CONSTRAINT PK_R_CAT_EQUIP_TYPE PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',R_CAT_EQUIP_TYPE.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,CAT_EQUIP_TYPE_ID
,CAT_EQUIP_TYPE
,ABBREVIATION
,ACTIVE_IND
,EFFECTIVE_DATE
,EXPIRY_DATE
,LONG_NAME
,REMARK
,SHORT_NAME
,SOURCE
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY
,CAT_EQUIP_TYPE_GROUP
 FROM PPDMSrc.R_CAT_EQUIP_TYPE;
 CREATE VIEW EQUIPMENT_SPEC_SET ( ID STRING(50)
,EQUIPMENT_SPEC_SET_ID STRING(50) 
,EQUIPMENT_SPEC_SET STRING(50) 
,SEQ_NO bigdecimal
,ACTIVE_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EQUIPMENT_SUB_TYPE STRING(50) 
,EXPIRY_DATE timestamp  
,OWNER_BA_ID STRING(50) 
,PREFERRED_NAME STRING(50) 
,REMARK STRING(50) 
,SOURCE STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY STRING(50) 
,CONSTRAINT PK_EQUIPMENT_SPEC_SET  PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',EQUIPMENT_SPEC_SET.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,EQUIPMENT_SPEC_SET_ID
,EQUIPMENT_SPEC_SET
,SEQ_NO
,ACTIVE_IND
,EFFECTIVE_DATE
,EQUIPMENT_SUB_TYPE
,EXPIRY_DATE
,OWNER_BA_ID
,PREFERRED_NAME
,REMARK
,SOURCE
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY
 FROM PPDMSRC.EQUIPMENT_SPEC_SET ;
CREATE VIEW PPDM_UNIT_OF_MEASURE( ID STRING(50)
,UOM_ID STRING(50) 
,UOM STRING(50) 
,ACTIVE_IND STRING(50) 
,BASE_UNIT_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EXPIRY_DATE timestamp  
,REMARK STRING(50) 
,SOURCE STRING(50) 
,SOURCE_DOCUMENT_ID STRING(50) 
,UOM_FULL_NAME STRING(50) 
,UOM_QUANTITY_TYPE_ID STRING(50) 
,UOM_SYSTEM_ID STRING(50) 
,UOM_USAGE_TYPE_ID STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY_ID STRING(50) 
,CONSTRAINT PK_PPDM_UNIT_OF_MEASURE PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',PPDM_UNIT_OF_MEASURE.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,UOM_ID
,UOM
,ACTIVE_IND
,BASE_UNIT_IND
,EFFECTIVE_DATE
,EXPIRY_DATE
,REMARK
,SOURCE
,SOURCE_DOCUMENT_ID
,UOM_FULL_NAME
,UOM_QUANTITY_TYPE_ID
,UOM_SYSTEM_ID
,UOM_USAGE_TYPE_ID
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY_ID
 FROM PPDMSRC.PPDM_UNIT_OF_MEASURE;
CREATE VIEW R_SEVERITY( ID STRING(50)
,R_SEVERITY_ID STRING(50) 
,SEVERITY STRING(50) 
,ABBREVIATION STRING(50) 
,ACTIVE_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EXPIRY_DATE timestamp  
,LONG_NAME STRING(50) 
,REMARK STRING(50) 
,SHORT_NAME STRING(50) 
,SOURCE STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY STRING(50) 
,SEVERITY_COLOR STRING(50) 
,CONSTRAINT PK_R_SEVERITY PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',R_SEVERITY.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,R_SEVERITY_ID
,SEVERITY
,ABBREVIATION
,ACTIVE_IND
,EFFECTIVE_DATE
,EXPIRY_DATE
,LONG_NAME
,REMARK
,SHORT_NAME
,SOURCE
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY
,SEVERITY_COLOR
 FROM PPDMSRC.R_SEVERITY;
CREATE VIEW R_SOURCE( ID STRING(50)
,SOURCE_ID STRING(50) 
,SOURCE_NAME STRING(50) 
,ABBREVIATION STRING(50) 
,ACTIVE_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EXPIRY_DATE timestamp  
,LONG_NAME STRING(50) 
,REMARK STRING(50) 
,SOURCE STRING(50) 
,SHORT_NAME STRING(50) 
,PRIORITY integer
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY STRING(50) 
,CONSTRAINT PK_R_SOURCE PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',R_SOURCE.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,SOURCE_ID
,SOURCE_NAME
,ABBREVIATION
,ACTIVE_IND
,EFFECTIVE_DATE
,EXPIRY_DATE
,LONG_NAME
,REMARK
,SOURCE
,SHORT_NAME
,PRIORITY
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY
 FROM PPDMSRC.R_SOURCE; 
CREATE VIEW SEVERITY_TEST_RESULT_XREF( ID STRING(50)
,SEVERITY_TEST_RESULT_XREF_ID STRING(50) 
,SEVERITY_ID STRING(50) 
,TEST_RESULT_ID STRING(50) 
,ACTIVE_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EXPIRY_DATE timestamp  
,SOURCE STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY STRING(50) 
,CONSTRAINT PK_SEVERITY_TEST_RESULT_XREF PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',SEVERITY_TEST_RESULT_XREF.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,SEVERITY_TEST_RESULT_XREF_ID
,SEVERITY_ID
,TEST_RESULT_ID
,ACTIVE_IND
,EFFECTIVE_DATE
,EXPIRY_DATE
,SOURCE
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY
 FROM PPDMSRC.SEVERITY_TEST_RESULT_XREF;
 CREATE VIEW R_PPDM_ROW_QUALITY( ID STRING(50)
,ROW_QUALITY_ID STRING(50) 
,ROW_QUALITY_NAME STRING(50) 
,ABBREVIATION STRING(50) 
,ACTIVE_IND STRING(50) 
,EFFECTIVE_DATE timestamp  
,EXPIRY_DATE timestamp  
,LONG_NAME STRING(50) 
,REMARK STRING(50) 
,SHORT_NAME STRING(50) 
,SOURCE STRING(50) 
,ROW_CHANGED_BY STRING(50) 
,ROW_CHANGED_DATE timestamp  
,ROW_CREATED_BY STRING(50) 
,ROW_CREATED_DATE timestamp  
,ROW_QUALITY STRING(50) 
,CONSTRAINT PK_R_PPDM_ROW_QUALITY PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',R_PPDM_ROW_QUALITY.IMPLEMENTED 'TRUE')
AS
SELECT UUID()
,ROW_QUALITY_ID
,ROW_QUALITY_NAME
,ABBREVIATION
,ACTIVE_IND
,EFFECTIVE_DATE
,EXPIRY_DATE
,LONG_NAME
,REMARK
,SHORT_NAME
,SOURCE
,ROW_CHANGED_BY
,ROW_CHANGED_DATE
,ROW_CREATED_BY
,ROW_CREATED_DATE
,ROW_QUALITY
 FROM PPDMSRC.R_PPDM_ROW_QUALITY;
 CREATE VIEW DSRTA_DATA(
   ID STRING(50)
  ,BARRIER_EQUIP_TEST_ID STRING(50)
  ,BARRIER_EQUIP_TEST_MEAS_ID STRING(50)
, UWI STRING(50)
,  WELL_NAME STRING(50)
,    WELL_ID  STRING(50)
,   EQUIPMENT_ID   STRING(50)
,  EQUIPMENT_NAME  STRING(50)
,  CAT_EQUIP_TYPE_ID  STRING(50)
,  CAT_EQUIP_TYPE  STRING(50)
,  CAT_EQUIP_SUB_TYPE_ID  STRING(50)
,  CAT_EQUIP_SUB_TYPE  STRING(50)
,   TEST_GROUP  STRING(50)
,   TEST_DATE  timestamp
,   SEVERITY_ID   STRING(50)
,  SEVERITY  STRING(50)
,  TEST_RESULT  STRING(50)
,  ABBREVIATION  STRING(50)
,   BARRIER_EQUIP_TEST_TYPE_ID   STRING(50)
,   BARRIER_EQUIP_TEST_TYPE   STRING(50)
, g2SORT_ORDER  integer
,   R_MEASUREMENT_POINT_ID   STRING(50)
,   R_MEASUREMENT_POINT   STRING(50)
, G3SORT_ORDER  integer
,  "VALUE"  STRING(50)
,  UOM  STRING(50)
,  SOURCE_NAME  STRING(50)
,  ROW_QUALITY_NAME  STRING(50)
,   ROW_CHANGED_BY   STRING(50)
,   ROW_CHANGED_DATE  timestamp
,   ROW_CREATED_BY   STRING(50)
,   ROW_CREATED_DATE  timestamp
, v_0c_2  string(50)
, v_1c_2  bigdecimal
, v_1c_3  string(50)
, v_2c_2  bigdecimal
, v_2c_3   string(50)
,CONSTRAINT PK_DSRTA_DATA PRIMARY KEY (ID))
OPTIONS (UPDATABLE 'FALSE',DSRTA_DATA.IMPLEMENTED 'TRUE')
 as
SELECT 
uuid()
,g_0."BARRIER_EQUIP_TEST_ID"
 ,g_1."BARRIER_EQUIP_TEST_MEAS_ID"
, g_0."UWI"
, g_13.WELL_NAME
, g_13.WELL_ID
, g_0."EQUIPMENT_ID"
, g_4.EQUIPMENT_NAME
, g_8.CAT_EQUIP_TYPE_ID
, g_8.CAT_EQUIP_TYPE
, g_7.CAT_EQUIP_SUB_TYPE_ID
, g_7.CAT_EQUIP_SUB_TYPE
, g_0."TEST_GROUP"
, g_0."TEST_DATE"
, g_0."SEVERITY_ID"
, g_9.SEVERITY
, g_11.TEST_RESULT
, g_11.ABBREVIATION
, g_2."BARRIER_EQUIP_TEST_TYPE_ID"
, g_2."BARRIER_EQUIP_TEST_TYPE"
, g_2."SORT_ORDER"
, g_3."R_MEASUREMENT_POINT_ID"
, g_3."R_MEASUREMENT_POINT"
, g_3."SORT_ORDER"
, g_1."VALUE"
, g_15.UOM
, g_18.SOURCE_NAME
, g_19.ROW_QUALITY_NAME
, g_1."ROW_CHANGED_BY"
, g_1."ROW_CHANGED_DATE"
, g_1."ROW_CREATED_BY"
, g_1."ROW_CREATED_DATE"
, v_0.c_2
, v_1.c_2
, v_1.c_3
, v_2.c_2
, v_2.c_3  
FROM PPDMSRC."BARRIER_EQUIP_TEST" AS g_0 
INNER JOIN PPDMSRC."BARRIER_EQUIP_TEST_MEAS" AS g_1 ON g_0."BARRIER_EQUIP_TEST_ID" = g_1."BARRIER_EQUIP_TEST_ID"
LEFT OUTER JOIN PPDMSRC."R_BARRIER_EQUIP_TEST_TYPE" AS g_2 
 ON g_2."BARRIER_EQUIP_TEST_TYPE_ID" = g_0."BARRIER_EQUIP_TEST_TYPE_ID"
  LEFT OUTER JOIN PPDMSRC."R_BARRIER_EQUIP_TEST_MEAS_PT" AS g_3 
  ON g_3."R_MEASUREMENT_POINT_ID" = g_1."MEASUREMENT_POINT_ID" 
  LEFT OUTER JOIN PPDMSRC.EQUIPMENT AS g_4 ON g_0."EQUIPMENT_ID" = g_4.EQUIPMENT_ID
  LEFT OUTER JOIN PPDMSRC.CAT_EQUIPMENT AS g_5 ON g_4.CAT_EQUIPMENT_ID = g_5.CAT_EQUIPMENT_ID
 LEFT OUTER JOIN PPDMSRC.R_CAT_EQUIP_GROUP AS g_6 ON g_4.EQUIPMENT_GROUP =  g_6.CAT_EQUIP_GROUP_ID  
LEFT OUTER JOIN PPDMSRC.R_CAT_EQUIP_SUB_TYPE AS g_7 ON g_4.EQUIPMENT_SUB_TYPE = g_7.CAT_EQUIP_SUB_TYPE_ID
     LEFT OUTER JOIN PPDMSRC.R_CAT_EQUIP_TYPE AS g_8 ON g_7.CAT_EQUIP_TYPE = nvl(g_8.CAT_EQUIP_TYPE_ID, '') 
LEFT OUTER JOIN  PPDMSRC.R_SEVERITY AS g_9 ON g_9.R_SEVERITY_ID = g_0."SEVERITY_ID" 
AND g_9.R_SEVERITY_ID IS NULL
 LEFT OUTER JOIN  PPDMSRC.SEVERITY_TEST_RESULT_XREF AS g_10 ON g_0."SEVERITY_ID" = g_10.SEVERITY_ID AND g_10.SEVERITY_ID IS NULL 
 LEFT OUTER JOIN  PPDMSRC.R_TEST_RESULT AS g_11 ON g_10.TEST_RESULT_ID = g_11.R_TEST_RESULT_ID
  LEFT OUTER JOIN PPDMSRC.BUSINESS_ASSOCIATE AS g_12 ON g_5.MANUFACTURER = g_12.BUSINESS_ASSOCIATE_ID
   LEFT OUTER JOIN  PPDMSRC.WELL AS g_13 ON g_0."UWI" = g_13.WELL_ID 
   LEFT OUTER JOIN PPDMSRC.PPDM_QUANTITY AS g_14 ON g_14.QUANTITY_TYPE_ID = g_3."QUANTITY_TYPE_ID" 
   LEFT OUTER JOIN  PPDMSRC.PPDM_UNIT_OF_MEASURE AS g_15 ON g_15.UOM_QUANTITY_TYPE_ID = g_14.QUANTITY_TYPE_ID 
   AND g_15.UOM_SYSTEM_ID IN (SELECT g_16.UOM_SYSTEM_ID FROM PPDMSRC.PPDM_MEASUREMENT_SYSTEM AS g_16 WHERE g_16.UOM_SYSTEM = 'English') 
   LEFT OUTER JOIN PPDMSRC.PPDM_MEASUREMENT_SYSTEM AS g_17 ON g_17.UOM_SYSTEM_ID = g_15.UOM_SYSTEM_ID AND g_17.UOM_SYSTEM = 'English' 
   LEFT OUTER JOIN  PPDMSRC.R_SOURCE AS g_18 ON g_1."SOURCE" = g_18.SOURCE_ID LEFT OUTER JOIN  PPDMSRC.R_PPDM_ROW_QUALITY AS g_19 ON g_1."ROW_QUALITY" = g_19.ROW_QUALITY_ID
    LEFT OUTER JOIN (
        SELECT
         ROW_NUMBER() OVER (PARTITION BY g_20.EQUIPMENT_ID ORDER BY g_20.ROW_CREATED_DATE DESC, g_20.ROW_CHANGED_DATE DESC) AS c_0
         , g_20.EQUIPMENT_ID AS c_1
         , g_20.EQUIPMENT_SPEC AS c_2 FROM
          PPDMSRC.EQUIPMENT_SPEC AS g_20,  PPDMSRC.EQUIPMENT_SPEC_SET AS g_21, PPDMSRC.R_EQUIP_SPEC AS g_22 WHERE g_20.EQUIPMENT_SPEC_SET_ID = g_21.EQUIPMENT_SPEC_SET_ID 
          AND g_20.SPEC_TYPE = g_22.SPEC_TYPE_ID AND g_22.SPEC_TYPE = 'Barrier Envelope') AS v_0 ON g_4.EQUIPMENT_ID = v_0.c_1 AND v_0.c_0 = 1 
          LEFT OUTER JOIN (SELECT ROW_NUMBER() OVER (PARTITION BY g_23.EQUIPMENT_ID ORDER BY g_23.ROW_CREATED_DATE DESC
          , g_23.ROW_CHANGED_DATE DESC) AS c_0, g_23.EQUIPMENT_ID AS c_1, g_23.AVERAGE_VALUE AS c_2, g_26.UOM AS c_3 
          FROM PPDMSRC.EQUIPMENT_SPEC AS g_23 INNER JOIN  PPDMSRC.EQUIPMENT_SPEC_SET AS g_24 ON g_23.EQUIPMENT_SPEC_SET_ID = g_24.EQUIPMENT_SPEC_SET_ID INNER 
          JOIN PPDMSRC.R_EQUIP_SPEC AS g_25 ON g_23.SPEC_TYPE = g_25.SPEC_TYPE_ID LEFT OUTER JOIN  PPDMSRC.PPDM_UNIT_OF_MEASURE AS g_26 ON g_23.AVERAGE_VALUE_OUOM = g_26.UOM_ID
           WHERE g_25.SPEC_TYPE = 'Operating Pressure') AS v_1 ON g_4.EQUIPMENT_ID = v_1.c_1 AND v_1.c_0 = 1 LEFT OUTER JOIN (SELECT ROW_NUMBER() OVER (PARTITION BY g_27.EQUIPMENT_ID 
           ORDER BY g_27.ROW_CREATED_DATE DESC, g_27.ROW_CHANGED_DATE DESC) AS c_0, g_27.EQUIPMENT_ID AS c_1, g_27.AVERAGE_VALUE AS c_2, g_30.UOM AS c_3 FROM PPDMSRC.EQUIPMENT_SPEC AS g_27 
           INNER JOIN  PPDMSRC.EQUIPMENT_SPEC_SET AS g_28 ON g_27.EQUIPMENT_SPEC_SET_ID = g_28.EQUIPMENT_SPEC_SET_ID INNER JOIN PPDMSRC.R_EQUIP_SPEC AS g_29 ON g_27.SPEC_TYPE = g_29.SPEC_TYPE_ID 
           LEFT OUTER JOIN  PPDMSRC.PPDM_UNIT_OF_MEASURE AS g_30 ON g_27.AVERAGE_VALUE_OUOM = g_30.UOM_ID
WHERE g_29.SPEC_TYPE = 'Valve Diameter') AS v_2 ON g_4.EQUIPMENT_ID = v_2.c_1 AND v_2.c_0 = 1 WHERE g_0."ACTIVE_IND" = 'Y' AND g_0."SEVERITY_ID" IS NULL AND g_1."ACTIVE_IND" = 'Y' ;
  

